
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c134  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c2d0  0800c2d0  0001c2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c778  0800c778  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c780  0800c780  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c784  0800c784  0001c784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800c788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000026c  0800c9f4  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800c9f4  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014db7  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ccc  00000000  00000000  00035053  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001018  00000000  00000000  00037d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001869f  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e74a  00000000  00000000  0005229f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009227a  00000000  00000000  000609e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2c63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f14  00000000  00000000  000f2ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000026c 	.word	0x2000026c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c2b4 	.word	0x0800c2b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000270 	.word	0x20000270
 80001d4:	0800c2b4 	.word	0x0800c2b4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b972 	b.w	8000eac <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	4604      	mov	r4, r0
 8000be8:	4688      	mov	r8, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4615      	mov	r5, r2
 8000bf2:	d967      	bls.n	8000cc4 <__udivmoddi4+0xe4>
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	b14a      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfa:	f1c2 0720 	rsb	r7, r2, #32
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	fa20 f707 	lsr.w	r7, r0, r7
 8000c06:	4095      	lsls	r5, r2
 8000c08:	ea47 0803 	orr.w	r8, r7, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c18:	fa1f fc85 	uxth.w	ip, r5
 8000c1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c24:	fb07 f10c 	mul.w	r1, r7, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x60>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c32:	f080 811b 	bcs.w	8000e6c <__udivmoddi4+0x28c>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 8118 	bls.w	8000e6c <__udivmoddi4+0x28c>
 8000c3c:	3f02      	subs	r7, #2
 8000c3e:	442b      	add	r3, r5
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x290>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x290>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	442c      	add	r4, r5
 8000c6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c70:	eba4 040c 	sub.w	r4, r4, ip
 8000c74:	2700      	movs	r7, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa0>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xbe>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80eb 	beq.w	8000e66 <__udivmoddi4+0x286>
 8000c90:	2700      	movs	r7, #0
 8000c92:	e9c6 0100 	strd	r0, r1, [r6]
 8000c96:	4638      	mov	r0, r7
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f783 	clz	r7, r3
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d147      	bne.n	8000d36 <__udivmoddi4+0x156>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd0>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80fa 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa0>
 8000cbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xe8>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 808f 	bne.w	8000df0 <__udivmoddi4+0x210>
 8000cd2:	1b49      	subs	r1, r1, r5
 8000cd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd8:	fa1f f885 	uxth.w	r8, r5
 8000cdc:	2701      	movs	r7, #1
 8000cde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce2:	0c23      	lsrs	r3, r4, #16
 8000ce4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x122>
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000d02:	4684      	mov	ip, r0
 8000d04:	1a59      	subs	r1, r3, r1
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d14:	fb08 f800 	mul.w	r8, r8, r0
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x14c>
 8000d1c:	192c      	adds	r4, r5, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x14a>
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	f200 80b6 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 0408 	sub.w	r4, r4, r8
 8000d30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d34:	e79f      	b.n	8000c76 <__udivmoddi4+0x96>
 8000d36:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3a:	40bb      	lsls	r3, r7
 8000d3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d44:	fa01 f407 	lsl.w	r4, r1, r7
 8000d48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d54:	4325      	orrs	r5, r4
 8000d56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d60:	fa1f fa8e 	uxth.w	sl, lr
 8000d64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d68:	fb09 f40a 	mul.w	r4, r9, sl
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d72:	fa00 f107 	lsl.w	r1, r0, r7
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b0>
 8000d78:	eb1e 0303 	adds.w	r3, lr, r3
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d80:	f080 8087 	bcs.w	8000e92 <__udivmoddi4+0x2b2>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f240 8084 	bls.w	8000e92 <__udivmoddi4+0x2b2>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4473      	add	r3, lr
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	b2ad      	uxth	r5, r5
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3310 	mls	r3, r8, r0, r3
 8000d9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da4:	45a2      	cmp	sl, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1da>
 8000da8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db0:	d26b      	bcs.n	8000e8a <__udivmoddi4+0x2aa>
 8000db2:	45a2      	cmp	sl, r4
 8000db4:	d969      	bls.n	8000e8a <__udivmoddi4+0x2aa>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4474      	add	r4, lr
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	eba4 040a 	sub.w	r4, r4, sl
 8000dc6:	454c      	cmp	r4, r9
 8000dc8:	46c2      	mov	sl, r8
 8000dca:	464b      	mov	r3, r9
 8000dcc:	d354      	bcc.n	8000e78 <__udivmoddi4+0x298>
 8000dce:	d051      	beq.n	8000e74 <__udivmoddi4+0x294>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d069      	beq.n	8000ea8 <__udivmoddi4+0x2c8>
 8000dd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000ddc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de0:	40fd      	lsrs	r5, r7
 8000de2:	40fc      	lsrs	r4, r7
 8000de4:	ea4c 0505 	orr.w	r5, ip, r5
 8000de8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dec:	2700      	movs	r7, #0
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f703 	lsr.w	r7, r0, r3
 8000df8:	4095      	lsls	r5, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000e02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e06:	4338      	orrs	r0, r7
 8000e08:	0c01      	lsrs	r1, r0, #16
 8000e0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0e:	fa1f f885 	uxth.w	r8, r5
 8000e12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1a:	fb07 f308 	mul.w	r3, r7, r8
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x256>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e2c:	d22f      	bcs.n	8000e8e <__udivmoddi4+0x2ae>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d92d      	bls.n	8000e8e <__udivmoddi4+0x2ae>
 8000e32:	3f02      	subs	r7, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	b281      	uxth	r1, r0
 8000e3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb00 f308 	mul.w	r3, r0, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x27e>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e54:	d217      	bcs.n	8000e86 <__udivmoddi4+0x2a6>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d915      	bls.n	8000e86 <__udivmoddi4+0x2a6>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1ac9      	subs	r1, r1, r3
 8000e60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e64:	e73b      	b.n	8000cde <__udivmoddi4+0xfe>
 8000e66:	4637      	mov	r7, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e709      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	e6e7      	b.n	8000c40 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x8c>
 8000e74:	4541      	cmp	r1, r8
 8000e76:	d2ab      	bcs.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e80:	3801      	subs	r0, #1
 8000e82:	4613      	mov	r3, r2
 8000e84:	e7a4      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e86:	4660      	mov	r0, ip
 8000e88:	e7e9      	b.n	8000e5e <__udivmoddi4+0x27e>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	e795      	b.n	8000dba <__udivmoddi4+0x1da>
 8000e8e:	4667      	mov	r7, ip
 8000e90:	e7d1      	b.n	8000e36 <__udivmoddi4+0x256>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e77c      	b.n	8000d90 <__udivmoddi4+0x1b0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	442c      	add	r4, r5
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0x14c>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	442b      	add	r3, r5
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x124>
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xda>
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	e6e9      	b.n	8000c80 <__udivmoddi4+0xa0>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	200b      	movs	r0, #11
 8000ed8:	f003 f81d 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000edc:	200b      	movs	r0, #11
 8000ede:	f003 f836 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f003 f815 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f003 f82e 	bl	8003f4e <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a48      	ldr	r2, [pc, #288]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b46      	ldr	r3, [pc, #280]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_GPIO_Init+0x144>)
 8000fc4:	f003 fcf0 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fd0:	f003 fcea 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fdc:	f003 fce4 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0x144>)
 8000ff8:	f003 fb54 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin;
 8000ffc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_GPIO_Init+0x148>)
 8001016:	f003 fb45 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 800101a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0x148>)
 8001034:	f003 fb36 	bl	80046a4 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40020c00 	.word	0x40020c00

0800104c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x50>)
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <MX_I2C1_Init+0x54>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C1_Init+0x50>)
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x58>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_I2C1_Init+0x50>)
 800106a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2C1_Init+0x50>)
 800108a:	f003 fcc1 	bl	8004a10 <HAL_I2C_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001094:	f000 fa60 	bl	8001558 <Error_Handler>
  }

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000314 	.word	0x20000314
 80010a0:	40005400 	.word	0x40005400
 80010a4:	00061a80 	.word	0x00061a80

080010a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a31      	ldr	r2, [pc, #196]	; (800118c <HAL_I2C_MspInit+0xe4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d15c      	bne.n	8001184 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IUM_SCL_Pin|IMU_SDA_Pin;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_I2C_MspInit+0xec>)
 8001104:	f003 face 	bl	80046a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_I2C_MspInit+0xf4>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800112c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800115c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001160:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800116a:	f002 ff0b 	bl	8003f84 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001174:	f000 f9f0 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	20000368 	.word	0x20000368
 800119c:	40026010 	.word	0x40026010

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f002 fd48 	bl	8003c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 f848 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f7ff fea8 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b0:	f7ff fe7e 	bl	8000eb0 <MX_DMA_Init>
  MX_TIM1_Init();
 80011b4:	f000 fab0 	bl	8001718 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b8:	f000 fb5a 	bl	8001870 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011bc:	f000 fbac 	bl	8001918 <MX_TIM4_Init>
  MX_TIM9_Init();
 80011c0:	f000 fc4c 	bl	8001a5c <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 fdbc 	bl	8001d40 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80011c8:	f000 fbfa 	bl	80019c0 <MX_TIM5_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff3e 	bl	800104c <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f002 fda2 	bl	8003d1c <HAL_Delay>
  MPU9250_Reset();
 80011d8:	f000 ff9c 	bl	8002114 <MPU9250_Reset>
  MPU9250_INIT();
 80011dc:	f000 fe86 	bl	8001eec <MPU9250_INIT>
  initMPU9250();
 80011e0:	f001 f85c 	bl	800229c <initMPU9250>
  initAK8963();
 80011e4:	f000 ffb4 	bl	8002150 <initAK8963>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <main+0x80>)
 80011ec:	f005 f8aa 	bl	8006344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011f0:	2104      	movs	r1, #4
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <main+0x80>)
 80011f4:	f005 f8a6 	bl	8006344 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011f8:	213c      	movs	r1, #60	; 0x3c
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <main+0x84>)
 80011fc:	f005 f966 	bl	80064cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001200:	213c      	movs	r1, #60	; 0x3c
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <main+0x88>)
 8001204:	f005 f962 	bl	80064cc <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 9);
 8001208:	2209      	movs	r2, #9
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <main+0x8c>)
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <main+0x90>)
 800120e:	f006 f8c9 	bl	80073a4 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim9);
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <main+0x94>)
 8001214:	f005 f83d 	bl	8006292 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <main+0x98>)
 800121a:	f005 f83a 	bl	8006292 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x7e>
 8001220:	200006f4 	.word	0x200006f4
 8001224:	20000674 	.word	0x20000674
 8001228:	20000774 	.word	0x20000774
 800122c:	200004b4 	.word	0x200004b4
 8001230:	20000814 	.word	0x20000814
 8001234:	20000734 	.word	0x20000734
 8001238:	200006b4 	.word	0x200006b4

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 f806 	bl	800825c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SystemClock_Config+0xcc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <SystemClock_Config+0xcc>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <SystemClock_Config+0xcc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <SystemClock_Config+0xd0>)
 8001286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SystemClock_Config+0xd0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ac:	2308      	movs	r3, #8
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ba:	2304      	movs	r3, #4
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fb58 	bl	8005978 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ce:	f000 f943 	bl	8001558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2102      	movs	r1, #2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fdb1 	bl	8005e58 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012fc:	f000 f92c 	bl	8001558 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	; 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b0a1      	sub	sp, #132	; 0x84
 8001314:	af0c      	add	r7, sp, #48	; 0x30
 8001316:	6478      	str	r0, [r7, #68]	; 0x44
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8001318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b80      	ldr	r3, [pc, #512]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 80ac 	bne.w	800147e <HAL_TIM_PeriodElapsedCallback+0x16e>
		testt[7] = HAL_GetTick() - testt[8];
 8001326:	f002 fced 	bl	8003d04 <HAL_GetTick>
 800132a:	ee07 0a90 	vmov	s15, r0
 800132e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001332:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001334:	edd3 7a08 	vldr	s15, [r3, #32]
 8001338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133c:	4b79      	ldr	r3, [pc, #484]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800133e:	edc3 7a07 	vstr	s15, [r3, #28]
		testt[8] = HAL_GetTick();
 8001342:	f002 fcdf 	bl	8003d04 <HAL_GetTick>
 8001346:	ee07 0a90 	vmov	s15, r0
 800134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134e:	4b75      	ldr	r3, [pc, #468]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001350:	edc3 7a08 	vstr	s15, [r3, #32]

//		IMU9250_READ_DMA();

		float *duty_cycles;

		Get_Velocity();
 8001354:	f001 fee8 	bl	8003128 <Get_Velocity>

//		enc[0] = 12;
//		enc[1] = 10;
		enc_ser[0] += enc[0];
 8001358:	4b73      	ldr	r3, [pc, #460]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b219      	sxth	r1, r3
 800135e:	4b73      	ldr	r3, [pc, #460]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b21b      	sxth	r3, r3
 8001364:	b29a      	uxth	r2, r3
 8001366:	b28b      	uxth	r3, r1
 8001368:	4413      	add	r3, r2
 800136a:	b29b      	uxth	r3, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b6f      	ldr	r3, [pc, #444]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001370:	801a      	strh	r2, [r3, #0]
		enc_ser[1] += enc[1];
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001374:	885b      	ldrh	r3, [r3, #2]
 8001376:	b219      	sxth	r1, r3
 8001378:	4b6c      	ldr	r3, [pc, #432]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800137a:	885b      	ldrh	r3, [r3, #2]
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	b28b      	uxth	r3, r1
 8001382:	4413      	add	r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b68      	ldr	r3, [pc, #416]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800138a:	805a      	strh	r2, [r3, #2]
		enc_test[0] += enc[0];
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800139a:	6013      	str	r3, [r2, #0]
		enc_test[1] += enc[1];
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800139e:	885b      	ldrh	r3, [r3, #2]
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a61      	ldr	r2, [pc, #388]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80013aa:	6053      	str	r3, [r2, #4]

		duty_cycles = PID_Calculate(_velo, _motor_dir, &enc[0]);
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a5d      	ldr	r2, [pc, #372]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013b2:	4619      	mov	r1, r3
 80013b4:	4860      	ldr	r0, [pc, #384]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80013b6:	f001 ff27 	bl	8003208 <PID_Calculate>
 80013ba:	64f8      	str	r0, [r7, #76]	; 0x4c

//		keep safe when error serial
		if (check_error == 1){
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d102      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0xba>
			time_error = 0;
 80013c4:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	801a      	strh	r2, [r3, #0]
		}

		if(time_error <= 1000){
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d2:	d81e      	bhi.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x102>
			time_error += 1;
 80013d4:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013de:	801a      	strh	r2, [r3, #0]
			Control_Motor(0,0,0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f001 fe29 	bl	800303c <Control_Motor>
			if((time_error % 20) == 0){
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	4b55      	ldr	r3, [pc, #340]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80013f0:	fba3 1302 	umull	r1, r3, r3, r2
 80013f4:	0919      	lsrs	r1, r3, #4
 80013f6:	460b      	mov	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d129      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x14a>
				HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	484f      	ldr	r0, [pc, #316]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800140c:	f003 fae5 	bl	80049da <HAL_GPIO_TogglePin>
 8001410:	e023      	b.n	800145a <HAL_TIM_PeriodElapsedCallback+0x14a>
			}
		}
		else{
			HAL_GPIO_WritePin(GPIOD, LED_ORG_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001418:	484b      	ldr	r0, [pc, #300]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800141a:	f003 fac5 	bl	80049a8 <HAL_GPIO_WritePin>
			Control_Motor(*(duty_cycles), *(duty_cycles+1), *(duty_cycles+2));
 800141e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	b218      	sxth	r0, r3
 800142e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001430:	3304      	adds	r3, #4
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b219      	sxth	r1, r3
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001442:	3308      	adds	r3, #8
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001450:	793b      	ldrb	r3, [r7, #4]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	f001 fdf1 	bl	800303c <Control_Motor>
		}

//		struct data_mpu9250 ss = ReadMPU9250();
		ss = ReadMPU9250();
 800145a:	4c3c      	ldr	r4, [pc, #240]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4618      	mov	r0, r3
 8001462:	f000 ffd9 	bl	8002418 <ReadMPU9250>
 8001466:	4625      	mov	r5, r4
 8001468:	f107 0408 	add.w	r4, r7, #8
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	602b      	str	r3, [r5, #0]
// 		ss = sensor
		UartTransmit(enc_ser[0], enc_ser[1], ss, enc[2]);
		enc_ser[0] = 0;
		enc_ser[1] = 0;
	}
}
 800147c:	e04b      	b.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x206>
	else if(htim->Instance==htim9.Instance){
 800147e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d145      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x206>
		testt[5] = HAL_GetTick() - testt[6];
 800148a:	f002 fc3b 	bl	8003d04 <HAL_GetTick>
 800148e:	ee07 0a90 	vmov	s15, r0
 8001492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001498:	edd3 7a06 	vldr	s15, [r3, #24]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014a2:	edc3 7a05 	vstr	s15, [r3, #20]
		testt[6] = HAL_GetTick();
 80014a6:	f002 fc2d 	bl	8003d04 <HAL_GetTick>
 80014aa:	ee07 0a90 	vmov	s15, r0
 80014ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014b4:	edc3 7a06 	vstr	s15, [r3, #24]
		test_abc++;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
		UartTransmit(enc_ser[0], enc_ser[1], ss, enc[2]);
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	fa0f fc83 	sxth.w	ip, r3
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014d6:	885b      	ldrh	r3, [r3, #2]
 80014d8:	fa0f fe83 	sxth.w	lr, r3
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4e19      	ldr	r6, [pc, #100]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80014e8:	466d      	mov	r5, sp
 80014ea:	f106 0408 	add.w	r4, r6, #8
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001502:	4671      	mov	r1, lr
 8001504:	4660      	mov	r0, ip
 8001506:	f002 fb35 	bl	8003b74 <UartTransmit>
		enc_ser[0] = 0;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800150c:	2200      	movs	r2, #0
 800150e:	801a      	strh	r2, [r3, #0]
		enc_ser[1] = 0;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001512:	2200      	movs	r2, #0
 8001514:	805a      	strh	r2, [r3, #2]
}
 8001516:	bf00      	nop
 8001518:	3754      	adds	r7, #84	; 0x54
 800151a:	46bd      	mov	sp, r7
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151e:	bf00      	nop
 8001520:	200006b4 	.word	0x200006b4
 8001524:	20000408 	.word	0x20000408
 8001528:	200004c0 	.word	0x200004c0
 800152c:	200003cc 	.word	0x200003cc
 8001530:	200005b8 	.word	0x200005b8
 8001534:	20000588 	.word	0x20000588
 8001538:	20000460 	.word	0x20000460
 800153c:	2000028a 	.word	0x2000028a
 8001540:	20000288 	.word	0x20000288
 8001544:	cccccccd 	.word	0xcccccccd
 8001548:	40020c00 	.word	0x40020c00
 800154c:	2000028c 	.word	0x2000028c
 8001550:	20000734 	.word	0x20000734
 8001554:	20000510 	.word	0x20000510

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f002 fb66 	bl	8003cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA1_Stream0_IRQHandler+0x10>)
 800161a:	f002 fddb 	bl	80041d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000368 	.word	0x20000368

08001628 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Stream5_IRQHandler+0x10>)
 800162e:	f002 fdd1 	bl	80041d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200007b4 	.word	0x200007b4

0800163c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001642:	f004 ff7a 	bl	800653a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001648:	f004 ff77 	bl	800653a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200006f4 	.word	0x200006f4
 8001654:	20000734 	.word	0x20000734

08001658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <USART2_IRQHandler+0x10>)
 800165e:	f005 ff21 	bl	80074a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000814 	.word	0x20000814

0800166c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <TIM5_IRQHandler+0x10>)
 8001672:	f004 ff62 	bl	800653a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200006b4 	.word	0x200006b4

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f006 fdaa 	bl	8008208 <__errno>
 80016b4:	4602      	mov	r2, r0
 80016b6:	230c      	movs	r3, #12
 80016b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20020000 	.word	0x20020000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	200002c0 	.word	0x200002c0
 80016e8:	20000888 	.word	0x20000888

080016ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <SystemInit+0x28>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a07      	ldr	r2, [pc, #28]	; (8001714 <SystemInit+0x28>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SystemInit+0x28>)
 8001702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001706:	609a      	str	r2, [r3, #8]
#endif
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b096      	sub	sp, #88	; 0x58
 800171c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2220      	movs	r2, #32
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f006 fd83 	bl	800825c <memset>

  htim1.Instance = TIM1;
 8001756:	4b44      	ldr	r3, [pc, #272]	; (8001868 <MX_TIM1_Init+0x150>)
 8001758:	4a44      	ldr	r2, [pc, #272]	; (800186c <MX_TIM1_Init+0x154>)
 800175a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <MX_TIM1_Init+0x150>)
 800175e:	2207      	movs	r2, #7
 8001760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <MX_TIM1_Init+0x150>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 599;
 8001768:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <MX_TIM1_Init+0x150>)
 800176a:	f240 2257 	movw	r2, #599	; 0x257
 800176e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <MX_TIM1_Init+0x150>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001776:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <MX_TIM1_Init+0x150>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <MX_TIM1_Init+0x150>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001782:	4839      	ldr	r0, [pc, #228]	; (8001868 <MX_TIM1_Init+0x150>)
 8001784:	f004 fd5a 	bl	800623c <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800178e:	f7ff fee3 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800179c:	4619      	mov	r1, r3
 800179e:	4832      	ldr	r0, [pc, #200]	; (8001868 <MX_TIM1_Init+0x150>)
 80017a0:	f005 f89a 	bl	80068d8 <HAL_TIM_ConfigClockSource>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017aa:	f7ff fed5 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ae:	482e      	ldr	r0, [pc, #184]	; (8001868 <MX_TIM1_Init+0x150>)
 80017b0:	f004 fd93 	bl	80062da <HAL_TIM_PWM_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017ba:	f7ff fecd 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ca:	4619      	mov	r1, r3
 80017cc:	4826      	ldr	r0, [pc, #152]	; (8001868 <MX_TIM1_Init+0x150>)
 80017ce:	f005 fc2f 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017d8:	f7ff febe 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017dc:	2360      	movs	r3, #96	; 0x60
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	4819      	ldr	r0, [pc, #100]	; (8001868 <MX_TIM1_Init+0x150>)
 8001802:	f004 ffa3 	bl	800674c <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800180c:	f7ff fea4 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2204      	movs	r2, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <MX_TIM1_Init+0x150>)
 800181a:	f004 ff97 	bl	800674c <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001824:	f7ff fe98 	bl	8001558 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800183c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001840:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM1_Init+0x150>)
 800184c:	f005 fc5e 	bl	800710c <HAL_TIMEx_ConfigBreakDeadTime>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001856:	f7ff fe7f 	bl	8001558 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM1_Init+0x150>)
 800185c:	f000 fa36 	bl	8001ccc <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3758      	adds	r7, #88	; 0x58
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200006f4 	.word	0x200006f4
 800186c:	40010000 	.word	0x40010000

08001870 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fcec 	bl	800825c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_TIM2_Init+0xa4>)
 800188e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <MX_TIM2_Init+0xa4>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_TIM2_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <MX_TIM2_Init+0xa4>)
 80018a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80018a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_TIM2_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <MX_TIM2_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018b4:	2303      	movs	r3, #3
 80018b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018bc:	2301      	movs	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018c4:	230a      	movs	r3, #10
 80018c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018cc:	2301      	movs	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80018d4:	230a      	movs	r3, #10
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <MX_TIM2_Init+0xa4>)
 80018e0:	f004 fd62 	bl	80063a8 <HAL_TIM_Encoder_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018ea:	f7ff fe35 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <MX_TIM2_Init+0xa4>)
 80018fc:	f005 fb98 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001906:	f7ff fe27 	bl	8001558 <Error_Handler>
  }

}
 800190a:	bf00      	nop
 800190c:	3730      	adds	r7, #48	; 0x30
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000774 	.word	0x20000774

08001918 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fc98 	bl	800825c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <MX_TIM4_Init+0xa4>)
 8001938:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_TIM4_Init+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001948:	f242 7210 	movw	r2, #10000	; 0x2710
 800194c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800195a:	2303      	movs	r3, #3
 800195c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800196a:	230a      	movs	r3, #10
 800196c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800197a:	230a      	movs	r3, #10
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001986:	f004 fd0f 	bl	80063a8 <HAL_TIM_Encoder_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001990:	f7ff fde2 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_TIM4_Init+0xa0>)
 80019a2:	f005 fb45 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80019ac:	f7ff fdd4 	bl	8001558 <Error_Handler>
  }

}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	; 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000674 	.word	0x20000674
 80019bc:	40000800 	.word	0x40000800

080019c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_TIM5_Init+0x94>)
 80019de:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <MX_TIM5_Init+0x98>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_TIM5_Init+0x94>)
 80019e4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80019e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_TIM5_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_TIM5_Init+0x94>)
 80019f2:	2231      	movs	r2, #49	; 0x31
 80019f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_TIM5_Init+0x94>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_TIM5_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a02:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_TIM5_Init+0x94>)
 8001a04:	f004 fc1a 	bl	800623c <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f7ff fda3 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_TIM5_Init+0x94>)
 8001a20:	f004 ff5a 	bl	80068d8 <HAL_TIM_ConfigClockSource>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001a2a:	f7ff fd95 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	; (8001a54 <MX_TIM5_Init+0x94>)
 8001a3c:	f005 faf8 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001a46:	f7ff fd87 	bl	8001558 <Error_Handler>
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200006b4 	.word	0x200006b4
 8001a58:	40000c00 	.word	0x40000c00

08001a5c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <MX_TIM9_Init+0x70>)
 8001a72:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a76:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a88:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a96:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001a98:	f004 fbd0 	bl	800623c <HAL_TIM_Base_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f7ff fd59 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aaa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_TIM9_Init+0x6c>)
 8001ab2:	f004 ff11 	bl	80068d8 <HAL_TIM_ConfigClockSource>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001abc:	f7ff fd4c 	bl	8001558 <Error_Handler>
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000734 	.word	0x20000734
 8001acc:	40014000 	.word	0x40014000

08001ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d116      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2018      	movs	r0, #24
 8001b04:	f002 fa07 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b08:	2018      	movs	r0, #24
 8001b0a:	f002 fa20 	bl	8003f4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001b0e:	e036      	b.n	8001b7e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d116      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2032      	movs	r0, #50	; 0x32
 8001b3c:	f002 f9eb 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b40:	2032      	movs	r0, #50	; 0x32
 8001b42:	f002 fa04 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8001b46:	e01a      	b.n	8001b7e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_TIM_Base_MspInit+0xc4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d115      	bne.n	8001b7e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2018      	movs	r0, #24
 8001b74:	f002 f9cf 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b78:	2018      	movs	r0, #24
 8001b7a:	f002 f9e8 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40014000 	.word	0x40014000

08001b98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d14a      	bne.n	8001c50 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a37      	ldr	r2, [pc, #220]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4825      	ldr	r0, [pc, #148]	; (8001cc0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001c2a:	f002 fd3b 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001c4a:	f002 fd2b 	bl	80046a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c4e:	e030      	b.n	8001cb2 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x130>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d12b      	bne.n	8001cb2 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001cae:	f002 fcf9 	bl	80046a4 <HAL_GPIO_Init>
}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40000800 	.word	0x40000800

08001ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_TIM_MspPostInit+0x68>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d11e      	bne.n	8001d2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_TIM_MspPostInit+0x6c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8001d0a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <HAL_TIM_MspPostInit+0x70>)
 8001d28:	f002 fcbc 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40021000 	.word	0x40021000

08001d40 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_USART2_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d78:	f005 fa2e 	bl	80071d8 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f7ff fbe9 	bl	8001558 <Error_Handler>
  }

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000814 	.word	0x20000814
 8001d90:	40004400 	.word	0x40004400

08001d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a34      	ldr	r2, [pc, #208]	; (8001e84 <HAL_UART_MspInit+0xf0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d162      	bne.n	8001e7c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_UART_MspInit+0xf4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dee:	230c      	movs	r3, #12
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4820      	ldr	r0, [pc, #128]	; (8001e8c <HAL_UART_MspInit+0xf8>)
 8001e0a:	f002 fc4b 	bl	80046a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e10:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <HAL_UART_MspInit+0x100>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e52:	f002 f897 	bl	8003f84 <HAL_DMA_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e5c:	f7ff fb7c 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_UART_MspInit+0xfc>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2026      	movs	r0, #38	; 0x26
 8001e72:	f002 f850 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e76:	2026      	movs	r0, #38	; 0x26
 8001e78:	f002 f869 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40004400 	.word	0x40004400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	200007b4 	.word	0x200007b4
 8001e94:	40026088 	.word	0x40026088

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e9e:	e003      	b.n	8001ea8 <LoopCopyDataInit>

08001ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ea6:	3104      	adds	r1, #4

08001ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001eb0:	d3f6      	bcc.n	8001ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eb4:	e002      	b.n	8001ebc <LoopFillZerobss>

08001eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eb8:	f842 3b04 	str.w	r3, [r2], #4

08001ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ec0:	d3f9      	bcc.n	8001eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ec2:	f7ff fc13 	bl	80016ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f006 f9a5 	bl	8008214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7ff f969 	bl	80011a0 <main>
  bx  lr    
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ed4:	0800c788 	.word	0x0800c788
  ldr  r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001edc:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 8001ee0:	2000026c 	.word	0x2000026c
  ldr  r3, = _ebss
 8001ee4:	20000884 	.word	0x20000884

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>
	...

08001eec <MPU9250_INIT>:

float max_val[5]={-32000, -32000, -32000, -32000, -32000};
float min_val[5]={32000, 32000, 32000, 32000, 32000};
int16_t yaw_round=0;

void MPU9250_INIT(){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af04      	add	r7, sp, #16
	// reset mpu9250
	TxBuffer9250[0] = 0x80;
 8001ef2:	4b86      	ldr	r3, [pc, #536]	; (800210c <MPU9250_INIT+0x220>)
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8001ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	4b82      	ldr	r3, [pc, #520]	; (800210c <MPU9250_INIT+0x220>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	226b      	movs	r2, #107	; 0x6b
 8001f0a:	21d0      	movs	r1, #208	; 0xd0
 8001f0c:	4880      	ldr	r0, [pc, #512]	; (8002110 <MPU9250_INIT+0x224>)
 8001f0e:	f002 feb7 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f12:	20c8      	movs	r0, #200	; 0xc8
 8001f14:	f001 ff02 	bl	8003d1c <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	TxBuffer9250[0] = 0x01;
 8001f18:	4b7c      	ldr	r3, [pc, #496]	; (800210c <MPU9250_INIT+0x220>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8001f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	2301      	movs	r3, #1
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <MPU9250_INIT+0x220>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	226b      	movs	r2, #107	; 0x6b
 8001f30:	21d0      	movs	r1, #208	; 0xd0
 8001f32:	4877      	ldr	r0, [pc, #476]	; (8002110 <MPU9250_INIT+0x224>)
 8001f34:	f002 fea4 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f38:	20c8      	movs	r0, #200	; 0xc8
 8001f3a:	f001 feef 	bl	8003d1c <HAL_Delay>

	TxBuffer9250[0] = 0x00;
 8001f3e:	4b73      	ldr	r3, [pc, #460]	; (800210c <MPU9250_INIT+0x220>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_2, 1, TxBuffer9250, 1, 1000);
 8001f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f48:	9302      	str	r3, [sp, #8]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	4b6f      	ldr	r3, [pc, #444]	; (800210c <MPU9250_INIT+0x220>)
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2301      	movs	r3, #1
 8001f54:	226c      	movs	r2, #108	; 0x6c
 8001f56:	21d0      	movs	r1, #208	; 0xd0
 8001f58:	486d      	ldr	r0, [pc, #436]	; (8002110 <MPU9250_INIT+0x224>)
 8001f5a:	f002 fe91 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f5e:	20c8      	movs	r0, #200	; 0xc8
 8001f60:	f001 fedc 	bl	8003d1c <HAL_Delay>

	// Tat interupt
	TxBuffer9250[0] = 0x00;
 8001f64:	4b69      	ldr	r3, [pc, #420]	; (800210c <MPU9250_INIT+0x220>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_ENABLE, 1, TxBuffer9250, 1, 1000);
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	2301      	movs	r3, #1
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <MPU9250_INIT+0x220>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	2238      	movs	r2, #56	; 0x38
 8001f7c:	21d0      	movs	r1, #208	; 0xd0
 8001f7e:	4864      	ldr	r0, [pc, #400]	; (8002110 <MPU9250_INIT+0x224>)
 8001f80:	f002 fe7e 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f84:	20c8      	movs	r0, #200	; 0xc8
 8001f86:	f001 fec9 	bl	8003d1c <HAL_Delay>

	// tat FIFO
	TxBuffer9250[0] = 0x00;
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <MPU9250_INIT+0x220>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, TxBuffer9250, 1, 1000);
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	2301      	movs	r3, #1
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <MPU9250_INIT+0x220>)
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	2223      	movs	r2, #35	; 0x23
 8001fa2:	21d0      	movs	r1, #208	; 0xd0
 8001fa4:	485a      	ldr	r0, [pc, #360]	; (8002110 <MPU9250_INIT+0x224>)
 8001fa6:	f002 fe6b 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001faa:	20c8      	movs	r0, #200	; 0xc8
 8001fac:	f001 feb6 	bl	8003d1c <HAL_Delay>

	TxBuffer9250[0] = 0x00;
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <MPU9250_INIT+0x220>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	9302      	str	r3, [sp, #8]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <MPU9250_INIT+0x220>)
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	226b      	movs	r2, #107	; 0x6b
 8001fc8:	21d0      	movs	r1, #208	; 0xd0
 8001fca:	4851      	ldr	r0, [pc, #324]	; (8002110 <MPU9250_INIT+0x224>)
 8001fcc:	f002 fe58 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001fd0:	20c8      	movs	r0, #200	; 0xc8
 8001fd2:	f001 fea3 	bl	8003d1c <HAL_Delay>

	// Disable I2C master
	TxBuffer9250[0] = 0x00;
 8001fd6:	4b4d      	ldr	r3, [pc, #308]	; (800210c <MPU9250_INIT+0x220>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, I2C_MST_CTRL, 1, TxBuffer9250, 1, 1000);
 8001fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <MPU9250_INIT+0x220>)
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	2224      	movs	r2, #36	; 0x24
 8001fee:	21d0      	movs	r1, #208	; 0xd0
 8001ff0:	4847      	ldr	r0, [pc, #284]	; (8002110 <MPU9250_INIT+0x224>)
 8001ff2:	f002 fe45 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001ff6:	20c8      	movs	r0, #200	; 0xc8
 8001ff8:	f001 fe90 	bl	8003d1c <HAL_Delay>

	// Reset FIFO and DMP
	TxBuffer9250[0] = 0x0C;
 8001ffc:	4b43      	ldr	r3, [pc, #268]	; (800210c <MPU9250_INIT+0x220>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, TxBuffer9250, 1, 1000);
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	2301      	movs	r3, #1
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <MPU9250_INIT+0x220>)
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	226a      	movs	r2, #106	; 0x6a
 8002014:	21d0      	movs	r1, #208	; 0xd0
 8002016:	483e      	ldr	r0, [pc, #248]	; (8002110 <MPU9250_INIT+0x224>)
 8002018:	f002 fe32 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800201c:	20c8      	movs	r0, #200	; 0xc8
 800201e:	f001 fe7d 	bl	8003d1c <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	// Set low-pass filter to 188 Hz
	TxBuffer9250[0] = 0x01;
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <MPU9250_INIT+0x220>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, CONFIG, 1, TxBuffer9250, 1, 1000);
 8002028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2301      	movs	r3, #1
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <MPU9250_INIT+0x220>)
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2301      	movs	r3, #1
 8002038:	221a      	movs	r2, #26
 800203a:	21d0      	movs	r1, #208	; 0xd0
 800203c:	4834      	ldr	r0, [pc, #208]	; (8002110 <MPU9250_INIT+0x224>)
 800203e:	f002 fe1f 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002042:	20c8      	movs	r0, #200	; 0xc8
 8002044:	f001 fe6a 	bl	8003d1c <HAL_Delay>

	// Set sample rate to 1 kHz
	TxBuffer9250[0] = 0x00;
 8002048:	4b30      	ldr	r3, [pc, #192]	; (800210c <MPU9250_INIT+0x220>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, SMPLRT_DIV, 1, TxBuffer9250, 1, 1000);
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	2301      	movs	r3, #1
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <MPU9250_INIT+0x220>)
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2301      	movs	r3, #1
 800205e:	2219      	movs	r2, #25
 8002060:	21d0      	movs	r1, #208	; 0xd0
 8002062:	482b      	ldr	r0, [pc, #172]	; (8002110 <MPU9250_INIT+0x224>)
 8002064:	f002 fe0c 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002068:	20c8      	movs	r0, #200	; 0xc8
 800206a:	f001 fe57 	bl	8003d1c <HAL_Delay>

	// Set gyro full-scale to 1000 degrees per second, maximum sensitivity
	TxBuffer9250[0] = 0x10;
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <MPU9250_INIT+0x220>)
 8002070:	2210      	movs	r2, #16
 8002072:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, GYRO_CONFIG, 1, TxBuffer9250, 1, 1000);
 8002074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2301      	movs	r3, #1
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <MPU9250_INIT+0x220>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	221b      	movs	r2, #27
 8002086:	21d0      	movs	r1, #208	; 0xd0
 8002088:	4821      	ldr	r0, [pc, #132]	; (8002110 <MPU9250_INIT+0x224>)
 800208a:	f002 fdf9 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800208e:	20c8      	movs	r0, #200	; 0xc8
 8002090:	f001 fe44 	bl	8003d1c <HAL_Delay>

	// Set accelerometer full-scale to 2 g, maximum sensitivity
	TxBuffer9250[0] = 0x00;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MPU9250_INIT+0x220>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, TxBuffer9250, 1, 1000);
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	2301      	movs	r3, #1
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <MPU9250_INIT+0x220>)
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2301      	movs	r3, #1
 80020aa:	221c      	movs	r2, #28
 80020ac:	21d0      	movs	r1, #208	; 0xd0
 80020ae:	4818      	ldr	r0, [pc, #96]	; (8002110 <MPU9250_INIT+0x224>)
 80020b0:	f002 fde6 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80020b4:	20c8      	movs	r0, #200	; 0xc8
 80020b6:	f001 fe31 	bl	8003d1c <HAL_Delay>

	// Enable FIFO
	TxBuffer9250[0] = 0x40;
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <MPU9250_INIT+0x220>)
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, TxBuffer9250, 1, 1000);
 80020c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	2301      	movs	r3, #1
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MPU9250_INIT+0x220>)
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2301      	movs	r3, #1
 80020d0:	226a      	movs	r2, #106	; 0x6a
 80020d2:	21d0      	movs	r1, #208	; 0xd0
 80020d4:	480e      	ldr	r0, [pc, #56]	; (8002110 <MPU9250_INIT+0x224>)
 80020d6:	f002 fdd3 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80020da:	20c8      	movs	r0, #200	; 0xc8
 80020dc:	f001 fe1e 	bl	8003d1c <HAL_Delay>

	// Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
	TxBuffer9250[0] = 0x78;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <MPU9250_INIT+0x220>)
 80020e2:	2278      	movs	r2, #120	; 0x78
 80020e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, TxBuffer9250, 1, 1000);
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	2301      	movs	r3, #1
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MPU9250_INIT+0x220>)
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	2223      	movs	r2, #35	; 0x23
 80020f8:	21d0      	movs	r1, #208	; 0xd0
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <MPU9250_INIT+0x224>)
 80020fc:	f002 fdc0 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002100:	20c8      	movs	r0, #200	; 0xc8
 8002102:	f001 fe0b 	bl	8003d1c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
			HAL_Delay(100);
		}
	}
*/
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200005a4 	.word	0x200005a4
 8002110:	20000314 	.word	0x20000314

08002114 <MPU9250_Reset>:

void MPU9250_Reset(){
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af04      	add	r7, sp, #16
	TxBuffer9250[0] = 0x80;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <MPU9250_Reset+0x34>)
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8002120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <MPU9250_Reset+0x34>)
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	226b      	movs	r2, #107	; 0x6b
 8002132:	21d0      	movs	r1, #208	; 0xd0
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MPU9250_Reset+0x38>)
 8002136:	f002 fda3 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800213a:	20c8      	movs	r0, #200	; 0xc8
 800213c:	f001 fdee 	bl	8003d1c <HAL_Delay>
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200005a4 	.word	0x200005a4
 800214c:	20000314 	.word	0x20000314

08002150 <initAK8963>:

void initAK8963(){
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af04      	add	r7, sp, #16
	// Power down magnetometer
	TxBuffer9250[0] = 0x00;
 8002156:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <initAK8963+0x138>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 800215c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2301      	movs	r3, #1
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	4b48      	ldr	r3, [pc, #288]	; (8002288 <initAK8963+0x138>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	220a      	movs	r2, #10
 800216e:	2118      	movs	r1, #24
 8002170:	4846      	ldr	r0, [pc, #280]	; (800228c <initAK8963+0x13c>)
 8002172:	f002 fd85 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002176:	20c8      	movs	r0, #200	; 0xc8
 8002178:	f001 fdd0 	bl	8003d1c <HAL_Delay>

	// Enter Fuse ROM access mode
	TxBuffer9250[0] = 0x0F;
 800217c:	4b42      	ldr	r3, [pc, #264]	; (8002288 <initAK8963+0x138>)
 800217e:	220f      	movs	r2, #15
 8002180:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	2301      	movs	r3, #1
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <initAK8963+0x138>)
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2301      	movs	r3, #1
 8002192:	220a      	movs	r2, #10
 8002194:	2118      	movs	r1, #24
 8002196:	483d      	ldr	r0, [pc, #244]	; (800228c <initAK8963+0x13c>)
 8002198:	f002 fd72 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800219c:	20c8      	movs	r0, #200	; 0xc8
 800219e:	f001 fdbd 	bl	8003d1c <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ASAX, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[0], 3, 1000);
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	2303      	movs	r3, #3
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <initAK8963+0x140>)
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2301      	movs	r3, #1
 80021b2:	2210      	movs	r2, #16
 80021b4:	2118      	movs	r1, #24
 80021b6:	4835      	ldr	r0, [pc, #212]	; (800228c <initAK8963+0x13c>)
 80021b8:	f002 fe5c 	bl	8004e74 <HAL_I2C_Mem_Read>

	// Power down magnetometer
	TxBuffer9250[0] = 0x00;
 80021bc:	4b32      	ldr	r3, [pc, #200]	; (8002288 <initAK8963+0x138>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <initAK8963+0x138>)
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	220a      	movs	r2, #10
 80021d4:	2118      	movs	r1, #24
 80021d6:	482d      	ldr	r0, [pc, #180]	; (800228c <initAK8963+0x13c>)
 80021d8:	f002 fd52 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80021dc:	20c8      	movs	r0, #200	; 0xc8
 80021de:	f001 fd9d 	bl	8003d1c <HAL_Delay>

	// Set magnetometer data resolution and sample ODR
	TxBuffer9250[0] = 0x16;
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <initAK8963+0x138>)
 80021e4:	2216      	movs	r2, #22
 80021e6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 80021e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	2301      	movs	r3, #1
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <initAK8963+0x138>)
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	220a      	movs	r2, #10
 80021fa:	2118      	movs	r1, #24
 80021fc:	4823      	ldr	r0, [pc, #140]	; (800228c <initAK8963+0x13c>)
 80021fe:	f002 fd3f 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002202:	20c8      	movs	r0, #200	; 0xc8
 8002204:	f001 fd8a 	bl	8003d1c <HAL_Delay>

	// -----------------------
//	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ASAX, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[2], 3, 1000);

	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[1], 1, 1000);
 8002208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	2301      	movs	r3, #1
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <initAK8963+0x144>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	2200      	movs	r2, #0
 800221a:	2118      	movs	r1, #24
 800221c:	481b      	ldr	r0, [pc, #108]	; (800228c <initAK8963+0x13c>)
 800221e:	f002 fe29 	bl	8004e74 <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 8002222:	2064      	movs	r0, #100	; 0x64
 8002224:	f001 fd7a 	bl	8003d1c <HAL_Delay>

	if (RxBuffer9250[1] == 0x48)
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <initAK8963+0x140>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b48      	cmp	r3, #72	; 0x48
 800222e:	d106      	bne.n	800223e <initAK8963+0xee>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002236:	4818      	ldr	r0, [pc, #96]	; (8002298 <initAK8963+0x148>)
 8002238:	f002 fbb6 	bl	80049a8 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
			HAL_Delay(100);
		}
	}
}
 800223c:	e01f      	b.n	800227e <initAK8963+0x12e>
		for(j=0;j<=11;j++){
 800223e:	2300      	movs	r3, #0
 8002240:	71fb      	strb	r3, [r7, #7]
 8002242:	e019      	b.n	8002278 <initAK8963+0x128>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8002244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002248:	4813      	ldr	r0, [pc, #76]	; (8002298 <initAK8963+0x148>)
 800224a:	f002 fbc6 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 800224e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <initAK8963+0x148>)
 8002254:	f002 fbc1 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 8002258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800225c:	480e      	ldr	r0, [pc, #56]	; (8002298 <initAK8963+0x148>)
 800225e:	f002 fbbc 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
 8002262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <initAK8963+0x148>)
 8002268:	f002 fbb7 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800226c:	2064      	movs	r0, #100	; 0x64
 800226e:	f001 fd55 	bl	8003d1c <HAL_Delay>
		for(j=0;j<=11;j++){
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	3301      	adds	r3, #1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b0b      	cmp	r3, #11
 800227c:	d9e2      	bls.n	8002244 <initAK8963+0xf4>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200005a4 	.word	0x200005a4
 800228c:	20000314 	.word	0x20000314
 8002290:	20000560 	.word	0x20000560
 8002294:	20000561 	.word	0x20000561
 8002298:	40020c00 	.word	0x40020c00

0800229c <initMPU9250>:

void initMPU9250(){
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af04      	add	r7, sp, #16
	 // Initialize MPU9250 device
	 // wake up device
	TxBuffer9250[0] = 0x00;
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <initMPU9250+0x168>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 80022a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <initMPU9250+0x168>)
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2301      	movs	r3, #1
 80022b8:	226b      	movs	r2, #107	; 0x6b
 80022ba:	21d0      	movs	r1, #208	; 0xd0
 80022bc:	4852      	ldr	r0, [pc, #328]	; (8002408 <initMPU9250+0x16c>)
 80022be:	f002 fcdf 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80022c2:	20c8      	movs	r0, #200	; 0xc8
 80022c4:	f001 fd2a 	bl	8003d1c <HAL_Delay>

	// get stable time source
	TxBuffer9250[0] = 0x01;
 80022c8:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <initMPU9250+0x168>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	2301      	movs	r3, #1
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <initMPU9250+0x168>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2301      	movs	r3, #1
 80022de:	226b      	movs	r2, #107	; 0x6b
 80022e0:	21d0      	movs	r1, #208	; 0xd0
 80022e2:	4849      	ldr	r0, [pc, #292]	; (8002408 <initMPU9250+0x16c>)
 80022e4:	f002 fccc 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80022e8:	20c8      	movs	r0, #200	; 0xc8
 80022ea:	f001 fd17 	bl	8003d1c <HAL_Delay>

	TxBuffer9250[0] = 0x03;
 80022ee:	4b45      	ldr	r3, [pc, #276]	; (8002404 <initMPU9250+0x168>)
 80022f0:	2203      	movs	r2, #3
 80022f2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, CONFIG, 1, TxBuffer9250, 1, 1000);
 80022f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2301      	movs	r3, #1
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <initMPU9250+0x168>)
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2301      	movs	r3, #1
 8002304:	221a      	movs	r2, #26
 8002306:	21d0      	movs	r1, #208	; 0xd0
 8002308:	483f      	ldr	r0, [pc, #252]	; (8002408 <initMPU9250+0x16c>)
 800230a:	f002 fcb9 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800230e:	20c8      	movs	r0, #200	; 0xc8
 8002310:	f001 fd04 	bl	8003d1c <HAL_Delay>

	// Use a 200 Hz rate; the same rate set in CONFIG above
	TxBuffer9250[0] = 0x04;
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <initMPU9250+0x168>)
 8002316:	2204      	movs	r2, #4
 8002318:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, SMPLRT_DIV, 1, TxBuffer9250, 1, 1000);
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <initMPU9250+0x168>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	2219      	movs	r2, #25
 800232c:	21d0      	movs	r1, #208	; 0xd0
 800232e:	4836      	ldr	r0, [pc, #216]	; (8002408 <initMPU9250+0x16c>)
 8002330:	f002 fca6 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002334:	20c8      	movs	r0, #200	; 0xc8
 8002336:	f001 fcf1 	bl	8003d1c <HAL_Delay>

	TxBuffer9250[0] = 0x22;
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <initMPU9250+0x168>)
 800233c:	2222      	movs	r2, #34	; 0x22
 800233e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_PIN_CFG, 1, TxBuffer9250, 1, 1000);
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	2301      	movs	r3, #1
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <initMPU9250+0x168>)
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2301      	movs	r3, #1
 8002350:	2237      	movs	r2, #55	; 0x37
 8002352:	21d0      	movs	r1, #208	; 0xd0
 8002354:	482c      	ldr	r0, [pc, #176]	; (8002408 <initMPU9250+0x16c>)
 8002356:	f002 fc93 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800235a:	20c8      	movs	r0, #200	; 0xc8
 800235c:	f001 fcde 	bl	8003d1c <HAL_Delay>

	TxBuffer9250[0] = 0x01;
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <initMPU9250+0x168>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_ENABLE, 1, TxBuffer9250, 1, 1000);
 8002366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2301      	movs	r3, #1
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <initMPU9250+0x168>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	2238      	movs	r2, #56	; 0x38
 8002378:	21d0      	movs	r1, #208	; 0xd0
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <initMPU9250+0x16c>)
 800237c:	f002 fc80 	bl	8004c80 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002380:	20c8      	movs	r0, #200	; 0xc8
 8002382:	f001 fccb 	bl	8003d1c <HAL_Delay>

	// -----------------------
	// test MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, WHO_AM_I_MPU9250, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[0], 1, 1000);
 8002386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2301      	movs	r3, #1
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <initMPU9250+0x170>)
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	2275      	movs	r2, #117	; 0x75
 8002398:	21d0      	movs	r1, #208	; 0xd0
 800239a:	481b      	ldr	r0, [pc, #108]	; (8002408 <initMPU9250+0x16c>)
 800239c:	f002 fd6a 	bl	8004e74 <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 80023a0:	2064      	movs	r0, #100	; 0x64
 80023a2:	f001 fcbb 	bl	8003d1c <HAL_Delay>
	if (RxBuffer9250[0] == 0x71)
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <initMPU9250+0x170>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b71      	cmp	r3, #113	; 0x71
 80023ac:	d106      	bne.n	80023bc <initMPU9250+0x120>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 80023ae:	2201      	movs	r2, #1
 80023b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b4:	4816      	ldr	r0, [pc, #88]	; (8002410 <initMPU9250+0x174>)
 80023b6:	f002 faf7 	bl	80049a8 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
			HAL_Delay(100);
		}
	}
}
 80023ba:	e01f      	b.n	80023fc <initMPU9250+0x160>
		for(j=0;j<=11;j++){
 80023bc:	2300      	movs	r3, #0
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	e019      	b.n	80023f6 <initMPU9250+0x15a>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 80023c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023c6:	4812      	ldr	r0, [pc, #72]	; (8002410 <initMPU9250+0x174>)
 80023c8:	f002 fb07 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 80023cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023d0:	480f      	ldr	r0, [pc, #60]	; (8002410 <initMPU9250+0x174>)
 80023d2:	f002 fb02 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 80023d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <initMPU9250+0x174>)
 80023dc:	f002 fafd 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
 80023e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e4:	480a      	ldr	r0, [pc, #40]	; (8002410 <initMPU9250+0x174>)
 80023e6:	f002 faf8 	bl	80049da <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80023ea:	2064      	movs	r0, #100	; 0x64
 80023ec:	f001 fc96 	bl	8003d1c <HAL_Delay>
		for(j=0;j<=11;j++){
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	3301      	adds	r3, #1
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b0b      	cmp	r3, #11
 80023fa:	d9e2      	bls.n	80023c2 <initMPU9250+0x126>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200005a4 	.word	0x200005a4
 8002408:	20000314 	.word	0x20000314
 800240c:	20000560 	.word	0x20000560
 8002410:	40020c00 	.word	0x40020c00
 8002414:	00000000 	.word	0x00000000

08002418 <ReadMPU9250>:
		float accel_z;	Toc do goc z
	};
 * GPIO: PB9 -> IMU_SDA
 * 		 PB8 -> IMU_SCL
*/
struct data_mpu9250 ReadMPU9250(){
 8002418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800241c:	b097      	sub	sp, #92	; 0x5c
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	struct data_mpu9250 mpu;
	int8_t i;
	int16_t DataBuffer16[10];
	IMU9250_READ_DMA();
 8002422:	f000 fdd5 	bl	8002fd0 <IMU9250_READ_DMA>

	for(i=0;i<6;i++)
 8002426:	2300      	movs	r3, #0
 8002428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800242c:	e02b      	b.n	8002486 <ReadMPU9250+0x6e>
	{
		DataBuffer16[i] = (int16_t)(((uint16_t)DataBuffer9250[2*i]<<8) | (uint16_t)DataBuffer9250[2*i+1]);
 800242e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <ReadMPU9250+0x80>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b219      	sxth	r1, r3
 800243c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3301      	adds	r3, #1
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <ReadMPU9250+0x80>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	b21a      	sxth	r2, r3
 800244a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800244e:	430a      	orrs	r2, r1
 8002450:	b212      	sxth	r2, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002458:	440b      	add	r3, r1
 800245a:	f823 2c4c 	strh.w	r2, [r3, #-76]
		DataBuffer16_test[i]=DataBuffer16[i];
 800245e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002462:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800246c:	440b      	add	r3, r1
 800246e:	f933 1c4c 	ldrsh.w	r1, [r3, #-76]
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <ReadMPU9250+0x84>)
 8002474:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0;i<6;i++)
 8002478:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800247c:	b2db      	uxtb	r3, r3
 800247e:	3301      	adds	r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002486:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800248a:	2b05      	cmp	r3, #5
 800248c:	ddcf      	ble.n	800242e <ReadMPU9250+0x16>
	}

	for(i=6;i<9;i++)
 800248e:	2306      	movs	r3, #6
 8002490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002494:	e030      	b.n	80024f8 <ReadMPU9250+0xe0>
 8002496:	bf00      	nop
 8002498:	200005cc 	.word	0x200005cc
 800249c:	20000468 	.word	0x20000468
	{
		DataBuffer16[i] = (int16_t)(((uint16_t)DataBuffer9250[2*i+1]<<8) | (uint16_t)DataBuffer9250[2*i]);
 80024a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	3301      	adds	r3, #1
 80024a8:	4adf      	ldr	r2, [pc, #892]	; (8002828 <ReadMPU9250+0x410>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b219      	sxth	r1, r3
 80024b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4adc      	ldr	r2, [pc, #880]	; (8002828 <ReadMPU9250+0x410>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80024c0:	430a      	orrs	r2, r1
 80024c2:	b212      	sxth	r2, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024ca:	440b      	add	r3, r1
 80024cc:	f823 2c4c 	strh.w	r2, [r3, #-76]
		DataBuffer16_test[i]=DataBuffer16[i];
 80024d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80024d4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024de:	440b      	add	r3, r1
 80024e0:	f933 1c4c 	ldrsh.w	r1, [r3, #-76]
 80024e4:	4bd1      	ldr	r3, [pc, #836]	; (800282c <ReadMPU9250+0x414>)
 80024e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=6;i<9;i++)
 80024ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	ddcf      	ble.n	80024a0 <ReadMPU9250+0x88>
	}

	accel_x_temp1 = DataBuffer16[0];
 8002500:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250c:	4bc8      	ldr	r3, [pc, #800]	; (8002830 <ReadMPU9250+0x418>)
 800250e:	edc3 7a00 	vstr	s15, [r3]
	accel_y_temp1 = DataBuffer16[1];
 8002512:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	4bc5      	ldr	r3, [pc, #788]	; (8002834 <ReadMPU9250+0x41c>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
	accel_z_temp1 = DataBuffer16[2];
 8002524:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002530:	4bc1      	ldr	r3, [pc, #772]	; (8002838 <ReadMPU9250+0x420>)
 8002532:	edc3 7a00 	vstr	s15, [r3]

	mpu.accel_x = DataBuffer16[0];
 8002536:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002542:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	mpu.accel_y = DataBuffer16[1];
 8002546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	mpu.accel_z = DataBuffer16[2];
 8002556:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
//	mpu.accel_x = atan((accel_y_temp1)/sqrt(pow(accel_x_temp1,2)+pow(accel_z_temp11,2)))*RA_TO_DEC;
//	mpu.accel_x = atan(gyroAngleX);

//	mpu.temp1 = (float)DataBuffer16[3];

	gyro_x_temp1 = DataBuffer16[3];
 8002566:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002572:	4bb2      	ldr	r3, [pc, #712]	; (800283c <ReadMPU9250+0x424>)
 8002574:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_temp1 = DataBuffer16[4];
 8002578:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002584:	4bae      	ldr	r3, [pc, #696]	; (8002840 <ReadMPU9250+0x428>)
 8002586:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_temp1 = DataBuffer16[5];
 800258a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002596:	4bab      	ldr	r3, [pc, #684]	; (8002844 <ReadMPU9250+0x42c>)
 8002598:	edc3 7a00 	vstr	s15, [r3]

	mpu.gyro_x = DataBuffer16[3];
 800259c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	mpu.gyro_y = DataBuffer16[4];
 80025ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	mpu.gyro_z = DataBuffer16[5]/32.768F;
 80025bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c8:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002848 <ReadMPU9250+0x430>
 80025cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	mpu.gyro_x = roundf((float)gyro_x_temp1*1000.0f/131.0F);
	mpu.gyro_y = roundf((float)gyro_y_temp1*1000.0f/131.0F);
	mpu.gyro_z = roundf((float)gyro_z_temp1*1000.0f/131.0F);
*/

	mpu.mag_x = DataBuffer16[6];
 80025d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	mpu.mag_y = DataBuffer16[7];
 80025e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	mpu.mag_z = DataBuffer16[8];
 80025f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002600:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	getMaxMinValue(mpu.mag_x, 0);
 8002604:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002608:	2000      	movs	r0, #0
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f000 fb41 	bl	8002c94 <getMaxMinValue>
	getMaxMinValue(mpu.mag_y, 1);
 8002612:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002616:	2001      	movs	r0, #1
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	f000 fb3a 	bl	8002c94 <getMaxMinValue>
	getMaxMinValue(mpu.mag_z, 2);
 8002620:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002624:	2002      	movs	r0, #2
 8002626:	eeb0 0a67 	vmov.f32	s0, s15
 800262a:	f000 fb33 	bl	8002c94 <getMaxMinValue>
/*
	mpu.mag_x=mpu.mag_x-(max_val[0]+min_val[0])/2;
	mpu.mag_y=mpu.mag_y-(max_val[1]+min_val[1])/2;
	mpu.mag_z=mpu.mag_z-(max_val[2]+min_val[2])/2;
*/
	mag_x_temp1 = mpu.mag_x;
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	4a86      	ldr	r2, [pc, #536]	; (800284c <ReadMPU9250+0x434>)
 8002632:	6013      	str	r3, [r2, #0]
	mag_y_temp1 = mpu.mag_y;
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	4a86      	ldr	r2, [pc, #536]	; (8002850 <ReadMPU9250+0x438>)
 8002638:	6013      	str	r3, [r2, #0]
	mag_z_temp1 = mpu.mag_z;
 800263a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263c:	4a85      	ldr	r2, [pc, #532]	; (8002854 <ReadMPU9250+0x43c>)
 800263e:	6013      	str	r3, [r2, #0]


	mpu.mag_x=mpu.mag_x+12.0F;
 8002640:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002644:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800264c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	mpu.mag_y=mpu.mag_y-280.0F;
 8002650:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002654:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002858 <ReadMPU9250+0x440>
 8002658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800265c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	mpu.mag_z=mpu.mag_z+165.0F;
 8002660:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002664:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800285c <ReadMPU9250+0x444>
 8002668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800266c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	pre_dt = current_dt;
 8002670:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <ReadMPU9250+0x448>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7b      	ldr	r2, [pc, #492]	; (8002864 <ReadMPU9250+0x44c>)
 8002676:	6013      	str	r3, [r2, #0]
	current_dt = HAL_GetTick();
 8002678:	f001 fb44 	bl	8003d04 <HAL_GetTick>
 800267c:	ee07 0a90 	vmov	s15, r0
 8002680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <ReadMPU9250+0x448>)
 8002686:	edc3 7a00 	vstr	s15, [r3]
	dt_now = (current_dt-pre_dt)/1000.0F;
 800268a:	4b75      	ldr	r3, [pc, #468]	; (8002860 <ReadMPU9250+0x448>)
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <ReadMPU9250+0x44c>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269a:	eddf 6a73 	vldr	s13, [pc, #460]	; 8002868 <ReadMPU9250+0x450>
 800269e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <ReadMPU9250+0x454>)
 80026a4:	edc3 7a00 	vstr	s15, [r3]
	dt_led += dt_now;
 80026a8:	4b71      	ldr	r3, [pc, #452]	; (8002870 <ReadMPU9250+0x458>)
 80026aa:	ed93 7a00 	vldr	s14, [r3]
 80026ae:	4b6f      	ldr	r3, [pc, #444]	; (800286c <ReadMPU9250+0x454>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <ReadMPU9250+0x458>)
 80026ba:	edc3 7a00 	vstr	s15, [r3]


	if (dt_led > 3.0){
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <ReadMPU9250+0x458>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80026c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	dd11      	ble.n	80026f6 <ReadMPU9250+0x2de>
		origin_mag_x = mpu.mag_x;
 80026d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80026d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026da:	ee17 3a90 	vmov	r3, s15
 80026de:	b21a      	sxth	r2, r3
 80026e0:	4b64      	ldr	r3, [pc, #400]	; (8002874 <ReadMPU9250+0x45c>)
 80026e2:	801a      	strh	r2, [r3, #0]
		origin_mag_y = mpu.mag_y;
 80026e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80026e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ec:	ee17 3a90 	vmov	r3, s15
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <ReadMPU9250+0x460>)
 80026f4:	801a      	strh	r2, [r3, #0]
	}

//	mag_norm=sqrt(pow(mpu.mag_x, 2)+pow(mpu.mag_y, 2)+pow(mpu.mag_z, 2));
	mag_norm=sqrt(mpu.mag_x*mpu.mag_x+mpu.mag_y*mpu.mag_y+mpu.mag_z*mpu.mag_z);
 80026f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80026fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80026fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002702:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002706:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800270a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002712:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002716:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800271a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd fec3 	bl	80004b0 <__aeabi_f2d>
 800272a:	4603      	mov	r3, r0
 800272c:	460c      	mov	r4, r1
 800272e:	ec44 3b10 	vmov	d0, r3, r4
 8002732:	f007 fcbf 	bl	800a0b4 <sqrt>
 8002736:	ec54 3b10 	vmov	r3, r4, d0
 800273a:	4618      	mov	r0, r3
 800273c:	4621      	mov	r1, r4
 800273e:	f7fe f9e7 	bl	8000b10 <__aeabi_d2f>
 8002742:	4602      	mov	r2, r0
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <ReadMPU9250+0x464>)
 8002746:	601a      	str	r2, [r3, #0]
	mpu.mag_x=mpu.mag_x/mag_norm;
 8002748:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800274c:	4b4b      	ldr	r3, [pc, #300]	; (800287c <ReadMPU9250+0x464>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002756:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	mpu.mag_y=mpu.mag_y/mag_norm;
 800275a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <ReadMPU9250+0x464>)
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002768:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	mpu.mag_z=mpu.mag_z/mag_norm;
 800276c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002770:	4b42      	ldr	r3, [pc, #264]	; (800287c <ReadMPU9250+0x464>)
 8002772:	ed93 7a00 	vldr	s14, [r3]
 8002776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
//	mpu9250_test[3] = mpu.gyro_x/1000.0f;
//	mpu9250_test[4] = mpu.gyro_y/1000.0f;
//	mpu9250_test[5] = mpu.gyro_z/1000.0f;

//	mpu.accel_x = roundf((float)((atan2((double)accel_y_temp1,(double)accel_z_temp1))*RA_TO_DEC)*1000);
	mpu.roll=atan2(mpu.accel_y, sqrt(pow(mpu.accel_x, 2)+pow(mpu.accel_z, 2)));
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fe95 	bl	80004b0 <__aeabi_f2d>
 8002786:	4605      	mov	r5, r0
 8002788:	460e      	mov	r6, r1
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fe8f 	bl	80004b0 <__aeabi_f2d>
 8002792:	4603      	mov	r3, r0
 8002794:	460c      	mov	r4, r1
 8002796:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8002820 <ReadMPU9250+0x408>
 800279a:	ec44 3b10 	vmov	d0, r3, r4
 800279e:	f007 fb19 	bl	8009dd4 <pow>
 80027a2:	ec59 8b10 	vmov	r8, r9, d0
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe81 	bl	80004b0 <__aeabi_f2d>
 80027ae:	4603      	mov	r3, r0
 80027b0:	460c      	mov	r4, r1
 80027b2:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002820 <ReadMPU9250+0x408>
 80027b6:	ec44 3b10 	vmov	d0, r3, r4
 80027ba:	f007 fb0b 	bl	8009dd4 <pow>
 80027be:	ec54 3b10 	vmov	r3, r4, d0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4623      	mov	r3, r4
 80027c6:	4640      	mov	r0, r8
 80027c8:	4649      	mov	r1, r9
 80027ca:	f7fd fd13 	bl	80001f4 <__adddf3>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	ec44 3b17 	vmov	d7, r3, r4
 80027d6:	eeb0 0a47 	vmov.f32	s0, s14
 80027da:	eef0 0a67 	vmov.f32	s1, s15
 80027de:	f007 fc69 	bl	800a0b4 <sqrt>
 80027e2:	eeb0 7a40 	vmov.f32	s14, s0
 80027e6:	eef0 7a60 	vmov.f32	s15, s1
 80027ea:	eeb0 1a47 	vmov.f32	s2, s14
 80027ee:	eef0 1a67 	vmov.f32	s3, s15
 80027f2:	ec46 5b10 	vmov	d0, r5, r6
 80027f6:	f007 faeb 	bl	8009dd0 <atan2>
 80027fa:	ec54 3b10 	vmov	r3, r4, d0
 80027fe:	4618      	mov	r0, r3
 8002800:	4621      	mov	r1, r4
 8002802:	f7fe f985 	bl	8000b10 <__aeabi_d2f>
 8002806:	4603      	mov	r3, r0
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
	mpu.pitch=atan2(-mpu.accel_x, sqrt(pow(mpu.accel_y, 2)+pow(mpu.accel_z, 2)));
 800280a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800280e:	eef1 7a67 	vneg.f32	s15, s15
 8002812:	ee17 3a90 	vmov	r3, s15
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fe4a 	bl	80004b0 <__aeabi_f2d>
 800281c:	e030      	b.n	8002880 <ReadMPU9250+0x468>
 800281e:	bf00      	nop
 8002820:	00000000 	.word	0x00000000
 8002824:	40000000 	.word	0x40000000
 8002828:	200005cc 	.word	0x200005cc
 800282c:	20000468 	.word	0x20000468
 8002830:	2000055c 	.word	0x2000055c
 8002834:	200003ec 	.word	0x200003ec
 8002838:	20000660 	.word	0x20000660
 800283c:	20000604 	.word	0x20000604
 8002840:	20000400 	.word	0x20000400
 8002844:	20000494 	.word	0x20000494
 8002848:	4203126f 	.word	0x4203126f
 800284c:	20000404 	.word	0x20000404
 8002850:	200003f8 	.word	0x200003f8
 8002854:	2000048c 	.word	0x2000048c
 8002858:	438c0000 	.word	0x438c0000
 800285c:	43250000 	.word	0x43250000
 8002860:	20000584 	.word	0x20000584
 8002864:	200003fc 	.word	0x200003fc
 8002868:	447a0000 	.word	0x447a0000
 800286c:	20000484 	.word	0x20000484
 8002870:	200003dc 	.word	0x200003dc
 8002874:	200003e0 	.word	0x200003e0
 8002878:	200005e0 	.word	0x200005e0
 800287c:	20000578 	.word	0x20000578
 8002880:	4605      	mov	r5, r0
 8002882:	460e      	mov	r6, r1
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe12 	bl	80004b0 <__aeabi_f2d>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8002b18 <ReadMPU9250+0x700>
 8002894:	ec44 3b10 	vmov	d0, r3, r4
 8002898:	f007 fa9c 	bl	8009dd4 <pow>
 800289c:	ec59 8b10 	vmov	r8, r9, d0
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe04 	bl	80004b0 <__aeabi_f2d>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 8002b18 <ReadMPU9250+0x700>
 80028b0:	ec44 3b10 	vmov	d0, r3, r4
 80028b4:	f007 fa8e 	bl	8009dd4 <pow>
 80028b8:	ec54 3b10 	vmov	r3, r4, d0
 80028bc:	461a      	mov	r2, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	4640      	mov	r0, r8
 80028c2:	4649      	mov	r1, r9
 80028c4:	f7fd fc96 	bl	80001f4 <__adddf3>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	ec44 3b17 	vmov	d7, r3, r4
 80028d0:	eeb0 0a47 	vmov.f32	s0, s14
 80028d4:	eef0 0a67 	vmov.f32	s1, s15
 80028d8:	f007 fbec 	bl	800a0b4 <sqrt>
 80028dc:	eeb0 7a40 	vmov.f32	s14, s0
 80028e0:	eef0 7a60 	vmov.f32	s15, s1
 80028e4:	eeb0 1a47 	vmov.f32	s2, s14
 80028e8:	eef0 1a67 	vmov.f32	s3, s15
 80028ec:	ec46 5b10 	vmov	d0, r5, r6
 80028f0:	f007 fa6e 	bl	8009dd0 <atan2>
 80028f4:	ec54 3b10 	vmov	r3, r4, d0
 80028f8:	4618      	mov	r0, r3
 80028fa:	4621      	mov	r1, r4
 80028fc:	f7fe f908 	bl	8000b10 <__aeabi_d2f>
 8002900:	4603      	mov	r3, r0
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
	m_x=mpu.mag_x*cos(mpu.pitch)+mpu.mag_z*sin(mpu.pitch);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdd2 	bl	80004b0 <__aeabi_f2d>
 800290c:	4604      	mov	r4, r0
 800290e:	460d      	mov	r5, r1
 8002910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fdcc 	bl	80004b0 <__aeabi_f2d>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	ec43 2b10 	vmov	d0, r2, r3
 8002920:	f007 f9ca 	bl	8009cb8 <cos>
 8002924:	ec53 2b10 	vmov	r2, r3, d0
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fe18 	bl	8000560 <__aeabi_dmul>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	4625      	mov	r5, r4
 8002936:	461c      	mov	r4, r3
 8002938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fdb8 	bl	80004b0 <__aeabi_f2d>
 8002940:	4680      	mov	r8, r0
 8002942:	4689      	mov	r9, r1
 8002944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fdb2 	bl	80004b0 <__aeabi_f2d>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	ec43 2b10 	vmov	d0, r2, r3
 8002954:	f007 f9f4 	bl	8009d40 <sin>
 8002958:	ec53 2b10 	vmov	r2, r3, d0
 800295c:	4640      	mov	r0, r8
 800295e:	4649      	mov	r1, r9
 8002960:	f7fd fdfe 	bl	8000560 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fc42 	bl	80001f4 <__adddf3>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	4618      	mov	r0, r3
 8002976:	4621      	mov	r1, r4
 8002978:	f7fe f8ca 	bl	8000b10 <__aeabi_d2f>
 800297c:	4602      	mov	r2, r0
 800297e:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <ReadMPU9250+0x710>)
 8002980:	601a      	str	r2, [r3, #0]
	m_y=mpu.mag_x*sin(mpu.roll)*sin(mpu.pitch)+mpu.mag_y*cos(mpu.roll)-mpu.mag_z*sin(mpu.roll)*cos(mpu.pitch);
 8002982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fd93 	bl	80004b0 <__aeabi_f2d>
 800298a:	4604      	mov	r4, r0
 800298c:	460d      	mov	r5, r1
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fd8d 	bl	80004b0 <__aeabi_f2d>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ec43 2b10 	vmov	d0, r2, r3
 800299e:	f007 f9cf 	bl	8009d40 <sin>
 80029a2:	ec53 2b10 	vmov	r2, r3, d0
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fd fdd9 	bl	8000560 <__aeabi_dmul>
 80029ae:	4603      	mov	r3, r0
 80029b0:	460c      	mov	r4, r1
 80029b2:	4625      	mov	r5, r4
 80029b4:	461c      	mov	r4, r3
 80029b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd79 	bl	80004b0 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	ec43 2b10 	vmov	d0, r2, r3
 80029c6:	f007 f9bb 	bl	8009d40 <sin>
 80029ca:	ec53 2b10 	vmov	r2, r3, d0
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	f7fd fdc5 	bl	8000560 <__aeabi_dmul>
 80029d6:	4603      	mov	r3, r0
 80029d8:	460c      	mov	r4, r1
 80029da:	4625      	mov	r5, r4
 80029dc:	461c      	mov	r4, r3
 80029de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd65 	bl	80004b0 <__aeabi_f2d>
 80029e6:	4680      	mov	r8, r0
 80029e8:	4689      	mov	r9, r1
 80029ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fd5f 	bl	80004b0 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	ec43 2b10 	vmov	d0, r2, r3
 80029fa:	f007 f95d 	bl	8009cb8 <cos>
 80029fe:	ec53 2b10 	vmov	r2, r3, d0
 8002a02:	4640      	mov	r0, r8
 8002a04:	4649      	mov	r1, r9
 8002a06:	f7fd fdab 	bl	8000560 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	f7fd fbef 	bl	80001f4 <__adddf3>
 8002a16:	4603      	mov	r3, r0
 8002a18:	460c      	mov	r4, r1
 8002a1a:	4625      	mov	r5, r4
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd45 	bl	80004b0 <__aeabi_f2d>
 8002a26:	4680      	mov	r8, r0
 8002a28:	4689      	mov	r9, r1
 8002a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fd3f 	bl	80004b0 <__aeabi_f2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	ec43 2b10 	vmov	d0, r2, r3
 8002a3a:	f007 f981 	bl	8009d40 <sin>
 8002a3e:	ec53 2b10 	vmov	r2, r3, d0
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f7fd fd8b 	bl	8000560 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd2b 	bl	80004b0 <__aeabi_f2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	ec43 2b10 	vmov	d0, r2, r3
 8002a62:	f007 f929 	bl	8009cb8 <cos>
 8002a66:	ec53 2b10 	vmov	r2, r3, d0
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	f7fd fd77 	bl	8000560 <__aeabi_dmul>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f7fd fbb9 	bl	80001f0 <__aeabi_dsub>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	4618      	mov	r0, r3
 8002a84:	4621      	mov	r1, r4
 8002a86:	f7fe f843 	bl	8000b10 <__aeabi_d2f>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <ReadMPU9250+0x714>)
 8002a8e:	601a      	str	r2, [r3, #0]

	yaw_cur=atan2(m_x, m_y);
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <ReadMPU9250+0x710>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd0b 	bl	80004b0 <__aeabi_f2d>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	460d      	mov	r5, r1
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <ReadMPU9250+0x714>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fd04 	bl	80004b0 <__aeabi_f2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	ec43 2b11 	vmov	d1, r2, r3
 8002ab0:	ec45 4b10 	vmov	d0, r4, r5
 8002ab4:	f007 f98c 	bl	8009dd0 <atan2>
 8002ab8:	ec54 3b10 	vmov	r3, r4, d0
 8002abc:	4618      	mov	r0, r3
 8002abe:	4621      	mov	r1, r4
 8002ac0:	f7fe f826 	bl	8000b10 <__aeabi_d2f>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <ReadMPU9250+0x718>)
 8002ac8:	601a      	str	r2, [r3, #0]

	if(yaw_cur*pre_yaw<-M_PI_2*M_PI_2){
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <ReadMPU9250+0x718>)
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <ReadMPU9250+0x71c>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fce7 	bl	80004b0 <__aeabi_f2d>
 8002ae2:	a30f      	add	r3, pc, #60	; (adr r3, 8002b20 <ReadMPU9250+0x708>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd ffac 	bl	8000a44 <__aeabi_dcmplt>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02d      	beq.n	8002b4e <ReadMPU9250+0x736>
		if(yaw_cur>0){
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <ReadMPU9250+0x718>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	dd1c      	ble.n	8002b3c <ReadMPU9250+0x724>
			yaw_round-=1;
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <ReadMPU9250+0x720>)
 8002b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b21a      	sxth	r2, r3
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <ReadMPU9250+0x720>)
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	e01b      	b.n	8002b4e <ReadMPU9250+0x736>
 8002b16:	bf00      	nop
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	40000000 	.word	0x40000000
 8002b20:	c9be45de 	.word	0xc9be45de
 8002b24:	c003bd3c 	.word	0xc003bd3c
 8002b28:	20000568 	.word	0x20000568
 8002b2c:	200003d0 	.word	0x200003d0
 8002b30:	200004d0 	.word	0x200004d0
 8002b34:	200004a8 	.word	0x200004a8
 8002b38:	200002c4 	.word	0x200002c4
		}
		else{
			yaw_round+=1;
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <ReadMPU9250+0x858>)
 8002b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	b21a      	sxth	r2, r3
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <ReadMPU9250+0x858>)
 8002b4c:	801a      	strh	r2, [r3, #0]
		}
	}
	pre_yaw=yaw_cur;
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <ReadMPU9250+0x85c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a49      	ldr	r2, [pc, #292]	; (8002c78 <ReadMPU9250+0x860>)
 8002b54:	6013      	str	r3, [r2, #0]

	mpu.yaw=yaw_round*M_PI*2+yaw_cur;
 8002b56:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <ReadMPU9250+0x858>)
 8002b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fc95 	bl	800048c <__aeabi_i2d>
 8002b62:	a341      	add	r3, pc, #260	; (adr r3, 8002c68 <ReadMPU9250+0x850>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fcfa 	bl	8000560 <__aeabi_dmul>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4618      	mov	r0, r3
 8002b72:	4621      	mov	r1, r4
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	f7fd fb3c 	bl	80001f4 <__adddf3>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	4625      	mov	r5, r4
 8002b82:	461c      	mov	r4, r3
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <ReadMPU9250+0x85c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc91 	bl	80004b0 <__aeabi_f2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	f7fd fb2d 	bl	80001f4 <__adddf3>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	f7fd ffb5 	bl	8000b10 <__aeabi_d2f>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	653b      	str	r3, [r7, #80]	; 0x50

	getMaxMinValue(m_x, 3);
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <ReadMPU9250+0x864>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb6:	f000 f86d 	bl	8002c94 <getMaxMinValue>
	getMaxMinValue(m_y, 4);
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <ReadMPU9250+0x868>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	2004      	movs	r0, #4
 8002bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc6:	f000 f865 	bl	8002c94 <getMaxMinValue>

	mpu9250_test[5]=mpu.roll*RA_TO_DEC;
 8002bca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002bce:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002c84 <ReadMPU9250+0x86c>
 8002bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <ReadMPU9250+0x870>)
 8002bd8:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu9250_test[6]=mpu.pitch*RA_TO_DEC;
 8002bdc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002be0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002c84 <ReadMPU9250+0x86c>
 8002be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <ReadMPU9250+0x870>)
 8002bea:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu9250_test[7] = mpu.yaw*RA_TO_DEC;
 8002bee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bf2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002c84 <ReadMPU9250+0x86c>
 8002bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <ReadMPU9250+0x870>)
 8002bfc:	edc3 7a07 	vstr	s15, [r3, #28]

//	delta_yaw = (-pre_yaw+mpu.yaw);
//	mpu9250_test[5] = mpu.gyro_z*dt_now;
//	mpu9250_test[6] = delta_yaw;
//	mpu9250_test[7] = mpu.yaw*RA_TO_DEC;
	mpu.yaw = IMU_Kalman(-mpu.gyro_z*DEC2RAD, mpu.yaw, dt_now);
 8002c00:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c04:	eef1 7a67 	vneg.f32	s15, s15
 8002c08:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002c8c <ReadMPU9250+0x874>
 8002c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c10:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <ReadMPU9250+0x878>)
 8002c16:	edd3 6a00 	vldr	s13, [r3]
 8002c1a:	eeb0 1a66 	vmov.f32	s2, s13
 8002c1e:	eef0 0a47 	vmov.f32	s1, s14
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	f000 f88d 	bl	8002d44 <IMU_Kalman>
 8002c2a:	eef0 7a40 	vmov.f32	s15, s0
 8002c2e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

//	mpu9250_test[6] = mpu.roll*RA_TO_DEC;
//	mpu9250_test[7] = mpu.pitch*RA_TO_DEC;
	mpu9250_test[8] = mpu.yaw*RA_TO_DEC;
 8002c32:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c36:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002c84 <ReadMPU9250+0x86c>
 8002c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <ReadMPU9250+0x870>)
 8002c40:	edc3 7a08 	vstr	s15, [r3, #32]

	return mpu;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	461d      	mov	r5, r3
 8002c48:	f107 0420 	add.w	r4, r7, #32
 8002c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	602b      	str	r3, [r5, #0]
}
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	375c      	adds	r7, #92	; 0x5c
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c66:	bf00      	nop
 8002c68:	54442d18 	.word	0x54442d18
 8002c6c:	400921fb 	.word	0x400921fb
 8002c70:	200002c4 	.word	0x200002c4
 8002c74:	200004d0 	.word	0x200004d0
 8002c78:	200004a8 	.word	0x200004a8
 8002c7c:	20000568 	.word	0x20000568
 8002c80:	200003d0 	.word	0x200003d0
 8002c84:	42652ee1 	.word	0x42652ee1
 8002c88:	2000063c 	.word	0x2000063c
 8002c8c:	3c8efa35 	.word	0x3c8efa35
 8002c90:	20000484 	.word	0x20000484

08002c94 <getMaxMinValue>:

void getMaxMinValue(float value, int8_t count_val){
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	70fb      	strb	r3, [r7, #3]
	if(value>=max_val[count_val])
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <getMaxMinValue+0xa4>)
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	db06      	blt.n	8002ccc <getMaxMinValue+0x38>
		max_val[count_val]=value;
 8002cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <getMaxMinValue+0xa4>)
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]
	if(value<=min_val[count_val])
 8002ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <getMaxMinValue+0xa8>)
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	d806      	bhi.n	8002cf6 <getMaxMinValue+0x62>
		min_val[count_val]=value;
 8002ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <getMaxMinValue+0xa8>)
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	601a      	str	r2, [r3, #0]
	med_val[count_val] = (max_val[count_val]+min_val[count_val])/2;
 8002cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <getMaxMinValue+0xa4>)
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	ed93 7a00 	vldr	s14, [r3]
 8002d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d08:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <getMaxMinValue+0xa8>)
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <getMaxMinValue+0xac>)
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	edc3 7a00 	vstr	s15, [r3]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	20000018 	.word	0x20000018
 8002d40:	20000520 	.word	0x20000520

08002d44 <IMU_Kalman>:
float P[2][2]={{0, 0}, {0, 0}};
float K[2] = {0, 0};
int8_t imu_onetime = 0;
float kalman_test[10];

float IMU_Kalman(float newrate, float newangle, float dt){
 8002d44:	b480      	push	{r7}
 8002d46:	b08b      	sub	sp, #44	; 0x2c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d52:	ed87 1a01 	vstr	s2, [r7, #4]
	float rate, S, y, Q_angle, R_measure, Q_bias;
	Q_angle = 0.001F;
 8002d56:	4b96      	ldr	r3, [pc, #600]	; (8002fb0 <IMU_Kalman+0x26c>)
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
	Q_bias = 0.003F;
 8002d5a:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <IMU_Kalman+0x270>)
 8002d5c:	623b      	str	r3, [r7, #32]
	R_measure = 0.03F;
 8002d5e:	4b96      	ldr	r3, [pc, #600]	; (8002fb8 <IMU_Kalman+0x274>)
 8002d60:	61fb      	str	r3, [r7, #28]

	rate = newrate-bias;
 8002d62:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <IMU_Kalman+0x278>)
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d70:	edc7 7a06 	vstr	s15, [r7, #24]
		angle = newangle;
		imu_onetime = 1;
	}
*/
//	bias = roundf(bias*100000.0f);
	angle += dt*rate;
 8002d74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d80:	4b8f      	ldr	r3, [pc, #572]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002d8c:	edc3 7a00 	vstr	s15, [r3]
//	angle += 0.1F;
	kalman_test[0] = (newangle-kalman_test[2])/dt;
 8002d90:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <IMU_Kalman+0x280>)
 8002d92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da6:	4b87      	ldr	r3, [pc, #540]	; (8002fc4 <IMU_Kalman+0x280>)
 8002da8:	edc3 7a00 	vstr	s15, [r3]
	kalman_test[1] = newrate;
 8002dac:	4a85      	ldr	r2, [pc, #532]	; (8002fc4 <IMU_Kalman+0x280>)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6053      	str	r3, [r2, #4]
	kalman_test[2] = newangle;
 8002db2:	4a84      	ldr	r2, [pc, #528]	; (8002fc4 <IMU_Kalman+0x280>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6093      	str	r3, [r2, #8]

	P[0][0] += dt*(dt*P[1][1]-P[0][1]-P[1][0]+Q_angle);
 8002db8:	4b83      	ldr	r3, [pc, #524]	; (8002fc8 <IMU_Kalman+0x284>)
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <IMU_Kalman+0x284>)
 8002dc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <IMU_Kalman+0x284>)
 8002dce:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <IMU_Kalman+0x284>)
 8002dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ddc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002de0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002de4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	4b74      	ldr	r3, [pc, #464]	; (8002fc8 <IMU_Kalman+0x284>)
 8002df6:	edc3 7a00 	vstr	s15, [r3]
	P[0][1] -= dt*P[1][1];
 8002dfa:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <IMU_Kalman+0x284>)
 8002dfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e00:	4b71      	ldr	r3, [pc, #452]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e02:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e14:	edc3 7a01 	vstr	s15, [r3, #4]
	P[1][0] -= dt*P[1][1];
 8002e18:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e20:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e30:	4b65      	ldr	r3, [pc, #404]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e32:	edc3 7a02 	vstr	s15, [r3, #8]
	P[1][1] += Q_bias*dt;
 8002e36:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e38:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e3c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e4e:	edc3 7a03 	vstr	s15, [r3, #12]

	S = P[0][0] + R_measure;
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	edc7 7a05 	vstr	s15, [r7, #20]
//	kalman_test[2] = dt;

	K[0] = P[0][0]/S;
 8002e64:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e66:	edd3 6a00 	vldr	s13, [r3]
 8002e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e72:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <IMU_Kalman+0x288>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
	K[1] = P[1][0]/S;
 8002e78:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <IMU_Kalman+0x284>)
 8002e7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <IMU_Kalman+0x288>)
 8002e88:	edc3 7a01 	vstr	s15, [r3, #4]

	kalman_test[3] = K[1];
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <IMU_Kalman+0x288>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a4c      	ldr	r2, [pc, #304]	; (8002fc4 <IMU_Kalman+0x280>)
 8002e92:	60d3      	str	r3, [r2, #12]

	y = newangle - angle;
 8002e94:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea2:	edc7 7a04 	vstr	s15, [r7, #16]

	angle += K[0]*y;
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <IMU_Kalman+0x288>)
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002ec0:	edc3 7a00 	vstr	s15, [r3]
	bias += K[1]*y;
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <IMU_Kalman+0x288>)
 8002ec6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002eca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ece:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <IMU_Kalman+0x278>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <IMU_Kalman+0x278>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]
	kalman_test[4] = K[0]*y;
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <IMU_Kalman+0x288>)
 8002ee4:	ed93 7a00 	vldr	s14, [r3]
 8002ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <IMU_Kalman+0x280>)
 8002ef2:	edc3 7a04 	vstr	s15, [r3, #16]
//	bias = roundf(bias*100000.0f);
	kalman_test[5] = K[1]*y;
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <IMU_Kalman+0x288>)
 8002ef8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <IMU_Kalman+0x280>)
 8002f06:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman_test[6] = angle;
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <IMU_Kalman+0x280>)
 8002f10:	6193      	str	r3, [r2, #24]
	kalman_test[7] = bias;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <IMU_Kalman+0x278>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <IMU_Kalman+0x280>)
 8002f18:	61d3      	str	r3, [r2, #28]

	P[0][0] -= K[0]*P[0][0];
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <IMU_Kalman+0x288>)
 8002f22:	edd3 6a00 	vldr	s13, [r3]
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f36:	edc3 7a00 	vstr	s15, [r3]
	P[0][1] -= K[0]*P[0][1];
 8002f3a:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <IMU_Kalman+0x288>)
 8002f42:	edd3 6a00 	vldr	s13, [r3]
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f56:	edc3 7a01 	vstr	s15, [r3, #4]
	P[1][0] -= K[1]*P[0][0];
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <IMU_Kalman+0x288>)
 8002f62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f76:	edc3 7a02 	vstr	s15, [r3, #8]
	P[1][1] -= K[1]*P[0][1];
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f7c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <IMU_Kalman+0x288>)
 8002f82:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f88:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <IMU_Kalman+0x284>)
 8002f96:	edc3 7a03 	vstr	s15, [r3, #12]

	return angle;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <IMU_Kalman+0x27c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	ee07 3a90 	vmov	s15, r3
}
 8002fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa6:	372c      	adds	r7, #44	; 0x2c
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	3a83126f 	.word	0x3a83126f
 8002fb4:	3b449ba6 	.word	0x3b449ba6
 8002fb8:	3cf5c28f 	.word	0x3cf5c28f
 8002fbc:	2000002c 	.word	0x2000002c
 8002fc0:	20000030 	.word	0x20000030
 8002fc4:	20000854 	.word	0x20000854
 8002fc8:	200002c8 	.word	0x200002c8
 8002fcc:	200002d8 	.word	0x200002d8

08002fd0 <IMU9250_READ_DMA>:

void IMU9250_READ_DMA(){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af04      	add	r7, sp, #16
//	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ST1, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[5], 1, 1000);
//	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ST2, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[6], 1, 1000);
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[0], 6, 1000);
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	2306      	movs	r3, #6
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <IMU9250_READ_DMA+0x5c>)
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	223b      	movs	r2, #59	; 0x3b
 8002fe8:	21d0      	movs	r1, #208	; 0xd0
 8002fea:	4811      	ldr	r0, [pc, #68]	; (8003030 <IMU9250_READ_DMA+0x60>)
 8002fec:	f001 ff42 	bl	8004e74 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[6], 6, 1000);
 8002ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <IMU9250_READ_DMA+0x64>)
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2301      	movs	r3, #1
 8003000:	2243      	movs	r2, #67	; 0x43
 8003002:	21d0      	movs	r1, #208	; 0xd0
 8003004:	480a      	ldr	r0, [pc, #40]	; (8003030 <IMU9250_READ_DMA+0x60>)
 8003006:	f001 ff35 	bl	8004e74 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_XOUT_L, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[12], 7, 1000);
 800300a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	2307      	movs	r3, #7
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <IMU9250_READ_DMA+0x68>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2301      	movs	r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	2118      	movs	r1, #24
 800301e:	4804      	ldr	r0, [pc, #16]	; (8003030 <IMU9250_READ_DMA+0x60>)
 8003020:	f001 ff28 	bl	8004e74 <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ST1, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250ST, 1, 1);
//	if (DataBuffer9250ST & 0x01){
//		HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
//		HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[12], 6, 1);
//	}
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200005cc 	.word	0x200005cc
 8003030:	20000314 	.word	0x20000314
 8003034:	200005d2 	.word	0x200005d2
 8003038:	200005d8 	.word	0x200005d8

0800303c <Control_Motor>:
 *		 x1: motor left
 *		 1: tien
 *		 0: lui
 *
*/
void Control_Motor(int16_t duty_r,int16_t duty_l, uint8_t dir_motor){
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	80fb      	strh	r3, [r7, #6]
 8003046:	460b      	mov	r3, r1
 8003048:	80bb      	strh	r3, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	70fb      	strb	r3, [r7, #3]
	mt_test[0] = duty_r;
 800304e:	4a33      	ldr	r2, [pc, #204]	; (800311c <Control_Motor+0xe0>)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	8013      	strh	r3, [r2, #0]
	mt_test[1] = duty_l;
 8003054:	4a31      	ldr	r2, [pc, #196]	; (800311c <Control_Motor+0xe0>)
 8003056:	88bb      	ldrh	r3, [r7, #4]
 8003058:	8053      	strh	r3, [r2, #2]

	mt_test[2] = dir_motor;
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	b21a      	sxth	r2, r3
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <Control_Motor+0xe0>)
 8003060:	809a      	strh	r2, [r3, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_r);
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <Control_Motor+0xe4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
	if((duty_r == 0) & (duty_l == 0)){
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	88bb      	ldrh	r3, [r7, #4]
 8003070:	4313      	orrs	r3, r2
 8003072:	b21b      	sxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <Control_Motor+0x4a>
		HAL_GPIO_WritePin(GPIOD, LED_BLU_Pin, GPIO_PIN_SET);
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800307e:	4829      	ldr	r0, [pc, #164]	; (8003124 <Control_Motor+0xe8>)
 8003080:	f001 fc92 	bl	80049a8 <HAL_GPIO_WritePin>
 8003084:	e005      	b.n	8003092 <Control_Motor+0x56>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, LED_BLU_Pin, GPIO_PIN_RESET);
 8003086:	2200      	movs	r2, #0
 8003088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800308c:	4825      	ldr	r0, [pc, #148]	; (8003124 <Control_Motor+0xe8>)
 800308e:	f001 fc8b 	bl	80049a8 <HAL_GPIO_WritePin>
	}

	if(dir_motor&1){
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <Control_Motor+0x7a>
//		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
//		tien
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_SET);
 800309c:	2201      	movs	r2, #1
 800309e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a2:	4820      	ldr	r0, [pc, #128]	; (8003124 <Control_Motor+0xe8>)
 80030a4:	f001 fc80 	bl	80049a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ae:	481d      	ldr	r0, [pc, #116]	; (8003124 <Control_Motor+0xe8>)
 80030b0:	f001 fc7a 	bl	80049a8 <HAL_GPIO_WritePin>
 80030b4:	e00b      	b.n	80030ce <Control_Motor+0x92>
	}
	else{
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030bc:	4819      	ldr	r0, [pc, #100]	; (8003124 <Control_Motor+0xe8>)
 80030be:	f001 fc73 	bl	80049a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_SET);
 80030c2:	2201      	movs	r2, #1
 80030c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030c8:	4816      	ldr	r0, [pc, #88]	; (8003124 <Control_Motor+0xe8>)
 80030ca:	f001 fc6d 	bl	80049a8 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_l);
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <Control_Motor+0xe4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34
	if(dir_motor&2){
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <Control_Motor+0xc0>
//		tien
//		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_SET);
 80030e2:	2201      	movs	r2, #1
 80030e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030e8:	480e      	ldr	r0, [pc, #56]	; (8003124 <Control_Motor+0xe8>)
 80030ea:	f001 fc5d 	bl	80049a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_RESET);
 80030ee:	2200      	movs	r2, #0
 80030f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030f4:	480b      	ldr	r0, [pc, #44]	; (8003124 <Control_Motor+0xe8>)
 80030f6:	f001 fc57 	bl	80049a8 <HAL_GPIO_WritePin>
	else{
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_SET);
	}
}
 80030fa:	e00b      	b.n	8003114 <Control_Motor+0xd8>
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_RESET);
 80030fc:	2200      	movs	r2, #0
 80030fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003102:	4808      	ldr	r0, [pc, #32]	; (8003124 <Control_Motor+0xe8>)
 8003104:	f001 fc50 	bl	80049a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_SET);
 8003108:	2201      	movs	r2, #1
 800310a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <Control_Motor+0xe8>)
 8003110:	f001 fc4a 	bl	80049a8 <HAL_GPIO_WritePin>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200005a8 	.word	0x200005a8
 8003120:	200006f4 	.word	0x200006f4
 8003124:	40020c00 	.word	0x40020c00

08003128 <Get_Velocity>:
 * GPIO: PB7 -> ENC-L1
 * 		 PB6 -> ENC-L2
 * 		 PA5 -> ENC-R1
 * 		 PB3 -> ENC-R2
*/
volatile int16_t * Get_Velocity(){
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
	if (mt_onetime==1){
 800312e:	4b33      	ldr	r3, [pc, #204]	; (80031fc <Get_Velocity+0xd4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10b      	bne.n	800314e <Get_Velocity+0x26>
		TIM4->CNT=5000;
 8003136:	4b32      	ldr	r3, [pc, #200]	; (8003200 <Get_Velocity+0xd8>)
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT=5000;
 800313e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
		mt_onetime=0;
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <Get_Velocity+0xd4>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
	}
//	volatile float enc[2];
	enc[0]= (TIM2->CNT)-5000;
 800314e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b29b      	uxth	r3, r3
 8003156:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800315a:	3b08      	subs	r3, #8
 800315c:	b29b      	uxth	r3, r3
 800315e:	b21a      	sxth	r2, r3
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <Get_Velocity+0xdc>)
 8003162:	801a      	strh	r2, [r3, #0]
//	if ((TIM2->CNT)>=5000) enc[1]=-1;
//	else enc[1]=1;

	enc[1]= (TIM4->CNT)-5000;
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <Get_Velocity+0xd8>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	b29b      	uxth	r3, r3
 800316a:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800316e:	3b08      	subs	r3, #8
 8003170:	b29b      	uxth	r3, r3
 8003172:	b21a      	sxth	r2, r3
 8003174:	4b23      	ldr	r3, [pc, #140]	; (8003204 <Get_Velocity+0xdc>)
 8003176:	805a      	strh	r2, [r3, #2]
//	else enc[3]=-1;

	TIM4->CNT=5000;
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <Get_Velocity+0xd8>)
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=5000;
 8003180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
	int i;
  	for (int i=0;i<2; i++){
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	e02a      	b.n	80031e6 <Get_Velocity+0xbe>
		if (enc[i]>=0){
 8003190:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <Get_Velocity+0xdc>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003198:	b21b      	sxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	db0c      	blt.n	80031b8 <Get_Velocity+0x90>
			enc[2]=enc[2]|(i+1);
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <Get_Velocity+0xdc>)
 80031a0:	889b      	ldrh	r3, [r3, #4]
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b21a      	sxth	r2, r3
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <Get_Velocity+0xdc>)
 80031b4:	809a      	strh	r2, [r3, #4]
 80031b6:	e013      	b.n	80031e0 <Get_Velocity+0xb8>
		}
		else if (enc[i]<0){
 80031b8:	4a12      	ldr	r2, [pc, #72]	; (8003204 <Get_Velocity+0xdc>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da0c      	bge.n	80031e0 <Get_Velocity+0xb8>
			enc[2]=enc[2]&(2-i);
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <Get_Velocity+0xdc>)
 80031c8:	889b      	ldrh	r3, [r3, #4]
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f1c3 0302 	rsb	r3, r3, #2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	4013      	ands	r3, r2
 80031da:	b21a      	sxth	r2, r3
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <Get_Velocity+0xdc>)
 80031de:	809a      	strh	r2, [r3, #4]
  	for (int i=0;i<2; i++){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	ddd1      	ble.n	8003190 <Get_Velocity+0x68>
		}
  	}

	return 0;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000034 	.word	0x20000034
 8003200:	40000800 	.word	0x40000800
 8003204:	200004c0 	.word	0x200004c0

08003208 <PID_Calculate>:
 * PID_in is array 2 value (target L, target R)
 * PID_current is array 2 value (velo L, velo R)
 * return *PID_out is velo of 2 motors Left and Right

*/
float * PID_Calculate(float *_PID_in, int PID_dir, volatile int16_t *_PID_current){
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
//	dir_=3;
	PID_out[2]=(float)dir_;
*/


  	for (int i=0;i<2; i++){
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e2dc      	b.n	80037d4 <PID_Calculate+0x5cc>

  		if (!(PID_dir&(i+1))) PID_in[i]=*(_PID_in+i)*(-1);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d110      	bne.n	8003248 <PID_Calculate+0x40>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eef1 7a67 	vneg.f32	s15, s15
 8003236:	4a03      	ldr	r2, [pc, #12]	; (8003244 <PID_Calculate+0x3c>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	edc3 7a00 	vstr	s15, [r3]
 8003242:	e00b      	b.n	800325c <PID_Calculate+0x54>
 8003244:	200005f0 	.word	0x200005f0
  		else 				 PID_in[i]=*(_PID_in+i);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	49b4      	ldr	r1, [pc, #720]	; (8003524 <PID_Calculate+0x31c>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	601a      	str	r2, [r3, #0]

  		PID_Test[i+2]=PID_in[i];
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3302      	adds	r3, #2
 8003260:	49b0      	ldr	r1, [pc, #704]	; (8003524 <PID_Calculate+0x31c>)
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	440a      	add	r2, r1
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	49af      	ldr	r1, [pc, #700]	; (8003528 <PID_Calculate+0x320>)
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	601a      	str	r2, [r3, #0]

  		PID_in[i]*=updateVel;
 8003272:	4aac      	ldr	r2, [pc, #688]	; (8003524 <PID_Calculate+0x31c>)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800352c <PID_Calculate+0x324>
 8003282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003286:	4aa7      	ldr	r2, [pc, #668]	; (8003524 <PID_Calculate+0x31c>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	edc3 7a00 	vstr	s15, [r3]

  		PID_current[i] = *(_PID_current+i);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b21b      	sxth	r3, r3
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a6:	4aa2      	ldr	r2, [pc, #648]	; (8003530 <PID_Calculate+0x328>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	edc3 7a00 	vstr	s15, [r3]

  		if(fabs(PID_in[i])>10.0f){ // > 10
 80032b2:	4a9c      	ldr	r2, [pc, #624]	; (8003524 <PID_Calculate+0x31c>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	eef0 7ae7 	vabs.f32	s15, s15
 80032c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	dd1d      	ble.n	800330c <PID_Calculate+0x104>
  			PID_Kp[i]=_PID_Kp[i];
 80032d0:	4a98      	ldr	r2, [pc, #608]	; (8003534 <PID_Calculate+0x32c>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4997      	ldr	r1, [pc, #604]	; (8003538 <PID_Calculate+0x330>)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i];
 80032e4:	4a95      	ldr	r2, [pc, #596]	; (800353c <PID_Calculate+0x334>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4994      	ldr	r1, [pc, #592]	; (8003540 <PID_Calculate+0x338>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i];
 80032f8:	4a92      	ldr	r2, [pc, #584]	; (8003544 <PID_Calculate+0x33c>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4991      	ldr	r1, [pc, #580]	; (8003548 <PID_Calculate+0x340>)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=10.0f){ // 10 - 7
 800330c:	4a85      	ldr	r2, [pc, #532]	; (8003524 <PID_Calculate+0x31c>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	eef0 7ae7 	vabs.f32	s15, s15
 800331c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	d820      	bhi.n	800336c <PID_Calculate+0x164>
  			PID_Kp[i]=_PID_Kp[i+2];
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3302      	adds	r3, #2
 800332e:	4a81      	ldr	r2, [pc, #516]	; (8003534 <PID_Calculate+0x32c>)
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4980      	ldr	r1, [pc, #512]	; (8003538 <PID_Calculate+0x330>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+2];
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	3302      	adds	r3, #2
 8003344:	4a7d      	ldr	r2, [pc, #500]	; (800353c <PID_Calculate+0x334>)
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	497c      	ldr	r1, [pc, #496]	; (8003540 <PID_Calculate+0x338>)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+2];
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3302      	adds	r3, #2
 800335a:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <PID_Calculate+0x33c>)
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4979      	ldr	r1, [pc, #484]	; (8003548 <PID_Calculate+0x340>)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=7.0f){ // 7 - 4.5
 800336c:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <PID_Calculate+0x31c>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	eef0 7ae7 	vabs.f32	s15, s15
 800337c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d820      	bhi.n	80033cc <PID_Calculate+0x1c4>
  			PID_Kp[i]=_PID_Kp[i+4];
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3304      	adds	r3, #4
 800338e:	4a69      	ldr	r2, [pc, #420]	; (8003534 <PID_Calculate+0x32c>)
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4968      	ldr	r1, [pc, #416]	; (8003538 <PID_Calculate+0x330>)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+4];
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4a65      	ldr	r2, [pc, #404]	; (800353c <PID_Calculate+0x334>)
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4964      	ldr	r1, [pc, #400]	; (8003540 <PID_Calculate+0x338>)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+4];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3304      	adds	r3, #4
 80033ba:	4a62      	ldr	r2, [pc, #392]	; (8003544 <PID_Calculate+0x33c>)
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4961      	ldr	r1, [pc, #388]	; (8003548 <PID_Calculate+0x340>)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=4.5f){ // 4.5 - 2
 80033cc:	4a55      	ldr	r2, [pc, #340]	; (8003524 <PID_Calculate+0x31c>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	eef0 7ae7 	vabs.f32	s15, s15
 80033dc:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	d820      	bhi.n	800342c <PID_Calculate+0x224>
  			PID_Kp[i]=_PID_Kp[i+6];
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3306      	adds	r3, #6
 80033ee:	4a51      	ldr	r2, [pc, #324]	; (8003534 <PID_Calculate+0x32c>)
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4950      	ldr	r1, [pc, #320]	; (8003538 <PID_Calculate+0x330>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+6];
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3306      	adds	r3, #6
 8003404:	4a4d      	ldr	r2, [pc, #308]	; (800353c <PID_Calculate+0x334>)
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	494c      	ldr	r1, [pc, #304]	; (8003540 <PID_Calculate+0x338>)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+6];
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3306      	adds	r3, #6
 800341a:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <PID_Calculate+0x33c>)
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4949      	ldr	r1, [pc, #292]	; (8003548 <PID_Calculate+0x340>)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=2.0f){ // 0 - 2.0
 800342c:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <PID_Calculate+0x31c>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	eef0 7ae7 	vabs.f32	s15, s15
 800343c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	d820      	bhi.n	800348c <PID_Calculate+0x284>
  			PID_Kp[i]=_PID_Kp[i+8];
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3308      	adds	r3, #8
 800344e:	4a39      	ldr	r2, [pc, #228]	; (8003534 <PID_Calculate+0x32c>)
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4938      	ldr	r1, [pc, #224]	; (8003538 <PID_Calculate+0x330>)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+8];
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3308      	adds	r3, #8
 8003464:	4a35      	ldr	r2, [pc, #212]	; (800353c <PID_Calculate+0x334>)
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4934      	ldr	r1, [pc, #208]	; (8003540 <PID_Calculate+0x338>)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+8];
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3308      	adds	r3, #8
 800347a:	4a32      	ldr	r2, [pc, #200]	; (8003544 <PID_Calculate+0x33c>)
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4931      	ldr	r1, [pc, #196]	; (8003548 <PID_Calculate+0x340>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])>20.0f){ // 0 - 2.0
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <PID_Calculate+0x31c>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	eef0 7ae7 	vabs.f32	s15, s15
 800349c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	dd14      	ble.n	80034d4 <PID_Calculate+0x2cc>
  			PID_Kp[i]=0.0;
 80034aa:	4a23      	ldr	r2, [pc, #140]	; (8003538 <PID_Calculate+0x330>)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=0.0;
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <PID_Calculate+0x338>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=0.0;
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <PID_Calculate+0x340>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
  		}

//  		if(((PID_in_pre[i]==0) & (!PID_in[i]==0)) | (PID_in_pre[i]*PID_in[i] <= 0)){
  		if(PID_in_pre[i]*PID_in[i] <= 0){
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <PID_Calculate+0x344>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	ed93 7a00 	vldr	s14, [r3]
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <PID_Calculate+0x31c>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	d832      	bhi.n	8003560 <PID_Calculate+0x358>
  			PID_out[i]=265*PID_in[i]/fabs(PID_in[i]);
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <PID_Calculate+0x31c>)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003550 <PID_Calculate+0x348>
 800350a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <PID_Calculate+0x31c>)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eeb0 7ae7 	vabs.f32	s14, s15
 800351e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003522:	e017      	b.n	8003554 <PID_Calculate+0x34c>
 8003524:	200005f0 	.word	0x200005f0
 8003528:	20000438 	.word	0x20000438
 800352c:	41fea3d7 	.word	0x41fea3d7
 8003530:	2000062c 	.word	0x2000062c
 8003534:	20000040 	.word	0x20000040
 8003538:	2000058c 	.word	0x2000058c
 800353c:	20000068 	.word	0x20000068
 8003540:	200003e4 	.word	0x200003e4
 8003544:	200002e4 	.word	0x200002e4
 8003548:	200004ac 	.word	0x200004ac
 800354c:	20000664 	.word	0x20000664
 8003550:	43848000 	.word	0x43848000
 8003554:	4aa9      	ldr	r2, [pc, #676]	; (80037fc <PID_Calculate+0x5f4>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	edc3 7a00 	vstr	s15, [r3]
  		}

  		PID_in_pre[i] = PID_in[i];
 8003560:	4aa7      	ldr	r2, [pc, #668]	; (8003800 <PID_Calculate+0x5f8>)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	49a6      	ldr	r1, [pc, #664]	; (8003804 <PID_Calculate+0x5fc>)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	601a      	str	r2, [r3, #0]


//		PID_Test[i] = PID_current[i];
//		PID_Test[i+2]=PID_in[i];

		E0[i] = (PID_in[i]-PID_current[i]);
 8003574:	4aa2      	ldr	r2, [pc, #648]	; (8003800 <PID_Calculate+0x5f8>)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	ed93 7a00 	vldr	s14, [r3]
 8003580:	4aa1      	ldr	r2, [pc, #644]	; (8003808 <PID_Calculate+0x600>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003590:	4a9e      	ldr	r2, [pc, #632]	; (800380c <PID_Calculate+0x604>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	edc3 7a00 	vstr	s15, [r3]

		A0[i] = PID_Kp[i] + PID_Ki[i]/400.0F + PID_Kd[i]*200.0F;
 800359c:	4a9c      	ldr	r2, [pc, #624]	; (8003810 <PID_Calculate+0x608>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	ed93 7a00 	vldr	s14, [r3]
 80035a8:	4a9a      	ldr	r2, [pc, #616]	; (8003814 <PID_Calculate+0x60c>)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	edd3 6a00 	vldr	s13, [r3]
 80035b4:	ed9f 6a98 	vldr	s12, [pc, #608]	; 8003818 <PID_Calculate+0x610>
 80035b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035c0:	4a96      	ldr	r2, [pc, #600]	; (800381c <PID_Calculate+0x614>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003820 <PID_Calculate+0x618>
 80035d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d8:	4a92      	ldr	r2, [pc, #584]	; (8003824 <PID_Calculate+0x61c>)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	edc3 7a00 	vstr	s15, [r3]
		A1[i] = -PID_Kp[i] + PID_Ki[i]/400.0F - 400.0F*PID_Kd[i];
 80035e4:	4a8b      	ldr	r2, [pc, #556]	; (8003814 <PID_Calculate+0x60c>)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003818 <PID_Calculate+0x610>
 80035f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035f8:	4a85      	ldr	r2, [pc, #532]	; (8003810 <PID_Calculate+0x608>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003608:	4a84      	ldr	r2, [pc, #528]	; (800381c <PID_Calculate+0x614>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	eddf 6a80 	vldr	s13, [pc, #512]	; 8003818 <PID_Calculate+0x610>
 8003618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800361c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003620:	4a81      	ldr	r2, [pc, #516]	; (8003828 <PID_Calculate+0x620>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	edc3 7a00 	vstr	s15, [r3]
		A2[i] = PID_Kd[i]*200.0F;
 800362c:	4a7b      	ldr	r2, [pc, #492]	; (800381c <PID_Calculate+0x614>)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003820 <PID_Calculate+0x618>
 800363c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003640:	4a7a      	ldr	r2, [pc, #488]	; (800382c <PID_Calculate+0x624>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	edc3 7a00 	vstr	s15, [r3]
		PID_out[i] += A0[i]*E0[i] + A1[i]*E1[i] + A2[i]*E2[i];
 800364c:	4a6b      	ldr	r2, [pc, #428]	; (80037fc <PID_Calculate+0x5f4>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	ed93 7a00 	vldr	s14, [r3]
 8003658:	4a72      	ldr	r2, [pc, #456]	; (8003824 <PID_Calculate+0x61c>)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	edd3 6a00 	vldr	s13, [r3]
 8003664:	4a69      	ldr	r2, [pc, #420]	; (800380c <PID_Calculate+0x604>)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003674:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <PID_Calculate+0x620>)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	ed93 6a00 	vldr	s12, [r3]
 8003680:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <PID_Calculate+0x628>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003690:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003694:	4a65      	ldr	r2, [pc, #404]	; (800382c <PID_Calculate+0x624>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	ed93 6a00 	vldr	s12, [r3]
 80036a0:	4a64      	ldr	r2, [pc, #400]	; (8003834 <PID_Calculate+0x62c>)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <PID_Calculate+0x5f4>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	edc3 7a00 	vstr	s15, [r3]

		E2[i] = E1[i];
 80036c4:	4a5a      	ldr	r2, [pc, #360]	; (8003830 <PID_Calculate+0x628>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4959      	ldr	r1, [pc, #356]	; (8003834 <PID_Calculate+0x62c>)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	601a      	str	r2, [r3, #0]
		E1[i] = E0[i];
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <PID_Calculate+0x604>)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4953      	ldr	r1, [pc, #332]	; (8003830 <PID_Calculate+0x628>)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	601a      	str	r2, [r3, #0]

//		PID_Test[i+6]=PID_out[i];

		if (PID_out[i]>PID_out_max){
 80036ec:	4a43      	ldr	r2, [pc, #268]	; (80037fc <PID_Calculate+0x5f4>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	ed93 7a00 	vldr	s14, [r3]
 80036f8:	4b4f      	ldr	r3, [pc, #316]	; (8003838 <PID_Calculate+0x630>)
 80036fa:	edd3 7a00 	vldr	s15, [r3]
 80036fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	dd07      	ble.n	8003718 <PID_Calculate+0x510>
			PID_out[i]=PID_out_max;
 8003708:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <PID_Calculate+0x630>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	493b      	ldr	r1, [pc, #236]	; (80037fc <PID_Calculate+0x5f4>)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e014      	b.n	8003742 <PID_Calculate+0x53a>
		}
		else if (PID_out[i]<PID_out_min){
 8003718:	4a38      	ldr	r2, [pc, #224]	; (80037fc <PID_Calculate+0x5f4>)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	4b45      	ldr	r3, [pc, #276]	; (800383c <PID_Calculate+0x634>)
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	d506      	bpl.n	8003742 <PID_Calculate+0x53a>
			PID_out[i]=PID_out_min;
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <PID_Calculate+0x634>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4930      	ldr	r1, [pc, #192]	; (80037fc <PID_Calculate+0x5f4>)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	601a      	str	r2, [r3, #0]
		}

		if (PID_out[i]>=0){
 8003742:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <PID_Calculate+0x5f4>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	db07      	blt.n	8003768 <PID_Calculate+0x560>
			dir_=dir_|(i+1);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	4b38      	ldr	r3, [pc, #224]	; (8003840 <PID_Calculate+0x638>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4313      	orrs	r3, r2
 8003762:	4a37      	ldr	r2, [pc, #220]	; (8003840 <PID_Calculate+0x638>)
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e012      	b.n	800378e <PID_Calculate+0x586>
		}
		else if (PID_out[i]<0)
 8003768:	4a24      	ldr	r2, [pc, #144]	; (80037fc <PID_Calculate+0x5f4>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	edd3 7a00 	vldr	s15, [r3]
 8003774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	d507      	bpl.n	800378e <PID_Calculate+0x586>
			dir_=dir_&(2-i);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f1c3 0202 	rsb	r2, r3, #2
 8003784:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <PID_Calculate+0x638>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4013      	ands	r3, r2
 800378a:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <PID_Calculate+0x638>)
 800378c:	6013      	str	r3, [r2, #0]


		PID_out_[i]=fabs(PID_out[i]);
 800378e:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <PID_Calculate+0x5f4>)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eef0 7ae7 	vabs.f32	s15, s15
 800379e:	4a29      	ldr	r2, [pc, #164]	; (8003844 <PID_Calculate+0x63c>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	edc3 7a00 	vstr	s15, [r3]
		if (PID_in[i]==0){
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <PID_Calculate+0x5f8>)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d106      	bne.n	80037ce <PID_Calculate+0x5c6>
			PID_out[i]=0;
 80037c0:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <PID_Calculate+0x5f4>)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
  	for (int i=0;i<2; i++){
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	f77f ad1f 	ble.w	800321a <PID_Calculate+0x12>
		}
	}
  	PID_out_[2]=(float)dir_;
 80037dc:	4b18      	ldr	r3, [pc, #96]	; (8003840 <PID_Calculate+0x638>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <PID_Calculate+0x63c>)
 80037ea:	edc3 7a02 	vstr	s15, [r3, #8]


//	PID_Test[5] += PID_out[0];
	return PID_out_;
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <PID_Calculate+0x63c>)
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000504 	.word	0x20000504
 8003800:	200005f0 	.word	0x200005f0
 8003804:	20000664 	.word	0x20000664
 8003808:	2000062c 	.word	0x2000062c
 800380c:	20000430 	.word	0x20000430
 8003810:	2000058c 	.word	0x2000058c
 8003814:	200003e4 	.word	0x200003e4
 8003818:	43c80000 	.word	0x43c80000
 800381c:	200004ac 	.word	0x200004ac
 8003820:	43480000 	.word	0x43480000
 8003824:	2000047c 	.word	0x2000047c
 8003828:	2000066c 	.word	0x2000066c
 800382c:	2000059c 	.word	0x2000059c
 8003830:	20000570 	.word	0x20000570
 8003834:	200004c8 	.word	0x200004c8
 8003838:	20000038 	.word	0x20000038
 800383c:	2000003c 	.word	0x2000003c
 8003840:	200002e0 	.word	0x200002e0
 8003844:	20000514 	.word	0x20000514

08003848 <Dec2Bytes>:
		van toc trai: 2 byte
		van toc phai: 2 byte
		chieu: 1 byte
		data: 1 byte
*/
void Dec2Bytes(int16_t encA, int16_t encB, struct data_mpu9250 ss, uint8_t motor_dir){
 8003848:	b082      	sub	sp, #8
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	f107 0c18 	add.w	ip, r7, #24
 8003854:	e88c 000c 	stmia.w	ip, {r2, r3}
 8003858:	4603      	mov	r3, r0
 800385a:	80fb      	strh	r3, [r7, #6]
 800385c:	460b      	mov	r3, r1
 800385e:	80bb      	strh	r3, [r7, #4]
	int32_t yaw;
	yaw = ss.yaw*1000000;
 8003860:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003864:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003aa8 <Dec2Bytes+0x260>
 8003868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800386c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003870:	ee17 3a90 	vmov	r3, s15
 8003874:	60fb      	str	r3, [r7, #12]

	dataTransmit[0] = 0x7F;
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <Dec2Bytes+0x264>)
 8003878:	227f      	movs	r2, #127	; 0x7f
 800387a:	701a      	strb	r2, [r3, #0]

	dataTransmit[1]=(int8_t)((((int16_t)encA)|0x00FF)>>8); // 8 bit H
 800387c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003880:	121b      	asrs	r3, r3, #8
 8003882:	b21b      	sxth	r3, r3
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <Dec2Bytes+0x264>)
 8003888:	705a      	strb	r2, [r3, #1]
	dataTransmit[2]=(int8_t)((((int16_t)encA)|0xFF00)); 	      // 8 bit L
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b87      	ldr	r3, [pc, #540]	; (8003aac <Dec2Bytes+0x264>)
 8003890:	709a      	strb	r2, [r3, #2]

	dataTransmit[3]=(int8_t)((((int16_t)encB)|0x00FF)>>8); // 8 bit H
 8003892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003896:	121b      	asrs	r3, r3, #8
 8003898:	b21b      	sxth	r3, r3
 800389a:	b2da      	uxtb	r2, r3
 800389c:	4b83      	ldr	r3, [pc, #524]	; (8003aac <Dec2Bytes+0x264>)
 800389e:	70da      	strb	r2, [r3, #3]
	dataTransmit[4]=(int8_t)((((int16_t)encB)|0xFF00)); 	      // 8 bit L
 80038a0:	88bb      	ldrh	r3, [r7, #4]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <Dec2Bytes+0x264>)
 80038a6:	711a      	strb	r2, [r3, #4]

	dataTransmit[5]=(int8_t)((((int32_t)ss.accel_x)|0xFF00FFFF)>>16); // 8 bit H
 80038a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038b0:	ee17 3a90 	vmov	r3, s15
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <Dec2Bytes+0x264>)
 80038be:	715a      	strb	r2, [r3, #5]
	dataTransmit[6]=(int8_t)((((int32_t)ss.accel_x)|0xFFFF00FF)>>8); 	      // 8 bit M
 80038c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c8:	ee17 3a90 	vmov	r3, s15
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b74      	ldr	r3, [pc, #464]	; (8003aac <Dec2Bytes+0x264>)
 80038da:	719a      	strb	r2, [r3, #6]
	dataTransmit[7]=(int8_t)((((int32_t)ss.accel_x)|0xFFFFFF00));		// 8 bit L
 80038dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e4:	edc7 7a00 	vstr	s15, [r7]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <Dec2Bytes+0x264>)
 80038ee:	71da      	strb	r2, [r3, #7]

	dataTransmit[8]=(int8_t)((((int32_t)ss.accel_y)|0xFF00FFFF)>>16); // 8 bit H
 80038f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80038f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f8:	ee17 3a90 	vmov	r3, s15
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b69      	ldr	r3, [pc, #420]	; (8003aac <Dec2Bytes+0x264>)
 8003906:	721a      	strb	r2, [r3, #8]
	dataTransmit[9]=(int8_t)((((int32_t)ss.accel_y)|0xFFFF00FF)>>8); 	      // 8 bit M
 8003908:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800390c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003910:	ee17 3a90 	vmov	r3, s15
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b62      	ldr	r3, [pc, #392]	; (8003aac <Dec2Bytes+0x264>)
 8003922:	725a      	strb	r2, [r3, #9]
	dataTransmit[10]=(int8_t)((((int32_t)ss.accel_y)|0xFFFFFF00));		// 8 bit L
 8003924:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800392c:	edc7 7a00 	vstr	s15, [r7]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <Dec2Bytes+0x264>)
 8003936:	729a      	strb	r2, [r3, #10]

	dataTransmit[11]=(int8_t)((((int32_t)ss.accel_z)|0xFF00FFFF)>>16); // 8 bit H
 8003938:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800393c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003940:	ee17 3a90 	vmov	r3, s15
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b57      	ldr	r3, [pc, #348]	; (8003aac <Dec2Bytes+0x264>)
 800394e:	72da      	strb	r2, [r3, #11]
	dataTransmit[12]=(int8_t)((((int32_t)ss.accel_z)|0xFFFF00FF)>>8); 	      // 8 bit M
 8003950:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003958:	ee17 3a90 	vmov	r3, s15
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003962:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003966:	b2da      	uxtb	r2, r3
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <Dec2Bytes+0x264>)
 800396a:	731a      	strb	r2, [r3, #12]
	dataTransmit[13]=(int8_t)((((int32_t)ss.accel_z)|0xFFFFFF00));		// 8 bit L
 800396c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003974:	edc7 7a00 	vstr	s15, [r7]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <Dec2Bytes+0x264>)
 800397e:	735a      	strb	r2, [r3, #13]

	dataTransmit[14]=(int8_t)((((int32_t)ss.gyro_x)|0xFF00FFFF)>>16); // 8 bit H
 8003980:	edd7 7a07 	vldr	s15, [r7, #28]
 8003984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003988:	ee17 3a90 	vmov	r3, s15
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b45      	ldr	r3, [pc, #276]	; (8003aac <Dec2Bytes+0x264>)
 8003996:	739a      	strb	r2, [r3, #14]
	dataTransmit[15]=(int8_t)((((int32_t)ss.gyro_x)|0xFFFF00FF)>>8); 	      // 8 bit M
 8003998:	edd7 7a07 	vldr	s15, [r7, #28]
 800399c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039a0:	ee17 3a90 	vmov	r3, s15
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039aa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <Dec2Bytes+0x264>)
 80039b2:	73da      	strb	r2, [r3, #15]
	dataTransmit[16]=(int8_t)((((int32_t)ss.gyro_x)|0xFFFFFF00));		// 8 bit L
 80039b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80039b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039bc:	edc7 7a00 	vstr	s15, [r7]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <Dec2Bytes+0x264>)
 80039c6:	741a      	strb	r2, [r3, #16]

	dataTransmit[17]=(int8_t)((((int32_t)ss.gyro_y)|0xFF00FFFF)>>16); // 8 bit H
 80039c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80039cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039d0:	ee17 3a90 	vmov	r3, s15
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b33      	ldr	r3, [pc, #204]	; (8003aac <Dec2Bytes+0x264>)
 80039de:	745a      	strb	r2, [r3, #17]
	dataTransmit[18]=(int8_t)((((int32_t)ss.gyro_y)|0xFFFF00FF)>>8); 	      // 8 bit M
 80039e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80039e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e8:	ee17 3a90 	vmov	r3, s15
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <Dec2Bytes+0x264>)
 80039fa:	749a      	strb	r2, [r3, #18]
	dataTransmit[19]=(int8_t)((((int32_t)ss.gyro_y)|0xFFFFFF00));		// 8 bit L
 80039fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a04:	edc7 7a00 	vstr	s15, [r7]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <Dec2Bytes+0x264>)
 8003a0e:	74da      	strb	r2, [r3, #19]

	dataTransmit[20]=(int8_t)((((int32_t)ss.gyro_z)|0xFF00FFFF)>>16); // 8 bit H
 8003a10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a18:	ee17 3a90 	vmov	r3, s15
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <Dec2Bytes+0x264>)
 8003a26:	751a      	strb	r2, [r3, #20]
	dataTransmit[21]=(int8_t)((((int32_t)ss.gyro_z)|0xFFFF00FF)>>8); 	      // 8 bit M
 8003a28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a30:	ee17 3a90 	vmov	r3, s15
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <Dec2Bytes+0x264>)
 8003a42:	755a      	strb	r2, [r3, #21]
	dataTransmit[22]=(int8_t)((((int32_t)ss.gyro_z)|0xFFFFFF00));		// 8 bit L
 8003a44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a4c:	edc7 7a00 	vstr	s15, [r7]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <Dec2Bytes+0x264>)
 8003a56:	759a      	strb	r2, [r3, #22]

	dataTransmit[23]=(int8_t)((((int32_t)yaw)|0x00FFFFFF)>>24); // 8 bit H
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	161b      	asrs	r3, r3, #24
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <Dec2Bytes+0x264>)
 8003a60:	75da      	strb	r2, [r3, #23]
	dataTransmit[24]=(int8_t)((((int32_t)yaw)|0xFF00FFFF)>>16); // 8 bit H
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <Dec2Bytes+0x264>)
 8003a6e:	761a      	strb	r2, [r3, #24]
	dataTransmit[25]=(int8_t)((((int32_t)yaw)|0xFFFF00FF)>>8); 	      // 8 bit M
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a78:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <Dec2Bytes+0x264>)
 8003a80:	765a      	strb	r2, [r3, #25]
	dataTransmit[26]=(int8_t)((((int32_t)yaw)|0xFFFFFF00));		// 8 bit L
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <Dec2Bytes+0x264>)
 8003a88:	769a      	strb	r2, [r3, #26]

	dataTransmit[27] = (int8_t)motor_dir;
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <Dec2Bytes+0x264>)
 8003a8c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003a90:	76d3      	strb	r3, [r2, #27]
	dataTransmit[28] = 0x1B; // new line (in python using 'serial.readline(-1)' to read data)
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <Dec2Bytes+0x264>)
 8003a94:	221b      	movs	r2, #27
 8003a96:	771a      	strb	r2, [r3, #28]
	uint8_t i;
	for (i=0; i<23; i++){
		dataTransmit[i] = i;
	}
*/
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	b002      	add	sp, #8
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	49742400 	.word	0x49742400
 8003aac:	2000060c 	.word	0x2000060c

08003ab0 <Byte2Dec>:
 * Input: uint8_t receivebuffer[16];
 * velo[0]: left
 * velo[1]: right
 *
*/
void Byte2Dec(){
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
	_velo[0] = (float)receivebuffer[1] + (float)(((int16_t)receivebuffer[2]<<8)|(int16_t)receivebuffer[3])/10000.0F;
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <Byte2Dec+0xb0>)
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <Byte2Dec+0xb0>)
 8003ac2:	789b      	ldrb	r3, [r3, #2]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <Byte2Dec+0xb0>)
 8003ac8:	78d2      	ldrb	r2, [r2, #3]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ad4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003b64 <Byte2Dec+0xb4>
 8003ad8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <Byte2Dec+0xb8>)
 8003ae2:	edc3 7a00 	vstr	s15, [r3]
	_velo[1] = (float)receivebuffer[4] + (float)(((int16_t)receivebuffer[5]<<8)|(int16_t)receivebuffer[6])/10000.0F;
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <Byte2Dec+0xb0>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <Byte2Dec+0xb0>)
 8003af4:	795b      	ldrb	r3, [r3, #5]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <Byte2Dec+0xb0>)
 8003afa:	7992      	ldrb	r2, [r2, #6]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b06:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8003b64 <Byte2Dec+0xb4>
 8003b0a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <Byte2Dec+0xb8>)
 8003b14:	edc3 7a01 	vstr	s15, [r3, #4]
	_motor_dir = receivebuffer[7];
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <Byte2Dec+0xb0>)
 8003b1a:	79db      	ldrb	r3, [r3, #7]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <Byte2Dec+0xbc>)
 8003b20:	601a      	str	r2, [r3, #0]

	if (!(receivebuffer[0] == 200) | !(receivebuffer[8] == 201)){
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <Byte2Dec+0xb0>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2bc8      	cmp	r3, #200	; 0xc8
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <Byte2Dec+0xb0>)
 8003b32:	7a1b      	ldrb	r3, [r3, #8]
 8003b34:	2bc9      	cmp	r3, #201	; 0xc9
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <Byte2Dec+0x9e>
		check_error = 1;
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <Byte2Dec+0xc0>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]

//	else check_error = 0;
//	_motor_dir = 2;
//	_velo[0] = 0.04;
//	_velo[1] = 0.00;
}
 8003b4c:	e002      	b.n	8003b54 <Byte2Dec+0xa4>
		check_error = 0;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <Byte2Dec+0xc0>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	200004b4 	.word	0x200004b4
 8003b64:	461c4000 	.word	0x461c4000
 8003b68:	20000460 	.word	0x20000460
 8003b6c:	20000588 	.word	0x20000588
 8003b70:	2000028a 	.word	0x2000028a

08003b74 <UartTransmit>:
/*
 * Transmit from STM to RP3
 * GPIO: PA2 -> TX
 * 		 PA3 -> RX
*/
void UartTransmit(int16_t encA, int16_t encB, struct data_mpu9250 ss, uint8_t motor_dir){
 8003b74:	b082      	sub	sp, #8
 8003b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b78:	b08f      	sub	sp, #60	; 0x3c
 8003b7a:	af0c      	add	r7, sp, #48	; 0x30
 8003b7c:	f107 0420 	add.w	r4, r7, #32
 8003b80:	e884 000c 	stmia.w	r4, {r2, r3}
 8003b84:	4603      	mov	r3, r0
 8003b86:	80fb      	strh	r3, [r7, #6]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	80bb      	strh	r3, [r7, #4]
	Byte2Dec();
 8003b8c:	f7ff ff90 	bl	8003ab0 <Byte2Dec>
	uart_test[0] = encA;
 8003b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <UartTransmit+0xb8>)
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
	uart_test[1] = encB;
 8003ba2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bae:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <UartTransmit+0xb8>)
 8003bb0:	edc3 7a01 	vstr	s15, [r3, #4]
	uart_test[2] = ss.accel_x;
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <UartTransmit+0xb8>)
 8003bb8:	6093      	str	r3, [r2, #8]
	uart_test[3] = ss.accel_y;
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <UartTransmit+0xb8>)
 8003bbe:	60d3      	str	r3, [r2, #12]
	uart_test[4] = ss.accel_z;
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <UartTransmit+0xb8>)
 8003bc4:	6113      	str	r3, [r2, #16]
	uart_test[5] = ss.gyro_x;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <UartTransmit+0xb8>)
 8003bca:	6153      	str	r3, [r2, #20]
	uart_test[6] = ss.gyro_y;
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <UartTransmit+0xb8>)
 8003bd0:	6193      	str	r3, [r2, #24]
	uart_test[7] = ss.gyro_z;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <UartTransmit+0xb8>)
 8003bd6:	61d3      	str	r3, [r2, #28]
	uart_test[8] = ss.yaw;
 8003bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <UartTransmit+0xb8>)
 8003bdc:	6213      	str	r3, [r2, #32]

	Dec2Bytes(encA, encB, ss, motor_dir);
 8003bde:	f9b7 c004 	ldrsh.w	ip, [r7, #4]
 8003be2:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8003be6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bec:	466d      	mov	r5, sp
 8003bee:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bfa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003bfe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c02:	f107 0320 	add.w	r3, r7, #32
 8003c06:	cb0c      	ldmia	r3, {r2, r3}
 8003c08:	4661      	mov	r1, ip
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f7ff fe1c 	bl	8003848 <Dec2Bytes>
	HAL_UART_Transmit(&huart2, &dataTransmit[0], sizeof(dataTransmit), 1);
 8003c10:	2301      	movs	r3, #1
 8003c12:	221d      	movs	r2, #29
 8003c14:	4906      	ldr	r1, [pc, #24]	; (8003c30 <UartTransmit+0xbc>)
 8003c16:	4807      	ldr	r0, [pc, #28]	; (8003c34 <UartTransmit+0xc0>)
 8003c18:	f003 fb2b 	bl	8007272 <HAL_UART_Transmit>
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003c26:	b002      	add	sp, #8
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200004dc 	.word	0x200004dc
 8003c30:	2000060c 	.word	0x2000060c
 8003c34:	20000814 	.word	0x20000814

08003c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <HAL_Init+0x40>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_Init+0x40>)
 8003c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_Init+0x40>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_Init+0x40>)
 8003c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_Init+0x40>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_Init+0x40>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c60:	2003      	movs	r0, #3
 8003c62:	f000 f94d 	bl	8003f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f000 f808 	bl	8003c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c6c:	f7fd fc7c 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_InitTick+0x54>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_InitTick+0x58>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f965 	bl	8003f6a <HAL_SYSTICK_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00e      	b.n	8003cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d80a      	bhi.n	8003cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb8:	f000 f92d 	bl	8003f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cbc:	4a06      	ldr	r2, [pc, #24]	; (8003cd8 <HAL_InitTick+0x5c>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000094 	.word	0x20000094
 8003cd8:	20000090 	.word	0x20000090

08003cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x20>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_IncTick+0x24>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_IncTick+0x24>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000094 	.word	0x20000094
 8003d00:	2000087c 	.word	0x2000087c

08003d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return uwTick;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_GetTick+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2000087c 	.word	0x2000087c

08003d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d24:	f7ff ffee 	bl	8003d04 <HAL_GetTick>
 8003d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d34:	d005      	beq.n	8003d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_Delay+0x40>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d42:	bf00      	nop
 8003d44:	f7ff ffde 	bl	8003d04 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d8f7      	bhi.n	8003d44 <HAL_Delay+0x28>
  {
  }
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000094 	.word	0x20000094

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db0b      	blt.n	8003dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	f003 021f 	and.w	r2, r3, #31
 8003ddc:	4907      	ldr	r1, [pc, #28]	; (8003dfc <__NVIC_EnableIRQ+0x38>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2001      	movs	r0, #1
 8003de6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	db0a      	blt.n	8003e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	490c      	ldr	r1, [pc, #48]	; (8003e4c <__NVIC_SetPriority+0x4c>)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	0112      	lsls	r2, r2, #4
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	440b      	add	r3, r1
 8003e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e28:	e00a      	b.n	8003e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	4908      	ldr	r1, [pc, #32]	; (8003e50 <__NVIC_SetPriority+0x50>)
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	3b04      	subs	r3, #4
 8003e38:	0112      	lsls	r2, r2, #4
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	761a      	strb	r2, [r3, #24]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000e100 	.word	0xe000e100
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f1c3 0307 	rsb	r3, r3, #7
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	bf28      	it	cs
 8003e72:	2304      	movcs	r3, #4
 8003e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d902      	bls.n	8003e84 <NVIC_EncodePriority+0x30>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3b03      	subs	r3, #3
 8003e82:	e000      	b.n	8003e86 <NVIC_EncodePriority+0x32>
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	401a      	ands	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	43d9      	mvns	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	4313      	orrs	r3, r2
         );
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ecc:	d301      	bcc.n	8003ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <SysTick_Config+0x40>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eda:	210f      	movs	r1, #15
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee0:	f7ff ff8e 	bl	8003e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <SysTick_Config+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <SysTick_Config+0x40>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff29 	bl	8003d60 <__NVIC_SetPriorityGrouping>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f28:	f7ff ff3e 	bl	8003da8 <__NVIC_GetPriorityGrouping>
 8003f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	6978      	ldr	r0, [r7, #20]
 8003f34:	f7ff ff8e 	bl	8003e54 <NVIC_EncodePriority>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff5d 	bl	8003e00 <__NVIC_SetPriority>
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff31 	bl	8003dc4 <__NVIC_EnableIRQ>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ffa2 	bl	8003ebc <SysTick_Config>
 8003f78:	4603      	mov	r3, r0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff feb8 	bl	8003d04 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e099      	b.n	80040d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc0:	e00f      	b.n	8003fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc2:	f7ff fe9f 	bl	8003d04 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d908      	bls.n	8003fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e078      	b.n	80040d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e8      	bne.n	8003fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_DMA_Init+0x158>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	4313      	orrs	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b04      	cmp	r3, #4
 8004074:	d117      	bne.n	80040a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fa91 	bl	80045b0 <DMA_CheckFifoParam>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040a2:	2301      	movs	r3, #1
 80040a4:	e016      	b.n	80040d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa48 	bl	8004544 <DMA_CalcBaseAndBitshift>
 80040b4:	4603      	mov	r3, r0
 80040b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	223f      	movs	r2, #63	; 0x3f
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	f010803f 	.word	0xf010803f

080040e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DMA_Start_IT+0x26>
 8004102:	2302      	movs	r3, #2
 8004104:	e040      	b.n	8004188 <HAL_DMA_Start_IT+0xa8>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d12f      	bne.n	800417a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9da 	bl	80044e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	223f      	movs	r2, #63	; 0x3f
 800413a:	409a      	lsls	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0216 	orr.w	r2, r2, #22
 800414e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e005      	b.n	8004186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d004      	beq.n	80041ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00c      	b.n	80041c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041e0:	4b92      	ldr	r3, [pc, #584]	; (800442c <HAL_DMA_IRQHandler+0x258>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a92      	ldr	r2, [pc, #584]	; (8004430 <HAL_DMA_IRQHandler+0x25c>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2208      	movs	r2, #8
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2208      	movs	r2, #8
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2201      	movs	r2, #1
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	2204      	movs	r2, #4
 800427c:	409a      	lsls	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2210      	movs	r2, #16
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d043      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	2210      	movs	r2, #16
 80042d0:	409a      	lsls	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d018      	beq.n	8004316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d024      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e01f      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e016      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0208 	bic.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2220      	movs	r2, #32
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 808e 	beq.w	8004472 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8086 	beq.w	8004472 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	2220      	movs	r2, #32
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d136      	bne.n	80043ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0216 	bic.w	r2, r2, #22
 800438c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_DMA_IRQHandler+0x1da>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	223f      	movs	r2, #63	; 0x3f
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07d      	beq.n	80044de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
        }
        return;
 80043ea:	e078      	b.n	80044de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01c      	beq.n	8004434 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d108      	bne.n	800441a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d030      	beq.n	8004472 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e02b      	b.n	8004472 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d027      	beq.n	8004472 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e022      	b.n	8004472 <HAL_DMA_IRQHandler+0x29e>
 800442c:	20000000 	.word	0x20000000
 8004430:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d032      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d022      	beq.n	80044cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2205      	movs	r2, #5
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d307      	bcc.n	80044ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f2      	bne.n	800449e <HAL_DMA_IRQHandler+0x2ca>
 80044b8:	e000      	b.n	80044bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
 80044dc:	e000      	b.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044de:	bf00      	nop
    }
  }
}
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b10      	subs	r3, #16
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d909      	bls.n	8004586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58
 8004584:	e007      	b.n	8004596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	aaaaaaab 	.word	0xaaaaaaab
 80045ac:	0800c2e8 	.word	0x0800c2e8

080045b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d855      	bhi.n	800467c <DMA_CheckFifoParam+0xcc>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x28>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045fb 	.word	0x080045fb
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	0800467d 	.word	0x0800467d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d045      	beq.n	8004680 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e042      	b.n	8004680 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004602:	d13f      	bne.n	8004684 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e03c      	b.n	8004684 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d121      	bne.n	8004658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d836      	bhi.n	8004688 <DMA_CheckFifoParam+0xd8>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <DMA_CheckFifoParam+0x70>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	08004637 	.word	0x08004637
 8004628:	08004631 	.word	0x08004631
 800462c:	08004649 	.word	0x08004649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e02f      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d024      	beq.n	800468c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e021      	b.n	800468c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004650:	d11e      	bne.n	8004690 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004656:	e01b      	b.n	8004690 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d902      	bls.n	8004664 <DMA_CheckFifoParam+0xb4>
 800465e:	2b03      	cmp	r3, #3
 8004660:	d003      	beq.n	800466a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004662:	e018      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e015      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
      break;
 800467a:	e00b      	b.n	8004694 <DMA_CheckFifoParam+0xe4>
      break;
 800467c:	bf00      	nop
 800467e:	e00a      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 8004680:	bf00      	nop
 8004682:	e008      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 8004684:	bf00      	nop
 8004686:	e006      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 8004688:	bf00      	nop
 800468a:	e004      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 800468c:	bf00      	nop
 800468e:	e002      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;   
 8004690:	bf00      	nop
 8004692:	e000      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 8004694:	bf00      	nop
    }
  } 
  
  return status; 
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	; 0x24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e159      	b.n	8004974 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c0:	2201      	movs	r2, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	429a      	cmp	r2, r3
 80046da:	f040 8148 	bne.w	800496e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d00b      	beq.n	80046fe <HAL_GPIO_Init+0x5a>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046f2:	2b11      	cmp	r3, #17
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	2203      	movs	r2, #3
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0xfc>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b12      	cmp	r3, #18
 800479e:	d123      	bne.n	80047e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	220f      	movs	r2, #15
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	08da      	lsrs	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3208      	adds	r2, #8
 80047e2:	69b9      	ldr	r1, [r7, #24]
 80047e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0203 	and.w	r2, r3, #3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a2 	beq.w	800496e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_GPIO_Init+0x2e4>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	4a55      	ldr	r2, [pc, #340]	; (8004988 <HAL_GPIO_Init+0x2e4>)
 8004834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004838:	6453      	str	r3, [r2, #68]	; 0x44
 800483a:	4b53      	ldr	r3, [pc, #332]	; (8004988 <HAL_GPIO_Init+0x2e4>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004846:	4a51      	ldr	r2, [pc, #324]	; (800498c <HAL_GPIO_Init+0x2e8>)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	3302      	adds	r3, #2
 800484e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	220f      	movs	r2, #15
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a48      	ldr	r2, [pc, #288]	; (8004990 <HAL_GPIO_Init+0x2ec>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d019      	beq.n	80048a6 <HAL_GPIO_Init+0x202>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a47      	ldr	r2, [pc, #284]	; (8004994 <HAL_GPIO_Init+0x2f0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_GPIO_Init+0x1fe>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a46      	ldr	r2, [pc, #280]	; (8004998 <HAL_GPIO_Init+0x2f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00d      	beq.n	800489e <HAL_GPIO_Init+0x1fa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a45      	ldr	r2, [pc, #276]	; (800499c <HAL_GPIO_Init+0x2f8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <HAL_GPIO_Init+0x1f6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a44      	ldr	r2, [pc, #272]	; (80049a0 <HAL_GPIO_Init+0x2fc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_GPIO_Init+0x1f2>
 8004892:	2304      	movs	r3, #4
 8004894:	e008      	b.n	80048a8 <HAL_GPIO_Init+0x204>
 8004896:	2307      	movs	r3, #7
 8004898:	e006      	b.n	80048a8 <HAL_GPIO_Init+0x204>
 800489a:	2303      	movs	r3, #3
 800489c:	e004      	b.n	80048a8 <HAL_GPIO_Init+0x204>
 800489e:	2302      	movs	r3, #2
 80048a0:	e002      	b.n	80048a8 <HAL_GPIO_Init+0x204>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_GPIO_Init+0x204>
 80048a6:	2300      	movs	r3, #0
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	f002 0203 	and.w	r2, r2, #3
 80048ae:	0092      	lsls	r2, r2, #2
 80048b0:	4093      	lsls	r3, r2
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b8:	4934      	ldr	r1, [pc, #208]	; (800498c <HAL_GPIO_Init+0x2e8>)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	3302      	adds	r3, #2
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c6:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <HAL_GPIO_Init+0x300>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ea:	4a2e      	ldr	r2, [pc, #184]	; (80049a4 <HAL_GPIO_Init+0x300>)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048f0:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <HAL_GPIO_Init+0x300>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004914:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_GPIO_Init+0x300>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800491a:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <HAL_GPIO_Init+0x300>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800493e:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_GPIO_Init+0x300>)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_GPIO_Init+0x300>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004968:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <HAL_GPIO_Init+0x300>)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3301      	adds	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	f67f aea2 	bls.w	80046c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800497c:	bf00      	nop
 800497e:	3724      	adds	r7, #36	; 0x24
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40023800 	.word	0x40023800
 800498c:	40013800 	.word	0x40013800
 8004990:	40020000 	.word	0x40020000
 8004994:	40020400 	.word	0x40020400
 8004998:	40020800 	.word	0x40020800
 800499c:	40020c00 	.word	0x40020c00
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40013c00 	.word	0x40013c00

080049a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
 80049b4:	4613      	mov	r3, r2
 80049b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b8:	787b      	ldrb	r3, [r7, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049c4:	e003      	b.n	80049ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	041a      	lsls	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	619a      	str	r2, [r3, #24]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	887b      	ldrh	r3, [r7, #2]
 80049ec:	401a      	ands	r2, r3
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d104      	bne.n	80049fe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	041a      	lsls	r2, r3, #16
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80049fc:	e002      	b.n	8004a04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e11f      	b.n	8004c62 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fb36 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a74:	f001 fbba 	bl	80061ec <HAL_RCC_GetPCLK1Freq>
 8004a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4a7b      	ldr	r2, [pc, #492]	; (8004c6c <HAL_I2C_Init+0x25c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d807      	bhi.n	8004a94 <HAL_I2C_Init+0x84>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a7a      	ldr	r2, [pc, #488]	; (8004c70 <HAL_I2C_Init+0x260>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf94      	ite	ls
 8004a8c:	2301      	movls	r3, #1
 8004a8e:	2300      	movhi	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e006      	b.n	8004aa2 <HAL_I2C_Init+0x92>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a77      	ldr	r2, [pc, #476]	; (8004c74 <HAL_I2C_Init+0x264>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bf94      	ite	ls
 8004a9c:	2301      	movls	r3, #1
 8004a9e:	2300      	movhi	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0db      	b.n	8004c62 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a72      	ldr	r2, [pc, #456]	; (8004c78 <HAL_I2C_Init+0x268>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	0c9b      	lsrs	r3, r3, #18
 8004ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4a64      	ldr	r2, [pc, #400]	; (8004c6c <HAL_I2C_Init+0x25c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d802      	bhi.n	8004ae4 <HAL_I2C_Init+0xd4>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	e009      	b.n	8004af8 <HAL_I2C_Init+0xe8>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	4a63      	ldr	r2, [pc, #396]	; (8004c7c <HAL_I2C_Init+0x26c>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	3301      	adds	r3, #1
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4956      	ldr	r1, [pc, #344]	; (8004c6c <HAL_I2C_Init+0x25c>)
 8004b14:	428b      	cmp	r3, r1
 8004b16:	d80d      	bhi.n	8004b34 <HAL_I2C_Init+0x124>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e59      	subs	r1, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b26:	3301      	adds	r3, #1
 8004b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	bf38      	it	cc
 8004b30:	2304      	movcc	r3, #4
 8004b32:	e04f      	b.n	8004bd4 <HAL_I2C_Init+0x1c4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d111      	bne.n	8004b60 <HAL_I2C_Init+0x150>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	440b      	add	r3, r1
 8004b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e012      	b.n	8004b86 <HAL_I2C_Init+0x176>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	0099      	lsls	r1, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b76:	3301      	adds	r3, #1
 8004b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Init+0x17e>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e022      	b.n	8004bd4 <HAL_I2C_Init+0x1c4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10e      	bne.n	8004bb4 <HAL_I2C_Init+0x1a4>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1e58      	subs	r0, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	440b      	add	r3, r1
 8004ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	e00f      	b.n	8004bd4 <HAL_I2C_Init+0x1c4>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1e58      	subs	r0, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6859      	ldr	r1, [r3, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	0099      	lsls	r1, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	6809      	ldr	r1, [r1, #0]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6911      	ldr	r1, [r2, #16]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	000186a0 	.word	0x000186a0
 8004c70:	001e847f 	.word	0x001e847f
 8004c74:	003d08ff 	.word	0x003d08ff
 8004c78:	431bde83 	.word	0x431bde83
 8004c7c:	10624dd3 	.word	0x10624dd3

08004c80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c9a:	f7ff f833 	bl	8003d04 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	f040 80d9 	bne.w	8004e60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	496d      	ldr	r1, [pc, #436]	; (8004e6c <HAL_I2C_Mem_Write+0x1ec>)
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fc7f 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0cc      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2C_Mem_Write+0x56>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e0c5      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d007      	beq.n	8004cfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2221      	movs	r2, #33	; 0x21
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2240      	movs	r2, #64	; 0x40
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a3a      	ldr	r2, [r7, #32]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a4d      	ldr	r2, [pc, #308]	; (8004e70 <HAL_I2C_Mem_Write+0x1f0>)
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3e:	88f8      	ldrh	r0, [r7, #6]
 8004d40:	893a      	ldrh	r2, [r7, #8]
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fab6 	bl	80052c0 <I2C_RequestMemoryWrite>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d052      	beq.n	8004e00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e081      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fd00 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e06b      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d11b      	bne.n	8004e00 <HAL_I2C_Mem_Write+0x180>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d017      	beq.n	8004e00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1aa      	bne.n	8004d5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fcec 	bl	80057ea <I2C_WaitOnBTFFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d107      	bne.n	8004e30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e016      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	00100002 	.word	0x00100002
 8004e70:	ffff0000 	.word	0xffff0000

08004e74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	817b      	strh	r3, [r7, #10]
 8004e86:	460b      	mov	r3, r1
 8004e88:	813b      	strh	r3, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e8e:	f7fe ff39 	bl	8003d04 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f040 8208 	bne.w	80052b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2319      	movs	r3, #25
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	497b      	ldr	r1, [pc, #492]	; (8005098 <HAL_I2C_Mem_Read+0x224>)
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fb85 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e1fb      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_I2C_Mem_Read+0x56>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e1f4      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d007      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2222      	movs	r2, #34	; 0x22
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	; (800509c <HAL_I2C_Mem_Read+0x228>)
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f32:	88f8      	ldrh	r0, [r7, #6]
 8004f34:	893a      	ldrh	r2, [r7, #8]
 8004f36:	8979      	ldrh	r1, [r7, #10]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	4603      	mov	r3, r0
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa52 	bl	80053ec <I2C_RequestMemoryRead>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e1b0      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	623b      	str	r3, [r7, #32]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e184      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d11b      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e164      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d11b      	bne.n	8005002 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	e144      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005018:	e138      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	2b03      	cmp	r3, #3
 8005020:	f200 80f1 	bhi.w	8005206 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	2b01      	cmp	r3, #1
 800502a:	d123      	bne.n	8005074 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fc1b 	bl	800586c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e139      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005072:	e10b      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b02      	cmp	r3, #2
 800507a:	d14e      	bne.n	800511a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	2200      	movs	r2, #0
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <HAL_I2C_Mem_Read+0x22c>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa98 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e10e      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
 8005096:	bf00      	nop
 8005098:	00100002 	.word	0x00100002
 800509c:	ffff0000 	.word	0xffff0000
 80050a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005118:	e0b8      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2200      	movs	r2, #0
 8005122:	4966      	ldr	r1, [pc, #408]	; (80052bc <HAL_I2C_Mem_Read+0x448>)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fa49 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0bf      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2200      	movs	r2, #0
 800517e:	494f      	ldr	r1, [pc, #316]	; (80052bc <HAL_I2C_Mem_Read+0x448>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa1b 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e091      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005204:	e042      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fb2e 	bl	800586c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e04c      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d118      	bne.n	800528c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	f47f aec2 	bne.w	800501a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3728      	adds	r7, #40	; 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	00010004 	.word	0x00010004

080052c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	460b      	mov	r3, r1
 80052d4:	813b      	strh	r3, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f960 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005310:	d103      	bne.n	800531a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e05f      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800532c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	492d      	ldr	r1, [pc, #180]	; (80053e8 <I2C_RequestMemoryWrite+0x128>)
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f998 	bl	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e04c      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa02 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b04      	cmp	r3, #4
 8005370:	d107      	bne.n	8005382 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e02b      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538c:	893b      	ldrh	r3, [r7, #8]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	e021      	b.n	80053dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005398:	893b      	ldrh	r3, [r7, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	b29b      	uxth	r3, r3
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f9dc 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d107      	bne.n	80053ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e005      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053d2:	893b      	ldrh	r3, [r7, #8]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	00010002 	.word	0x00010002

080053ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005414:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2200      	movs	r2, #0
 800542e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f8c2 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544c:	d103      	bne.n	8005456 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0aa      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005468:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	4952      	ldr	r1, [pc, #328]	; (80055b8 <I2C_RequestMemoryRead+0x1cc>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f8fa 	bl	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e097      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f964 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d107      	bne.n	80054be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e076      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c8:	893b      	ldrh	r3, [r7, #8]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	e021      	b.n	8005518 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054d4:	893b      	ldrh	r3, [r7, #8]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	6a39      	ldr	r1, [r7, #32]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f93e 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d107      	bne.n	800550a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e050      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800550e:	893b      	ldrh	r3, [r7, #8]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	6a39      	ldr	r1, [r7, #32]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f923 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b04      	cmp	r3, #4
 800552e:	d107      	bne.n	8005540 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e035      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005552:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2200      	movs	r2, #0
 800555c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f82b 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d103      	bne.n	8005584 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e013      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005588:	897b      	ldrh	r3, [r7, #10]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	4906      	ldr	r1, [pc, #24]	; (80055b8 <I2C_RequestMemoryRead+0x1cc>)
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f863 	bl	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	00010002 	.word	0x00010002

080055bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055cc:	e025      	b.n	800561a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d4:	d021      	beq.n	800561a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fe fb95 	bl	8003d04 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d116      	bne.n	800561a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e023      	b.n	8005662 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10d      	bne.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	e00c      	b.n	800565a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	43da      	mvns	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	429a      	cmp	r2, r3
 800565e:	d0b6      	beq.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005678:	e051      	b.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d123      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0204 	orr.w	r2, r3, #4
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e046      	b.n	8005760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d8:	d021      	beq.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fe fb13 	bl	8003d04 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e020      	b.n	8005760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10c      	bne.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e00b      	b.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	43da      	mvns	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d18d      	bne.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005774:	e02d      	b.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f8ce 	bl	8005918 <I2C_IsAcknowledgeFailed>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e02d      	b.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d021      	beq.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fe fab9 	bl	8003d04 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d116      	bne.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e007      	b.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d1ca      	bne.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057f6:	e02d      	b.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f88d 	bl	8005918 <I2C_IsAcknowledgeFailed>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e02d      	b.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580e:	d021      	beq.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005810:	f7fe fa78 	bl	8003d04 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e007      	b.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b04      	cmp	r3, #4
 8005860:	d1ca      	bne.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005878:	e042      	b.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d119      	bne.n	80058bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0210 	mvn.w	r2, #16
 8005890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e029      	b.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058bc:	f7fe fa22 	bl	8003d04 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d116      	bne.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e007      	b.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d1b5      	bne.n	800587a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592e:	d11b      	bne.n	8005968 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005938:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f043 0204 	orr.w	r2, r3, #4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e25b      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d075      	beq.n	8005a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005996:	4ba3      	ldr	r3, [pc, #652]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d00c      	beq.n	80059bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4ba0      	ldr	r3, [pc, #640]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d112      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ae:	4b9d      	ldr	r3, [pc, #628]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ba:	d10b      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	4b99      	ldr	r3, [pc, #612]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05b      	beq.n	8005a80 <HAL_RCC_OscConfig+0x108>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d157      	bne.n	8005a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e236      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x74>
 80059de:	4b91      	ldr	r3, [pc, #580]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a90      	ldr	r2, [pc, #576]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e01d      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x98>
 80059f6:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a8a      	ldr	r2, [pc, #552]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a87      	ldr	r2, [pc, #540]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 8005a10:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a83      	ldr	r2, [pc, #524]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b81      	ldr	r3, [pc, #516]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a80      	ldr	r2, [pc, #512]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fe f968 	bl	8003d04 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a38:	f7fe f964 	bl	8003d04 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	; 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e1fb      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b76      	ldr	r3, [pc, #472]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0xc0>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fe f954 	bl	8003d04 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fe f950 	bl	8003d04 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1e7      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a72:	4b6c      	ldr	r3, [pc, #432]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0xe8>
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d063      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a9a:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b5f      	ldr	r3, [pc, #380]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	4b5c      	ldr	r3, [pc, #368]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e1bb      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aca:	4b56      	ldr	r3, [pc, #344]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4952      	ldr	r1, [pc, #328]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	e03a      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae8:	4b4f      	ldr	r3, [pc, #316]	; (8005c28 <HAL_RCC_OscConfig+0x2b0>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fe f909 	bl	8003d04 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af6:	f7fe f905 	bl	8003d04 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e19c      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b08:	4b46      	ldr	r3, [pc, #280]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4940      	ldr	r1, [pc, #256]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
 8005b28:	e015      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2a:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <HAL_RCC_OscConfig+0x2b0>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fe f8e8 	bl	8003d04 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b38:	f7fe f8e4 	bl	8003d04 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e17b      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4a:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d030      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6a:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <HAL_RCC_OscConfig+0x2b4>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fe f8c8 	bl	8003d04 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fe f8c4 	bl	8003d04 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e15b      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x200>
 8005b96:	e015      	b.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <HAL_RCC_OscConfig+0x2b4>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9e:	f7fe f8b1 	bl	8003d04 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba6:	f7fe f8ad 	bl	8003d04 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e144      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80a0 	beq.w	8005d12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a0e      	ldr	r2, [pc, #56]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_RCC_OscConfig+0x2b8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d121      	bne.n	8005c52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <HAL_RCC_OscConfig+0x2b8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <HAL_RCC_OscConfig+0x2b8>)
 8005c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fe f873 	bl	8003d04 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	e011      	b.n	8005c46 <HAL_RCC_OscConfig+0x2ce>
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800
 8005c28:	42470000 	.word	0x42470000
 8005c2c:	42470e80 	.word	0x42470e80
 8005c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c34:	f7fe f866 	bl	8003d04 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e0fd      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c46:	4b81      	ldr	r3, [pc, #516]	; (8005e4c <HAL_RCC_OscConfig+0x4d4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d106      	bne.n	8005c68 <HAL_RCC_OscConfig+0x2f0>
 8005c5a:	4b7d      	ldr	r3, [pc, #500]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a7c      	ldr	r2, [pc, #496]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
 8005c66:	e01c      	b.n	8005ca2 <HAL_RCC_OscConfig+0x32a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCC_OscConfig+0x312>
 8005c70:	4b77      	ldr	r3, [pc, #476]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	4a76      	ldr	r2, [pc, #472]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c76:	f043 0304 	orr.w	r3, r3, #4
 8005c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c7c:	4b74      	ldr	r3, [pc, #464]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c80:	4a73      	ldr	r2, [pc, #460]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6713      	str	r3, [r2, #112]	; 0x70
 8005c88:	e00b      	b.n	8005ca2 <HAL_RCC_OscConfig+0x32a>
 8005c8a:	4b71      	ldr	r3, [pc, #452]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4a70      	ldr	r2, [pc, #448]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6713      	str	r3, [r2, #112]	; 0x70
 8005c96:	4b6e      	ldr	r3, [pc, #440]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4a6d      	ldr	r2, [pc, #436]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d015      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005caa:	f7fe f82b 	bl	8003d04 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fe f827 	bl	8003d04 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0bc      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc8:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ee      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x33a>
 8005cd4:	e014      	b.n	8005d00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd6:	f7fe f815 	bl	8003d04 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cdc:	e00a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cde:	f7fe f811 	bl	8003d04 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0a6      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf4:	4b56      	ldr	r3, [pc, #344]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ee      	bne.n	8005cde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d06:	4b52      	ldr	r3, [pc, #328]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a51      	ldr	r2, [pc, #324]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8092 	beq.w	8005e40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d1c:	4b4c      	ldr	r3, [pc, #304]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 030c 	and.w	r3, r3, #12
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d05c      	beq.n	8005de2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d141      	bne.n	8005db4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d30:	4b48      	ldr	r3, [pc, #288]	; (8005e54 <HAL_RCC_OscConfig+0x4dc>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fd ffe5 	bl	8003d04 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd ffe1 	bl	8003d04 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e078      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d50:	4b3f      	ldr	r3, [pc, #252]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	019b      	lsls	r3, r3, #6
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	061b      	lsls	r3, r3, #24
 8005d80:	4933      	ldr	r1, [pc, #204]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d86:	4b33      	ldr	r3, [pc, #204]	; (8005e54 <HAL_RCC_OscConfig+0x4dc>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7fd ffba 	bl	8003d04 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d94:	f7fd ffb6 	bl	8003d04 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e04d      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da6:	4b2a      	ldr	r3, [pc, #168]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x41c>
 8005db2:	e045      	b.n	8005e40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db4:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <HAL_RCC_OscConfig+0x4dc>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dba:	f7fd ffa3 	bl	8003d04 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fd ff9f 	bl	8003d04 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e036      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd4:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x44a>
 8005de0:	e02e      	b.n	8005e40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e029      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <HAL_RCC_OscConfig+0x4d8>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d11c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d115      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e16:	4013      	ands	r3, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10d      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	40023800 	.word	0x40023800
 8005e54:	42470060 	.word	0x42470060

08005e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0cc      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b68      	ldr	r3, [pc, #416]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d90c      	bls.n	8005e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b65      	ldr	r3, [pc, #404]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b63      	ldr	r3, [pc, #396]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0b8      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eac:	4b59      	ldr	r3, [pc, #356]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	4a58      	ldr	r2, [pc, #352]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec4:	4b53      	ldr	r3, [pc, #332]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4a52      	ldr	r2, [pc, #328]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed0:	4b50      	ldr	r3, [pc, #320]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	494d      	ldr	r1, [pc, #308]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d044      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b47      	ldr	r3, [pc, #284]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d119      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d107      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e06f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f26:	4b3b      	ldr	r3, [pc, #236]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e067      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 0203 	bic.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4934      	ldr	r1, [pc, #208]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f48:	f7fd fedc 	bl	8003d04 <HAL_GetTick>
 8005f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4e:	e00a      	b.n	8005f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f50:	f7fd fed8 	bl	8003d04 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e04f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 020c 	and.w	r2, r3, #12
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d1eb      	bne.n	8005f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20c      	bcs.n	8005fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e032      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fac:	4b19      	ldr	r3, [pc, #100]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4916      	ldr	r1, [pc, #88]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	490e      	ldr	r1, [pc, #56]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fde:	f000 f821 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff0:	5cd3      	ldrb	r3, [r2, r3]
 8005ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ff6:	4a09      	ldr	r2, [pc, #36]	; (800601c <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd fe3c 	bl	8003c7c <HAL_InitTick>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40023c00 	.word	0x40023c00
 8006014:	40023800 	.word	0x40023800
 8006018:	0800c2d0 	.word	0x0800c2d0
 800601c:	20000000 	.word	0x20000000
 8006020:	20000090 	.word	0x20000090

08006024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	2300      	movs	r3, #0
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800603a:	4b63      	ldr	r3, [pc, #396]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b04      	cmp	r3, #4
 8006044:	d007      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0x32>
 8006046:	2b08      	cmp	r3, #8
 8006048:	d008      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0x38>
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 80b4 	bne.w	80061b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006050:	4b5e      	ldr	r3, [pc, #376]	; (80061cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006052:	60bb      	str	r3, [r7, #8]
       break;
 8006054:	e0b3      	b.n	80061be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006056:	4b5e      	ldr	r3, [pc, #376]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006058:	60bb      	str	r3, [r7, #8]
      break;
 800605a:	e0b0      	b.n	80061be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800605c:	4b5a      	ldr	r3, [pc, #360]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006064:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006066:	4b58      	ldr	r3, [pc, #352]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04a      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006072:	4b55      	ldr	r3, [pc, #340]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	f04f 0400 	mov.w	r4, #0
 800607c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	ea03 0501 	and.w	r5, r3, r1
 8006088:	ea04 0602 	and.w	r6, r4, r2
 800608c:	4629      	mov	r1, r5
 800608e:	4632      	mov	r2, r6
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	f04f 0400 	mov.w	r4, #0
 8006098:	0154      	lsls	r4, r2, #5
 800609a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800609e:	014b      	lsls	r3, r1, #5
 80060a0:	4619      	mov	r1, r3
 80060a2:	4622      	mov	r2, r4
 80060a4:	1b49      	subs	r1, r1, r5
 80060a6:	eb62 0206 	sbc.w	r2, r2, r6
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	0194      	lsls	r4, r2, #6
 80060b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060b8:	018b      	lsls	r3, r1, #6
 80060ba:	1a5b      	subs	r3, r3, r1
 80060bc:	eb64 0402 	sbc.w	r4, r4, r2
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	00e2      	lsls	r2, r4, #3
 80060ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060ce:	00d9      	lsls	r1, r3, #3
 80060d0:	460b      	mov	r3, r1
 80060d2:	4614      	mov	r4, r2
 80060d4:	195b      	adds	r3, r3, r5
 80060d6:	eb44 0406 	adc.w	r4, r4, r6
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	0262      	lsls	r2, r4, #9
 80060e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80060e8:	0259      	lsls	r1, r3, #9
 80060ea:	460b      	mov	r3, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	4621      	mov	r1, r4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	f7fa fd58 	bl	8000bb0 <__aeabi_uldivmod>
 8006100:	4603      	mov	r3, r0
 8006102:	460c      	mov	r4, r1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e049      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006108:	4b2f      	ldr	r3, [pc, #188]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	099b      	lsrs	r3, r3, #6
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	ea03 0501 	and.w	r5, r3, r1
 800611e:	ea04 0602 	and.w	r6, r4, r2
 8006122:	4629      	mov	r1, r5
 8006124:	4632      	mov	r2, r6
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	f04f 0400 	mov.w	r4, #0
 800612e:	0154      	lsls	r4, r2, #5
 8006130:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006134:	014b      	lsls	r3, r1, #5
 8006136:	4619      	mov	r1, r3
 8006138:	4622      	mov	r2, r4
 800613a:	1b49      	subs	r1, r1, r5
 800613c:	eb62 0206 	sbc.w	r2, r2, r6
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	f04f 0400 	mov.w	r4, #0
 8006148:	0194      	lsls	r4, r2, #6
 800614a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800614e:	018b      	lsls	r3, r1, #6
 8006150:	1a5b      	subs	r3, r3, r1
 8006152:	eb64 0402 	sbc.w	r4, r4, r2
 8006156:	f04f 0100 	mov.w	r1, #0
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	00e2      	lsls	r2, r4, #3
 8006160:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006164:	00d9      	lsls	r1, r3, #3
 8006166:	460b      	mov	r3, r1
 8006168:	4614      	mov	r4, r2
 800616a:	195b      	adds	r3, r3, r5
 800616c:	eb44 0406 	adc.w	r4, r4, r6
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	02a2      	lsls	r2, r4, #10
 800617a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800617e:	0299      	lsls	r1, r3, #10
 8006180:	460b      	mov	r3, r1
 8006182:	4614      	mov	r4, r2
 8006184:	4618      	mov	r0, r3
 8006186:	4621      	mov	r1, r4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f04f 0400 	mov.w	r4, #0
 800618e:	461a      	mov	r2, r3
 8006190:	4623      	mov	r3, r4
 8006192:	f7fa fd0d 	bl	8000bb0 <__aeabi_uldivmod>
 8006196:	4603      	mov	r3, r0
 8006198:	460c      	mov	r4, r1
 800619a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	0c1b      	lsrs	r3, r3, #16
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	3301      	adds	r3, #1
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	60bb      	str	r3, [r7, #8]
      break;
 80061b6:	e002      	b.n	80061be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061ba:	60bb      	str	r3, [r7, #8]
      break;
 80061bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061be:	68bb      	ldr	r3, [r7, #8]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	00f42400 	.word	0x00f42400
 80061d0:	007a1200 	.word	0x007a1200

080061d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061da:	681b      	ldr	r3, [r3, #0]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000000 	.word	0x20000000

080061ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061f0:	f7ff fff0 	bl	80061d4 <HAL_RCC_GetHCLKFreq>
 80061f4:	4601      	mov	r1, r0
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	0a9b      	lsrs	r3, r3, #10
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	4a03      	ldr	r2, [pc, #12]	; (8006210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40023800 	.word	0x40023800
 8006210:	0800c2e0 	.word	0x0800c2e0

08006214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006218:	f7ff ffdc 	bl	80061d4 <HAL_RCC_GetHCLKFreq>
 800621c:	4601      	mov	r1, r0
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	0b5b      	lsrs	r3, r3, #13
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	4a03      	ldr	r2, [pc, #12]	; (8006238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800622a:	5cd3      	ldrb	r3, [r2, r3]
 800622c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40023800 	.word	0x40023800
 8006238:	0800c2e0 	.word	0x0800c2e0

0800623c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e01d      	b.n	800628a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fb fc34 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f000 fc0c 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b06      	cmp	r3, #6
 80062ba:	d007      	beq.n	80062cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e01d      	b.n	8006328 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f815 	bl	8006330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f000 fbbd 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fe44 	bl	8006fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a10      	ldr	r2, [pc, #64]	; (80063a4 <HAL_TIM_PWM_Start+0x60>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d107      	bne.n	8006376 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b06      	cmp	r3, #6
 8006386:	d007      	beq.n	8006398 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000

080063a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e083      	b.n	80064c4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fb fbe1 	bl	8001b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f000 fb4b 	bl	8006a98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4313      	orrs	r3, r2
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006448:	f023 030c 	bic.w	r3, r3, #12
 800644c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	4313      	orrs	r3, r2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	031b      	lsls	r3, r3, #12
 8006478:	4313      	orrs	r3, r2
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	4313      	orrs	r3, r2
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_TIM_Encoder_Start+0x16>
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d008      	beq.n	80064f2 <HAL_TIM_Encoder_Start+0x26>
 80064e0:	e00f      	b.n	8006502 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fd7a 	bl	8006fe4 <TIM_CCxChannelCmd>
      break;
 80064f0:	e016      	b.n	8006520 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2201      	movs	r2, #1
 80064f8:	2104      	movs	r1, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fd72 	bl	8006fe4 <TIM_CCxChannelCmd>
      break;
 8006500:	e00e      	b.n	8006520 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2201      	movs	r2, #1
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fd6a 	bl	8006fe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2201      	movs	r2, #1
 8006516:	2104      	movs	r1, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fd63 	bl	8006fe4 <TIM_CCxChannelCmd>
      break;
 800651e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b02      	cmp	r3, #2
 800654e:	d122      	bne.n	8006596 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d11b      	bne.n	8006596 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0202 	mvn.w	r2, #2
 8006566:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa6c 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 8006582:	e005      	b.n	8006590 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fa5e 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa6f 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d122      	bne.n	80065ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d11b      	bne.n	80065ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0204 	mvn.w	r2, #4
 80065ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa42 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 80065d6:	e005      	b.n	80065e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa34 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa45 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d122      	bne.n	800663e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b08      	cmp	r3, #8
 8006604:	d11b      	bne.n	800663e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f06f 0208 	mvn.w	r2, #8
 800660e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2204      	movs	r2, #4
 8006614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fa18 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 800662a:	e005      	b.n	8006638 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa0a 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa1b 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b10      	cmp	r3, #16
 800664a:	d122      	bne.n	8006692 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b10      	cmp	r3, #16
 8006658:	d11b      	bne.n	8006692 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0210 	mvn.w	r2, #16
 8006662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2208      	movs	r2, #8
 8006668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9ee 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 800667e:	e005      	b.n	800668c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f9e0 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9f1 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10e      	bne.n	80066be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d107      	bne.n	80066be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f06f 0201 	mvn.w	r2, #1
 80066b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fa fe29 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fd6d 	bl	80071c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d10e      	bne.n	8006716 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d107      	bne.n	8006716 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800670e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f9b6 	bl	8006a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d10e      	bne.n	8006742 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d107      	bne.n	8006742 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f06f 0220 	mvn.w	r2, #32
 800673a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fd37 	bl	80071b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006762:	2302      	movs	r3, #2
 8006764:	e0b4      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b0c      	cmp	r3, #12
 800677a:	f200 809f 	bhi.w	80068bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067b9 	.word	0x080067b9
 8006788:	080068bd 	.word	0x080068bd
 800678c:	080068bd 	.word	0x080068bd
 8006790:	080068bd 	.word	0x080068bd
 8006794:	080067f9 	.word	0x080067f9
 8006798:	080068bd 	.word	0x080068bd
 800679c:	080068bd 	.word	0x080068bd
 80067a0:	080068bd 	.word	0x080068bd
 80067a4:	0800683b 	.word	0x0800683b
 80067a8:	080068bd 	.word	0x080068bd
 80067ac:	080068bd 	.word	0x080068bd
 80067b0:	080068bd 	.word	0x080068bd
 80067b4:	0800687b 	.word	0x0800687b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 f9ea 	bl	8006b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0208 	orr.w	r2, r2, #8
 80067d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	619a      	str	r2, [r3, #24]
      break;
 80067f6:	e062      	b.n	80068be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fa30 	bl	8006c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6999      	ldr	r1, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	619a      	str	r2, [r3, #24]
      break;
 8006838:	e041      	b.n	80068be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fa7b 	bl	8006d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0208 	orr.w	r2, r2, #8
 8006854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0204 	bic.w	r2, r2, #4
 8006864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69d9      	ldr	r1, [r3, #28]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	61da      	str	r2, [r3, #28]
      break;
 8006878:	e021      	b.n	80068be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fac5 	bl	8006e10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	021a      	lsls	r2, r3, #8
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	61da      	str	r2, [r3, #28]
      break;
 80068ba:	e000      	b.n	80068be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80068bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_ConfigClockSource+0x18>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e0a6      	b.n	8006a3e <HAL_TIM_ConfigClockSource+0x166>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800690e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006916:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d067      	beq.n	80069f8 <HAL_TIM_ConfigClockSource+0x120>
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d80b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x6c>
 800692c:	2b10      	cmp	r3, #16
 800692e:	d073      	beq.n	8006a18 <HAL_TIM_ConfigClockSource+0x140>
 8006930:	2b10      	cmp	r3, #16
 8006932:	d802      	bhi.n	800693a <HAL_TIM_ConfigClockSource+0x62>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d06f      	beq.n	8006a18 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006938:	e078      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800693a:	2b20      	cmp	r3, #32
 800693c:	d06c      	beq.n	8006a18 <HAL_TIM_ConfigClockSource+0x140>
 800693e:	2b30      	cmp	r3, #48	; 0x30
 8006940:	d06a      	beq.n	8006a18 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006942:	e073      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006944:	2b70      	cmp	r3, #112	; 0x70
 8006946:	d00d      	beq.n	8006964 <HAL_TIM_ConfigClockSource+0x8c>
 8006948:	2b70      	cmp	r3, #112	; 0x70
 800694a:	d804      	bhi.n	8006956 <HAL_TIM_ConfigClockSource+0x7e>
 800694c:	2b50      	cmp	r3, #80	; 0x50
 800694e:	d033      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0xe0>
 8006950:	2b60      	cmp	r3, #96	; 0x60
 8006952:	d041      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006954:	e06a      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d066      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x152>
 800695c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006960:	d017      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006962:	e063      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6899      	ldr	r1, [r3, #8]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f000 fb16 	bl	8006fa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006986:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]
      break;
 8006990:	e04c      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6899      	ldr	r1, [r3, #8]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f000 faff 	bl	8006fa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b4:	609a      	str	r2, [r3, #8]
      break;
 80069b6:	e039      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6859      	ldr	r1, [r3, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	461a      	mov	r2, r3
 80069c6:	f000 fa73 	bl	8006eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2150      	movs	r1, #80	; 0x50
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 facc 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 80069d6:	e029      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6859      	ldr	r1, [r3, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f000 fa92 	bl	8006f0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2160      	movs	r1, #96	; 0x60
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fabc 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 80069f6:	e019      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6859      	ldr	r1, [r3, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	461a      	mov	r2, r3
 8006a06:	f000 fa53 	bl	8006eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 faac 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 8006a16:	e009      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f000 faa3 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 8006a28:	e000      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a34      	ldr	r2, [pc, #208]	; (8006b7c <TIM_Base_SetConfig+0xe4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a31      	ldr	r2, [pc, #196]	; (8006b80 <TIM_Base_SetConfig+0xe8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a30      	ldr	r2, [pc, #192]	; (8006b84 <TIM_Base_SetConfig+0xec>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x38>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a2f      	ldr	r2, [pc, #188]	; (8006b88 <TIM_Base_SetConfig+0xf0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a25      	ldr	r2, [pc, #148]	; (8006b7c <TIM_Base_SetConfig+0xe4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01b      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d017      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a22      	ldr	r2, [pc, #136]	; (8006b80 <TIM_Base_SetConfig+0xe8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <TIM_Base_SetConfig+0xec>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00f      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <TIM_Base_SetConfig+0xf0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00b      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <TIM_Base_SetConfig+0xf4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d007      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1e      	ldr	r2, [pc, #120]	; (8006b90 <TIM_Base_SetConfig+0xf8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <TIM_Base_SetConfig+0xfc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d108      	bne.n	8006b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <TIM_Base_SetConfig+0xe4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d103      	bne.n	8006b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	615a      	str	r2, [r3, #20]
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40000400 	.word	0x40000400
 8006b84:	40000800 	.word	0x40000800
 8006b88:	40000c00 	.word	0x40000c00
 8006b8c:	40014000 	.word	0x40014000
 8006b90:	40014400 	.word	0x40014400
 8006b94:	40014800 	.word	0x40014800

08006b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 0302 	bic.w	r3, r3, #2
 8006be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <TIM_OC1_SetConfig+0xc8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d10c      	bne.n	8006c0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0308 	bic.w	r3, r3, #8
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f023 0304 	bic.w	r3, r3, #4
 8006c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <TIM_OC1_SetConfig+0xc8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d111      	bne.n	8006c3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	621a      	str	r2, [r3, #32]
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	40010000 	.word	0x40010000

08006c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0210 	bic.w	r2, r3, #16
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0320 	bic.w	r3, r3, #32
 8006cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <TIM_OC2_SetConfig+0xd4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d10d      	bne.n	8006ce0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <TIM_OC2_SetConfig+0xd4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d113      	bne.n	8006d10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000

08006d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1d      	ldr	r2, [pc, #116]	; (8006e0c <TIM_OC3_SetConfig+0xd0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d10d      	bne.n	8006db6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a14      	ldr	r2, [pc, #80]	; (8006e0c <TIM_OC3_SetConfig+0xd0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d113      	bne.n	8006de6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	621a      	str	r2, [r3, #32]
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	40010000 	.word	0x40010000

08006e10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	031b      	lsls	r3, r3, #12
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <TIM_OC4_SetConfig+0x9c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d109      	bne.n	8006e84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	019b      	lsls	r3, r3, #6
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000

08006eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f023 0201 	bic.w	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f023 030a 	bic.w	r3, r3, #10
 8006eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	621a      	str	r2, [r3, #32]
}
 8006f02:	bf00      	nop
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b087      	sub	sp, #28
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f023 0210 	bic.w	r2, r3, #16
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	031b      	lsls	r3, r3, #12
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f043 0307 	orr.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	021a      	lsls	r2, r3, #8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007044:	2302      	movs	r3, #2
 8007046:	e050      	b.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d018      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007094:	d013      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a18      	ldr	r2, [pc, #96]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00e      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a16      	ldr	r2, [pc, #88]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d009      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a15      	ldr	r2, [pc, #84]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d004      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d10c      	bne.n	80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800
 8007104:	40000c00 	.word	0x40000c00
 8007108:	40014000 	.word	0x40014000

0800710c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007124:	2302      	movs	r3, #2
 8007126:	e03d      	b.n	80071a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e03f      	b.n	800726a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fa fdc8 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2224      	movs	r2, #36	; 0x24
 8007208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800721a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc77 	bl	8007b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b088      	sub	sp, #32
 8007276:	af02      	add	r7, sp, #8
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b20      	cmp	r3, #32
 8007290:	f040 8083 	bne.w	800739a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <HAL_UART_Transmit+0x2e>
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e07b      	b.n	800739c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Transmit+0x40>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e074      	b.n	800739c <HAL_UART_Transmit+0x12a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2221      	movs	r2, #33	; 0x21
 80072c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80072c8:	f7fc fd1c 	bl	8003d04 <HAL_GetTick>
 80072cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	88fa      	ldrh	r2, [r7, #6]
 80072d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	88fa      	ldrh	r2, [r7, #6]
 80072d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80072e2:	e042      	b.n	800736a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d122      	bne.n	8007342 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2200      	movs	r2, #0
 8007304:	2180      	movs	r1, #128	; 0x80
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fa80 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e042      	b.n	800739c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007328:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	3302      	adds	r3, #2
 8007336:	60bb      	str	r3, [r7, #8]
 8007338:	e017      	b.n	800736a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	3301      	adds	r3, #1
 800733e:	60bb      	str	r3, [r7, #8]
 8007340:	e013      	b.n	800736a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	2180      	movs	r1, #128	; 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fa5d 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e01f      	b.n	800739c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	60ba      	str	r2, [r7, #8]
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1b7      	bne.n	80072e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2200      	movs	r2, #0
 800737c:	2140      	movs	r1, #64	; 0x40
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 fa44 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e006      	b.n	800739c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800739a:	2302      	movs	r3, #2
  }
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d166      	bne.n	800748c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UART_Receive_DMA+0x26>
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e05f      	b.n	800748e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Receive_DMA+0x38>
 80073d8:	2302      	movs	r3, #2
 80073da:	e058      	b.n	800748e <HAL_UART_Receive_DMA+0xea>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2222      	movs	r2, #34	; 0x22
 80073fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007402:	4a25      	ldr	r2, [pc, #148]	; (8007498 <HAL_UART_Receive_DMA+0xf4>)
 8007404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	4a24      	ldr	r2, [pc, #144]	; (800749c <HAL_UART_Receive_DMA+0xf8>)
 800740c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	4a23      	ldr	r2, [pc, #140]	; (80074a0 <HAL_UART_Receive_DMA+0xfc>)
 8007414:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	2200      	movs	r2, #0
 800741c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	f7fc fe53 	bl	80040e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007466:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695a      	ldr	r2, [r3, #20]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007486:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	e000      	b.n	800748e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800748c:	2302      	movs	r3, #2
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	080076f5 	.word	0x080076f5
 800749c:	0800775d 	.word	0x0800775d
 80074a0:	08007779 	.word	0x08007779

080074a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_UART_IRQHandler+0x52>
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa8c 	bl	8007a0c <UART_Receive_IT>
      return;
 80074f4:	e0d1      	b.n	800769a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80b0 	beq.w	800765e <HAL_UART_IRQHandler+0x1ba>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <HAL_UART_IRQHandler+0x70>
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 80a5 	beq.w	800765e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_UART_IRQHandler+0x90>
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752c:	f043 0201 	orr.w	r2, r3, #1
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_UART_IRQHandler+0xb0>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	f043 0202 	orr.w	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_UART_IRQHandler+0xd0>
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756c:	f043 0204 	orr.w	r2, r3, #4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00f      	beq.n	800759e <HAL_UART_IRQHandler+0xfa>
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <HAL_UART_IRQHandler+0xee>
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	f043 0208 	orr.w	r2, r3, #8
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d078      	beq.n	8007698 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <HAL_UART_IRQHandler+0x11c>
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa26 	bl	8007a0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <HAL_UART_IRQHandler+0x144>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d031      	beq.n	800764c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f96f 	bl	80078cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d123      	bne.n	8007644 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	2b00      	cmp	r3, #0
 8007612:	d013      	beq.n	800763c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <HAL_UART_IRQHandler+0x1fc>)
 800761a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007620:	4618      	mov	r0, r3
 8007622:	f7fc fdb5 	bl	8004190 <HAL_DMA_Abort_IT>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d016      	beq.n	800765a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	e00e      	b.n	800765a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f84f 	bl	80076e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007642:	e00a      	b.n	800765a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f84b 	bl	80076e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764a:	e006      	b.n	800765a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f847 	bl	80076e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007658:	e01e      	b.n	8007698 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765a:	bf00      	nop
    return;
 800765c:	e01c      	b.n	8007698 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d008      	beq.n	800767a <HAL_UART_IRQHandler+0x1d6>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f95c 	bl	8007930 <UART_Transmit_IT>
    return;
 8007678:	e00f      	b.n	800769a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_UART_IRQHandler+0x1f6>
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9a4 	bl	80079dc <UART_EndTransmit_IT>
    return;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007698:	bf00      	nop
  }
}
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	08007909 	.word	0x08007909

080076a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d11e      	bne.n	800774e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007724:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	695a      	ldr	r2, [r3, #20]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007744:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff ffb2 	bl	80076b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff ffae 	bl	80076cc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b21      	cmp	r3, #33	; 0x21
 80077aa:	d108      	bne.n	80077be <UART_DMAError+0x46>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80077b8:	68b8      	ldr	r0, [r7, #8]
 80077ba:	f000 f871 	bl	80078a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b40      	cmp	r3, #64	; 0x40
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b22      	cmp	r3, #34	; 0x22
 80077de:	d108      	bne.n	80077f2 <UART_DMAError+0x7a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077ec:	68b8      	ldr	r0, [r7, #8]
 80077ee:	f000 f86d 	bl	80078cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f6:	f043 0210 	orr.w	r2, r3, #16
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fe:	68b8      	ldr	r0, [r7, #8]
 8007800:	f7ff ff6e 	bl	80076e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781c:	e02c      	b.n	8007878 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007824:	d028      	beq.n	8007878 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <UART_WaitOnFlagUntilTimeout+0x30>
 800782c:	f7fc fa6a 	bl	8003d04 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	429a      	cmp	r2, r3
 800783a:	d21d      	bcs.n	8007878 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800784a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695a      	ldr	r2, [r3, #20]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0201 	bic.w	r2, r2, #1
 800785a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e00f      	b.n	8007898 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	4013      	ands	r3, r2
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	bf0c      	ite	eq
 8007888:	2301      	moveq	r3, #1
 800788a:	2300      	movne	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	429a      	cmp	r2, r3
 8007894:	d0c3      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80078b6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fedc 	bl	80076e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b21      	cmp	r3, #33	; 0x21
 8007942:	d144      	bne.n	80079ce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d11a      	bne.n	8007984 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007962:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	1c9a      	adds	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	621a      	str	r2, [r3, #32]
 8007976:	e00e      	b.n	8007996 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	621a      	str	r2, [r3, #32]
 8007982:	e008      	b.n	8007996 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	1c59      	adds	r1, r3, #1
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6211      	str	r1, [r2, #32]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4619      	mov	r1, r3
 80079a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e000      	b.n	80079d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079ce:	2302      	movs	r3, #2
  }
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fe51 	bl	80076a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b22      	cmp	r3, #34	; 0x22
 8007a1e:	d171      	bne.n	8007b04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a28:	d123      	bne.n	8007a72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10e      	bne.n	8007a56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
 8007a54:	e029      	b.n	8007aaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a70:	e01b      	b.n	8007aaa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6858      	ldr	r0, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	1c59      	adds	r1, r3, #1
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6291      	str	r1, [r2, #40]	; 0x28
 8007a8a:	b2c2      	uxtb	r2, r0
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e00c      	b.n	8007aaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	1c58      	adds	r0, r3, #1
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	6288      	str	r0, [r1, #40]	; 0x28
 8007aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d120      	bne.n	8007b00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0220 	bic.w	r2, r2, #32
 8007acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007adc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fdde 	bl	80076b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e002      	b.n	8007b06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007b04:	2302      	movs	r3, #2
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b52:	f023 030c 	bic.w	r3, r3, #12
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7e:	f040 818b 	bne.w	8007e98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4ac1      	ldr	r2, [pc, #772]	; (8007e8c <UART_SetConfig+0x37c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d005      	beq.n	8007b98 <UART_SetConfig+0x88>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4abf      	ldr	r2, [pc, #764]	; (8007e90 <UART_SetConfig+0x380>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	f040 80bd 	bne.w	8007d12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b98:	f7fe fb3c 	bl	8006214 <HAL_RCC_GetPCLK2Freq>
 8007b9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	f04f 0600 	mov.w	r6, #0
 8007ba6:	46a8      	mov	r8, r5
 8007ba8:	46b1      	mov	r9, r6
 8007baa:	eb18 0308 	adds.w	r3, r8, r8
 8007bae:	eb49 0409 	adc.w	r4, r9, r9
 8007bb2:	4698      	mov	r8, r3
 8007bb4:	46a1      	mov	r9, r4
 8007bb6:	eb18 0805 	adds.w	r8, r8, r5
 8007bba:	eb49 0906 	adc.w	r9, r9, r6
 8007bbe:	f04f 0100 	mov.w	r1, #0
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4691      	mov	r9, r2
 8007bd6:	eb18 0005 	adds.w	r0, r8, r5
 8007bda:	eb49 0106 	adc.w	r1, r9, r6
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	461d      	mov	r5, r3
 8007be4:	f04f 0600 	mov.w	r6, #0
 8007be8:	196b      	adds	r3, r5, r5
 8007bea:	eb46 0406 	adc.w	r4, r6, r6
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	f7f8 ffdd 	bl	8000bb0 <__aeabi_uldivmod>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4ba5      	ldr	r3, [pc, #660]	; (8007e94 <UART_SetConfig+0x384>)
 8007bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	461d      	mov	r5, r3
 8007c0c:	f04f 0600 	mov.w	r6, #0
 8007c10:	46a9      	mov	r9, r5
 8007c12:	46b2      	mov	sl, r6
 8007c14:	eb19 0309 	adds.w	r3, r9, r9
 8007c18:	eb4a 040a 	adc.w	r4, sl, sl
 8007c1c:	4699      	mov	r9, r3
 8007c1e:	46a2      	mov	sl, r4
 8007c20:	eb19 0905 	adds.w	r9, r9, r5
 8007c24:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c28:	f04f 0100 	mov.w	r1, #0
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c3c:	4689      	mov	r9, r1
 8007c3e:	4692      	mov	sl, r2
 8007c40:	eb19 0005 	adds.w	r0, r9, r5
 8007c44:	eb4a 0106 	adc.w	r1, sl, r6
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	461d      	mov	r5, r3
 8007c4e:	f04f 0600 	mov.w	r6, #0
 8007c52:	196b      	adds	r3, r5, r5
 8007c54:	eb46 0406 	adc.w	r4, r6, r6
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	f7f8 ffa8 	bl	8000bb0 <__aeabi_uldivmod>
 8007c60:	4603      	mov	r3, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	461a      	mov	r2, r3
 8007c66:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <UART_SetConfig+0x384>)
 8007c68:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	2164      	movs	r1, #100	; 0x64
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	3332      	adds	r3, #50	; 0x32
 8007c7a:	4a86      	ldr	r2, [pc, #536]	; (8007e94 <UART_SetConfig+0x384>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c88:	4498      	add	r8, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	461d      	mov	r5, r3
 8007c8e:	f04f 0600 	mov.w	r6, #0
 8007c92:	46a9      	mov	r9, r5
 8007c94:	46b2      	mov	sl, r6
 8007c96:	eb19 0309 	adds.w	r3, r9, r9
 8007c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c9e:	4699      	mov	r9, r3
 8007ca0:	46a2      	mov	sl, r4
 8007ca2:	eb19 0905 	adds.w	r9, r9, r5
 8007ca6:	eb4a 0a06 	adc.w	sl, sl, r6
 8007caa:	f04f 0100 	mov.w	r1, #0
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	4692      	mov	sl, r2
 8007cc2:	eb19 0005 	adds.w	r0, r9, r5
 8007cc6:	eb4a 0106 	adc.w	r1, sl, r6
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	461d      	mov	r5, r3
 8007cd0:	f04f 0600 	mov.w	r6, #0
 8007cd4:	196b      	adds	r3, r5, r5
 8007cd6:	eb46 0406 	adc.w	r4, r6, r6
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4623      	mov	r3, r4
 8007cde:	f7f8 ff67 	bl	8000bb0 <__aeabi_uldivmod>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b6a      	ldr	r3, [pc, #424]	; (8007e94 <UART_SetConfig+0x384>)
 8007cea:	fba3 1302 	umull	r1, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2164      	movs	r1, #100	; 0x64
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	3332      	adds	r3, #50	; 0x32
 8007cfc:	4a65      	ldr	r2, [pc, #404]	; (8007e94 <UART_SetConfig+0x384>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f003 0207 	and.w	r2, r3, #7
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4442      	add	r2, r8
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	e26f      	b.n	80081f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d12:	f7fe fa6b 	bl	80061ec <HAL_RCC_GetPCLK1Freq>
 8007d16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	461d      	mov	r5, r3
 8007d1c:	f04f 0600 	mov.w	r6, #0
 8007d20:	46a8      	mov	r8, r5
 8007d22:	46b1      	mov	r9, r6
 8007d24:	eb18 0308 	adds.w	r3, r8, r8
 8007d28:	eb49 0409 	adc.w	r4, r9, r9
 8007d2c:	4698      	mov	r8, r3
 8007d2e:	46a1      	mov	r9, r4
 8007d30:	eb18 0805 	adds.w	r8, r8, r5
 8007d34:	eb49 0906 	adc.w	r9, r9, r6
 8007d38:	f04f 0100 	mov.w	r1, #0
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d4c:	4688      	mov	r8, r1
 8007d4e:	4691      	mov	r9, r2
 8007d50:	eb18 0005 	adds.w	r0, r8, r5
 8007d54:	eb49 0106 	adc.w	r1, r9, r6
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	f04f 0600 	mov.w	r6, #0
 8007d62:	196b      	adds	r3, r5, r5
 8007d64:	eb46 0406 	adc.w	r4, r6, r6
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4623      	mov	r3, r4
 8007d6c:	f7f8 ff20 	bl	8000bb0 <__aeabi_uldivmod>
 8007d70:	4603      	mov	r3, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b47      	ldr	r3, [pc, #284]	; (8007e94 <UART_SetConfig+0x384>)
 8007d78:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	461d      	mov	r5, r3
 8007d86:	f04f 0600 	mov.w	r6, #0
 8007d8a:	46a9      	mov	r9, r5
 8007d8c:	46b2      	mov	sl, r6
 8007d8e:	eb19 0309 	adds.w	r3, r9, r9
 8007d92:	eb4a 040a 	adc.w	r4, sl, sl
 8007d96:	4699      	mov	r9, r3
 8007d98:	46a2      	mov	sl, r4
 8007d9a:	eb19 0905 	adds.w	r9, r9, r5
 8007d9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007db6:	4689      	mov	r9, r1
 8007db8:	4692      	mov	sl, r2
 8007dba:	eb19 0005 	adds.w	r0, r9, r5
 8007dbe:	eb4a 0106 	adc.w	r1, sl, r6
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	f04f 0600 	mov.w	r6, #0
 8007dcc:	196b      	adds	r3, r5, r5
 8007dce:	eb46 0406 	adc.w	r4, r6, r6
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	f7f8 feeb 	bl	8000bb0 <__aeabi_uldivmod>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	460c      	mov	r4, r1
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <UART_SetConfig+0x384>)
 8007de2:	fba3 1302 	umull	r1, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2164      	movs	r1, #100	; 0x64
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	3332      	adds	r3, #50	; 0x32
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <UART_SetConfig+0x384>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e02:	4498      	add	r8, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	461d      	mov	r5, r3
 8007e08:	f04f 0600 	mov.w	r6, #0
 8007e0c:	46a9      	mov	r9, r5
 8007e0e:	46b2      	mov	sl, r6
 8007e10:	eb19 0309 	adds.w	r3, r9, r9
 8007e14:	eb4a 040a 	adc.w	r4, sl, sl
 8007e18:	4699      	mov	r9, r3
 8007e1a:	46a2      	mov	sl, r4
 8007e1c:	eb19 0905 	adds.w	r9, r9, r5
 8007e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e24:	f04f 0100 	mov.w	r1, #0
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e38:	4689      	mov	r9, r1
 8007e3a:	4692      	mov	sl, r2
 8007e3c:	eb19 0005 	adds.w	r0, r9, r5
 8007e40:	eb4a 0106 	adc.w	r1, sl, r6
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	461d      	mov	r5, r3
 8007e4a:	f04f 0600 	mov.w	r6, #0
 8007e4e:	196b      	adds	r3, r5, r5
 8007e50:	eb46 0406 	adc.w	r4, r6, r6
 8007e54:	461a      	mov	r2, r3
 8007e56:	4623      	mov	r3, r4
 8007e58:	f7f8 feaa 	bl	8000bb0 <__aeabi_uldivmod>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <UART_SetConfig+0x384>)
 8007e64:	fba3 1302 	umull	r1, r3, r3, r2
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	2164      	movs	r1, #100	; 0x64
 8007e6c:	fb01 f303 	mul.w	r3, r1, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	3332      	adds	r3, #50	; 0x32
 8007e76:	4a07      	ldr	r2, [pc, #28]	; (8007e94 <UART_SetConfig+0x384>)
 8007e78:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	f003 0207 	and.w	r2, r3, #7
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4442      	add	r2, r8
 8007e88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007e8a:	e1b2      	b.n	80081f2 <UART_SetConfig+0x6e2>
 8007e8c:	40011000 	.word	0x40011000
 8007e90:	40011400 	.word	0x40011400
 8007e94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4ad7      	ldr	r2, [pc, #860]	; (80081fc <UART_SetConfig+0x6ec>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d005      	beq.n	8007eae <UART_SetConfig+0x39e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4ad6      	ldr	r2, [pc, #856]	; (8008200 <UART_SetConfig+0x6f0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	f040 80d1 	bne.w	8008050 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eae:	f7fe f9b1 	bl	8006214 <HAL_RCC_GetPCLK2Freq>
 8007eb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	469a      	mov	sl, r3
 8007eb8:	f04f 0b00 	mov.w	fp, #0
 8007ebc:	46d0      	mov	r8, sl
 8007ebe:	46d9      	mov	r9, fp
 8007ec0:	eb18 0308 	adds.w	r3, r8, r8
 8007ec4:	eb49 0409 	adc.w	r4, r9, r9
 8007ec8:	4698      	mov	r8, r3
 8007eca:	46a1      	mov	r9, r4
 8007ecc:	eb18 080a 	adds.w	r8, r8, sl
 8007ed0:	eb49 090b 	adc.w	r9, r9, fp
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ee0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ee4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ee8:	4688      	mov	r8, r1
 8007eea:	4691      	mov	r9, r2
 8007eec:	eb1a 0508 	adds.w	r5, sl, r8
 8007ef0:	eb4b 0609 	adc.w	r6, fp, r9
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	f04f 0400 	mov.w	r4, #0
 8007f06:	0094      	lsls	r4, r2, #2
 8007f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f0c:	008b      	lsls	r3, r1, #2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4623      	mov	r3, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	4631      	mov	r1, r6
 8007f16:	f7f8 fe4b 	bl	8000bb0 <__aeabi_uldivmod>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4bb8      	ldr	r3, [pc, #736]	; (8008204 <UART_SetConfig+0x6f4>)
 8007f22:	fba3 2302 	umull	r2, r3, r3, r2
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	469b      	mov	fp, r3
 8007f30:	f04f 0c00 	mov.w	ip, #0
 8007f34:	46d9      	mov	r9, fp
 8007f36:	46e2      	mov	sl, ip
 8007f38:	eb19 0309 	adds.w	r3, r9, r9
 8007f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8007f40:	4699      	mov	r9, r3
 8007f42:	46a2      	mov	sl, r4
 8007f44:	eb19 090b 	adds.w	r9, r9, fp
 8007f48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f4c:	f04f 0100 	mov.w	r1, #0
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f60:	4689      	mov	r9, r1
 8007f62:	4692      	mov	sl, r2
 8007f64:	eb1b 0509 	adds.w	r5, fp, r9
 8007f68:	eb4c 060a 	adc.w	r6, ip, sl
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4619      	mov	r1, r3
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	f04f 0400 	mov.w	r4, #0
 8007f7e:	0094      	lsls	r4, r2, #2
 8007f80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f84:	008b      	lsls	r3, r1, #2
 8007f86:	461a      	mov	r2, r3
 8007f88:	4623      	mov	r3, r4
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	f7f8 fe0f 	bl	8000bb0 <__aeabi_uldivmod>
 8007f92:	4603      	mov	r3, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	461a      	mov	r2, r3
 8007f98:	4b9a      	ldr	r3, [pc, #616]	; (8008204 <UART_SetConfig+0x6f4>)
 8007f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	2164      	movs	r1, #100	; 0x64
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	3332      	adds	r3, #50	; 0x32
 8007fac:	4a95      	ldr	r2, [pc, #596]	; (8008204 <UART_SetConfig+0x6f4>)
 8007fae:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb8:	4498      	add	r8, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	469b      	mov	fp, r3
 8007fbe:	f04f 0c00 	mov.w	ip, #0
 8007fc2:	46d9      	mov	r9, fp
 8007fc4:	46e2      	mov	sl, ip
 8007fc6:	eb19 0309 	adds.w	r3, r9, r9
 8007fca:	eb4a 040a 	adc.w	r4, sl, sl
 8007fce:	4699      	mov	r9, r3
 8007fd0:	46a2      	mov	sl, r4
 8007fd2:	eb19 090b 	adds.w	r9, r9, fp
 8007fd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fda:	f04f 0100 	mov.w	r1, #0
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fee:	4689      	mov	r9, r1
 8007ff0:	4692      	mov	sl, r2
 8007ff2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ff6:	eb4c 060a 	adc.w	r6, ip, sl
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	4619      	mov	r1, r3
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	f04f 0400 	mov.w	r4, #0
 800800c:	0094      	lsls	r4, r2, #2
 800800e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008012:	008b      	lsls	r3, r1, #2
 8008014:	461a      	mov	r2, r3
 8008016:	4623      	mov	r3, r4
 8008018:	4628      	mov	r0, r5
 800801a:	4631      	mov	r1, r6
 800801c:	f7f8 fdc8 	bl	8000bb0 <__aeabi_uldivmod>
 8008020:	4603      	mov	r3, r0
 8008022:	460c      	mov	r4, r1
 8008024:	461a      	mov	r2, r3
 8008026:	4b77      	ldr	r3, [pc, #476]	; (8008204 <UART_SetConfig+0x6f4>)
 8008028:	fba3 1302 	umull	r1, r3, r3, r2
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	2164      	movs	r1, #100	; 0x64
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	3332      	adds	r3, #50	; 0x32
 800803a:	4a72      	ldr	r2, [pc, #456]	; (8008204 <UART_SetConfig+0x6f4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4442      	add	r2, r8
 800804c:	609a      	str	r2, [r3, #8]
 800804e:	e0d0      	b.n	80081f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008050:	f7fe f8cc 	bl	80061ec <HAL_RCC_GetPCLK1Freq>
 8008054:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	469a      	mov	sl, r3
 800805a:	f04f 0b00 	mov.w	fp, #0
 800805e:	46d0      	mov	r8, sl
 8008060:	46d9      	mov	r9, fp
 8008062:	eb18 0308 	adds.w	r3, r8, r8
 8008066:	eb49 0409 	adc.w	r4, r9, r9
 800806a:	4698      	mov	r8, r3
 800806c:	46a1      	mov	r9, r4
 800806e:	eb18 080a 	adds.w	r8, r8, sl
 8008072:	eb49 090b 	adc.w	r9, r9, fp
 8008076:	f04f 0100 	mov.w	r1, #0
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008082:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008086:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800808a:	4688      	mov	r8, r1
 800808c:	4691      	mov	r9, r2
 800808e:	eb1a 0508 	adds.w	r5, sl, r8
 8008092:	eb4b 0609 	adc.w	r6, fp, r9
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4619      	mov	r1, r3
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	f04f 0400 	mov.w	r4, #0
 80080a8:	0094      	lsls	r4, r2, #2
 80080aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080ae:	008b      	lsls	r3, r1, #2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4623      	mov	r3, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	4631      	mov	r1, r6
 80080b8:	f7f8 fd7a 	bl	8000bb0 <__aeabi_uldivmod>
 80080bc:	4603      	mov	r3, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	461a      	mov	r2, r3
 80080c2:	4b50      	ldr	r3, [pc, #320]	; (8008204 <UART_SetConfig+0x6f4>)
 80080c4:	fba3 2302 	umull	r2, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	469b      	mov	fp, r3
 80080d2:	f04f 0c00 	mov.w	ip, #0
 80080d6:	46d9      	mov	r9, fp
 80080d8:	46e2      	mov	sl, ip
 80080da:	eb19 0309 	adds.w	r3, r9, r9
 80080de:	eb4a 040a 	adc.w	r4, sl, sl
 80080e2:	4699      	mov	r9, r3
 80080e4:	46a2      	mov	sl, r4
 80080e6:	eb19 090b 	adds.w	r9, r9, fp
 80080ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80080ee:	f04f 0100 	mov.w	r1, #0
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008102:	4689      	mov	r9, r1
 8008104:	4692      	mov	sl, r2
 8008106:	eb1b 0509 	adds.w	r5, fp, r9
 800810a:	eb4c 060a 	adc.w	r6, ip, sl
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4619      	mov	r1, r3
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	f04f 0400 	mov.w	r4, #0
 8008120:	0094      	lsls	r4, r2, #2
 8008122:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008126:	008b      	lsls	r3, r1, #2
 8008128:	461a      	mov	r2, r3
 800812a:	4623      	mov	r3, r4
 800812c:	4628      	mov	r0, r5
 800812e:	4631      	mov	r1, r6
 8008130:	f7f8 fd3e 	bl	8000bb0 <__aeabi_uldivmod>
 8008134:	4603      	mov	r3, r0
 8008136:	460c      	mov	r4, r1
 8008138:	461a      	mov	r2, r3
 800813a:	4b32      	ldr	r3, [pc, #200]	; (8008204 <UART_SetConfig+0x6f4>)
 800813c:	fba3 1302 	umull	r1, r3, r3, r2
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	2164      	movs	r1, #100	; 0x64
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	3332      	adds	r3, #50	; 0x32
 800814e:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <UART_SetConfig+0x6f4>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815a:	4498      	add	r8, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	469b      	mov	fp, r3
 8008160:	f04f 0c00 	mov.w	ip, #0
 8008164:	46d9      	mov	r9, fp
 8008166:	46e2      	mov	sl, ip
 8008168:	eb19 0309 	adds.w	r3, r9, r9
 800816c:	eb4a 040a 	adc.w	r4, sl, sl
 8008170:	4699      	mov	r9, r3
 8008172:	46a2      	mov	sl, r4
 8008174:	eb19 090b 	adds.w	r9, r9, fp
 8008178:	eb4a 0a0c 	adc.w	sl, sl, ip
 800817c:	f04f 0100 	mov.w	r1, #0
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800818c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008190:	4689      	mov	r9, r1
 8008192:	4692      	mov	sl, r2
 8008194:	eb1b 0509 	adds.w	r5, fp, r9
 8008198:	eb4c 060a 	adc.w	r6, ip, sl
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	f04f 0400 	mov.w	r4, #0
 80081ae:	0094      	lsls	r4, r2, #2
 80081b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081b4:	008b      	lsls	r3, r1, #2
 80081b6:	461a      	mov	r2, r3
 80081b8:	4623      	mov	r3, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	4631      	mov	r1, r6
 80081be:	f7f8 fcf7 	bl	8000bb0 <__aeabi_uldivmod>
 80081c2:	4603      	mov	r3, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	461a      	mov	r2, r3
 80081c8:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <UART_SetConfig+0x6f4>)
 80081ca:	fba3 1302 	umull	r1, r3, r3, r2
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	2164      	movs	r1, #100	; 0x64
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	3332      	adds	r3, #50	; 0x32
 80081dc:	4a09      	ldr	r2, [pc, #36]	; (8008204 <UART_SetConfig+0x6f4>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4442      	add	r2, r8
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	e7ff      	b.n	80081f2 <UART_SetConfig+0x6e2>
 80081f2:	bf00      	nop
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	40011000 	.word	0x40011000
 8008200:	40011400 	.word	0x40011400
 8008204:	51eb851f 	.word	0x51eb851f

08008208 <__errno>:
 8008208:	4b01      	ldr	r3, [pc, #4]	; (8008210 <__errno+0x8>)
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	20000098 	.word	0x20000098

08008214 <__libc_init_array>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	4e0d      	ldr	r6, [pc, #52]	; (800824c <__libc_init_array+0x38>)
 8008218:	4c0d      	ldr	r4, [pc, #52]	; (8008250 <__libc_init_array+0x3c>)
 800821a:	1ba4      	subs	r4, r4, r6
 800821c:	10a4      	asrs	r4, r4, #2
 800821e:	2500      	movs	r5, #0
 8008220:	42a5      	cmp	r5, r4
 8008222:	d109      	bne.n	8008238 <__libc_init_array+0x24>
 8008224:	4e0b      	ldr	r6, [pc, #44]	; (8008254 <__libc_init_array+0x40>)
 8008226:	4c0c      	ldr	r4, [pc, #48]	; (8008258 <__libc_init_array+0x44>)
 8008228:	f004 f844 	bl	800c2b4 <_init>
 800822c:	1ba4      	subs	r4, r4, r6
 800822e:	10a4      	asrs	r4, r4, #2
 8008230:	2500      	movs	r5, #0
 8008232:	42a5      	cmp	r5, r4
 8008234:	d105      	bne.n	8008242 <__libc_init_array+0x2e>
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800823c:	4798      	blx	r3
 800823e:	3501      	adds	r5, #1
 8008240:	e7ee      	b.n	8008220 <__libc_init_array+0xc>
 8008242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008246:	4798      	blx	r3
 8008248:	3501      	adds	r5, #1
 800824a:	e7f2      	b.n	8008232 <__libc_init_array+0x1e>
 800824c:	0800c780 	.word	0x0800c780
 8008250:	0800c780 	.word	0x0800c780
 8008254:	0800c780 	.word	0x0800c780
 8008258:	0800c784 	.word	0x0800c784

0800825c <memset>:
 800825c:	4402      	add	r2, r0
 800825e:	4603      	mov	r3, r0
 8008260:	4293      	cmp	r3, r2
 8008262:	d100      	bne.n	8008266 <memset+0xa>
 8008264:	4770      	bx	lr
 8008266:	f803 1b01 	strb.w	r1, [r3], #1
 800826a:	e7f9      	b.n	8008260 <memset+0x4>

0800826c <__cvt>:
 800826c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	ec55 4b10 	vmov	r4, r5, d0
 8008274:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008276:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800827a:	2d00      	cmp	r5, #0
 800827c:	460e      	mov	r6, r1
 800827e:	4691      	mov	r9, r2
 8008280:	4619      	mov	r1, r3
 8008282:	bfb8      	it	lt
 8008284:	4622      	movlt	r2, r4
 8008286:	462b      	mov	r3, r5
 8008288:	f027 0720 	bic.w	r7, r7, #32
 800828c:	bfbb      	ittet	lt
 800828e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008292:	461d      	movlt	r5, r3
 8008294:	2300      	movge	r3, #0
 8008296:	232d      	movlt	r3, #45	; 0x2d
 8008298:	bfb8      	it	lt
 800829a:	4614      	movlt	r4, r2
 800829c:	2f46      	cmp	r7, #70	; 0x46
 800829e:	700b      	strb	r3, [r1, #0]
 80082a0:	d004      	beq.n	80082ac <__cvt+0x40>
 80082a2:	2f45      	cmp	r7, #69	; 0x45
 80082a4:	d100      	bne.n	80082a8 <__cvt+0x3c>
 80082a6:	3601      	adds	r6, #1
 80082a8:	2102      	movs	r1, #2
 80082aa:	e000      	b.n	80082ae <__cvt+0x42>
 80082ac:	2103      	movs	r1, #3
 80082ae:	ab03      	add	r3, sp, #12
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	ab02      	add	r3, sp, #8
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	4632      	mov	r2, r6
 80082b8:	4653      	mov	r3, sl
 80082ba:	ec45 4b10 	vmov	d0, r4, r5
 80082be:	f000 fbab 	bl	8008a18 <_dtoa_r>
 80082c2:	2f47      	cmp	r7, #71	; 0x47
 80082c4:	4680      	mov	r8, r0
 80082c6:	d102      	bne.n	80082ce <__cvt+0x62>
 80082c8:	f019 0f01 	tst.w	r9, #1
 80082cc:	d026      	beq.n	800831c <__cvt+0xb0>
 80082ce:	2f46      	cmp	r7, #70	; 0x46
 80082d0:	eb08 0906 	add.w	r9, r8, r6
 80082d4:	d111      	bne.n	80082fa <__cvt+0x8e>
 80082d6:	f898 3000 	ldrb.w	r3, [r8]
 80082da:	2b30      	cmp	r3, #48	; 0x30
 80082dc:	d10a      	bne.n	80082f4 <__cvt+0x88>
 80082de:	2200      	movs	r2, #0
 80082e0:	2300      	movs	r3, #0
 80082e2:	4620      	mov	r0, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7f8 fba3 	bl	8000a30 <__aeabi_dcmpeq>
 80082ea:	b918      	cbnz	r0, 80082f4 <__cvt+0x88>
 80082ec:	f1c6 0601 	rsb	r6, r6, #1
 80082f0:	f8ca 6000 	str.w	r6, [sl]
 80082f4:	f8da 3000 	ldr.w	r3, [sl]
 80082f8:	4499      	add	r9, r3
 80082fa:	2200      	movs	r2, #0
 80082fc:	2300      	movs	r3, #0
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 fb95 	bl	8000a30 <__aeabi_dcmpeq>
 8008306:	b938      	cbnz	r0, 8008318 <__cvt+0xac>
 8008308:	2230      	movs	r2, #48	; 0x30
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	454b      	cmp	r3, r9
 800830e:	d205      	bcs.n	800831c <__cvt+0xb0>
 8008310:	1c59      	adds	r1, r3, #1
 8008312:	9103      	str	r1, [sp, #12]
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e7f8      	b.n	800830a <__cvt+0x9e>
 8008318:	f8cd 900c 	str.w	r9, [sp, #12]
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008320:	eba3 0308 	sub.w	r3, r3, r8
 8008324:	4640      	mov	r0, r8
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	b004      	add	sp, #16
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800832e <__exponent>:
 800832e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008330:	2900      	cmp	r1, #0
 8008332:	4604      	mov	r4, r0
 8008334:	bfba      	itte	lt
 8008336:	4249      	neglt	r1, r1
 8008338:	232d      	movlt	r3, #45	; 0x2d
 800833a:	232b      	movge	r3, #43	; 0x2b
 800833c:	2909      	cmp	r1, #9
 800833e:	f804 2b02 	strb.w	r2, [r4], #2
 8008342:	7043      	strb	r3, [r0, #1]
 8008344:	dd20      	ble.n	8008388 <__exponent+0x5a>
 8008346:	f10d 0307 	add.w	r3, sp, #7
 800834a:	461f      	mov	r7, r3
 800834c:	260a      	movs	r6, #10
 800834e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008352:	fb06 1115 	mls	r1, r6, r5, r1
 8008356:	3130      	adds	r1, #48	; 0x30
 8008358:	2d09      	cmp	r5, #9
 800835a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800835e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008362:	4629      	mov	r1, r5
 8008364:	dc09      	bgt.n	800837a <__exponent+0x4c>
 8008366:	3130      	adds	r1, #48	; 0x30
 8008368:	3b02      	subs	r3, #2
 800836a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800836e:	42bb      	cmp	r3, r7
 8008370:	4622      	mov	r2, r4
 8008372:	d304      	bcc.n	800837e <__exponent+0x50>
 8008374:	1a10      	subs	r0, r2, r0
 8008376:	b003      	add	sp, #12
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837a:	4613      	mov	r3, r2
 800837c:	e7e7      	b.n	800834e <__exponent+0x20>
 800837e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008382:	f804 2b01 	strb.w	r2, [r4], #1
 8008386:	e7f2      	b.n	800836e <__exponent+0x40>
 8008388:	2330      	movs	r3, #48	; 0x30
 800838a:	4419      	add	r1, r3
 800838c:	7083      	strb	r3, [r0, #2]
 800838e:	1d02      	adds	r2, r0, #4
 8008390:	70c1      	strb	r1, [r0, #3]
 8008392:	e7ef      	b.n	8008374 <__exponent+0x46>

08008394 <_printf_float>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	b08d      	sub	sp, #52	; 0x34
 800839a:	460c      	mov	r4, r1
 800839c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80083a0:	4616      	mov	r6, r2
 80083a2:	461f      	mov	r7, r3
 80083a4:	4605      	mov	r5, r0
 80083a6:	f001 f8ef 	bl	8009588 <_localeconv_r>
 80083aa:	6803      	ldr	r3, [r0, #0]
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7f7 ff12 	bl	80001d8 <strlen>
 80083b4:	2300      	movs	r3, #0
 80083b6:	930a      	str	r3, [sp, #40]	; 0x28
 80083b8:	f8d8 3000 	ldr.w	r3, [r8]
 80083bc:	9005      	str	r0, [sp, #20]
 80083be:	3307      	adds	r3, #7
 80083c0:	f023 0307 	bic.w	r3, r3, #7
 80083c4:	f103 0208 	add.w	r2, r3, #8
 80083c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083cc:	f8d4 b000 	ldr.w	fp, [r4]
 80083d0:	f8c8 2000 	str.w	r2, [r8]
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083ee:	4ba7      	ldr	r3, [pc, #668]	; (800868c <_printf_float+0x2f8>)
 80083f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f4:	f7f8 fb4e 	bl	8000a94 <__aeabi_dcmpun>
 80083f8:	bb70      	cbnz	r0, 8008458 <_printf_float+0xc4>
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083fe:	4ba3      	ldr	r3, [pc, #652]	; (800868c <_printf_float+0x2f8>)
 8008400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008404:	f7f8 fb28 	bl	8000a58 <__aeabi_dcmple>
 8008408:	bb30      	cbnz	r0, 8008458 <_printf_float+0xc4>
 800840a:	2200      	movs	r2, #0
 800840c:	2300      	movs	r3, #0
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f7f8 fb17 	bl	8000a44 <__aeabi_dcmplt>
 8008416:	b110      	cbz	r0, 800841e <_printf_float+0x8a>
 8008418:	232d      	movs	r3, #45	; 0x2d
 800841a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800841e:	4a9c      	ldr	r2, [pc, #624]	; (8008690 <_printf_float+0x2fc>)
 8008420:	4b9c      	ldr	r3, [pc, #624]	; (8008694 <_printf_float+0x300>)
 8008422:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008426:	bf8c      	ite	hi
 8008428:	4690      	movhi	r8, r2
 800842a:	4698      	movls	r8, r3
 800842c:	2303      	movs	r3, #3
 800842e:	f02b 0204 	bic.w	r2, fp, #4
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	f04f 0900 	mov.w	r9, #0
 800843a:	9700      	str	r7, [sp, #0]
 800843c:	4633      	mov	r3, r6
 800843e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f9e6 	bl	8008814 <_printf_common>
 8008448:	3001      	adds	r0, #1
 800844a:	f040 808d 	bne.w	8008568 <_printf_float+0x1d4>
 800844e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008452:	b00d      	add	sp, #52	; 0x34
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f8 fb18 	bl	8000a94 <__aeabi_dcmpun>
 8008464:	b110      	cbz	r0, 800846c <_printf_float+0xd8>
 8008466:	4a8c      	ldr	r2, [pc, #560]	; (8008698 <_printf_float+0x304>)
 8008468:	4b8c      	ldr	r3, [pc, #560]	; (800869c <_printf_float+0x308>)
 800846a:	e7da      	b.n	8008422 <_printf_float+0x8e>
 800846c:	6861      	ldr	r1, [r4, #4]
 800846e:	1c4b      	adds	r3, r1, #1
 8008470:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008474:	a80a      	add	r0, sp, #40	; 0x28
 8008476:	d13e      	bne.n	80084f6 <_printf_float+0x162>
 8008478:	2306      	movs	r3, #6
 800847a:	6063      	str	r3, [r4, #4]
 800847c:	2300      	movs	r3, #0
 800847e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008482:	ab09      	add	r3, sp, #36	; 0x24
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	ec49 8b10 	vmov	d0, r8, r9
 800848a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800848e:	6022      	str	r2, [r4, #0]
 8008490:	f8cd a004 	str.w	sl, [sp, #4]
 8008494:	6861      	ldr	r1, [r4, #4]
 8008496:	4628      	mov	r0, r5
 8008498:	f7ff fee8 	bl	800826c <__cvt>
 800849c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80084a0:	2b47      	cmp	r3, #71	; 0x47
 80084a2:	4680      	mov	r8, r0
 80084a4:	d109      	bne.n	80084ba <_printf_float+0x126>
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	1cd8      	adds	r0, r3, #3
 80084aa:	db02      	blt.n	80084b2 <_printf_float+0x11e>
 80084ac:	6862      	ldr	r2, [r4, #4]
 80084ae:	4293      	cmp	r3, r2
 80084b0:	dd47      	ble.n	8008542 <_printf_float+0x1ae>
 80084b2:	f1aa 0a02 	sub.w	sl, sl, #2
 80084b6:	fa5f fa8a 	uxtb.w	sl, sl
 80084ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80084be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c0:	d824      	bhi.n	800850c <_printf_float+0x178>
 80084c2:	3901      	subs	r1, #1
 80084c4:	4652      	mov	r2, sl
 80084c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084ca:	9109      	str	r1, [sp, #36]	; 0x24
 80084cc:	f7ff ff2f 	bl	800832e <__exponent>
 80084d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d2:	1813      	adds	r3, r2, r0
 80084d4:	2a01      	cmp	r2, #1
 80084d6:	4681      	mov	r9, r0
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	dc02      	bgt.n	80084e2 <_printf_float+0x14e>
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	07d1      	lsls	r1, r2, #31
 80084e0:	d501      	bpl.n	80084e6 <_printf_float+0x152>
 80084e2:	3301      	adds	r3, #1
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0a5      	beq.n	800843a <_printf_float+0xa6>
 80084ee:	232d      	movs	r3, #45	; 0x2d
 80084f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f4:	e7a1      	b.n	800843a <_printf_float+0xa6>
 80084f6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80084fa:	f000 8177 	beq.w	80087ec <_printf_float+0x458>
 80084fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008502:	d1bb      	bne.n	800847c <_printf_float+0xe8>
 8008504:	2900      	cmp	r1, #0
 8008506:	d1b9      	bne.n	800847c <_printf_float+0xe8>
 8008508:	2301      	movs	r3, #1
 800850a:	e7b6      	b.n	800847a <_printf_float+0xe6>
 800850c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008510:	d119      	bne.n	8008546 <_printf_float+0x1b2>
 8008512:	2900      	cmp	r1, #0
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	dd0c      	ble.n	8008532 <_printf_float+0x19e>
 8008518:	6121      	str	r1, [r4, #16]
 800851a:	b913      	cbnz	r3, 8008522 <_printf_float+0x18e>
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	07d2      	lsls	r2, r2, #31
 8008520:	d502      	bpl.n	8008528 <_printf_float+0x194>
 8008522:	3301      	adds	r3, #1
 8008524:	440b      	add	r3, r1
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852a:	65a3      	str	r3, [r4, #88]	; 0x58
 800852c:	f04f 0900 	mov.w	r9, #0
 8008530:	e7d9      	b.n	80084e6 <_printf_float+0x152>
 8008532:	b913      	cbnz	r3, 800853a <_printf_float+0x1a6>
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	07d0      	lsls	r0, r2, #31
 8008538:	d501      	bpl.n	800853e <_printf_float+0x1aa>
 800853a:	3302      	adds	r3, #2
 800853c:	e7f3      	b.n	8008526 <_printf_float+0x192>
 800853e:	2301      	movs	r3, #1
 8008540:	e7f1      	b.n	8008526 <_printf_float+0x192>
 8008542:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008546:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800854a:	4293      	cmp	r3, r2
 800854c:	db05      	blt.n	800855a <_printf_float+0x1c6>
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	07d1      	lsls	r1, r2, #31
 8008554:	d5e8      	bpl.n	8008528 <_printf_float+0x194>
 8008556:	3301      	adds	r3, #1
 8008558:	e7e5      	b.n	8008526 <_printf_float+0x192>
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfd4      	ite	le
 800855e:	f1c3 0302 	rsble	r3, r3, #2
 8008562:	2301      	movgt	r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	e7de      	b.n	8008526 <_printf_float+0x192>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	055a      	lsls	r2, r3, #21
 800856c:	d407      	bmi.n	800857e <_printf_float+0x1ea>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	4642      	mov	r2, r8
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	d12b      	bne.n	80085d4 <_printf_float+0x240>
 800857c:	e767      	b.n	800844e <_printf_float+0xba>
 800857e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008582:	f240 80dc 	bls.w	800873e <_printf_float+0x3aa>
 8008586:	2200      	movs	r2, #0
 8008588:	2300      	movs	r3, #0
 800858a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800858e:	f7f8 fa4f 	bl	8000a30 <__aeabi_dcmpeq>
 8008592:	2800      	cmp	r0, #0
 8008594:	d033      	beq.n	80085fe <_printf_float+0x26a>
 8008596:	2301      	movs	r3, #1
 8008598:	4a41      	ldr	r2, [pc, #260]	; (80086a0 <_printf_float+0x30c>)
 800859a:	4631      	mov	r1, r6
 800859c:	4628      	mov	r0, r5
 800859e:	47b8      	blx	r7
 80085a0:	3001      	adds	r0, #1
 80085a2:	f43f af54 	beq.w	800844e <_printf_float+0xba>
 80085a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085aa:	429a      	cmp	r2, r3
 80085ac:	db02      	blt.n	80085b4 <_printf_float+0x220>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	07d8      	lsls	r0, r3, #31
 80085b2:	d50f      	bpl.n	80085d4 <_printf_float+0x240>
 80085b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b8      	blx	r7
 80085be:	3001      	adds	r0, #1
 80085c0:	f43f af45 	beq.w	800844e <_printf_float+0xba>
 80085c4:	f04f 0800 	mov.w	r8, #0
 80085c8:	f104 091a 	add.w	r9, r4, #26
 80085cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4543      	cmp	r3, r8
 80085d2:	dc09      	bgt.n	80085e8 <_printf_float+0x254>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	079b      	lsls	r3, r3, #30
 80085d8:	f100 8103 	bmi.w	80087e2 <_printf_float+0x44e>
 80085dc:	68e0      	ldr	r0, [r4, #12]
 80085de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e0:	4298      	cmp	r0, r3
 80085e2:	bfb8      	it	lt
 80085e4:	4618      	movlt	r0, r3
 80085e6:	e734      	b.n	8008452 <_printf_float+0xbe>
 80085e8:	2301      	movs	r3, #1
 80085ea:	464a      	mov	r2, r9
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f af2b 	beq.w	800844e <_printf_float+0xba>
 80085f8:	f108 0801 	add.w	r8, r8, #1
 80085fc:	e7e6      	b.n	80085cc <_printf_float+0x238>
 80085fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	dc2b      	bgt.n	800865c <_printf_float+0x2c8>
 8008604:	2301      	movs	r3, #1
 8008606:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <_printf_float+0x30c>)
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f af1d 	beq.w	800844e <_printf_float+0xba>
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	b923      	cbnz	r3, 8008622 <_printf_float+0x28e>
 8008618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861a:	b913      	cbnz	r3, 8008622 <_printf_float+0x28e>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07d9      	lsls	r1, r3, #31
 8008620:	d5d8      	bpl.n	80085d4 <_printf_float+0x240>
 8008622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f af0e 	beq.w	800844e <_printf_float+0xba>
 8008632:	f04f 0900 	mov.w	r9, #0
 8008636:	f104 0a1a 	add.w	sl, r4, #26
 800863a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863c:	425b      	negs	r3, r3
 800863e:	454b      	cmp	r3, r9
 8008640:	dc01      	bgt.n	8008646 <_printf_float+0x2b2>
 8008642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008644:	e794      	b.n	8008570 <_printf_float+0x1dc>
 8008646:	2301      	movs	r3, #1
 8008648:	4652      	mov	r2, sl
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f aefc 	beq.w	800844e <_printf_float+0xba>
 8008656:	f109 0901 	add.w	r9, r9, #1
 800865a:	e7ee      	b.n	800863a <_printf_float+0x2a6>
 800865c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800865e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008660:	429a      	cmp	r2, r3
 8008662:	bfa8      	it	ge
 8008664:	461a      	movge	r2, r3
 8008666:	2a00      	cmp	r2, #0
 8008668:	4691      	mov	r9, r2
 800866a:	dd07      	ble.n	800867c <_printf_float+0x2e8>
 800866c:	4613      	mov	r3, r2
 800866e:	4631      	mov	r1, r6
 8008670:	4642      	mov	r2, r8
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	f43f aee9 	beq.w	800844e <_printf_float+0xba>
 800867c:	f104 031a 	add.w	r3, r4, #26
 8008680:	f04f 0b00 	mov.w	fp, #0
 8008684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008688:	9306      	str	r3, [sp, #24]
 800868a:	e015      	b.n	80086b8 <_printf_float+0x324>
 800868c:	7fefffff 	.word	0x7fefffff
 8008690:	0800c2f4 	.word	0x0800c2f4
 8008694:	0800c2f0 	.word	0x0800c2f0
 8008698:	0800c2fc 	.word	0x0800c2fc
 800869c:	0800c2f8 	.word	0x0800c2f8
 80086a0:	0800c300 	.word	0x0800c300
 80086a4:	2301      	movs	r3, #1
 80086a6:	9a06      	ldr	r2, [sp, #24]
 80086a8:	4631      	mov	r1, r6
 80086aa:	4628      	mov	r0, r5
 80086ac:	47b8      	blx	r7
 80086ae:	3001      	adds	r0, #1
 80086b0:	f43f aecd 	beq.w	800844e <_printf_float+0xba>
 80086b4:	f10b 0b01 	add.w	fp, fp, #1
 80086b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80086bc:	ebaa 0309 	sub.w	r3, sl, r9
 80086c0:	455b      	cmp	r3, fp
 80086c2:	dcef      	bgt.n	80086a4 <_printf_float+0x310>
 80086c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086c8:	429a      	cmp	r2, r3
 80086ca:	44d0      	add	r8, sl
 80086cc:	db15      	blt.n	80086fa <_printf_float+0x366>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	07da      	lsls	r2, r3, #31
 80086d2:	d412      	bmi.n	80086fa <_printf_float+0x366>
 80086d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086d8:	eba3 020a 	sub.w	r2, r3, sl
 80086dc:	eba3 0a01 	sub.w	sl, r3, r1
 80086e0:	4592      	cmp	sl, r2
 80086e2:	bfa8      	it	ge
 80086e4:	4692      	movge	sl, r2
 80086e6:	f1ba 0f00 	cmp.w	sl, #0
 80086ea:	dc0e      	bgt.n	800870a <_printf_float+0x376>
 80086ec:	f04f 0800 	mov.w	r8, #0
 80086f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f4:	f104 091a 	add.w	r9, r4, #26
 80086f8:	e019      	b.n	800872e <_printf_float+0x39a>
 80086fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	d1e5      	bne.n	80086d4 <_printf_float+0x340>
 8008708:	e6a1      	b.n	800844e <_printf_float+0xba>
 800870a:	4653      	mov	r3, sl
 800870c:	4642      	mov	r2, r8
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	d1e9      	bne.n	80086ec <_printf_float+0x358>
 8008718:	e699      	b.n	800844e <_printf_float+0xba>
 800871a:	2301      	movs	r3, #1
 800871c:	464a      	mov	r2, r9
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	f43f ae92 	beq.w	800844e <_printf_float+0xba>
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	eba3 030a 	sub.w	r3, r3, sl
 8008738:	4543      	cmp	r3, r8
 800873a:	dcee      	bgt.n	800871a <_printf_float+0x386>
 800873c:	e74a      	b.n	80085d4 <_printf_float+0x240>
 800873e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008740:	2a01      	cmp	r2, #1
 8008742:	dc01      	bgt.n	8008748 <_printf_float+0x3b4>
 8008744:	07db      	lsls	r3, r3, #31
 8008746:	d53a      	bpl.n	80087be <_printf_float+0x42a>
 8008748:	2301      	movs	r3, #1
 800874a:	4642      	mov	r2, r8
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	f43f ae7b 	beq.w	800844e <_printf_float+0xba>
 8008758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	f108 0801 	add.w	r8, r8, #1
 8008768:	f43f ae71 	beq.w	800844e <_printf_float+0xba>
 800876c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876e:	2200      	movs	r2, #0
 8008770:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008778:	2300      	movs	r3, #0
 800877a:	f7f8 f959 	bl	8000a30 <__aeabi_dcmpeq>
 800877e:	b9c8      	cbnz	r0, 80087b4 <_printf_float+0x420>
 8008780:	4653      	mov	r3, sl
 8008782:	4642      	mov	r2, r8
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	d10e      	bne.n	80087ac <_printf_float+0x418>
 800878e:	e65e      	b.n	800844e <_printf_float+0xba>
 8008790:	2301      	movs	r3, #1
 8008792:	4652      	mov	r2, sl
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f ae57 	beq.w	800844e <_printf_float+0xba>
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4543      	cmp	r3, r8
 80087aa:	dcf1      	bgt.n	8008790 <_printf_float+0x3fc>
 80087ac:	464b      	mov	r3, r9
 80087ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087b2:	e6de      	b.n	8008572 <_printf_float+0x1de>
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	f104 0a1a 	add.w	sl, r4, #26
 80087bc:	e7f2      	b.n	80087a4 <_printf_float+0x410>
 80087be:	2301      	movs	r3, #1
 80087c0:	e7df      	b.n	8008782 <_printf_float+0x3ee>
 80087c2:	2301      	movs	r3, #1
 80087c4:	464a      	mov	r2, r9
 80087c6:	4631      	mov	r1, r6
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b8      	blx	r7
 80087cc:	3001      	adds	r0, #1
 80087ce:	f43f ae3e 	beq.w	800844e <_printf_float+0xba>
 80087d2:	f108 0801 	add.w	r8, r8, #1
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	4543      	cmp	r3, r8
 80087de:	dcf0      	bgt.n	80087c2 <_printf_float+0x42e>
 80087e0:	e6fc      	b.n	80085dc <_printf_float+0x248>
 80087e2:	f04f 0800 	mov.w	r8, #0
 80087e6:	f104 0919 	add.w	r9, r4, #25
 80087ea:	e7f4      	b.n	80087d6 <_printf_float+0x442>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	f43f ae8b 	beq.w	8008508 <_printf_float+0x174>
 80087f2:	2300      	movs	r3, #0
 80087f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087f8:	ab09      	add	r3, sp, #36	; 0x24
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	ec49 8b10 	vmov	d0, r8, r9
 8008800:	6022      	str	r2, [r4, #0]
 8008802:	f8cd a004 	str.w	sl, [sp, #4]
 8008806:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800880a:	4628      	mov	r0, r5
 800880c:	f7ff fd2e 	bl	800826c <__cvt>
 8008810:	4680      	mov	r8, r0
 8008812:	e648      	b.n	80084a6 <_printf_float+0x112>

08008814 <_printf_common>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	4691      	mov	r9, r2
 800881a:	461f      	mov	r7, r3
 800881c:	688a      	ldr	r2, [r1, #8]
 800881e:	690b      	ldr	r3, [r1, #16]
 8008820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008824:	4293      	cmp	r3, r2
 8008826:	bfb8      	it	lt
 8008828:	4613      	movlt	r3, r2
 800882a:	f8c9 3000 	str.w	r3, [r9]
 800882e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008832:	4606      	mov	r6, r0
 8008834:	460c      	mov	r4, r1
 8008836:	b112      	cbz	r2, 800883e <_printf_common+0x2a>
 8008838:	3301      	adds	r3, #1
 800883a:	f8c9 3000 	str.w	r3, [r9]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	0699      	lsls	r1, r3, #26
 8008842:	bf42      	ittt	mi
 8008844:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008848:	3302      	addmi	r3, #2
 800884a:	f8c9 3000 	strmi.w	r3, [r9]
 800884e:	6825      	ldr	r5, [r4, #0]
 8008850:	f015 0506 	ands.w	r5, r5, #6
 8008854:	d107      	bne.n	8008866 <_printf_common+0x52>
 8008856:	f104 0a19 	add.w	sl, r4, #25
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	f8d9 2000 	ldr.w	r2, [r9]
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	42ab      	cmp	r3, r5
 8008864:	dc28      	bgt.n	80088b8 <_printf_common+0xa4>
 8008866:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	3300      	adds	r3, #0
 800886e:	bf18      	it	ne
 8008870:	2301      	movne	r3, #1
 8008872:	0692      	lsls	r2, r2, #26
 8008874:	d42d      	bmi.n	80088d2 <_printf_common+0xbe>
 8008876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800887a:	4639      	mov	r1, r7
 800887c:	4630      	mov	r0, r6
 800887e:	47c0      	blx	r8
 8008880:	3001      	adds	r0, #1
 8008882:	d020      	beq.n	80088c6 <_printf_common+0xb2>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	68e5      	ldr	r5, [r4, #12]
 8008888:	f8d9 2000 	ldr.w	r2, [r9]
 800888c:	f003 0306 	and.w	r3, r3, #6
 8008890:	2b04      	cmp	r3, #4
 8008892:	bf08      	it	eq
 8008894:	1aad      	subeq	r5, r5, r2
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	6922      	ldr	r2, [r4, #16]
 800889a:	bf0c      	ite	eq
 800889c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a0:	2500      	movne	r5, #0
 80088a2:	4293      	cmp	r3, r2
 80088a4:	bfc4      	itt	gt
 80088a6:	1a9b      	subgt	r3, r3, r2
 80088a8:	18ed      	addgt	r5, r5, r3
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	341a      	adds	r4, #26
 80088b0:	454d      	cmp	r5, r9
 80088b2:	d11a      	bne.n	80088ea <_printf_common+0xd6>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e008      	b.n	80088ca <_printf_common+0xb6>
 80088b8:	2301      	movs	r3, #1
 80088ba:	4652      	mov	r2, sl
 80088bc:	4639      	mov	r1, r7
 80088be:	4630      	mov	r0, r6
 80088c0:	47c0      	blx	r8
 80088c2:	3001      	adds	r0, #1
 80088c4:	d103      	bne.n	80088ce <_printf_common+0xba>
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ce:	3501      	adds	r5, #1
 80088d0:	e7c3      	b.n	800885a <_printf_common+0x46>
 80088d2:	18e1      	adds	r1, r4, r3
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	2030      	movs	r0, #48	; 0x30
 80088d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088dc:	4422      	add	r2, r4
 80088de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e6:	3302      	adds	r3, #2
 80088e8:	e7c5      	b.n	8008876 <_printf_common+0x62>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4622      	mov	r2, r4
 80088ee:	4639      	mov	r1, r7
 80088f0:	4630      	mov	r0, r6
 80088f2:	47c0      	blx	r8
 80088f4:	3001      	adds	r0, #1
 80088f6:	d0e6      	beq.n	80088c6 <_printf_common+0xb2>
 80088f8:	f109 0901 	add.w	r9, r9, #1
 80088fc:	e7d8      	b.n	80088b0 <_printf_common+0x9c>

080088fe <quorem>:
 80088fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008902:	6903      	ldr	r3, [r0, #16]
 8008904:	690c      	ldr	r4, [r1, #16]
 8008906:	42a3      	cmp	r3, r4
 8008908:	4680      	mov	r8, r0
 800890a:	f2c0 8082 	blt.w	8008a12 <quorem+0x114>
 800890e:	3c01      	subs	r4, #1
 8008910:	f101 0714 	add.w	r7, r1, #20
 8008914:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008918:	f100 0614 	add.w	r6, r0, #20
 800891c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008920:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008924:	eb06 030c 	add.w	r3, r6, ip
 8008928:	3501      	adds	r5, #1
 800892a:	eb07 090c 	add.w	r9, r7, ip
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	fbb0 f5f5 	udiv	r5, r0, r5
 8008934:	b395      	cbz	r5, 800899c <quorem+0x9e>
 8008936:	f04f 0a00 	mov.w	sl, #0
 800893a:	4638      	mov	r0, r7
 800893c:	46b6      	mov	lr, r6
 800893e:	46d3      	mov	fp, sl
 8008940:	f850 2b04 	ldr.w	r2, [r0], #4
 8008944:	b293      	uxth	r3, r2
 8008946:	fb05 a303 	mla	r3, r5, r3, sl
 800894a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800894e:	b29b      	uxth	r3, r3
 8008950:	ebab 0303 	sub.w	r3, fp, r3
 8008954:	0c12      	lsrs	r2, r2, #16
 8008956:	f8de b000 	ldr.w	fp, [lr]
 800895a:	fb05 a202 	mla	r2, r5, r2, sl
 800895e:	fa13 f38b 	uxtah	r3, r3, fp
 8008962:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008966:	fa1f fb82 	uxth.w	fp, r2
 800896a:	f8de 2000 	ldr.w	r2, [lr]
 800896e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008972:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008976:	b29b      	uxth	r3, r3
 8008978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800897c:	4581      	cmp	r9, r0
 800897e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008982:	f84e 3b04 	str.w	r3, [lr], #4
 8008986:	d2db      	bcs.n	8008940 <quorem+0x42>
 8008988:	f856 300c 	ldr.w	r3, [r6, ip]
 800898c:	b933      	cbnz	r3, 800899c <quorem+0x9e>
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	3b04      	subs	r3, #4
 8008992:	429e      	cmp	r6, r3
 8008994:	461a      	mov	r2, r3
 8008996:	d330      	bcc.n	80089fa <quorem+0xfc>
 8008998:	f8c8 4010 	str.w	r4, [r8, #16]
 800899c:	4640      	mov	r0, r8
 800899e:	f001 f829 	bl	80099f4 <__mcmp>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	db25      	blt.n	80089f2 <quorem+0xf4>
 80089a6:	3501      	adds	r5, #1
 80089a8:	4630      	mov	r0, r6
 80089aa:	f04f 0c00 	mov.w	ip, #0
 80089ae:	f857 2b04 	ldr.w	r2, [r7], #4
 80089b2:	f8d0 e000 	ldr.w	lr, [r0]
 80089b6:	b293      	uxth	r3, r2
 80089b8:	ebac 0303 	sub.w	r3, ip, r3
 80089bc:	0c12      	lsrs	r2, r2, #16
 80089be:	fa13 f38e 	uxtah	r3, r3, lr
 80089c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089d0:	45b9      	cmp	r9, r7
 80089d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089d6:	f840 3b04 	str.w	r3, [r0], #4
 80089da:	d2e8      	bcs.n	80089ae <quorem+0xb0>
 80089dc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80089e0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80089e4:	b92a      	cbnz	r2, 80089f2 <quorem+0xf4>
 80089e6:	3b04      	subs	r3, #4
 80089e8:	429e      	cmp	r6, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	d30b      	bcc.n	8008a06 <quorem+0x108>
 80089ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80089f2:	4628      	mov	r0, r5
 80089f4:	b003      	add	sp, #12
 80089f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	3b04      	subs	r3, #4
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	d1ca      	bne.n	8008998 <quorem+0x9a>
 8008a02:	3c01      	subs	r4, #1
 8008a04:	e7c5      	b.n	8008992 <quorem+0x94>
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	3b04      	subs	r3, #4
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	d1ef      	bne.n	80089ee <quorem+0xf0>
 8008a0e:	3c01      	subs	r4, #1
 8008a10:	e7ea      	b.n	80089e8 <quorem+0xea>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e7ee      	b.n	80089f4 <quorem+0xf6>
	...

08008a18 <_dtoa_r>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	ec57 6b10 	vmov	r6, r7, d0
 8008a20:	b097      	sub	sp, #92	; 0x5c
 8008a22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a24:	9106      	str	r1, [sp, #24]
 8008a26:	4604      	mov	r4, r0
 8008a28:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008a2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a30:	e9cd 6700 	strd	r6, r7, [sp]
 8008a34:	b93d      	cbnz	r5, 8008a46 <_dtoa_r+0x2e>
 8008a36:	2010      	movs	r0, #16
 8008a38:	f000 fdb4 	bl	80095a4 <malloc>
 8008a3c:	6260      	str	r0, [r4, #36]	; 0x24
 8008a3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a42:	6005      	str	r5, [r0, #0]
 8008a44:	60c5      	str	r5, [r0, #12]
 8008a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a48:	6819      	ldr	r1, [r3, #0]
 8008a4a:	b151      	cbz	r1, 8008a62 <_dtoa_r+0x4a>
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	604a      	str	r2, [r1, #4]
 8008a50:	2301      	movs	r3, #1
 8008a52:	4093      	lsls	r3, r2
 8008a54:	608b      	str	r3, [r1, #8]
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fdeb 	bl	8009632 <_Bfree>
 8008a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	1e3b      	subs	r3, r7, #0
 8008a64:	bfbb      	ittet	lt
 8008a66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a6a:	9301      	strlt	r3, [sp, #4]
 8008a6c:	2300      	movge	r3, #0
 8008a6e:	2201      	movlt	r2, #1
 8008a70:	bfac      	ite	ge
 8008a72:	f8c8 3000 	strge.w	r3, [r8]
 8008a76:	f8c8 2000 	strlt.w	r2, [r8]
 8008a7a:	4baf      	ldr	r3, [pc, #700]	; (8008d38 <_dtoa_r+0x320>)
 8008a7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a80:	ea33 0308 	bics.w	r3, r3, r8
 8008a84:	d114      	bne.n	8008ab0 <_dtoa_r+0x98>
 8008a86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a88:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	b923      	cbnz	r3, 8008a9c <_dtoa_r+0x84>
 8008a92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f000 8542 	beq.w	8009520 <_dtoa_r+0xb08>
 8008a9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008d4c <_dtoa_r+0x334>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8544 	beq.w	8009530 <_dtoa_r+0xb18>
 8008aa8:	f10b 0303 	add.w	r3, fp, #3
 8008aac:	f000 bd3e 	b.w	800952c <_dtoa_r+0xb14>
 8008ab0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f7 ffb8 	bl	8000a30 <__aeabi_dcmpeq>
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	b168      	cbz	r0, 8008ae0 <_dtoa_r+0xc8>
 8008ac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8524 	beq.w	800951a <_dtoa_r+0xb02>
 8008ad2:	4b9a      	ldr	r3, [pc, #616]	; (8008d3c <_dtoa_r+0x324>)
 8008ad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ad6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	f000 bd28 	b.w	8009530 <_dtoa_r+0xb18>
 8008ae0:	aa14      	add	r2, sp, #80	; 0x50
 8008ae2:	a915      	add	r1, sp, #84	; 0x54
 8008ae4:	ec47 6b10 	vmov	d0, r6, r7
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fffa 	bl	8009ae2 <__d2b>
 8008aee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008af2:	9004      	str	r0, [sp, #16]
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	d07c      	beq.n	8008bf2 <_dtoa_r+0x1da>
 8008af8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008afc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008b00:	46b2      	mov	sl, r6
 8008b02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4b8b      	ldr	r3, [pc, #556]	; (8008d40 <_dtoa_r+0x328>)
 8008b12:	4650      	mov	r0, sl
 8008b14:	4659      	mov	r1, fp
 8008b16:	f7f7 fb6b 	bl	80001f0 <__aeabi_dsub>
 8008b1a:	a381      	add	r3, pc, #516	; (adr r3, 8008d20 <_dtoa_r+0x308>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 fd1e 	bl	8000560 <__aeabi_dmul>
 8008b24:	a380      	add	r3, pc, #512	; (adr r3, 8008d28 <_dtoa_r+0x310>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f7f7 fb63 	bl	80001f4 <__adddf3>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	4628      	mov	r0, r5
 8008b32:	460f      	mov	r7, r1
 8008b34:	f7f7 fcaa 	bl	800048c <__aeabi_i2d>
 8008b38:	a37d      	add	r3, pc, #500	; (adr r3, 8008d30 <_dtoa_r+0x318>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fd0f 	bl	8000560 <__aeabi_dmul>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 fb53 	bl	80001f4 <__adddf3>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460f      	mov	r7, r1
 8008b52:	f7f7 ffb5 	bl	8000ac0 <__aeabi_d2iz>
 8008b56:	2200      	movs	r2, #0
 8008b58:	4682      	mov	sl, r0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 ff70 	bl	8000a44 <__aeabi_dcmplt>
 8008b64:	b148      	cbz	r0, 8008b7a <_dtoa_r+0x162>
 8008b66:	4650      	mov	r0, sl
 8008b68:	f7f7 fc90 	bl	800048c <__aeabi_i2d>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 ff5e 	bl	8000a30 <__aeabi_dcmpeq>
 8008b74:	b908      	cbnz	r0, 8008b7a <_dtoa_r+0x162>
 8008b76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b7a:	f1ba 0f16 	cmp.w	sl, #22
 8008b7e:	d859      	bhi.n	8008c34 <_dtoa_r+0x21c>
 8008b80:	4970      	ldr	r1, [pc, #448]	; (8008d44 <_dtoa_r+0x32c>)
 8008b82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b8e:	f7f7 ff77 	bl	8000a80 <__aeabi_dcmpgt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d050      	beq.n	8008c38 <_dtoa_r+0x220>
 8008b96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ba0:	1b5d      	subs	r5, r3, r5
 8008ba2:	f1b5 0801 	subs.w	r8, r5, #1
 8008ba6:	bf49      	itett	mi
 8008ba8:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bac:	2300      	movpl	r3, #0
 8008bae:	9305      	strmi	r3, [sp, #20]
 8008bb0:	f04f 0800 	movmi.w	r8, #0
 8008bb4:	bf58      	it	pl
 8008bb6:	9305      	strpl	r3, [sp, #20]
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	db3e      	blt.n	8008c3c <_dtoa_r+0x224>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	44d0      	add	r8, sl
 8008bc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	9b06      	ldr	r3, [sp, #24]
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	f200 8090 	bhi.w	8008cf0 <_dtoa_r+0x2d8>
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	bfc4      	itt	gt
 8008bd4:	3b04      	subgt	r3, #4
 8008bd6:	9306      	strgt	r3, [sp, #24]
 8008bd8:	9b06      	ldr	r3, [sp, #24]
 8008bda:	f1a3 0302 	sub.w	r3, r3, #2
 8008bde:	bfcc      	ite	gt
 8008be0:	2500      	movgt	r5, #0
 8008be2:	2501      	movle	r5, #1
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	f200 808f 	bhi.w	8008d08 <_dtoa_r+0x2f0>
 8008bea:	e8df f003 	tbb	[pc, r3]
 8008bee:	7f7d      	.short	0x7f7d
 8008bf0:	7131      	.short	0x7131
 8008bf2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008bf6:	441d      	add	r5, r3
 8008bf8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008bfc:	2820      	cmp	r0, #32
 8008bfe:	dd13      	ble.n	8008c28 <_dtoa_r+0x210>
 8008c00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008c04:	9b00      	ldr	r3, [sp, #0]
 8008c06:	fa08 f800 	lsl.w	r8, r8, r0
 8008c0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008c0e:	fa23 f000 	lsr.w	r0, r3, r0
 8008c12:	ea48 0000 	orr.w	r0, r8, r0
 8008c16:	f7f7 fc29 	bl	800046c <__aeabi_ui2d>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4682      	mov	sl, r0
 8008c1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008c22:	3d01      	subs	r5, #1
 8008c24:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c26:	e772      	b.n	8008b0e <_dtoa_r+0xf6>
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	f1c0 0020 	rsb	r0, r0, #32
 8008c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c32:	e7f0      	b.n	8008c16 <_dtoa_r+0x1fe>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e7b1      	b.n	8008b9c <_dtoa_r+0x184>
 8008c38:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c3a:	e7b0      	b.n	8008b9e <_dtoa_r+0x186>
 8008c3c:	9b05      	ldr	r3, [sp, #20]
 8008c3e:	eba3 030a 	sub.w	r3, r3, sl
 8008c42:	9305      	str	r3, [sp, #20]
 8008c44:	f1ca 0300 	rsb	r3, sl, #0
 8008c48:	9307      	str	r3, [sp, #28]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c4e:	e7bb      	b.n	8008bc8 <_dtoa_r+0x1b0>
 8008c50:	2301      	movs	r3, #1
 8008c52:	930a      	str	r3, [sp, #40]	; 0x28
 8008c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dd59      	ble.n	8008d0e <_dtoa_r+0x2f6>
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	4699      	mov	r9, r3
 8008c5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c60:	2200      	movs	r2, #0
 8008c62:	6072      	str	r2, [r6, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	f102 0014 	add.w	r0, r2, #20
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	6871      	ldr	r1, [r6, #4]
 8008c6e:	d953      	bls.n	8008d18 <_dtoa_r+0x300>
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fcaa 	bl	80095ca <_Balloc>
 8008c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c78:	6030      	str	r0, [r6, #0]
 8008c7a:	f1b9 0f0e 	cmp.w	r9, #14
 8008c7e:	f8d3 b000 	ldr.w	fp, [r3]
 8008c82:	f200 80e6 	bhi.w	8008e52 <_dtoa_r+0x43a>
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	f000 80e3 	beq.w	8008e52 <_dtoa_r+0x43a>
 8008c8c:	ed9d 7b00 	vldr	d7, [sp]
 8008c90:	f1ba 0f00 	cmp.w	sl, #0
 8008c94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008c98:	dd74      	ble.n	8008d84 <_dtoa_r+0x36c>
 8008c9a:	4a2a      	ldr	r2, [pc, #168]	; (8008d44 <_dtoa_r+0x32c>)
 8008c9c:	f00a 030f 	and.w	r3, sl, #15
 8008ca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ca4:	ed93 7b00 	vldr	d7, [r3]
 8008ca8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008cac:	06f0      	lsls	r0, r6, #27
 8008cae:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008cb2:	d565      	bpl.n	8008d80 <_dtoa_r+0x368>
 8008cb4:	4b24      	ldr	r3, [pc, #144]	; (8008d48 <_dtoa_r+0x330>)
 8008cb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cbe:	f7f7 fd79 	bl	80007b4 <__aeabi_ddiv>
 8008cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8008cc6:	f006 060f 	and.w	r6, r6, #15
 8008cca:	2503      	movs	r5, #3
 8008ccc:	4f1e      	ldr	r7, [pc, #120]	; (8008d48 <_dtoa_r+0x330>)
 8008cce:	e04c      	b.n	8008d6a <_dtoa_r+0x352>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd6:	4453      	add	r3, sl
 8008cd8:	f103 0901 	add.w	r9, r3, #1
 8008cdc:	9302      	str	r3, [sp, #8]
 8008cde:	464b      	mov	r3, r9
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	bfb8      	it	lt
 8008ce4:	2301      	movlt	r3, #1
 8008ce6:	e7ba      	b.n	8008c5e <_dtoa_r+0x246>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e7b2      	b.n	8008c52 <_dtoa_r+0x23a>
 8008cec:	2300      	movs	r3, #0
 8008cee:	e7f0      	b.n	8008cd2 <_dtoa_r+0x2ba>
 8008cf0:	2501      	movs	r5, #1
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9306      	str	r3, [sp, #24]
 8008cf6:	950a      	str	r5, [sp, #40]	; 0x28
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cfc:	9302      	str	r3, [sp, #8]
 8008cfe:	4699      	mov	r9, r3
 8008d00:	2200      	movs	r2, #0
 8008d02:	2312      	movs	r3, #18
 8008d04:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d06:	e7aa      	b.n	8008c5e <_dtoa_r+0x246>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d0c:	e7f4      	b.n	8008cf8 <_dtoa_r+0x2e0>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	9302      	str	r3, [sp, #8]
 8008d12:	4699      	mov	r9, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	e7f5      	b.n	8008d04 <_dtoa_r+0x2ec>
 8008d18:	3101      	adds	r1, #1
 8008d1a:	6071      	str	r1, [r6, #4]
 8008d1c:	0052      	lsls	r2, r2, #1
 8008d1e:	e7a2      	b.n	8008c66 <_dtoa_r+0x24e>
 8008d20:	636f4361 	.word	0x636f4361
 8008d24:	3fd287a7 	.word	0x3fd287a7
 8008d28:	8b60c8b3 	.word	0x8b60c8b3
 8008d2c:	3fc68a28 	.word	0x3fc68a28
 8008d30:	509f79fb 	.word	0x509f79fb
 8008d34:	3fd34413 	.word	0x3fd34413
 8008d38:	7ff00000 	.word	0x7ff00000
 8008d3c:	0800c301 	.word	0x0800c301
 8008d40:	3ff80000 	.word	0x3ff80000
 8008d44:	0800c338 	.word	0x0800c338
 8008d48:	0800c310 	.word	0x0800c310
 8008d4c:	0800c30b 	.word	0x0800c30b
 8008d50:	07f1      	lsls	r1, r6, #31
 8008d52:	d508      	bpl.n	8008d66 <_dtoa_r+0x34e>
 8008d54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5c:	f7f7 fc00 	bl	8000560 <__aeabi_dmul>
 8008d60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d64:	3501      	adds	r5, #1
 8008d66:	1076      	asrs	r6, r6, #1
 8008d68:	3708      	adds	r7, #8
 8008d6a:	2e00      	cmp	r6, #0
 8008d6c:	d1f0      	bne.n	8008d50 <_dtoa_r+0x338>
 8008d6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d76:	f7f7 fd1d 	bl	80007b4 <__aeabi_ddiv>
 8008d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d7e:	e01a      	b.n	8008db6 <_dtoa_r+0x39e>
 8008d80:	2502      	movs	r5, #2
 8008d82:	e7a3      	b.n	8008ccc <_dtoa_r+0x2b4>
 8008d84:	f000 80a0 	beq.w	8008ec8 <_dtoa_r+0x4b0>
 8008d88:	f1ca 0600 	rsb	r6, sl, #0
 8008d8c:	4b9f      	ldr	r3, [pc, #636]	; (800900c <_dtoa_r+0x5f4>)
 8008d8e:	4fa0      	ldr	r7, [pc, #640]	; (8009010 <_dtoa_r+0x5f8>)
 8008d90:	f006 020f 	and.w	r2, r6, #15
 8008d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008da0:	f7f7 fbde 	bl	8000560 <__aeabi_dmul>
 8008da4:	e9cd 0100 	strd	r0, r1, [sp]
 8008da8:	1136      	asrs	r6, r6, #4
 8008daa:	2300      	movs	r3, #0
 8008dac:	2502      	movs	r5, #2
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	d17f      	bne.n	8008eb2 <_dtoa_r+0x49a>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e1      	bne.n	8008d7a <_dtoa_r+0x362>
 8008db6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8087 	beq.w	8008ecc <_dtoa_r+0x4b4>
 8008dbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4b93      	ldr	r3, [pc, #588]	; (8009014 <_dtoa_r+0x5fc>)
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	f7f7 fe3b 	bl	8000a44 <__aeabi_dcmplt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d07c      	beq.n	8008ecc <_dtoa_r+0x4b4>
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	d079      	beq.n	8008ecc <_dtoa_r+0x4b4>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dd35      	ble.n	8008e4a <_dtoa_r+0x432>
 8008dde:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008de2:	9308      	str	r3, [sp, #32]
 8008de4:	4639      	mov	r1, r7
 8008de6:	2200      	movs	r2, #0
 8008de8:	4b8b      	ldr	r3, [pc, #556]	; (8009018 <_dtoa_r+0x600>)
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7f7 fbb8 	bl	8000560 <__aeabi_dmul>
 8008df0:	e9cd 0100 	strd	r0, r1, [sp]
 8008df4:	9f02      	ldr	r7, [sp, #8]
 8008df6:	3501      	adds	r5, #1
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7f7 fb47 	bl	800048c <__aeabi_i2d>
 8008dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e02:	f7f7 fbad 	bl	8000560 <__aeabi_dmul>
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b84      	ldr	r3, [pc, #528]	; (800901c <_dtoa_r+0x604>)
 8008e0a:	f7f7 f9f3 	bl	80001f4 <__adddf3>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e14:	2f00      	cmp	r7, #0
 8008e16:	d15d      	bne.n	8008ed4 <_dtoa_r+0x4bc>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b81      	ldr	r3, [pc, #516]	; (8009020 <_dtoa_r+0x608>)
 8008e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e20:	f7f7 f9e6 	bl	80001f0 <__aeabi_dsub>
 8008e24:	462a      	mov	r2, r5
 8008e26:	4633      	mov	r3, r6
 8008e28:	e9cd 0100 	strd	r0, r1, [sp]
 8008e2c:	f7f7 fe28 	bl	8000a80 <__aeabi_dcmpgt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	f040 8288 	bne.w	8009346 <_dtoa_r+0x92e>
 8008e36:	462a      	mov	r2, r5
 8008e38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e40:	f7f7 fe00 	bl	8000a44 <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f040 827c 	bne.w	8009342 <_dtoa_r+0x92a>
 8008e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e4e:	e9cd 2300 	strd	r2, r3, [sp]
 8008e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f2c0 8150 	blt.w	80090fa <_dtoa_r+0x6e2>
 8008e5a:	f1ba 0f0e 	cmp.w	sl, #14
 8008e5e:	f300 814c 	bgt.w	80090fa <_dtoa_r+0x6e2>
 8008e62:	4b6a      	ldr	r3, [pc, #424]	; (800900c <_dtoa_r+0x5f4>)
 8008e64:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e68:	ed93 7b00 	vldr	d7, [r3]
 8008e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e74:	f280 80d8 	bge.w	8009028 <_dtoa_r+0x610>
 8008e78:	f1b9 0f00 	cmp.w	r9, #0
 8008e7c:	f300 80d4 	bgt.w	8009028 <_dtoa_r+0x610>
 8008e80:	f040 825e 	bne.w	8009340 <_dtoa_r+0x928>
 8008e84:	2200      	movs	r2, #0
 8008e86:	4b66      	ldr	r3, [pc, #408]	; (8009020 <_dtoa_r+0x608>)
 8008e88:	ec51 0b17 	vmov	r0, r1, d7
 8008e8c:	f7f7 fb68 	bl	8000560 <__aeabi_dmul>
 8008e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e94:	f7f7 fdea 	bl	8000a6c <__aeabi_dcmpge>
 8008e98:	464f      	mov	r7, r9
 8008e9a:	464e      	mov	r6, r9
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f040 8234 	bne.w	800930a <_dtoa_r+0x8f2>
 8008ea2:	2331      	movs	r3, #49	; 0x31
 8008ea4:	f10b 0501 	add.w	r5, fp, #1
 8008ea8:	f88b 3000 	strb.w	r3, [fp]
 8008eac:	f10a 0a01 	add.w	sl, sl, #1
 8008eb0:	e22f      	b.n	8009312 <_dtoa_r+0x8fa>
 8008eb2:	07f2      	lsls	r2, r6, #31
 8008eb4:	d505      	bpl.n	8008ec2 <_dtoa_r+0x4aa>
 8008eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eba:	f7f7 fb51 	bl	8000560 <__aeabi_dmul>
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	1076      	asrs	r6, r6, #1
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	e772      	b.n	8008dae <_dtoa_r+0x396>
 8008ec8:	2502      	movs	r5, #2
 8008eca:	e774      	b.n	8008db6 <_dtoa_r+0x39e>
 8008ecc:	f8cd a020 	str.w	sl, [sp, #32]
 8008ed0:	464f      	mov	r7, r9
 8008ed2:	e791      	b.n	8008df8 <_dtoa_r+0x3e0>
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	; (800900c <_dtoa_r+0x5f4>)
 8008ed6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008eda:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d047      	beq.n	8008f74 <_dtoa_r+0x55c>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	2000      	movs	r0, #0
 8008eea:	494e      	ldr	r1, [pc, #312]	; (8009024 <_dtoa_r+0x60c>)
 8008eec:	f7f7 fc62 	bl	80007b4 <__aeabi_ddiv>
 8008ef0:	462a      	mov	r2, r5
 8008ef2:	4633      	mov	r3, r6
 8008ef4:	f7f7 f97c 	bl	80001f0 <__aeabi_dsub>
 8008ef8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008efc:	465d      	mov	r5, fp
 8008efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f02:	f7f7 fddd 	bl	8000ac0 <__aeabi_d2iz>
 8008f06:	4606      	mov	r6, r0
 8008f08:	f7f7 fac0 	bl	800048c <__aeabi_i2d>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f14:	f7f7 f96c 	bl	80001f0 <__aeabi_dsub>
 8008f18:	3630      	adds	r6, #48	; 0x30
 8008f1a:	f805 6b01 	strb.w	r6, [r5], #1
 8008f1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f22:	e9cd 0100 	strd	r0, r1, [sp]
 8008f26:	f7f7 fd8d 	bl	8000a44 <__aeabi_dcmplt>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d163      	bne.n	8008ff6 <_dtoa_r+0x5de>
 8008f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f32:	2000      	movs	r0, #0
 8008f34:	4937      	ldr	r1, [pc, #220]	; (8009014 <_dtoa_r+0x5fc>)
 8008f36:	f7f7 f95b 	bl	80001f0 <__aeabi_dsub>
 8008f3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f3e:	f7f7 fd81 	bl	8000a44 <__aeabi_dcmplt>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f040 80b7 	bne.w	80090b6 <_dtoa_r+0x69e>
 8008f48:	eba5 030b 	sub.w	r3, r5, fp
 8008f4c:	429f      	cmp	r7, r3
 8008f4e:	f77f af7c 	ble.w	8008e4a <_dtoa_r+0x432>
 8008f52:	2200      	movs	r2, #0
 8008f54:	4b30      	ldr	r3, [pc, #192]	; (8009018 <_dtoa_r+0x600>)
 8008f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f5a:	f7f7 fb01 	bl	8000560 <__aeabi_dmul>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f64:	4b2c      	ldr	r3, [pc, #176]	; (8009018 <_dtoa_r+0x600>)
 8008f66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f6a:	f7f7 faf9 	bl	8000560 <__aeabi_dmul>
 8008f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8008f72:	e7c4      	b.n	8008efe <_dtoa_r+0x4e6>
 8008f74:	462a      	mov	r2, r5
 8008f76:	4633      	mov	r3, r6
 8008f78:	f7f7 faf2 	bl	8000560 <__aeabi_dmul>
 8008f7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f80:	eb0b 0507 	add.w	r5, fp, r7
 8008f84:	465e      	mov	r6, fp
 8008f86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f8a:	f7f7 fd99 	bl	8000ac0 <__aeabi_d2iz>
 8008f8e:	4607      	mov	r7, r0
 8008f90:	f7f7 fa7c 	bl	800048c <__aeabi_i2d>
 8008f94:	3730      	adds	r7, #48	; 0x30
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f9e:	f7f7 f927 	bl	80001f0 <__aeabi_dsub>
 8008fa2:	f806 7b01 	strb.w	r7, [r6], #1
 8008fa6:	42ae      	cmp	r6, r5
 8008fa8:	e9cd 0100 	strd	r0, r1, [sp]
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	d126      	bne.n	8009000 <_dtoa_r+0x5e8>
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <_dtoa_r+0x60c>)
 8008fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fb8:	f7f7 f91c 	bl	80001f4 <__adddf3>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc4:	f7f7 fd5c 	bl	8000a80 <__aeabi_dcmpgt>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d174      	bne.n	80090b6 <_dtoa_r+0x69e>
 8008fcc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	4914      	ldr	r1, [pc, #80]	; (8009024 <_dtoa_r+0x60c>)
 8008fd4:	f7f7 f90c 	bl	80001f0 <__aeabi_dsub>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe0:	f7f7 fd30 	bl	8000a44 <__aeabi_dcmplt>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f43f af30 	beq.w	8008e4a <_dtoa_r+0x432>
 8008fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fee:	2b30      	cmp	r3, #48	; 0x30
 8008ff0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008ff4:	d002      	beq.n	8008ffc <_dtoa_r+0x5e4>
 8008ff6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008ffa:	e04a      	b.n	8009092 <_dtoa_r+0x67a>
 8008ffc:	4615      	mov	r5, r2
 8008ffe:	e7f4      	b.n	8008fea <_dtoa_r+0x5d2>
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <_dtoa_r+0x600>)
 8009002:	f7f7 faad 	bl	8000560 <__aeabi_dmul>
 8009006:	e9cd 0100 	strd	r0, r1, [sp]
 800900a:	e7bc      	b.n	8008f86 <_dtoa_r+0x56e>
 800900c:	0800c338 	.word	0x0800c338
 8009010:	0800c310 	.word	0x0800c310
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	40240000 	.word	0x40240000
 800901c:	401c0000 	.word	0x401c0000
 8009020:	40140000 	.word	0x40140000
 8009024:	3fe00000 	.word	0x3fe00000
 8009028:	e9dd 6700 	ldrd	r6, r7, [sp]
 800902c:	465d      	mov	r5, fp
 800902e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009032:	4630      	mov	r0, r6
 8009034:	4639      	mov	r1, r7
 8009036:	f7f7 fbbd 	bl	80007b4 <__aeabi_ddiv>
 800903a:	f7f7 fd41 	bl	8000ac0 <__aeabi_d2iz>
 800903e:	4680      	mov	r8, r0
 8009040:	f7f7 fa24 	bl	800048c <__aeabi_i2d>
 8009044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009048:	f7f7 fa8a 	bl	8000560 <__aeabi_dmul>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009058:	f7f7 f8ca 	bl	80001f0 <__aeabi_dsub>
 800905c:	f805 6b01 	strb.w	r6, [r5], #1
 8009060:	eba5 060b 	sub.w	r6, r5, fp
 8009064:	45b1      	cmp	r9, r6
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	d139      	bne.n	80090e0 <_dtoa_r+0x6c8>
 800906c:	f7f7 f8c2 	bl	80001f4 <__adddf3>
 8009070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	f7f7 fd02 	bl	8000a80 <__aeabi_dcmpgt>
 800907c:	b9c8      	cbnz	r0, 80090b2 <_dtoa_r+0x69a>
 800907e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009082:	4630      	mov	r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	f7f7 fcd3 	bl	8000a30 <__aeabi_dcmpeq>
 800908a:	b110      	cbz	r0, 8009092 <_dtoa_r+0x67a>
 800908c:	f018 0f01 	tst.w	r8, #1
 8009090:	d10f      	bne.n	80090b2 <_dtoa_r+0x69a>
 8009092:	9904      	ldr	r1, [sp, #16]
 8009094:	4620      	mov	r0, r4
 8009096:	f000 facc 	bl	8009632 <_Bfree>
 800909a:	2300      	movs	r3, #0
 800909c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800909e:	702b      	strb	r3, [r5, #0]
 80090a0:	f10a 0301 	add.w	r3, sl, #1
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8241 	beq.w	8009530 <_dtoa_r+0xb18>
 80090ae:	601d      	str	r5, [r3, #0]
 80090b0:	e23e      	b.n	8009530 <_dtoa_r+0xb18>
 80090b2:	f8cd a020 	str.w	sl, [sp, #32]
 80090b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090ba:	2a39      	cmp	r2, #57	; 0x39
 80090bc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80090c0:	d108      	bne.n	80090d4 <_dtoa_r+0x6bc>
 80090c2:	459b      	cmp	fp, r3
 80090c4:	d10a      	bne.n	80090dc <_dtoa_r+0x6c4>
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	3301      	adds	r3, #1
 80090ca:	9308      	str	r3, [sp, #32]
 80090cc:	2330      	movs	r3, #48	; 0x30
 80090ce:	f88b 3000 	strb.w	r3, [fp]
 80090d2:	465b      	mov	r3, fp
 80090d4:	781a      	ldrb	r2, [r3, #0]
 80090d6:	3201      	adds	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e78c      	b.n	8008ff6 <_dtoa_r+0x5de>
 80090dc:	461d      	mov	r5, r3
 80090de:	e7ea      	b.n	80090b6 <_dtoa_r+0x69e>
 80090e0:	2200      	movs	r2, #0
 80090e2:	4b9b      	ldr	r3, [pc, #620]	; (8009350 <_dtoa_r+0x938>)
 80090e4:	f7f7 fa3c 	bl	8000560 <__aeabi_dmul>
 80090e8:	2200      	movs	r2, #0
 80090ea:	2300      	movs	r3, #0
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	f7f7 fc9e 	bl	8000a30 <__aeabi_dcmpeq>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d09a      	beq.n	800902e <_dtoa_r+0x616>
 80090f8:	e7cb      	b.n	8009092 <_dtoa_r+0x67a>
 80090fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	f000 808b 	beq.w	8009218 <_dtoa_r+0x800>
 8009102:	9a06      	ldr	r2, [sp, #24]
 8009104:	2a01      	cmp	r2, #1
 8009106:	dc6e      	bgt.n	80091e6 <_dtoa_r+0x7ce>
 8009108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800910a:	2a00      	cmp	r2, #0
 800910c:	d067      	beq.n	80091de <_dtoa_r+0x7c6>
 800910e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009112:	9f07      	ldr	r7, [sp, #28]
 8009114:	9d05      	ldr	r5, [sp, #20]
 8009116:	9a05      	ldr	r2, [sp, #20]
 8009118:	2101      	movs	r1, #1
 800911a:	441a      	add	r2, r3
 800911c:	4620      	mov	r0, r4
 800911e:	9205      	str	r2, [sp, #20]
 8009120:	4498      	add	r8, r3
 8009122:	f000 fb26 	bl	8009772 <__i2b>
 8009126:	4606      	mov	r6, r0
 8009128:	2d00      	cmp	r5, #0
 800912a:	dd0c      	ble.n	8009146 <_dtoa_r+0x72e>
 800912c:	f1b8 0f00 	cmp.w	r8, #0
 8009130:	dd09      	ble.n	8009146 <_dtoa_r+0x72e>
 8009132:	4545      	cmp	r5, r8
 8009134:	9a05      	ldr	r2, [sp, #20]
 8009136:	462b      	mov	r3, r5
 8009138:	bfa8      	it	ge
 800913a:	4643      	movge	r3, r8
 800913c:	1ad2      	subs	r2, r2, r3
 800913e:	9205      	str	r2, [sp, #20]
 8009140:	1aed      	subs	r5, r5, r3
 8009142:	eba8 0803 	sub.w	r8, r8, r3
 8009146:	9b07      	ldr	r3, [sp, #28]
 8009148:	b1eb      	cbz	r3, 8009186 <_dtoa_r+0x76e>
 800914a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	d067      	beq.n	8009220 <_dtoa_r+0x808>
 8009150:	b18f      	cbz	r7, 8009176 <_dtoa_r+0x75e>
 8009152:	4631      	mov	r1, r6
 8009154:	463a      	mov	r2, r7
 8009156:	4620      	mov	r0, r4
 8009158:	f000 fbaa 	bl	80098b0 <__pow5mult>
 800915c:	9a04      	ldr	r2, [sp, #16]
 800915e:	4601      	mov	r1, r0
 8009160:	4606      	mov	r6, r0
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fb0e 	bl	8009784 <__multiply>
 8009168:	9904      	ldr	r1, [sp, #16]
 800916a:	9008      	str	r0, [sp, #32]
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fa60 	bl	8009632 <_Bfree>
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	9304      	str	r3, [sp, #16]
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	1bda      	subs	r2, r3, r7
 800917a:	d004      	beq.n	8009186 <_dtoa_r+0x76e>
 800917c:	9904      	ldr	r1, [sp, #16]
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fb96 	bl	80098b0 <__pow5mult>
 8009184:	9004      	str	r0, [sp, #16]
 8009186:	2101      	movs	r1, #1
 8009188:	4620      	mov	r0, r4
 800918a:	f000 faf2 	bl	8009772 <__i2b>
 800918e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009190:	4607      	mov	r7, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 81d0 	beq.w	8009538 <_dtoa_r+0xb20>
 8009198:	461a      	mov	r2, r3
 800919a:	4601      	mov	r1, r0
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fb87 	bl	80098b0 <__pow5mult>
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	4607      	mov	r7, r0
 80091a8:	dc40      	bgt.n	800922c <_dtoa_r+0x814>
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d139      	bne.n	8009224 <_dtoa_r+0x80c>
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d136      	bne.n	8009228 <_dtoa_r+0x810>
 80091ba:	9b01      	ldr	r3, [sp, #4]
 80091bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091c0:	0d1b      	lsrs	r3, r3, #20
 80091c2:	051b      	lsls	r3, r3, #20
 80091c4:	b12b      	cbz	r3, 80091d2 <_dtoa_r+0x7ba>
 80091c6:	9b05      	ldr	r3, [sp, #20]
 80091c8:	3301      	adds	r3, #1
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	f108 0801 	add.w	r8, r8, #1
 80091d0:	2301      	movs	r3, #1
 80091d2:	9307      	str	r3, [sp, #28]
 80091d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d12a      	bne.n	8009230 <_dtoa_r+0x818>
 80091da:	2001      	movs	r0, #1
 80091dc:	e030      	b.n	8009240 <_dtoa_r+0x828>
 80091de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091e4:	e795      	b.n	8009112 <_dtoa_r+0x6fa>
 80091e6:	9b07      	ldr	r3, [sp, #28]
 80091e8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80091ec:	42bb      	cmp	r3, r7
 80091ee:	bfbf      	itttt	lt
 80091f0:	9b07      	ldrlt	r3, [sp, #28]
 80091f2:	9707      	strlt	r7, [sp, #28]
 80091f4:	1afa      	sublt	r2, r7, r3
 80091f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091f8:	bfbb      	ittet	lt
 80091fa:	189b      	addlt	r3, r3, r2
 80091fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091fe:	1bdf      	subge	r7, r3, r7
 8009200:	2700      	movlt	r7, #0
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	bfb5      	itete	lt
 8009208:	9b05      	ldrlt	r3, [sp, #20]
 800920a:	9d05      	ldrge	r5, [sp, #20]
 800920c:	eba3 0509 	sublt.w	r5, r3, r9
 8009210:	464b      	movge	r3, r9
 8009212:	bfb8      	it	lt
 8009214:	2300      	movlt	r3, #0
 8009216:	e77e      	b.n	8009116 <_dtoa_r+0x6fe>
 8009218:	9f07      	ldr	r7, [sp, #28]
 800921a:	9d05      	ldr	r5, [sp, #20]
 800921c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800921e:	e783      	b.n	8009128 <_dtoa_r+0x710>
 8009220:	9a07      	ldr	r2, [sp, #28]
 8009222:	e7ab      	b.n	800917c <_dtoa_r+0x764>
 8009224:	2300      	movs	r3, #0
 8009226:	e7d4      	b.n	80091d2 <_dtoa_r+0x7ba>
 8009228:	9b00      	ldr	r3, [sp, #0]
 800922a:	e7d2      	b.n	80091d2 <_dtoa_r+0x7ba>
 800922c:	2300      	movs	r3, #0
 800922e:	9307      	str	r3, [sp, #28]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009236:	6918      	ldr	r0, [r3, #16]
 8009238:	f000 fa4d 	bl	80096d6 <__hi0bits>
 800923c:	f1c0 0020 	rsb	r0, r0, #32
 8009240:	4440      	add	r0, r8
 8009242:	f010 001f 	ands.w	r0, r0, #31
 8009246:	d047      	beq.n	80092d8 <_dtoa_r+0x8c0>
 8009248:	f1c0 0320 	rsb	r3, r0, #32
 800924c:	2b04      	cmp	r3, #4
 800924e:	dd3b      	ble.n	80092c8 <_dtoa_r+0x8b0>
 8009250:	9b05      	ldr	r3, [sp, #20]
 8009252:	f1c0 001c 	rsb	r0, r0, #28
 8009256:	4403      	add	r3, r0
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	4405      	add	r5, r0
 800925c:	4480      	add	r8, r0
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	dd05      	ble.n	8009270 <_dtoa_r+0x858>
 8009264:	461a      	mov	r2, r3
 8009266:	9904      	ldr	r1, [sp, #16]
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fb6f 	bl	800994c <__lshift>
 800926e:	9004      	str	r0, [sp, #16]
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	dd05      	ble.n	8009282 <_dtoa_r+0x86a>
 8009276:	4639      	mov	r1, r7
 8009278:	4642      	mov	r2, r8
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fb66 	bl	800994c <__lshift>
 8009280:	4607      	mov	r7, r0
 8009282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009284:	b353      	cbz	r3, 80092dc <_dtoa_r+0x8c4>
 8009286:	4639      	mov	r1, r7
 8009288:	9804      	ldr	r0, [sp, #16]
 800928a:	f000 fbb3 	bl	80099f4 <__mcmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	da24      	bge.n	80092dc <_dtoa_r+0x8c4>
 8009292:	2300      	movs	r3, #0
 8009294:	220a      	movs	r2, #10
 8009296:	9904      	ldr	r1, [sp, #16]
 8009298:	4620      	mov	r0, r4
 800929a:	f000 f9e1 	bl	8009660 <__multadd>
 800929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a0:	9004      	str	r0, [sp, #16]
 80092a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 814d 	beq.w	8009546 <_dtoa_r+0xb2e>
 80092ac:	2300      	movs	r3, #0
 80092ae:	4631      	mov	r1, r6
 80092b0:	220a      	movs	r2, #10
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 f9d4 	bl	8009660 <__multadd>
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	4606      	mov	r6, r0
 80092be:	dc4f      	bgt.n	8009360 <_dtoa_r+0x948>
 80092c0:	9b06      	ldr	r3, [sp, #24]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	dd4c      	ble.n	8009360 <_dtoa_r+0x948>
 80092c6:	e011      	b.n	80092ec <_dtoa_r+0x8d4>
 80092c8:	d0c9      	beq.n	800925e <_dtoa_r+0x846>
 80092ca:	9a05      	ldr	r2, [sp, #20]
 80092cc:	331c      	adds	r3, #28
 80092ce:	441a      	add	r2, r3
 80092d0:	9205      	str	r2, [sp, #20]
 80092d2:	441d      	add	r5, r3
 80092d4:	4498      	add	r8, r3
 80092d6:	e7c2      	b.n	800925e <_dtoa_r+0x846>
 80092d8:	4603      	mov	r3, r0
 80092da:	e7f6      	b.n	80092ca <_dtoa_r+0x8b2>
 80092dc:	f1b9 0f00 	cmp.w	r9, #0
 80092e0:	dc38      	bgt.n	8009354 <_dtoa_r+0x93c>
 80092e2:	9b06      	ldr	r3, [sp, #24]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	dd35      	ble.n	8009354 <_dtoa_r+0x93c>
 80092e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	b963      	cbnz	r3, 800930a <_dtoa_r+0x8f2>
 80092f0:	4639      	mov	r1, r7
 80092f2:	2205      	movs	r2, #5
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 f9b3 	bl	8009660 <__multadd>
 80092fa:	4601      	mov	r1, r0
 80092fc:	4607      	mov	r7, r0
 80092fe:	9804      	ldr	r0, [sp, #16]
 8009300:	f000 fb78 	bl	80099f4 <__mcmp>
 8009304:	2800      	cmp	r0, #0
 8009306:	f73f adcc 	bgt.w	8008ea2 <_dtoa_r+0x48a>
 800930a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800930c:	465d      	mov	r5, fp
 800930e:	ea6f 0a03 	mvn.w	sl, r3
 8009312:	f04f 0900 	mov.w	r9, #0
 8009316:	4639      	mov	r1, r7
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f98a 	bl	8009632 <_Bfree>
 800931e:	2e00      	cmp	r6, #0
 8009320:	f43f aeb7 	beq.w	8009092 <_dtoa_r+0x67a>
 8009324:	f1b9 0f00 	cmp.w	r9, #0
 8009328:	d005      	beq.n	8009336 <_dtoa_r+0x91e>
 800932a:	45b1      	cmp	r9, r6
 800932c:	d003      	beq.n	8009336 <_dtoa_r+0x91e>
 800932e:	4649      	mov	r1, r9
 8009330:	4620      	mov	r0, r4
 8009332:	f000 f97e 	bl	8009632 <_Bfree>
 8009336:	4631      	mov	r1, r6
 8009338:	4620      	mov	r0, r4
 800933a:	f000 f97a 	bl	8009632 <_Bfree>
 800933e:	e6a8      	b.n	8009092 <_dtoa_r+0x67a>
 8009340:	2700      	movs	r7, #0
 8009342:	463e      	mov	r6, r7
 8009344:	e7e1      	b.n	800930a <_dtoa_r+0x8f2>
 8009346:	f8dd a020 	ldr.w	sl, [sp, #32]
 800934a:	463e      	mov	r6, r7
 800934c:	e5a9      	b.n	8008ea2 <_dtoa_r+0x48a>
 800934e:	bf00      	nop
 8009350:	40240000 	.word	0x40240000
 8009354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009356:	f8cd 9008 	str.w	r9, [sp, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80fa 	beq.w	8009554 <_dtoa_r+0xb3c>
 8009360:	2d00      	cmp	r5, #0
 8009362:	dd05      	ble.n	8009370 <_dtoa_r+0x958>
 8009364:	4631      	mov	r1, r6
 8009366:	462a      	mov	r2, r5
 8009368:	4620      	mov	r0, r4
 800936a:	f000 faef 	bl	800994c <__lshift>
 800936e:	4606      	mov	r6, r0
 8009370:	9b07      	ldr	r3, [sp, #28]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d04c      	beq.n	8009410 <_dtoa_r+0x9f8>
 8009376:	6871      	ldr	r1, [r6, #4]
 8009378:	4620      	mov	r0, r4
 800937a:	f000 f926 	bl	80095ca <_Balloc>
 800937e:	6932      	ldr	r2, [r6, #16]
 8009380:	3202      	adds	r2, #2
 8009382:	4605      	mov	r5, r0
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	f106 010c 	add.w	r1, r6, #12
 800938a:	300c      	adds	r0, #12
 800938c:	f000 f912 	bl	80095b4 <memcpy>
 8009390:	2201      	movs	r2, #1
 8009392:	4629      	mov	r1, r5
 8009394:	4620      	mov	r0, r4
 8009396:	f000 fad9 	bl	800994c <__lshift>
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	f8cd b014 	str.w	fp, [sp, #20]
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	46b1      	mov	r9, r6
 80093a6:	9307      	str	r3, [sp, #28]
 80093a8:	4606      	mov	r6, r0
 80093aa:	4639      	mov	r1, r7
 80093ac:	9804      	ldr	r0, [sp, #16]
 80093ae:	f7ff faa6 	bl	80088fe <quorem>
 80093b2:	4649      	mov	r1, r9
 80093b4:	4605      	mov	r5, r0
 80093b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093ba:	9804      	ldr	r0, [sp, #16]
 80093bc:	f000 fb1a 	bl	80099f4 <__mcmp>
 80093c0:	4632      	mov	r2, r6
 80093c2:	9000      	str	r0, [sp, #0]
 80093c4:	4639      	mov	r1, r7
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fb2e 	bl	8009a28 <__mdiff>
 80093cc:	68c3      	ldr	r3, [r0, #12]
 80093ce:	4602      	mov	r2, r0
 80093d0:	bb03      	cbnz	r3, 8009414 <_dtoa_r+0x9fc>
 80093d2:	4601      	mov	r1, r0
 80093d4:	9008      	str	r0, [sp, #32]
 80093d6:	9804      	ldr	r0, [sp, #16]
 80093d8:	f000 fb0c 	bl	80099f4 <__mcmp>
 80093dc:	9a08      	ldr	r2, [sp, #32]
 80093de:	4603      	mov	r3, r0
 80093e0:	4611      	mov	r1, r2
 80093e2:	4620      	mov	r0, r4
 80093e4:	9308      	str	r3, [sp, #32]
 80093e6:	f000 f924 	bl	8009632 <_Bfree>
 80093ea:	9b08      	ldr	r3, [sp, #32]
 80093ec:	b9a3      	cbnz	r3, 8009418 <_dtoa_r+0xa00>
 80093ee:	9a06      	ldr	r2, [sp, #24]
 80093f0:	b992      	cbnz	r2, 8009418 <_dtoa_r+0xa00>
 80093f2:	9a07      	ldr	r2, [sp, #28]
 80093f4:	b982      	cbnz	r2, 8009418 <_dtoa_r+0xa00>
 80093f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093fa:	d029      	beq.n	8009450 <_dtoa_r+0xa38>
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	dd01      	ble.n	8009406 <_dtoa_r+0x9ee>
 8009402:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	1c5d      	adds	r5, r3, #1
 800940a:	f883 8000 	strb.w	r8, [r3]
 800940e:	e782      	b.n	8009316 <_dtoa_r+0x8fe>
 8009410:	4630      	mov	r0, r6
 8009412:	e7c2      	b.n	800939a <_dtoa_r+0x982>
 8009414:	2301      	movs	r3, #1
 8009416:	e7e3      	b.n	80093e0 <_dtoa_r+0x9c8>
 8009418:	9a00      	ldr	r2, [sp, #0]
 800941a:	2a00      	cmp	r2, #0
 800941c:	db04      	blt.n	8009428 <_dtoa_r+0xa10>
 800941e:	d125      	bne.n	800946c <_dtoa_r+0xa54>
 8009420:	9a06      	ldr	r2, [sp, #24]
 8009422:	bb1a      	cbnz	r2, 800946c <_dtoa_r+0xa54>
 8009424:	9a07      	ldr	r2, [sp, #28]
 8009426:	bb0a      	cbnz	r2, 800946c <_dtoa_r+0xa54>
 8009428:	2b00      	cmp	r3, #0
 800942a:	ddec      	ble.n	8009406 <_dtoa_r+0x9ee>
 800942c:	2201      	movs	r2, #1
 800942e:	9904      	ldr	r1, [sp, #16]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fa8b 	bl	800994c <__lshift>
 8009436:	4639      	mov	r1, r7
 8009438:	9004      	str	r0, [sp, #16]
 800943a:	f000 fadb 	bl	80099f4 <__mcmp>
 800943e:	2800      	cmp	r0, #0
 8009440:	dc03      	bgt.n	800944a <_dtoa_r+0xa32>
 8009442:	d1e0      	bne.n	8009406 <_dtoa_r+0x9ee>
 8009444:	f018 0f01 	tst.w	r8, #1
 8009448:	d0dd      	beq.n	8009406 <_dtoa_r+0x9ee>
 800944a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800944e:	d1d8      	bne.n	8009402 <_dtoa_r+0x9ea>
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	9a05      	ldr	r2, [sp, #20]
 8009454:	1c5d      	adds	r5, r3, #1
 8009456:	2339      	movs	r3, #57	; 0x39
 8009458:	7013      	strb	r3, [r2, #0]
 800945a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800945e:	2b39      	cmp	r3, #57	; 0x39
 8009460:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009464:	d04f      	beq.n	8009506 <_dtoa_r+0xaee>
 8009466:	3301      	adds	r3, #1
 8009468:	7013      	strb	r3, [r2, #0]
 800946a:	e754      	b.n	8009316 <_dtoa_r+0x8fe>
 800946c:	9a05      	ldr	r2, [sp, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f102 0501 	add.w	r5, r2, #1
 8009474:	dd06      	ble.n	8009484 <_dtoa_r+0xa6c>
 8009476:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800947a:	d0e9      	beq.n	8009450 <_dtoa_r+0xa38>
 800947c:	f108 0801 	add.w	r8, r8, #1
 8009480:	9b05      	ldr	r3, [sp, #20]
 8009482:	e7c2      	b.n	800940a <_dtoa_r+0x9f2>
 8009484:	9a02      	ldr	r2, [sp, #8]
 8009486:	f805 8c01 	strb.w	r8, [r5, #-1]
 800948a:	eba5 030b 	sub.w	r3, r5, fp
 800948e:	4293      	cmp	r3, r2
 8009490:	d021      	beq.n	80094d6 <_dtoa_r+0xabe>
 8009492:	2300      	movs	r3, #0
 8009494:	220a      	movs	r2, #10
 8009496:	9904      	ldr	r1, [sp, #16]
 8009498:	4620      	mov	r0, r4
 800949a:	f000 f8e1 	bl	8009660 <__multadd>
 800949e:	45b1      	cmp	r9, r6
 80094a0:	9004      	str	r0, [sp, #16]
 80094a2:	f04f 0300 	mov.w	r3, #0
 80094a6:	f04f 020a 	mov.w	r2, #10
 80094aa:	4649      	mov	r1, r9
 80094ac:	4620      	mov	r0, r4
 80094ae:	d105      	bne.n	80094bc <_dtoa_r+0xaa4>
 80094b0:	f000 f8d6 	bl	8009660 <__multadd>
 80094b4:	4681      	mov	r9, r0
 80094b6:	4606      	mov	r6, r0
 80094b8:	9505      	str	r5, [sp, #20]
 80094ba:	e776      	b.n	80093aa <_dtoa_r+0x992>
 80094bc:	f000 f8d0 	bl	8009660 <__multadd>
 80094c0:	4631      	mov	r1, r6
 80094c2:	4681      	mov	r9, r0
 80094c4:	2300      	movs	r3, #0
 80094c6:	220a      	movs	r2, #10
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 f8c9 	bl	8009660 <__multadd>
 80094ce:	4606      	mov	r6, r0
 80094d0:	e7f2      	b.n	80094b8 <_dtoa_r+0xaa0>
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	2201      	movs	r2, #1
 80094d8:	9904      	ldr	r1, [sp, #16]
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fa36 	bl	800994c <__lshift>
 80094e0:	4639      	mov	r1, r7
 80094e2:	9004      	str	r0, [sp, #16]
 80094e4:	f000 fa86 	bl	80099f4 <__mcmp>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	dcb6      	bgt.n	800945a <_dtoa_r+0xa42>
 80094ec:	d102      	bne.n	80094f4 <_dtoa_r+0xadc>
 80094ee:	f018 0f01 	tst.w	r8, #1
 80094f2:	d1b2      	bne.n	800945a <_dtoa_r+0xa42>
 80094f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094f8:	2b30      	cmp	r3, #48	; 0x30
 80094fa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80094fe:	f47f af0a 	bne.w	8009316 <_dtoa_r+0x8fe>
 8009502:	4615      	mov	r5, r2
 8009504:	e7f6      	b.n	80094f4 <_dtoa_r+0xadc>
 8009506:	4593      	cmp	fp, r2
 8009508:	d105      	bne.n	8009516 <_dtoa_r+0xafe>
 800950a:	2331      	movs	r3, #49	; 0x31
 800950c:	f10a 0a01 	add.w	sl, sl, #1
 8009510:	f88b 3000 	strb.w	r3, [fp]
 8009514:	e6ff      	b.n	8009316 <_dtoa_r+0x8fe>
 8009516:	4615      	mov	r5, r2
 8009518:	e79f      	b.n	800945a <_dtoa_r+0xa42>
 800951a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009580 <_dtoa_r+0xb68>
 800951e:	e007      	b.n	8009530 <_dtoa_r+0xb18>
 8009520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009522:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009584 <_dtoa_r+0xb6c>
 8009526:	b11b      	cbz	r3, 8009530 <_dtoa_r+0xb18>
 8009528:	f10b 0308 	add.w	r3, fp, #8
 800952c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	4658      	mov	r0, fp
 8009532:	b017      	add	sp, #92	; 0x5c
 8009534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009538:	9b06      	ldr	r3, [sp, #24]
 800953a:	2b01      	cmp	r3, #1
 800953c:	f77f ae35 	ble.w	80091aa <_dtoa_r+0x792>
 8009540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009542:	9307      	str	r3, [sp, #28]
 8009544:	e649      	b.n	80091da <_dtoa_r+0x7c2>
 8009546:	9b02      	ldr	r3, [sp, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	dc03      	bgt.n	8009554 <_dtoa_r+0xb3c>
 800954c:	9b06      	ldr	r3, [sp, #24]
 800954e:	2b02      	cmp	r3, #2
 8009550:	f73f aecc 	bgt.w	80092ec <_dtoa_r+0x8d4>
 8009554:	465d      	mov	r5, fp
 8009556:	4639      	mov	r1, r7
 8009558:	9804      	ldr	r0, [sp, #16]
 800955a:	f7ff f9d0 	bl	80088fe <quorem>
 800955e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009562:	f805 8b01 	strb.w	r8, [r5], #1
 8009566:	9a02      	ldr	r2, [sp, #8]
 8009568:	eba5 030b 	sub.w	r3, r5, fp
 800956c:	429a      	cmp	r2, r3
 800956e:	ddb0      	ble.n	80094d2 <_dtoa_r+0xaba>
 8009570:	2300      	movs	r3, #0
 8009572:	220a      	movs	r2, #10
 8009574:	9904      	ldr	r1, [sp, #16]
 8009576:	4620      	mov	r0, r4
 8009578:	f000 f872 	bl	8009660 <__multadd>
 800957c:	9004      	str	r0, [sp, #16]
 800957e:	e7ea      	b.n	8009556 <_dtoa_r+0xb3e>
 8009580:	0800c300 	.word	0x0800c300
 8009584:	0800c302 	.word	0x0800c302

08009588 <_localeconv_r>:
 8009588:	4b04      	ldr	r3, [pc, #16]	; (800959c <_localeconv_r+0x14>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6a18      	ldr	r0, [r3, #32]
 800958e:	4b04      	ldr	r3, [pc, #16]	; (80095a0 <_localeconv_r+0x18>)
 8009590:	2800      	cmp	r0, #0
 8009592:	bf08      	it	eq
 8009594:	4618      	moveq	r0, r3
 8009596:	30f0      	adds	r0, #240	; 0xf0
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	20000098 	.word	0x20000098
 80095a0:	200000fc 	.word	0x200000fc

080095a4 <malloc>:
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <malloc+0xc>)
 80095a6:	4601      	mov	r1, r0
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f000 baf7 	b.w	8009b9c <_malloc_r>
 80095ae:	bf00      	nop
 80095b0:	20000098 	.word	0x20000098

080095b4 <memcpy>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	1e43      	subs	r3, r0, #1
 80095b8:	440a      	add	r2, r1
 80095ba:	4291      	cmp	r1, r2
 80095bc:	d100      	bne.n	80095c0 <memcpy+0xc>
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c8:	e7f7      	b.n	80095ba <memcpy+0x6>

080095ca <_Balloc>:
 80095ca:	b570      	push	{r4, r5, r6, lr}
 80095cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095ce:	4604      	mov	r4, r0
 80095d0:	460e      	mov	r6, r1
 80095d2:	b93d      	cbnz	r5, 80095e4 <_Balloc+0x1a>
 80095d4:	2010      	movs	r0, #16
 80095d6:	f7ff ffe5 	bl	80095a4 <malloc>
 80095da:	6260      	str	r0, [r4, #36]	; 0x24
 80095dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095e0:	6005      	str	r5, [r0, #0]
 80095e2:	60c5      	str	r5, [r0, #12]
 80095e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095e6:	68eb      	ldr	r3, [r5, #12]
 80095e8:	b183      	cbz	r3, 800960c <_Balloc+0x42>
 80095ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095f2:	b9b8      	cbnz	r0, 8009624 <_Balloc+0x5a>
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f506 	lsl.w	r5, r1, r6
 80095fa:	1d6a      	adds	r2, r5, #5
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fabe 	bl	8009b80 <_calloc_r>
 8009604:	b160      	cbz	r0, 8009620 <_Balloc+0x56>
 8009606:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800960a:	e00e      	b.n	800962a <_Balloc+0x60>
 800960c:	2221      	movs	r2, #33	; 0x21
 800960e:	2104      	movs	r1, #4
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fab5 	bl	8009b80 <_calloc_r>
 8009616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009618:	60e8      	str	r0, [r5, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e4      	bne.n	80095ea <_Balloc+0x20>
 8009620:	2000      	movs	r0, #0
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	6802      	ldr	r2, [r0, #0]
 8009626:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800962a:	2300      	movs	r3, #0
 800962c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009630:	e7f7      	b.n	8009622 <_Balloc+0x58>

08009632 <_Bfree>:
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009636:	4606      	mov	r6, r0
 8009638:	460d      	mov	r5, r1
 800963a:	b93c      	cbnz	r4, 800964c <_Bfree+0x1a>
 800963c:	2010      	movs	r0, #16
 800963e:	f7ff ffb1 	bl	80095a4 <malloc>
 8009642:	6270      	str	r0, [r6, #36]	; 0x24
 8009644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009648:	6004      	str	r4, [r0, #0]
 800964a:	60c4      	str	r4, [r0, #12]
 800964c:	b13d      	cbz	r5, 800965e <_Bfree+0x2c>
 800964e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009650:	686a      	ldr	r2, [r5, #4]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009658:	6029      	str	r1, [r5, #0]
 800965a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800965e:	bd70      	pop	{r4, r5, r6, pc}

08009660 <__multadd>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	690d      	ldr	r5, [r1, #16]
 8009666:	461f      	mov	r7, r3
 8009668:	4606      	mov	r6, r0
 800966a:	460c      	mov	r4, r1
 800966c:	f101 0c14 	add.w	ip, r1, #20
 8009670:	2300      	movs	r3, #0
 8009672:	f8dc 0000 	ldr.w	r0, [ip]
 8009676:	b281      	uxth	r1, r0
 8009678:	fb02 7101 	mla	r1, r2, r1, r7
 800967c:	0c0f      	lsrs	r7, r1, #16
 800967e:	0c00      	lsrs	r0, r0, #16
 8009680:	fb02 7000 	mla	r0, r2, r0, r7
 8009684:	b289      	uxth	r1, r1
 8009686:	3301      	adds	r3, #1
 8009688:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800968c:	429d      	cmp	r5, r3
 800968e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009692:	f84c 1b04 	str.w	r1, [ip], #4
 8009696:	dcec      	bgt.n	8009672 <__multadd+0x12>
 8009698:	b1d7      	cbz	r7, 80096d0 <__multadd+0x70>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	42ab      	cmp	r3, r5
 800969e:	dc12      	bgt.n	80096c6 <__multadd+0x66>
 80096a0:	6861      	ldr	r1, [r4, #4]
 80096a2:	4630      	mov	r0, r6
 80096a4:	3101      	adds	r1, #1
 80096a6:	f7ff ff90 	bl	80095ca <_Balloc>
 80096aa:	6922      	ldr	r2, [r4, #16]
 80096ac:	3202      	adds	r2, #2
 80096ae:	f104 010c 	add.w	r1, r4, #12
 80096b2:	4680      	mov	r8, r0
 80096b4:	0092      	lsls	r2, r2, #2
 80096b6:	300c      	adds	r0, #12
 80096b8:	f7ff ff7c 	bl	80095b4 <memcpy>
 80096bc:	4621      	mov	r1, r4
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ffb7 	bl	8009632 <_Bfree>
 80096c4:	4644      	mov	r4, r8
 80096c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096ca:	3501      	adds	r5, #1
 80096cc:	615f      	str	r7, [r3, #20]
 80096ce:	6125      	str	r5, [r4, #16]
 80096d0:	4620      	mov	r0, r4
 80096d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096d6 <__hi0bits>:
 80096d6:	0c02      	lsrs	r2, r0, #16
 80096d8:	0412      	lsls	r2, r2, #16
 80096da:	4603      	mov	r3, r0
 80096dc:	b9b2      	cbnz	r2, 800970c <__hi0bits+0x36>
 80096de:	0403      	lsls	r3, r0, #16
 80096e0:	2010      	movs	r0, #16
 80096e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096e6:	bf04      	itt	eq
 80096e8:	021b      	lsleq	r3, r3, #8
 80096ea:	3008      	addeq	r0, #8
 80096ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80096f0:	bf04      	itt	eq
 80096f2:	011b      	lsleq	r3, r3, #4
 80096f4:	3004      	addeq	r0, #4
 80096f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096fa:	bf04      	itt	eq
 80096fc:	009b      	lsleq	r3, r3, #2
 80096fe:	3002      	addeq	r0, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	db06      	blt.n	8009712 <__hi0bits+0x3c>
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	d503      	bpl.n	8009710 <__hi0bits+0x3a>
 8009708:	3001      	adds	r0, #1
 800970a:	4770      	bx	lr
 800970c:	2000      	movs	r0, #0
 800970e:	e7e8      	b.n	80096e2 <__hi0bits+0xc>
 8009710:	2020      	movs	r0, #32
 8009712:	4770      	bx	lr

08009714 <__lo0bits>:
 8009714:	6803      	ldr	r3, [r0, #0]
 8009716:	f013 0207 	ands.w	r2, r3, #7
 800971a:	4601      	mov	r1, r0
 800971c:	d00b      	beq.n	8009736 <__lo0bits+0x22>
 800971e:	07da      	lsls	r2, r3, #31
 8009720:	d423      	bmi.n	800976a <__lo0bits+0x56>
 8009722:	0798      	lsls	r0, r3, #30
 8009724:	bf49      	itett	mi
 8009726:	085b      	lsrmi	r3, r3, #1
 8009728:	089b      	lsrpl	r3, r3, #2
 800972a:	2001      	movmi	r0, #1
 800972c:	600b      	strmi	r3, [r1, #0]
 800972e:	bf5c      	itt	pl
 8009730:	600b      	strpl	r3, [r1, #0]
 8009732:	2002      	movpl	r0, #2
 8009734:	4770      	bx	lr
 8009736:	b298      	uxth	r0, r3
 8009738:	b9a8      	cbnz	r0, 8009766 <__lo0bits+0x52>
 800973a:	0c1b      	lsrs	r3, r3, #16
 800973c:	2010      	movs	r0, #16
 800973e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009742:	bf04      	itt	eq
 8009744:	0a1b      	lsreq	r3, r3, #8
 8009746:	3008      	addeq	r0, #8
 8009748:	071a      	lsls	r2, r3, #28
 800974a:	bf04      	itt	eq
 800974c:	091b      	lsreq	r3, r3, #4
 800974e:	3004      	addeq	r0, #4
 8009750:	079a      	lsls	r2, r3, #30
 8009752:	bf04      	itt	eq
 8009754:	089b      	lsreq	r3, r3, #2
 8009756:	3002      	addeq	r0, #2
 8009758:	07da      	lsls	r2, r3, #31
 800975a:	d402      	bmi.n	8009762 <__lo0bits+0x4e>
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	d006      	beq.n	800976e <__lo0bits+0x5a>
 8009760:	3001      	adds	r0, #1
 8009762:	600b      	str	r3, [r1, #0]
 8009764:	4770      	bx	lr
 8009766:	4610      	mov	r0, r2
 8009768:	e7e9      	b.n	800973e <__lo0bits+0x2a>
 800976a:	2000      	movs	r0, #0
 800976c:	4770      	bx	lr
 800976e:	2020      	movs	r0, #32
 8009770:	4770      	bx	lr

08009772 <__i2b>:
 8009772:	b510      	push	{r4, lr}
 8009774:	460c      	mov	r4, r1
 8009776:	2101      	movs	r1, #1
 8009778:	f7ff ff27 	bl	80095ca <_Balloc>
 800977c:	2201      	movs	r2, #1
 800977e:	6144      	str	r4, [r0, #20]
 8009780:	6102      	str	r2, [r0, #16]
 8009782:	bd10      	pop	{r4, pc}

08009784 <__multiply>:
 8009784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4614      	mov	r4, r2
 800978a:	690a      	ldr	r2, [r1, #16]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	429a      	cmp	r2, r3
 8009790:	bfb8      	it	lt
 8009792:	460b      	movlt	r3, r1
 8009794:	4688      	mov	r8, r1
 8009796:	bfbc      	itt	lt
 8009798:	46a0      	movlt	r8, r4
 800979a:	461c      	movlt	r4, r3
 800979c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097ac:	eb07 0609 	add.w	r6, r7, r9
 80097b0:	42b3      	cmp	r3, r6
 80097b2:	bfb8      	it	lt
 80097b4:	3101      	addlt	r1, #1
 80097b6:	f7ff ff08 	bl	80095ca <_Balloc>
 80097ba:	f100 0514 	add.w	r5, r0, #20
 80097be:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80097c2:	462b      	mov	r3, r5
 80097c4:	2200      	movs	r2, #0
 80097c6:	4573      	cmp	r3, lr
 80097c8:	d316      	bcc.n	80097f8 <__multiply+0x74>
 80097ca:	f104 0214 	add.w	r2, r4, #20
 80097ce:	f108 0114 	add.w	r1, r8, #20
 80097d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80097d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	9b00      	ldr	r3, [sp, #0]
 80097de:	9201      	str	r2, [sp, #4]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d80c      	bhi.n	80097fe <__multiply+0x7a>
 80097e4:	2e00      	cmp	r6, #0
 80097e6:	dd03      	ble.n	80097f0 <__multiply+0x6c>
 80097e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d05d      	beq.n	80098ac <__multiply+0x128>
 80097f0:	6106      	str	r6, [r0, #16]
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f8:	f843 2b04 	str.w	r2, [r3], #4
 80097fc:	e7e3      	b.n	80097c6 <__multiply+0x42>
 80097fe:	f8b2 b000 	ldrh.w	fp, [r2]
 8009802:	f1bb 0f00 	cmp.w	fp, #0
 8009806:	d023      	beq.n	8009850 <__multiply+0xcc>
 8009808:	4689      	mov	r9, r1
 800980a:	46ac      	mov	ip, r5
 800980c:	f04f 0800 	mov.w	r8, #0
 8009810:	f859 4b04 	ldr.w	r4, [r9], #4
 8009814:	f8dc a000 	ldr.w	sl, [ip]
 8009818:	b2a3      	uxth	r3, r4
 800981a:	fa1f fa8a 	uxth.w	sl, sl
 800981e:	fb0b a303 	mla	r3, fp, r3, sl
 8009822:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009826:	f8dc 4000 	ldr.w	r4, [ip]
 800982a:	4443      	add	r3, r8
 800982c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009830:	fb0b 840a 	mla	r4, fp, sl, r8
 8009834:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009838:	46e2      	mov	sl, ip
 800983a:	b29b      	uxth	r3, r3
 800983c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009840:	454f      	cmp	r7, r9
 8009842:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009846:	f84a 3b04 	str.w	r3, [sl], #4
 800984a:	d82b      	bhi.n	80098a4 <__multiply+0x120>
 800984c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009856:	3204      	adds	r2, #4
 8009858:	f1ba 0f00 	cmp.w	sl, #0
 800985c:	d020      	beq.n	80098a0 <__multiply+0x11c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	4689      	mov	r9, r1
 8009862:	46a8      	mov	r8, r5
 8009864:	f04f 0b00 	mov.w	fp, #0
 8009868:	f8b9 c000 	ldrh.w	ip, [r9]
 800986c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009870:	fb0a 440c 	mla	r4, sl, ip, r4
 8009874:	445c      	add	r4, fp
 8009876:	46c4      	mov	ip, r8
 8009878:	b29b      	uxth	r3, r3
 800987a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800987e:	f84c 3b04 	str.w	r3, [ip], #4
 8009882:	f859 3b04 	ldr.w	r3, [r9], #4
 8009886:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800988a:	0c1b      	lsrs	r3, r3, #16
 800988c:	fb0a b303 	mla	r3, sl, r3, fp
 8009890:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009894:	454f      	cmp	r7, r9
 8009896:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800989a:	d805      	bhi.n	80098a8 <__multiply+0x124>
 800989c:	f8c8 3004 	str.w	r3, [r8, #4]
 80098a0:	3504      	adds	r5, #4
 80098a2:	e79b      	b.n	80097dc <__multiply+0x58>
 80098a4:	46d4      	mov	ip, sl
 80098a6:	e7b3      	b.n	8009810 <__multiply+0x8c>
 80098a8:	46e0      	mov	r8, ip
 80098aa:	e7dd      	b.n	8009868 <__multiply+0xe4>
 80098ac:	3e01      	subs	r6, #1
 80098ae:	e799      	b.n	80097e4 <__multiply+0x60>

080098b0 <__pow5mult>:
 80098b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b4:	4615      	mov	r5, r2
 80098b6:	f012 0203 	ands.w	r2, r2, #3
 80098ba:	4606      	mov	r6, r0
 80098bc:	460f      	mov	r7, r1
 80098be:	d007      	beq.n	80098d0 <__pow5mult+0x20>
 80098c0:	3a01      	subs	r2, #1
 80098c2:	4c21      	ldr	r4, [pc, #132]	; (8009948 <__pow5mult+0x98>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098ca:	f7ff fec9 	bl	8009660 <__multadd>
 80098ce:	4607      	mov	r7, r0
 80098d0:	10ad      	asrs	r5, r5, #2
 80098d2:	d035      	beq.n	8009940 <__pow5mult+0x90>
 80098d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098d6:	b93c      	cbnz	r4, 80098e8 <__pow5mult+0x38>
 80098d8:	2010      	movs	r0, #16
 80098da:	f7ff fe63 	bl	80095a4 <malloc>
 80098de:	6270      	str	r0, [r6, #36]	; 0x24
 80098e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098e4:	6004      	str	r4, [r0, #0]
 80098e6:	60c4      	str	r4, [r0, #12]
 80098e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098f0:	b94c      	cbnz	r4, 8009906 <__pow5mult+0x56>
 80098f2:	f240 2171 	movw	r1, #625	; 0x271
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff3b 	bl	8009772 <__i2b>
 80098fc:	2300      	movs	r3, #0
 80098fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009902:	4604      	mov	r4, r0
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	f04f 0800 	mov.w	r8, #0
 800990a:	07eb      	lsls	r3, r5, #31
 800990c:	d50a      	bpl.n	8009924 <__pow5mult+0x74>
 800990e:	4639      	mov	r1, r7
 8009910:	4622      	mov	r2, r4
 8009912:	4630      	mov	r0, r6
 8009914:	f7ff ff36 	bl	8009784 <__multiply>
 8009918:	4639      	mov	r1, r7
 800991a:	4681      	mov	r9, r0
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fe88 	bl	8009632 <_Bfree>
 8009922:	464f      	mov	r7, r9
 8009924:	106d      	asrs	r5, r5, #1
 8009926:	d00b      	beq.n	8009940 <__pow5mult+0x90>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	b938      	cbnz	r0, 800993c <__pow5mult+0x8c>
 800992c:	4622      	mov	r2, r4
 800992e:	4621      	mov	r1, r4
 8009930:	4630      	mov	r0, r6
 8009932:	f7ff ff27 	bl	8009784 <__multiply>
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	f8c0 8000 	str.w	r8, [r0]
 800993c:	4604      	mov	r4, r0
 800993e:	e7e4      	b.n	800990a <__pow5mult+0x5a>
 8009940:	4638      	mov	r0, r7
 8009942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009946:	bf00      	nop
 8009948:	0800c400 	.word	0x0800c400

0800994c <__lshift>:
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	460c      	mov	r4, r1
 8009952:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	6849      	ldr	r1, [r1, #4]
 800995a:	eb0a 0903 	add.w	r9, sl, r3
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	4607      	mov	r7, r0
 8009962:	4616      	mov	r6, r2
 8009964:	f109 0501 	add.w	r5, r9, #1
 8009968:	42ab      	cmp	r3, r5
 800996a:	db32      	blt.n	80099d2 <__lshift+0x86>
 800996c:	4638      	mov	r0, r7
 800996e:	f7ff fe2c 	bl	80095ca <_Balloc>
 8009972:	2300      	movs	r3, #0
 8009974:	4680      	mov	r8, r0
 8009976:	f100 0114 	add.w	r1, r0, #20
 800997a:	461a      	mov	r2, r3
 800997c:	4553      	cmp	r3, sl
 800997e:	db2b      	blt.n	80099d8 <__lshift+0x8c>
 8009980:	6920      	ldr	r0, [r4, #16]
 8009982:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009986:	f104 0314 	add.w	r3, r4, #20
 800998a:	f016 021f 	ands.w	r2, r6, #31
 800998e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009992:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009996:	d025      	beq.n	80099e4 <__lshift+0x98>
 8009998:	f1c2 0e20 	rsb	lr, r2, #32
 800999c:	2000      	movs	r0, #0
 800999e:	681e      	ldr	r6, [r3, #0]
 80099a0:	468a      	mov	sl, r1
 80099a2:	4096      	lsls	r6, r2
 80099a4:	4330      	orrs	r0, r6
 80099a6:	f84a 0b04 	str.w	r0, [sl], #4
 80099aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80099ae:	459c      	cmp	ip, r3
 80099b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80099b4:	d814      	bhi.n	80099e0 <__lshift+0x94>
 80099b6:	6048      	str	r0, [r1, #4]
 80099b8:	b108      	cbz	r0, 80099be <__lshift+0x72>
 80099ba:	f109 0502 	add.w	r5, r9, #2
 80099be:	3d01      	subs	r5, #1
 80099c0:	4638      	mov	r0, r7
 80099c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80099c6:	4621      	mov	r1, r4
 80099c8:	f7ff fe33 	bl	8009632 <_Bfree>
 80099cc:	4640      	mov	r0, r8
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	3101      	adds	r1, #1
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	e7c7      	b.n	8009968 <__lshift+0x1c>
 80099d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80099dc:	3301      	adds	r3, #1
 80099de:	e7cd      	b.n	800997c <__lshift+0x30>
 80099e0:	4651      	mov	r1, sl
 80099e2:	e7dc      	b.n	800999e <__lshift+0x52>
 80099e4:	3904      	subs	r1, #4
 80099e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80099ee:	459c      	cmp	ip, r3
 80099f0:	d8f9      	bhi.n	80099e6 <__lshift+0x9a>
 80099f2:	e7e4      	b.n	80099be <__lshift+0x72>

080099f4 <__mcmp>:
 80099f4:	6903      	ldr	r3, [r0, #16]
 80099f6:	690a      	ldr	r2, [r1, #16]
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	b530      	push	{r4, r5, lr}
 80099fc:	d10c      	bne.n	8009a18 <__mcmp+0x24>
 80099fe:	0092      	lsls	r2, r2, #2
 8009a00:	3014      	adds	r0, #20
 8009a02:	3114      	adds	r1, #20
 8009a04:	1884      	adds	r4, r0, r2
 8009a06:	4411      	add	r1, r2
 8009a08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a10:	4295      	cmp	r5, r2
 8009a12:	d003      	beq.n	8009a1c <__mcmp+0x28>
 8009a14:	d305      	bcc.n	8009a22 <__mcmp+0x2e>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4618      	mov	r0, r3
 8009a1a:	bd30      	pop	{r4, r5, pc}
 8009a1c:	42a0      	cmp	r0, r4
 8009a1e:	d3f3      	bcc.n	8009a08 <__mcmp+0x14>
 8009a20:	e7fa      	b.n	8009a18 <__mcmp+0x24>
 8009a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a26:	e7f7      	b.n	8009a18 <__mcmp+0x24>

08009a28 <__mdiff>:
 8009a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	4607      	mov	r7, r0
 8009a30:	4611      	mov	r1, r2
 8009a32:	4628      	mov	r0, r5
 8009a34:	4614      	mov	r4, r2
 8009a36:	f7ff ffdd 	bl	80099f4 <__mcmp>
 8009a3a:	1e06      	subs	r6, r0, #0
 8009a3c:	d108      	bne.n	8009a50 <__mdiff+0x28>
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4638      	mov	r0, r7
 8009a42:	f7ff fdc2 	bl	80095ca <_Balloc>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a50:	bfa4      	itt	ge
 8009a52:	4623      	movge	r3, r4
 8009a54:	462c      	movge	r4, r5
 8009a56:	4638      	mov	r0, r7
 8009a58:	6861      	ldr	r1, [r4, #4]
 8009a5a:	bfa6      	itte	ge
 8009a5c:	461d      	movge	r5, r3
 8009a5e:	2600      	movge	r6, #0
 8009a60:	2601      	movlt	r6, #1
 8009a62:	f7ff fdb2 	bl	80095ca <_Balloc>
 8009a66:	692b      	ldr	r3, [r5, #16]
 8009a68:	60c6      	str	r6, [r0, #12]
 8009a6a:	6926      	ldr	r6, [r4, #16]
 8009a6c:	f105 0914 	add.w	r9, r5, #20
 8009a70:	f104 0214 	add.w	r2, r4, #20
 8009a74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a7c:	f100 0514 	add.w	r5, r0, #20
 8009a80:	f04f 0e00 	mov.w	lr, #0
 8009a84:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a88:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a8c:	fa1e f18a 	uxtah	r1, lr, sl
 8009a90:	b2a3      	uxth	r3, r4
 8009a92:	1ac9      	subs	r1, r1, r3
 8009a94:	0c23      	lsrs	r3, r4, #16
 8009a96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a9e:	b289      	uxth	r1, r1
 8009aa0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009aa4:	45c8      	cmp	r8, r9
 8009aa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009aaa:	4694      	mov	ip, r2
 8009aac:	f845 3b04 	str.w	r3, [r5], #4
 8009ab0:	d8e8      	bhi.n	8009a84 <__mdiff+0x5c>
 8009ab2:	45bc      	cmp	ip, r7
 8009ab4:	d304      	bcc.n	8009ac0 <__mdiff+0x98>
 8009ab6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009aba:	b183      	cbz	r3, 8009ade <__mdiff+0xb6>
 8009abc:	6106      	str	r6, [r0, #16]
 8009abe:	e7c5      	b.n	8009a4c <__mdiff+0x24>
 8009ac0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ac4:	fa1e f381 	uxtah	r3, lr, r1
 8009ac8:	141a      	asrs	r2, r3, #16
 8009aca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ad4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009ad8:	f845 3b04 	str.w	r3, [r5], #4
 8009adc:	e7e9      	b.n	8009ab2 <__mdiff+0x8a>
 8009ade:	3e01      	subs	r6, #1
 8009ae0:	e7e9      	b.n	8009ab6 <__mdiff+0x8e>

08009ae2 <__d2b>:
 8009ae2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ae6:	460e      	mov	r6, r1
 8009ae8:	2101      	movs	r1, #1
 8009aea:	ec59 8b10 	vmov	r8, r9, d0
 8009aee:	4615      	mov	r5, r2
 8009af0:	f7ff fd6b 	bl	80095ca <_Balloc>
 8009af4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009af8:	4607      	mov	r7, r0
 8009afa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009afe:	bb34      	cbnz	r4, 8009b4e <__d2b+0x6c>
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	f1b8 0300 	subs.w	r3, r8, #0
 8009b06:	d027      	beq.n	8009b58 <__d2b+0x76>
 8009b08:	a802      	add	r0, sp, #8
 8009b0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009b0e:	f7ff fe01 	bl	8009714 <__lo0bits>
 8009b12:	9900      	ldr	r1, [sp, #0]
 8009b14:	b1f0      	cbz	r0, 8009b54 <__d2b+0x72>
 8009b16:	9a01      	ldr	r2, [sp, #4]
 8009b18:	f1c0 0320 	rsb	r3, r0, #32
 8009b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b20:	430b      	orrs	r3, r1
 8009b22:	40c2      	lsrs	r2, r0
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	9201      	str	r2, [sp, #4]
 8009b28:	9b01      	ldr	r3, [sp, #4]
 8009b2a:	61bb      	str	r3, [r7, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	bf14      	ite	ne
 8009b30:	2102      	movne	r1, #2
 8009b32:	2101      	moveq	r1, #1
 8009b34:	6139      	str	r1, [r7, #16]
 8009b36:	b1c4      	cbz	r4, 8009b6a <__d2b+0x88>
 8009b38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b3c:	4404      	add	r4, r0
 8009b3e:	6034      	str	r4, [r6, #0]
 8009b40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b44:	6028      	str	r0, [r5, #0]
 8009b46:	4638      	mov	r0, r7
 8009b48:	b003      	add	sp, #12
 8009b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b52:	e7d5      	b.n	8009b00 <__d2b+0x1e>
 8009b54:	6179      	str	r1, [r7, #20]
 8009b56:	e7e7      	b.n	8009b28 <__d2b+0x46>
 8009b58:	a801      	add	r0, sp, #4
 8009b5a:	f7ff fddb 	bl	8009714 <__lo0bits>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	2101      	movs	r1, #1
 8009b64:	6139      	str	r1, [r7, #16]
 8009b66:	3020      	adds	r0, #32
 8009b68:	e7e5      	b.n	8009b36 <__d2b+0x54>
 8009b6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b72:	6030      	str	r0, [r6, #0]
 8009b74:	6918      	ldr	r0, [r3, #16]
 8009b76:	f7ff fdae 	bl	80096d6 <__hi0bits>
 8009b7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b7e:	e7e1      	b.n	8009b44 <__d2b+0x62>

08009b80 <_calloc_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	fb02 f401 	mul.w	r4, r2, r1
 8009b86:	4621      	mov	r1, r4
 8009b88:	f000 f808 	bl	8009b9c <_malloc_r>
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	b118      	cbz	r0, 8009b98 <_calloc_r+0x18>
 8009b90:	4622      	mov	r2, r4
 8009b92:	2100      	movs	r1, #0
 8009b94:	f7fe fb62 	bl	800825c <memset>
 8009b98:	4628      	mov	r0, r5
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}

08009b9c <_malloc_r>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	1ccd      	adds	r5, r1, #3
 8009ba0:	f025 0503 	bic.w	r5, r5, #3
 8009ba4:	3508      	adds	r5, #8
 8009ba6:	2d0c      	cmp	r5, #12
 8009ba8:	bf38      	it	cc
 8009baa:	250c      	movcc	r5, #12
 8009bac:	2d00      	cmp	r5, #0
 8009bae:	4606      	mov	r6, r0
 8009bb0:	db01      	blt.n	8009bb6 <_malloc_r+0x1a>
 8009bb2:	42a9      	cmp	r1, r5
 8009bb4:	d903      	bls.n	8009bbe <_malloc_r+0x22>
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	6033      	str	r3, [r6, #0]
 8009bba:	2000      	movs	r0, #0
 8009bbc:	bd70      	pop	{r4, r5, r6, pc}
 8009bbe:	f000 f869 	bl	8009c94 <__malloc_lock>
 8009bc2:	4a21      	ldr	r2, [pc, #132]	; (8009c48 <_malloc_r+0xac>)
 8009bc4:	6814      	ldr	r4, [r2, #0]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	b991      	cbnz	r1, 8009bf0 <_malloc_r+0x54>
 8009bca:	4c20      	ldr	r4, [pc, #128]	; (8009c4c <_malloc_r+0xb0>)
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	b91b      	cbnz	r3, 8009bd8 <_malloc_r+0x3c>
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 f83d 	bl	8009c50 <_sbrk_r>
 8009bd6:	6020      	str	r0, [r4, #0]
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f000 f838 	bl	8009c50 <_sbrk_r>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d124      	bne.n	8009c2e <_malloc_r+0x92>
 8009be4:	230c      	movs	r3, #12
 8009be6:	6033      	str	r3, [r6, #0]
 8009be8:	4630      	mov	r0, r6
 8009bea:	f000 f854 	bl	8009c96 <__malloc_unlock>
 8009bee:	e7e4      	b.n	8009bba <_malloc_r+0x1e>
 8009bf0:	680b      	ldr	r3, [r1, #0]
 8009bf2:	1b5b      	subs	r3, r3, r5
 8009bf4:	d418      	bmi.n	8009c28 <_malloc_r+0x8c>
 8009bf6:	2b0b      	cmp	r3, #11
 8009bf8:	d90f      	bls.n	8009c1a <_malloc_r+0x7e>
 8009bfa:	600b      	str	r3, [r1, #0]
 8009bfc:	50cd      	str	r5, [r1, r3]
 8009bfe:	18cc      	adds	r4, r1, r3
 8009c00:	4630      	mov	r0, r6
 8009c02:	f000 f848 	bl	8009c96 <__malloc_unlock>
 8009c06:	f104 000b 	add.w	r0, r4, #11
 8009c0a:	1d23      	adds	r3, r4, #4
 8009c0c:	f020 0007 	bic.w	r0, r0, #7
 8009c10:	1ac3      	subs	r3, r0, r3
 8009c12:	d0d3      	beq.n	8009bbc <_malloc_r+0x20>
 8009c14:	425a      	negs	r2, r3
 8009c16:	50e2      	str	r2, [r4, r3]
 8009c18:	e7d0      	b.n	8009bbc <_malloc_r+0x20>
 8009c1a:	428c      	cmp	r4, r1
 8009c1c:	684b      	ldr	r3, [r1, #4]
 8009c1e:	bf16      	itet	ne
 8009c20:	6063      	strne	r3, [r4, #4]
 8009c22:	6013      	streq	r3, [r2, #0]
 8009c24:	460c      	movne	r4, r1
 8009c26:	e7eb      	b.n	8009c00 <_malloc_r+0x64>
 8009c28:	460c      	mov	r4, r1
 8009c2a:	6849      	ldr	r1, [r1, #4]
 8009c2c:	e7cc      	b.n	8009bc8 <_malloc_r+0x2c>
 8009c2e:	1cc4      	adds	r4, r0, #3
 8009c30:	f024 0403 	bic.w	r4, r4, #3
 8009c34:	42a0      	cmp	r0, r4
 8009c36:	d005      	beq.n	8009c44 <_malloc_r+0xa8>
 8009c38:	1a21      	subs	r1, r4, r0
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f000 f808 	bl	8009c50 <_sbrk_r>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d0cf      	beq.n	8009be4 <_malloc_r+0x48>
 8009c44:	6025      	str	r5, [r4, #0]
 8009c46:	e7db      	b.n	8009c00 <_malloc_r+0x64>
 8009c48:	2000030c 	.word	0x2000030c
 8009c4c:	20000310 	.word	0x20000310

08009c50 <_sbrk_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4c06      	ldr	r4, [pc, #24]	; (8009c6c <_sbrk_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4605      	mov	r5, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	f7f7 fd10 	bl	8001680 <_sbrk>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_sbrk_r+0x1a>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_sbrk_r+0x1a>
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	20000880 	.word	0x20000880

08009c70 <__ascii_mbtowc>:
 8009c70:	b082      	sub	sp, #8
 8009c72:	b901      	cbnz	r1, 8009c76 <__ascii_mbtowc+0x6>
 8009c74:	a901      	add	r1, sp, #4
 8009c76:	b142      	cbz	r2, 8009c8a <__ascii_mbtowc+0x1a>
 8009c78:	b14b      	cbz	r3, 8009c8e <__ascii_mbtowc+0x1e>
 8009c7a:	7813      	ldrb	r3, [r2, #0]
 8009c7c:	600b      	str	r3, [r1, #0]
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	1c10      	adds	r0, r2, #0
 8009c82:	bf18      	it	ne
 8009c84:	2001      	movne	r0, #1
 8009c86:	b002      	add	sp, #8
 8009c88:	4770      	bx	lr
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	e7fb      	b.n	8009c86 <__ascii_mbtowc+0x16>
 8009c8e:	f06f 0001 	mvn.w	r0, #1
 8009c92:	e7f8      	b.n	8009c86 <__ascii_mbtowc+0x16>

08009c94 <__malloc_lock>:
 8009c94:	4770      	bx	lr

08009c96 <__malloc_unlock>:
 8009c96:	4770      	bx	lr

08009c98 <__ascii_wctomb>:
 8009c98:	b149      	cbz	r1, 8009cae <__ascii_wctomb+0x16>
 8009c9a:	2aff      	cmp	r2, #255	; 0xff
 8009c9c:	bf85      	ittet	hi
 8009c9e:	238a      	movhi	r3, #138	; 0x8a
 8009ca0:	6003      	strhi	r3, [r0, #0]
 8009ca2:	700a      	strbls	r2, [r1, #0]
 8009ca4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ca8:	bf98      	it	ls
 8009caa:	2001      	movls	r0, #1
 8009cac:	4770      	bx	lr
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4770      	bx	lr
 8009cb2:	0000      	movs	r0, r0
 8009cb4:	0000      	movs	r0, r0
	...

08009cb8 <cos>:
 8009cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cba:	ec51 0b10 	vmov	r0, r1, d0
 8009cbe:	4a1e      	ldr	r2, [pc, #120]	; (8009d38 <cos+0x80>)
 8009cc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	dc06      	bgt.n	8009cd6 <cos+0x1e>
 8009cc8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009d30 <cos+0x78>
 8009ccc:	f001 fae0 	bl	800b290 <__kernel_cos>
 8009cd0:	ec51 0b10 	vmov	r0, r1, d0
 8009cd4:	e007      	b.n	8009ce6 <cos+0x2e>
 8009cd6:	4a19      	ldr	r2, [pc, #100]	; (8009d3c <cos+0x84>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	dd09      	ble.n	8009cf0 <cos+0x38>
 8009cdc:	ee10 2a10 	vmov	r2, s0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	f7f6 fa85 	bl	80001f0 <__aeabi_dsub>
 8009ce6:	ec41 0b10 	vmov	d0, r0, r1
 8009cea:	b005      	add	sp, #20
 8009cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cf0:	4668      	mov	r0, sp
 8009cf2:	f001 f829 	bl	800ad48 <__ieee754_rem_pio2>
 8009cf6:	f000 0003 	and.w	r0, r0, #3
 8009cfa:	2801      	cmp	r0, #1
 8009cfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d00:	ed9d 0b00 	vldr	d0, [sp]
 8009d04:	d007      	beq.n	8009d16 <cos+0x5e>
 8009d06:	2802      	cmp	r0, #2
 8009d08:	d00e      	beq.n	8009d28 <cos+0x70>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0de      	beq.n	8009ccc <cos+0x14>
 8009d0e:	2001      	movs	r0, #1
 8009d10:	f001 fec6 	bl	800baa0 <__kernel_sin>
 8009d14:	e7dc      	b.n	8009cd0 <cos+0x18>
 8009d16:	f001 fec3 	bl	800baa0 <__kernel_sin>
 8009d1a:	ec53 2b10 	vmov	r2, r3, d0
 8009d1e:	ee10 0a10 	vmov	r0, s0
 8009d22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d26:	e7de      	b.n	8009ce6 <cos+0x2e>
 8009d28:	f001 fab2 	bl	800b290 <__kernel_cos>
 8009d2c:	e7f5      	b.n	8009d1a <cos+0x62>
 8009d2e:	bf00      	nop
	...
 8009d38:	3fe921fb 	.word	0x3fe921fb
 8009d3c:	7fefffff 	.word	0x7fefffff

08009d40 <sin>:
 8009d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d42:	ec51 0b10 	vmov	r0, r1, d0
 8009d46:	4a20      	ldr	r2, [pc, #128]	; (8009dc8 <sin+0x88>)
 8009d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	dc07      	bgt.n	8009d60 <sin+0x20>
 8009d50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009dc0 <sin+0x80>
 8009d54:	2000      	movs	r0, #0
 8009d56:	f001 fea3 	bl	800baa0 <__kernel_sin>
 8009d5a:	ec51 0b10 	vmov	r0, r1, d0
 8009d5e:	e007      	b.n	8009d70 <sin+0x30>
 8009d60:	4a1a      	ldr	r2, [pc, #104]	; (8009dcc <sin+0x8c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	dd09      	ble.n	8009d7a <sin+0x3a>
 8009d66:	ee10 2a10 	vmov	r2, s0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	f7f6 fa40 	bl	80001f0 <__aeabi_dsub>
 8009d70:	ec41 0b10 	vmov	d0, r0, r1
 8009d74:	b005      	add	sp, #20
 8009d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d7a:	4668      	mov	r0, sp
 8009d7c:	f000 ffe4 	bl	800ad48 <__ieee754_rem_pio2>
 8009d80:	f000 0003 	and.w	r0, r0, #3
 8009d84:	2801      	cmp	r0, #1
 8009d86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d8a:	ed9d 0b00 	vldr	d0, [sp]
 8009d8e:	d004      	beq.n	8009d9a <sin+0x5a>
 8009d90:	2802      	cmp	r0, #2
 8009d92:	d005      	beq.n	8009da0 <sin+0x60>
 8009d94:	b970      	cbnz	r0, 8009db4 <sin+0x74>
 8009d96:	2001      	movs	r0, #1
 8009d98:	e7dd      	b.n	8009d56 <sin+0x16>
 8009d9a:	f001 fa79 	bl	800b290 <__kernel_cos>
 8009d9e:	e7dc      	b.n	8009d5a <sin+0x1a>
 8009da0:	2001      	movs	r0, #1
 8009da2:	f001 fe7d 	bl	800baa0 <__kernel_sin>
 8009da6:	ec53 2b10 	vmov	r2, r3, d0
 8009daa:	ee10 0a10 	vmov	r0, s0
 8009dae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009db2:	e7dd      	b.n	8009d70 <sin+0x30>
 8009db4:	f001 fa6c 	bl	800b290 <__kernel_cos>
 8009db8:	e7f5      	b.n	8009da6 <sin+0x66>
 8009dba:	bf00      	nop
 8009dbc:	f3af 8000 	nop.w
	...
 8009dc8:	3fe921fb 	.word	0x3fe921fb
 8009dcc:	7fefffff 	.word	0x7fefffff

08009dd0 <atan2>:
 8009dd0:	f000 b9ca 	b.w	800a168 <__ieee754_atan2>

08009dd4 <pow>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	ed2d 8b04 	vpush	{d8-d9}
 8009ddc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a0b0 <pow+0x2dc>
 8009de0:	b08d      	sub	sp, #52	; 0x34
 8009de2:	ec57 6b10 	vmov	r6, r7, d0
 8009de6:	ec55 4b11 	vmov	r4, r5, d1
 8009dea:	f000 fa9d 	bl	800a328 <__ieee754_pow>
 8009dee:	f999 3000 	ldrsb.w	r3, [r9]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	eeb0 8a40 	vmov.f32	s16, s0
 8009dfa:	eef0 8a60 	vmov.f32	s17, s1
 8009dfe:	46c8      	mov	r8, r9
 8009e00:	d05f      	beq.n	8009ec2 <pow+0xee>
 8009e02:	4622      	mov	r2, r4
 8009e04:	462b      	mov	r3, r5
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7f6 fe43 	bl	8000a94 <__aeabi_dcmpun>
 8009e0e:	4683      	mov	fp, r0
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d156      	bne.n	8009ec2 <pow+0xee>
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fe3a 	bl	8000a94 <__aeabi_dcmpun>
 8009e20:	9001      	str	r0, [sp, #4]
 8009e22:	b1e8      	cbz	r0, 8009e60 <pow+0x8c>
 8009e24:	2200      	movs	r2, #0
 8009e26:	2300      	movs	r3, #0
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 fe00 	bl	8000a30 <__aeabi_dcmpeq>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d046      	beq.n	8009ec2 <pow+0xee>
 8009e34:	2301      	movs	r3, #1
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	4b96      	ldr	r3, [pc, #600]	; (800a094 <pow+0x2c0>)
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	4b96      	ldr	r3, [pc, #600]	; (800a098 <pow+0x2c4>)
 8009e3e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009e42:	2200      	movs	r2, #0
 8009e44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e48:	9b00      	ldr	r3, [sp, #0]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009e54:	d033      	beq.n	8009ebe <pow+0xea>
 8009e56:	a802      	add	r0, sp, #8
 8009e58:	f002 f916 	bl	800c088 <matherr>
 8009e5c:	bb48      	cbnz	r0, 8009eb2 <pow+0xde>
 8009e5e:	e05d      	b.n	8009f1c <pow+0x148>
 8009e60:	f04f 0a00 	mov.w	sl, #0
 8009e64:	f04f 0b00 	mov.w	fp, #0
 8009e68:	4652      	mov	r2, sl
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	4639      	mov	r1, r7
 8009e70:	f7f6 fdde 	bl	8000a30 <__aeabi_dcmpeq>
 8009e74:	ec4b ab19 	vmov	d9, sl, fp
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d054      	beq.n	8009f26 <pow+0x152>
 8009e7c:	4652      	mov	r2, sl
 8009e7e:	465b      	mov	r3, fp
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 fdd4 	bl	8000a30 <__aeabi_dcmpeq>
 8009e88:	4680      	mov	r8, r0
 8009e8a:	b318      	cbz	r0, 8009ed4 <pow+0x100>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	4b80      	ldr	r3, [pc, #512]	; (800a094 <pow+0x2c0>)
 8009e92:	9303      	str	r3, [sp, #12]
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	930a      	str	r3, [sp, #40]	; 0x28
 8009e98:	9b00      	ldr	r3, [sp, #0]
 8009e9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ea2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0d5      	beq.n	8009e56 <pow+0x82>
 8009eaa:	4b7b      	ldr	r3, [pc, #492]	; (800a098 <pow+0x2c4>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	b11b      	cbz	r3, 8009ebe <pow+0xea>
 8009eb6:	f7fe f9a7 	bl	8008208 <__errno>
 8009eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec6:	eef0 0a68 	vmov.f32	s1, s17
 8009eca:	b00d      	add	sp, #52	; 0x34
 8009ecc:	ecbd 8b04 	vpop	{d8-d9}
 8009ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed4:	ec45 4b10 	vmov	d0, r4, r5
 8009ed8:	f002 f847 	bl	800bf6a <finite>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0f0      	beq.n	8009ec2 <pow+0xee>
 8009ee0:	4652      	mov	r2, sl
 8009ee2:	465b      	mov	r3, fp
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fdac 	bl	8000a44 <__aeabi_dcmplt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d0e8      	beq.n	8009ec2 <pow+0xee>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	9302      	str	r3, [sp, #8]
 8009ef4:	4b67      	ldr	r3, [pc, #412]	; (800a094 <pow+0x2c0>)
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	f999 3000 	ldrsb.w	r3, [r9]
 8009efc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009f00:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009f08:	b913      	cbnz	r3, 8009f10 <pow+0x13c>
 8009f0a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009f0e:	e7a2      	b.n	8009e56 <pow+0x82>
 8009f10:	4962      	ldr	r1, [pc, #392]	; (800a09c <pow+0x2c8>)
 8009f12:	2000      	movs	r0, #0
 8009f14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d19c      	bne.n	8009e56 <pow+0x82>
 8009f1c:	f7fe f974 	bl	8008208 <__errno>
 8009f20:	2321      	movs	r3, #33	; 0x21
 8009f22:	6003      	str	r3, [r0, #0]
 8009f24:	e7c5      	b.n	8009eb2 <pow+0xde>
 8009f26:	eeb0 0a48 	vmov.f32	s0, s16
 8009f2a:	eef0 0a68 	vmov.f32	s1, s17
 8009f2e:	f002 f81c 	bl	800bf6a <finite>
 8009f32:	9000      	str	r0, [sp, #0]
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f040 8081 	bne.w	800a03c <pow+0x268>
 8009f3a:	ec47 6b10 	vmov	d0, r6, r7
 8009f3e:	f002 f814 	bl	800bf6a <finite>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d07a      	beq.n	800a03c <pow+0x268>
 8009f46:	ec45 4b10 	vmov	d0, r4, r5
 8009f4a:	f002 f80e 	bl	800bf6a <finite>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d074      	beq.n	800a03c <pow+0x268>
 8009f52:	ec53 2b18 	vmov	r2, r3, d8
 8009f56:	ee18 0a10 	vmov	r0, s16
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	f7f6 fd9a 	bl	8000a94 <__aeabi_dcmpun>
 8009f60:	f999 9000 	ldrsb.w	r9, [r9]
 8009f64:	4b4b      	ldr	r3, [pc, #300]	; (800a094 <pow+0x2c0>)
 8009f66:	b1b0      	cbz	r0, 8009f96 <pow+0x1c2>
 8009f68:	2201      	movs	r2, #1
 8009f6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f6e:	9b00      	ldr	r3, [sp, #0]
 8009f70:	930a      	str	r3, [sp, #40]	; 0x28
 8009f72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009f7a:	f1b9 0f00 	cmp.w	r9, #0
 8009f7e:	d0c4      	beq.n	8009f0a <pow+0x136>
 8009f80:	4652      	mov	r2, sl
 8009f82:	465b      	mov	r3, fp
 8009f84:	4650      	mov	r0, sl
 8009f86:	4659      	mov	r1, fp
 8009f88:	f7f6 fc14 	bl	80007b4 <__aeabi_ddiv>
 8009f8c:	f1b9 0f02 	cmp.w	r9, #2
 8009f90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f94:	e7c1      	b.n	8009f1a <pow+0x146>
 8009f96:	2203      	movs	r2, #3
 8009f98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f9c:	900a      	str	r0, [sp, #40]	; 0x28
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4b3e      	ldr	r3, [pc, #248]	; (800a0a0 <pow+0x2cc>)
 8009fa6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009faa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fae:	f7f6 fad7 	bl	8000560 <__aeabi_dmul>
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	f1b9 0f00 	cmp.w	r9, #0
 8009fba:	d124      	bne.n	800a006 <pow+0x232>
 8009fbc:	4b39      	ldr	r3, [pc, #228]	; (800a0a4 <pow+0x2d0>)
 8009fbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009fc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4652      	mov	r2, sl
 8009fca:	465b      	mov	r3, fp
 8009fcc:	4639      	mov	r1, r7
 8009fce:	f7f6 fd39 	bl	8000a44 <__aeabi_dcmplt>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d056      	beq.n	800a084 <pow+0x2b0>
 8009fd6:	ec45 4b10 	vmov	d0, r4, r5
 8009fda:	f002 f861 	bl	800c0a0 <rint>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	ec51 0b10 	vmov	r0, r1, d0
 8009fe6:	f7f6 fd23 	bl	8000a30 <__aeabi_dcmpeq>
 8009fea:	b920      	cbnz	r0, 8009ff6 <pow+0x222>
 8009fec:	4b2e      	ldr	r3, [pc, #184]	; (800a0a8 <pow+0x2d4>)
 8009fee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ff2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ff6:	f998 3000 	ldrsb.w	r3, [r8]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d142      	bne.n	800a084 <pow+0x2b0>
 8009ffe:	f7fe f903 	bl	8008208 <__errno>
 800a002:	2322      	movs	r3, #34	; 0x22
 800a004:	e78d      	b.n	8009f22 <pow+0x14e>
 800a006:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <pow+0x2d8>)
 800a008:	2200      	movs	r2, #0
 800a00a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a00e:	4630      	mov	r0, r6
 800a010:	4652      	mov	r2, sl
 800a012:	465b      	mov	r3, fp
 800a014:	4639      	mov	r1, r7
 800a016:	f7f6 fd15 	bl	8000a44 <__aeabi_dcmplt>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d0eb      	beq.n	8009ff6 <pow+0x222>
 800a01e:	ec45 4b10 	vmov	d0, r4, r5
 800a022:	f002 f83d 	bl	800c0a0 <rint>
 800a026:	4622      	mov	r2, r4
 800a028:	462b      	mov	r3, r5
 800a02a:	ec51 0b10 	vmov	r0, r1, d0
 800a02e:	f7f6 fcff 	bl	8000a30 <__aeabi_dcmpeq>
 800a032:	2800      	cmp	r0, #0
 800a034:	d1df      	bne.n	8009ff6 <pow+0x222>
 800a036:	2200      	movs	r2, #0
 800a038:	4b18      	ldr	r3, [pc, #96]	; (800a09c <pow+0x2c8>)
 800a03a:	e7da      	b.n	8009ff2 <pow+0x21e>
 800a03c:	2200      	movs	r2, #0
 800a03e:	2300      	movs	r3, #0
 800a040:	ec51 0b18 	vmov	r0, r1, d8
 800a044:	f7f6 fcf4 	bl	8000a30 <__aeabi_dcmpeq>
 800a048:	2800      	cmp	r0, #0
 800a04a:	f43f af3a 	beq.w	8009ec2 <pow+0xee>
 800a04e:	ec47 6b10 	vmov	d0, r6, r7
 800a052:	f001 ff8a 	bl	800bf6a <finite>
 800a056:	2800      	cmp	r0, #0
 800a058:	f43f af33 	beq.w	8009ec2 <pow+0xee>
 800a05c:	ec45 4b10 	vmov	d0, r4, r5
 800a060:	f001 ff83 	bl	800bf6a <finite>
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f af2c 	beq.w	8009ec2 <pow+0xee>
 800a06a:	2304      	movs	r3, #4
 800a06c:	9302      	str	r3, [sp, #8]
 800a06e:	4b09      	ldr	r3, [pc, #36]	; (800a094 <pow+0x2c0>)
 800a070:	9303      	str	r3, [sp, #12]
 800a072:	2300      	movs	r3, #0
 800a074:	930a      	str	r3, [sp, #40]	; 0x28
 800a076:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a07a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a07e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800a082:	e7b8      	b.n	8009ff6 <pow+0x222>
 800a084:	a802      	add	r0, sp, #8
 800a086:	f001 ffff 	bl	800c088 <matherr>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	f47f af11 	bne.w	8009eb2 <pow+0xde>
 800a090:	e7b5      	b.n	8009ffe <pow+0x22a>
 800a092:	bf00      	nop
 800a094:	0800c517 	.word	0x0800c517
 800a098:	3ff00000 	.word	0x3ff00000
 800a09c:	fff00000 	.word	0xfff00000
 800a0a0:	3fe00000 	.word	0x3fe00000
 800a0a4:	47efffff 	.word	0x47efffff
 800a0a8:	c7efffff 	.word	0xc7efffff
 800a0ac:	7ff00000 	.word	0x7ff00000
 800a0b0:	20000268 	.word	0x20000268

0800a0b4 <sqrt>:
 800a0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0b8:	ed2d 8b02 	vpush	{d8}
 800a0bc:	b08b      	sub	sp, #44	; 0x2c
 800a0be:	ec55 4b10 	vmov	r4, r5, d0
 800a0c2:	f001 f833 	bl	800b12c <__ieee754_sqrt>
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <sqrt+0xac>)
 800a0c8:	eeb0 8a40 	vmov.f32	s16, s0
 800a0cc:	eef0 8a60 	vmov.f32	s17, s1
 800a0d0:	f993 6000 	ldrsb.w	r6, [r3]
 800a0d4:	1c73      	adds	r3, r6, #1
 800a0d6:	d02a      	beq.n	800a12e <sqrt+0x7a>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	462b      	mov	r3, r5
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f7f6 fcd8 	bl	8000a94 <__aeabi_dcmpun>
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	bb10      	cbnz	r0, 800a12e <sqrt+0x7a>
 800a0e8:	f04f 0800 	mov.w	r8, #0
 800a0ec:	f04f 0900 	mov.w	r9, #0
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f7f6 fca4 	bl	8000a44 <__aeabi_dcmplt>
 800a0fc:	b1b8      	cbz	r0, 800a12e <sqrt+0x7a>
 800a0fe:	2301      	movs	r3, #1
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	4b18      	ldr	r3, [pc, #96]	; (800a164 <sqrt+0xb0>)
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	9708      	str	r7, [sp, #32]
 800a108:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a10c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a110:	b9b6      	cbnz	r6, 800a140 <sqrt+0x8c>
 800a112:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a116:	4668      	mov	r0, sp
 800a118:	f001 ffb6 	bl	800c088 <matherr>
 800a11c:	b1d0      	cbz	r0, 800a154 <sqrt+0xa0>
 800a11e:	9b08      	ldr	r3, [sp, #32]
 800a120:	b11b      	cbz	r3, 800a12a <sqrt+0x76>
 800a122:	f7fe f871 	bl	8008208 <__errno>
 800a126:	9b08      	ldr	r3, [sp, #32]
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a12e:	eeb0 0a48 	vmov.f32	s0, s16
 800a132:	eef0 0a68 	vmov.f32	s1, s17
 800a136:	b00b      	add	sp, #44	; 0x2c
 800a138:	ecbd 8b02 	vpop	{d8}
 800a13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	4640      	mov	r0, r8
 800a146:	4649      	mov	r1, r9
 800a148:	f7f6 fb34 	bl	80007b4 <__aeabi_ddiv>
 800a14c:	2e02      	cmp	r6, #2
 800a14e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a152:	d1e0      	bne.n	800a116 <sqrt+0x62>
 800a154:	f7fe f858 	bl	8008208 <__errno>
 800a158:	2321      	movs	r3, #33	; 0x21
 800a15a:	6003      	str	r3, [r0, #0]
 800a15c:	e7df      	b.n	800a11e <sqrt+0x6a>
 800a15e:	bf00      	nop
 800a160:	20000268 	.word	0x20000268
 800a164:	0800c51b 	.word	0x0800c51b

0800a168 <__ieee754_atan2>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	ec57 6b11 	vmov	r6, r7, d1
 800a170:	4273      	negs	r3, r6
 800a172:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a176:	4333      	orrs	r3, r6
 800a178:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800a320 <__ieee754_atan2+0x1b8>
 800a17c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a180:	4573      	cmp	r3, lr
 800a182:	ec51 0b10 	vmov	r0, r1, d0
 800a186:	ee11 8a10 	vmov	r8, s2
 800a18a:	d80a      	bhi.n	800a1a2 <__ieee754_atan2+0x3a>
 800a18c:	4244      	negs	r4, r0
 800a18e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a192:	4304      	orrs	r4, r0
 800a194:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a198:	4574      	cmp	r4, lr
 800a19a:	468c      	mov	ip, r1
 800a19c:	ee10 9a10 	vmov	r9, s0
 800a1a0:	d907      	bls.n	800a1b2 <__ieee754_atan2+0x4a>
 800a1a2:	4632      	mov	r2, r6
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	f7f6 f825 	bl	80001f4 <__adddf3>
 800a1aa:	ec41 0b10 	vmov	d0, r0, r1
 800a1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a1b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a1ba:	4334      	orrs	r4, r6
 800a1bc:	d103      	bne.n	800a1c6 <__ieee754_atan2+0x5e>
 800a1be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c2:	f001 bd29 	b.w	800bc18 <atan>
 800a1c6:	17bc      	asrs	r4, r7, #30
 800a1c8:	f004 0402 	and.w	r4, r4, #2
 800a1cc:	ea53 0909 	orrs.w	r9, r3, r9
 800a1d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a1d4:	d107      	bne.n	800a1e6 <__ieee754_atan2+0x7e>
 800a1d6:	2c02      	cmp	r4, #2
 800a1d8:	d073      	beq.n	800a2c2 <__ieee754_atan2+0x15a>
 800a1da:	2c03      	cmp	r4, #3
 800a1dc:	d1e5      	bne.n	800a1aa <__ieee754_atan2+0x42>
 800a1de:	a13e      	add	r1, pc, #248	; (adr r1, 800a2d8 <__ieee754_atan2+0x170>)
 800a1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e4:	e7e1      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a1e6:	ea52 0808 	orrs.w	r8, r2, r8
 800a1ea:	d106      	bne.n	800a1fa <__ieee754_atan2+0x92>
 800a1ec:	f1bc 0f00 	cmp.w	ip, #0
 800a1f0:	da6b      	bge.n	800a2ca <__ieee754_atan2+0x162>
 800a1f2:	a13b      	add	r1, pc, #236	; (adr r1, 800a2e0 <__ieee754_atan2+0x178>)
 800a1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f8:	e7d7      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a1fa:	4572      	cmp	r2, lr
 800a1fc:	d120      	bne.n	800a240 <__ieee754_atan2+0xd8>
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d111      	bne.n	800a226 <__ieee754_atan2+0xbe>
 800a202:	2c02      	cmp	r4, #2
 800a204:	d007      	beq.n	800a216 <__ieee754_atan2+0xae>
 800a206:	2c03      	cmp	r4, #3
 800a208:	d009      	beq.n	800a21e <__ieee754_atan2+0xb6>
 800a20a:	2c01      	cmp	r4, #1
 800a20c:	d155      	bne.n	800a2ba <__ieee754_atan2+0x152>
 800a20e:	a136      	add	r1, pc, #216	; (adr r1, 800a2e8 <__ieee754_atan2+0x180>)
 800a210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a214:	e7c9      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a216:	a136      	add	r1, pc, #216	; (adr r1, 800a2f0 <__ieee754_atan2+0x188>)
 800a218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21c:	e7c5      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a21e:	a136      	add	r1, pc, #216	; (adr r1, 800a2f8 <__ieee754_atan2+0x190>)
 800a220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a224:	e7c1      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a226:	2c02      	cmp	r4, #2
 800a228:	d04b      	beq.n	800a2c2 <__ieee754_atan2+0x15a>
 800a22a:	2c03      	cmp	r4, #3
 800a22c:	d0d7      	beq.n	800a1de <__ieee754_atan2+0x76>
 800a22e:	2c01      	cmp	r4, #1
 800a230:	f04f 0000 	mov.w	r0, #0
 800a234:	d102      	bne.n	800a23c <__ieee754_atan2+0xd4>
 800a236:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a23a:	e7b6      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a23c:	2100      	movs	r1, #0
 800a23e:	e7b4      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a240:	4573      	cmp	r3, lr
 800a242:	d0d3      	beq.n	800a1ec <__ieee754_atan2+0x84>
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	151b      	asrs	r3, r3, #20
 800a248:	2b3c      	cmp	r3, #60	; 0x3c
 800a24a:	dc1e      	bgt.n	800a28a <__ieee754_atan2+0x122>
 800a24c:	2f00      	cmp	r7, #0
 800a24e:	da01      	bge.n	800a254 <__ieee754_atan2+0xec>
 800a250:	333c      	adds	r3, #60	; 0x3c
 800a252:	db1e      	blt.n	800a292 <__ieee754_atan2+0x12a>
 800a254:	4632      	mov	r2, r6
 800a256:	463b      	mov	r3, r7
 800a258:	f7f6 faac 	bl	80007b4 <__aeabi_ddiv>
 800a25c:	ec41 0b10 	vmov	d0, r0, r1
 800a260:	f001 fe7a 	bl	800bf58 <fabs>
 800a264:	f001 fcd8 	bl	800bc18 <atan>
 800a268:	ec51 0b10 	vmov	r0, r1, d0
 800a26c:	2c01      	cmp	r4, #1
 800a26e:	d013      	beq.n	800a298 <__ieee754_atan2+0x130>
 800a270:	2c02      	cmp	r4, #2
 800a272:	d015      	beq.n	800a2a0 <__ieee754_atan2+0x138>
 800a274:	2c00      	cmp	r4, #0
 800a276:	d098      	beq.n	800a1aa <__ieee754_atan2+0x42>
 800a278:	a321      	add	r3, pc, #132	; (adr r3, 800a300 <__ieee754_atan2+0x198>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f5 ffb7 	bl	80001f0 <__aeabi_dsub>
 800a282:	a321      	add	r3, pc, #132	; (adr r3, 800a308 <__ieee754_atan2+0x1a0>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	e014      	b.n	800a2b4 <__ieee754_atan2+0x14c>
 800a28a:	a121      	add	r1, pc, #132	; (adr r1, 800a310 <__ieee754_atan2+0x1a8>)
 800a28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a290:	e7ec      	b.n	800a26c <__ieee754_atan2+0x104>
 800a292:	2000      	movs	r0, #0
 800a294:	2100      	movs	r1, #0
 800a296:	e7e9      	b.n	800a26c <__ieee754_atan2+0x104>
 800a298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a29c:	4619      	mov	r1, r3
 800a29e:	e784      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a2a0:	a317      	add	r3, pc, #92	; (adr r3, 800a300 <__ieee754_atan2+0x198>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f5 ffa3 	bl	80001f0 <__aeabi_dsub>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	a116      	add	r1, pc, #88	; (adr r1, 800a308 <__ieee754_atan2+0x1a0>)
 800a2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b4:	f7f5 ff9c 	bl	80001f0 <__aeabi_dsub>
 800a2b8:	e777      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a2ba:	a117      	add	r1, pc, #92	; (adr r1, 800a318 <__ieee754_atan2+0x1b0>)
 800a2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c0:	e773      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a2c2:	a111      	add	r1, pc, #68	; (adr r1, 800a308 <__ieee754_atan2+0x1a0>)
 800a2c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c8:	e76f      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a2ca:	a111      	add	r1, pc, #68	; (adr r1, 800a310 <__ieee754_atan2+0x1a8>)
 800a2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d0:	e76b      	b.n	800a1aa <__ieee754_atan2+0x42>
 800a2d2:	bf00      	nop
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	54442d18 	.word	0x54442d18
 800a2dc:	c00921fb 	.word	0xc00921fb
 800a2e0:	54442d18 	.word	0x54442d18
 800a2e4:	bff921fb 	.word	0xbff921fb
 800a2e8:	54442d18 	.word	0x54442d18
 800a2ec:	bfe921fb 	.word	0xbfe921fb
 800a2f0:	7f3321d2 	.word	0x7f3321d2
 800a2f4:	4002d97c 	.word	0x4002d97c
 800a2f8:	7f3321d2 	.word	0x7f3321d2
 800a2fc:	c002d97c 	.word	0xc002d97c
 800a300:	33145c07 	.word	0x33145c07
 800a304:	3ca1a626 	.word	0x3ca1a626
 800a308:	54442d18 	.word	0x54442d18
 800a30c:	400921fb 	.word	0x400921fb
 800a310:	54442d18 	.word	0x54442d18
 800a314:	3ff921fb 	.word	0x3ff921fb
 800a318:	54442d18 	.word	0x54442d18
 800a31c:	3fe921fb 	.word	0x3fe921fb
 800a320:	7ff00000 	.word	0x7ff00000
 800a324:	00000000 	.word	0x00000000

0800a328 <__ieee754_pow>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	b091      	sub	sp, #68	; 0x44
 800a32e:	ed8d 1b00 	vstr	d1, [sp]
 800a332:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a336:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a33a:	ea58 0302 	orrs.w	r3, r8, r2
 800a33e:	ec57 6b10 	vmov	r6, r7, d0
 800a342:	f000 84be 	beq.w	800acc2 <__ieee754_pow+0x99a>
 800a346:	4b7a      	ldr	r3, [pc, #488]	; (800a530 <__ieee754_pow+0x208>)
 800a348:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a34c:	429c      	cmp	r4, r3
 800a34e:	463d      	mov	r5, r7
 800a350:	ee10 aa10 	vmov	sl, s0
 800a354:	dc09      	bgt.n	800a36a <__ieee754_pow+0x42>
 800a356:	d103      	bne.n	800a360 <__ieee754_pow+0x38>
 800a358:	b93e      	cbnz	r6, 800a36a <__ieee754_pow+0x42>
 800a35a:	45a0      	cmp	r8, r4
 800a35c:	dc0d      	bgt.n	800a37a <__ieee754_pow+0x52>
 800a35e:	e001      	b.n	800a364 <__ieee754_pow+0x3c>
 800a360:	4598      	cmp	r8, r3
 800a362:	dc02      	bgt.n	800a36a <__ieee754_pow+0x42>
 800a364:	4598      	cmp	r8, r3
 800a366:	d10e      	bne.n	800a386 <__ieee754_pow+0x5e>
 800a368:	b16a      	cbz	r2, 800a386 <__ieee754_pow+0x5e>
 800a36a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a36e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a372:	ea54 030a 	orrs.w	r3, r4, sl
 800a376:	f000 84a4 	beq.w	800acc2 <__ieee754_pow+0x99a>
 800a37a:	486e      	ldr	r0, [pc, #440]	; (800a534 <__ieee754_pow+0x20c>)
 800a37c:	b011      	add	sp, #68	; 0x44
 800a37e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a382:	f001 be85 	b.w	800c090 <nan>
 800a386:	2d00      	cmp	r5, #0
 800a388:	da53      	bge.n	800a432 <__ieee754_pow+0x10a>
 800a38a:	4b6b      	ldr	r3, [pc, #428]	; (800a538 <__ieee754_pow+0x210>)
 800a38c:	4598      	cmp	r8, r3
 800a38e:	dc4d      	bgt.n	800a42c <__ieee754_pow+0x104>
 800a390:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a394:	4598      	cmp	r8, r3
 800a396:	dd4c      	ble.n	800a432 <__ieee754_pow+0x10a>
 800a398:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a39c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a3a0:	2b14      	cmp	r3, #20
 800a3a2:	dd26      	ble.n	800a3f2 <__ieee754_pow+0xca>
 800a3a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a3a8:	fa22 f103 	lsr.w	r1, r2, r3
 800a3ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d13e      	bne.n	800a432 <__ieee754_pow+0x10a>
 800a3b4:	f001 0101 	and.w	r1, r1, #1
 800a3b8:	f1c1 0b02 	rsb	fp, r1, #2
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	d15b      	bne.n	800a478 <__ieee754_pow+0x150>
 800a3c0:	4b5b      	ldr	r3, [pc, #364]	; (800a530 <__ieee754_pow+0x208>)
 800a3c2:	4598      	cmp	r8, r3
 800a3c4:	d124      	bne.n	800a410 <__ieee754_pow+0xe8>
 800a3c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a3ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a3ce:	ea53 030a 	orrs.w	r3, r3, sl
 800a3d2:	f000 8476 	beq.w	800acc2 <__ieee754_pow+0x99a>
 800a3d6:	4b59      	ldr	r3, [pc, #356]	; (800a53c <__ieee754_pow+0x214>)
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	dd2d      	ble.n	800a438 <__ieee754_pow+0x110>
 800a3dc:	f1b9 0f00 	cmp.w	r9, #0
 800a3e0:	f280 8473 	bge.w	800acca <__ieee754_pow+0x9a2>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	ec41 0b10 	vmov	d0, r0, r1
 800a3ec:	b011      	add	sp, #68	; 0x44
 800a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d13e      	bne.n	800a474 <__ieee754_pow+0x14c>
 800a3f6:	f1c3 0314 	rsb	r3, r3, #20
 800a3fa:	fa48 f103 	asr.w	r1, r8, r3
 800a3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a402:	4543      	cmp	r3, r8
 800a404:	f040 8469 	bne.w	800acda <__ieee754_pow+0x9b2>
 800a408:	f001 0101 	and.w	r1, r1, #1
 800a40c:	f1c1 0b02 	rsb	fp, r1, #2
 800a410:	4b4b      	ldr	r3, [pc, #300]	; (800a540 <__ieee754_pow+0x218>)
 800a412:	4598      	cmp	r8, r3
 800a414:	d118      	bne.n	800a448 <__ieee754_pow+0x120>
 800a416:	f1b9 0f00 	cmp.w	r9, #0
 800a41a:	f280 845a 	bge.w	800acd2 <__ieee754_pow+0x9aa>
 800a41e:	4948      	ldr	r1, [pc, #288]	; (800a540 <__ieee754_pow+0x218>)
 800a420:	4632      	mov	r2, r6
 800a422:	463b      	mov	r3, r7
 800a424:	2000      	movs	r0, #0
 800a426:	f7f6 f9c5 	bl	80007b4 <__aeabi_ddiv>
 800a42a:	e7dd      	b.n	800a3e8 <__ieee754_pow+0xc0>
 800a42c:	f04f 0b02 	mov.w	fp, #2
 800a430:	e7c4      	b.n	800a3bc <__ieee754_pow+0x94>
 800a432:	f04f 0b00 	mov.w	fp, #0
 800a436:	e7c1      	b.n	800a3bc <__ieee754_pow+0x94>
 800a438:	f1b9 0f00 	cmp.w	r9, #0
 800a43c:	dad2      	bge.n	800a3e4 <__ieee754_pow+0xbc>
 800a43e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a442:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a446:	e7cf      	b.n	800a3e8 <__ieee754_pow+0xc0>
 800a448:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a44c:	d106      	bne.n	800a45c <__ieee754_pow+0x134>
 800a44e:	4632      	mov	r2, r6
 800a450:	463b      	mov	r3, r7
 800a452:	4610      	mov	r0, r2
 800a454:	4619      	mov	r1, r3
 800a456:	f7f6 f883 	bl	8000560 <__aeabi_dmul>
 800a45a:	e7c5      	b.n	800a3e8 <__ieee754_pow+0xc0>
 800a45c:	4b39      	ldr	r3, [pc, #228]	; (800a544 <__ieee754_pow+0x21c>)
 800a45e:	4599      	cmp	r9, r3
 800a460:	d10a      	bne.n	800a478 <__ieee754_pow+0x150>
 800a462:	2d00      	cmp	r5, #0
 800a464:	db08      	blt.n	800a478 <__ieee754_pow+0x150>
 800a466:	ec47 6b10 	vmov	d0, r6, r7
 800a46a:	b011      	add	sp, #68	; 0x44
 800a46c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	f000 be5c 	b.w	800b12c <__ieee754_sqrt>
 800a474:	f04f 0b00 	mov.w	fp, #0
 800a478:	ec47 6b10 	vmov	d0, r6, r7
 800a47c:	f001 fd6c 	bl	800bf58 <fabs>
 800a480:	ec51 0b10 	vmov	r0, r1, d0
 800a484:	f1ba 0f00 	cmp.w	sl, #0
 800a488:	d127      	bne.n	800a4da <__ieee754_pow+0x1b2>
 800a48a:	b124      	cbz	r4, 800a496 <__ieee754_pow+0x16e>
 800a48c:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <__ieee754_pow+0x218>)
 800a48e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a492:	429a      	cmp	r2, r3
 800a494:	d121      	bne.n	800a4da <__ieee754_pow+0x1b2>
 800a496:	f1b9 0f00 	cmp.w	r9, #0
 800a49a:	da05      	bge.n	800a4a8 <__ieee754_pow+0x180>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	4927      	ldr	r1, [pc, #156]	; (800a540 <__ieee754_pow+0x218>)
 800a4a4:	f7f6 f986 	bl	80007b4 <__aeabi_ddiv>
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	da9d      	bge.n	800a3e8 <__ieee754_pow+0xc0>
 800a4ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a4b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a4b4:	ea54 030b 	orrs.w	r3, r4, fp
 800a4b8:	d108      	bne.n	800a4cc <__ieee754_pow+0x1a4>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4610      	mov	r0, r2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f7f5 fe95 	bl	80001f0 <__aeabi_dsub>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	e7ac      	b.n	800a426 <__ieee754_pow+0xfe>
 800a4cc:	f1bb 0f01 	cmp.w	fp, #1
 800a4d0:	d18a      	bne.n	800a3e8 <__ieee754_pow+0xc0>
 800a4d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	e786      	b.n	800a3e8 <__ieee754_pow+0xc0>
 800a4da:	0fed      	lsrs	r5, r5, #31
 800a4dc:	1e6b      	subs	r3, r5, #1
 800a4de:	930d      	str	r3, [sp, #52]	; 0x34
 800a4e0:	ea5b 0303 	orrs.w	r3, fp, r3
 800a4e4:	d102      	bne.n	800a4ec <__ieee754_pow+0x1c4>
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	e7e8      	b.n	800a4be <__ieee754_pow+0x196>
 800a4ec:	4b16      	ldr	r3, [pc, #88]	; (800a548 <__ieee754_pow+0x220>)
 800a4ee:	4598      	cmp	r8, r3
 800a4f0:	f340 80fe 	ble.w	800a6f0 <__ieee754_pow+0x3c8>
 800a4f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a4f8:	4598      	cmp	r8, r3
 800a4fa:	dd0a      	ble.n	800a512 <__ieee754_pow+0x1ea>
 800a4fc:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <__ieee754_pow+0x214>)
 800a4fe:	429c      	cmp	r4, r3
 800a500:	dc0d      	bgt.n	800a51e <__ieee754_pow+0x1f6>
 800a502:	f1b9 0f00 	cmp.w	r9, #0
 800a506:	f6bf af6d 	bge.w	800a3e4 <__ieee754_pow+0xbc>
 800a50a:	a307      	add	r3, pc, #28	; (adr r3, 800a528 <__ieee754_pow+0x200>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	e79f      	b.n	800a452 <__ieee754_pow+0x12a>
 800a512:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <__ieee754_pow+0x224>)
 800a514:	429c      	cmp	r4, r3
 800a516:	ddf4      	ble.n	800a502 <__ieee754_pow+0x1da>
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <__ieee754_pow+0x218>)
 800a51a:	429c      	cmp	r4, r3
 800a51c:	dd18      	ble.n	800a550 <__ieee754_pow+0x228>
 800a51e:	f1b9 0f00 	cmp.w	r9, #0
 800a522:	dcf2      	bgt.n	800a50a <__ieee754_pow+0x1e2>
 800a524:	e75e      	b.n	800a3e4 <__ieee754_pow+0xbc>
 800a526:	bf00      	nop
 800a528:	8800759c 	.word	0x8800759c
 800a52c:	7e37e43c 	.word	0x7e37e43c
 800a530:	7ff00000 	.word	0x7ff00000
 800a534:	0800c415 	.word	0x0800c415
 800a538:	433fffff 	.word	0x433fffff
 800a53c:	3fefffff 	.word	0x3fefffff
 800a540:	3ff00000 	.word	0x3ff00000
 800a544:	3fe00000 	.word	0x3fe00000
 800a548:	41e00000 	.word	0x41e00000
 800a54c:	3feffffe 	.word	0x3feffffe
 800a550:	2200      	movs	r2, #0
 800a552:	4b63      	ldr	r3, [pc, #396]	; (800a6e0 <__ieee754_pow+0x3b8>)
 800a554:	f7f5 fe4c 	bl	80001f0 <__aeabi_dsub>
 800a558:	a355      	add	r3, pc, #340	; (adr r3, 800a6b0 <__ieee754_pow+0x388>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	f7f5 fffd 	bl	8000560 <__aeabi_dmul>
 800a566:	a354      	add	r3, pc, #336	; (adr r3, 800a6b8 <__ieee754_pow+0x390>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f5 fff4 	bl	8000560 <__aeabi_dmul>
 800a578:	2200      	movs	r2, #0
 800a57a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a57e:	4b59      	ldr	r3, [pc, #356]	; (800a6e4 <__ieee754_pow+0x3bc>)
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f5 ffec 	bl	8000560 <__aeabi_dmul>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	a14c      	add	r1, pc, #304	; (adr r1, 800a6c0 <__ieee754_pow+0x398>)
 800a58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a592:	f7f5 fe2d 	bl	80001f0 <__aeabi_dsub>
 800a596:	4622      	mov	r2, r4
 800a598:	462b      	mov	r3, r5
 800a59a:	f7f5 ffe1 	bl	8000560 <__aeabi_dmul>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	4950      	ldr	r1, [pc, #320]	; (800a6e8 <__ieee754_pow+0x3c0>)
 800a5a6:	f7f5 fe23 	bl	80001f0 <__aeabi_dsub>
 800a5aa:	4622      	mov	r2, r4
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	f7f5 ffd3 	bl	8000560 <__aeabi_dmul>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f5 ffcd 	bl	8000560 <__aeabi_dmul>
 800a5c6:	a340      	add	r3, pc, #256	; (adr r3, 800a6c8 <__ieee754_pow+0x3a0>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f5 ffc8 	bl	8000560 <__aeabi_dmul>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5d8:	f7f5 fe0a 	bl	80001f0 <__aeabi_dsub>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	460d      	mov	r5, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f5 fe04 	bl	80001f4 <__adddf3>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	463b      	mov	r3, r7
 800a5f6:	f7f5 fdfb 	bl	80001f0 <__aeabi_dsub>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f5 fdf5 	bl	80001f0 <__aeabi_dsub>
 800a606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a608:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a60c:	4313      	orrs	r3, r2
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	f040 81eb 	bne.w	800a9ec <__ieee754_pow+0x6c4>
 800a616:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a6d0 <__ieee754_pow+0x3a8>
 800a61a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a61e:	2400      	movs	r4, #0
 800a620:	4622      	mov	r2, r4
 800a622:	462b      	mov	r3, r5
 800a624:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a628:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a62c:	f7f5 fde0 	bl	80001f0 <__aeabi_dsub>
 800a630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a634:	f7f5 ff94 	bl	8000560 <__aeabi_dmul>
 800a638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63c:	4680      	mov	r8, r0
 800a63e:	4689      	mov	r9, r1
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f7f5 ff8c 	bl	8000560 <__aeabi_dmul>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4640      	mov	r0, r8
 800a64e:	4649      	mov	r1, r9
 800a650:	f7f5 fdd0 	bl	80001f4 <__adddf3>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	4680      	mov	r8, r0
 800a65a:	4689      	mov	r9, r1
 800a65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a660:	f7f5 ff7e 	bl	8000560 <__aeabi_dmul>
 800a664:	460b      	mov	r3, r1
 800a666:	4604      	mov	r4, r0
 800a668:	460d      	mov	r5, r1
 800a66a:	4602      	mov	r2, r0
 800a66c:	4649      	mov	r1, r9
 800a66e:	4640      	mov	r0, r8
 800a670:	e9cd 4500 	strd	r4, r5, [sp]
 800a674:	f7f5 fdbe 	bl	80001f4 <__adddf3>
 800a678:	4b1c      	ldr	r3, [pc, #112]	; (800a6ec <__ieee754_pow+0x3c4>)
 800a67a:	4299      	cmp	r1, r3
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	468b      	mov	fp, r1
 800a682:	f340 82f7 	ble.w	800ac74 <__ieee754_pow+0x94c>
 800a686:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a68a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a68e:	4303      	orrs	r3, r0
 800a690:	f000 81ea 	beq.w	800aa68 <__ieee754_pow+0x740>
 800a694:	a310      	add	r3, pc, #64	; (adr r3, 800a6d8 <__ieee754_pow+0x3b0>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a69e:	f7f5 ff5f 	bl	8000560 <__aeabi_dmul>
 800a6a2:	a30d      	add	r3, pc, #52	; (adr r3, 800a6d8 <__ieee754_pow+0x3b0>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	e6d5      	b.n	800a456 <__ieee754_pow+0x12e>
 800a6aa:	bf00      	nop
 800a6ac:	f3af 8000 	nop.w
 800a6b0:	60000000 	.word	0x60000000
 800a6b4:	3ff71547 	.word	0x3ff71547
 800a6b8:	f85ddf44 	.word	0xf85ddf44
 800a6bc:	3e54ae0b 	.word	0x3e54ae0b
 800a6c0:	55555555 	.word	0x55555555
 800a6c4:	3fd55555 	.word	0x3fd55555
 800a6c8:	652b82fe 	.word	0x652b82fe
 800a6cc:	3ff71547 	.word	0x3ff71547
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	bff00000 	.word	0xbff00000
 800a6d8:	8800759c 	.word	0x8800759c
 800a6dc:	7e37e43c 	.word	0x7e37e43c
 800a6e0:	3ff00000 	.word	0x3ff00000
 800a6e4:	3fd00000 	.word	0x3fd00000
 800a6e8:	3fe00000 	.word	0x3fe00000
 800a6ec:	408fffff 	.word	0x408fffff
 800a6f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	da05      	bge.n	800a706 <__ieee754_pow+0x3de>
 800a6fa:	4bd3      	ldr	r3, [pc, #844]	; (800aa48 <__ieee754_pow+0x720>)
 800a6fc:	f7f5 ff30 	bl	8000560 <__aeabi_dmul>
 800a700:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a704:	460c      	mov	r4, r1
 800a706:	1523      	asrs	r3, r4, #20
 800a708:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a70c:	4413      	add	r3, r2
 800a70e:	9309      	str	r3, [sp, #36]	; 0x24
 800a710:	4bce      	ldr	r3, [pc, #824]	; (800aa4c <__ieee754_pow+0x724>)
 800a712:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a716:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a71a:	429c      	cmp	r4, r3
 800a71c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a720:	dd08      	ble.n	800a734 <__ieee754_pow+0x40c>
 800a722:	4bcb      	ldr	r3, [pc, #812]	; (800aa50 <__ieee754_pow+0x728>)
 800a724:	429c      	cmp	r4, r3
 800a726:	f340 815e 	ble.w	800a9e6 <__ieee754_pow+0x6be>
 800a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72c:	3301      	adds	r3, #1
 800a72e:	9309      	str	r3, [sp, #36]	; 0x24
 800a730:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a734:	f04f 0a00 	mov.w	sl, #0
 800a738:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a73c:	930c      	str	r3, [sp, #48]	; 0x30
 800a73e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a740:	4bc4      	ldr	r3, [pc, #784]	; (800aa54 <__ieee754_pow+0x72c>)
 800a742:	4413      	add	r3, r2
 800a744:	ed93 7b00 	vldr	d7, [r3]
 800a748:	4629      	mov	r1, r5
 800a74a:	ec53 2b17 	vmov	r2, r3, d7
 800a74e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a752:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a756:	f7f5 fd4b 	bl	80001f0 <__aeabi_dsub>
 800a75a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a75e:	4606      	mov	r6, r0
 800a760:	460f      	mov	r7, r1
 800a762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a766:	f7f5 fd45 	bl	80001f4 <__adddf3>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	2000      	movs	r0, #0
 800a770:	49b9      	ldr	r1, [pc, #740]	; (800aa58 <__ieee754_pow+0x730>)
 800a772:	f7f6 f81f 	bl	80007b4 <__aeabi_ddiv>
 800a776:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4630      	mov	r0, r6
 800a780:	4639      	mov	r1, r7
 800a782:	f7f5 feed 	bl	8000560 <__aeabi_dmul>
 800a786:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a78a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a78e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a792:	2300      	movs	r3, #0
 800a794:	9302      	str	r3, [sp, #8]
 800a796:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a79a:	106d      	asrs	r5, r5, #1
 800a79c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a7a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	4614      	mov	r4, r2
 800a7b0:	461d      	mov	r5, r3
 800a7b2:	f7f5 fed5 	bl	8000560 <__aeabi_dmul>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 fd17 	bl	80001f0 <__aeabi_dsub>
 800a7c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	f7f5 fd0f 	bl	80001f0 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7da:	f7f5 fd09 	bl	80001f0 <__aeabi_dsub>
 800a7de:	4642      	mov	r2, r8
 800a7e0:	464b      	mov	r3, r9
 800a7e2:	f7f5 febd 	bl	8000560 <__aeabi_dmul>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7f5 fcff 	bl	80001f0 <__aeabi_dsub>
 800a7f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a7f6:	f7f5 feb3 	bl	8000560 <__aeabi_dmul>
 800a7fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a802:	4610      	mov	r0, r2
 800a804:	4619      	mov	r1, r3
 800a806:	f7f5 feab 	bl	8000560 <__aeabi_dmul>
 800a80a:	a37b      	add	r3, pc, #492	; (adr r3, 800a9f8 <__ieee754_pow+0x6d0>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	f7f5 fea4 	bl	8000560 <__aeabi_dmul>
 800a818:	a379      	add	r3, pc, #484	; (adr r3, 800aa00 <__ieee754_pow+0x6d8>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fce9 	bl	80001f4 <__adddf3>
 800a822:	4622      	mov	r2, r4
 800a824:	462b      	mov	r3, r5
 800a826:	f7f5 fe9b 	bl	8000560 <__aeabi_dmul>
 800a82a:	a377      	add	r3, pc, #476	; (adr r3, 800aa08 <__ieee754_pow+0x6e0>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f5 fce0 	bl	80001f4 <__adddf3>
 800a834:	4622      	mov	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	f7f5 fe92 	bl	8000560 <__aeabi_dmul>
 800a83c:	a374      	add	r3, pc, #464	; (adr r3, 800aa10 <__ieee754_pow+0x6e8>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fcd7 	bl	80001f4 <__adddf3>
 800a846:	4622      	mov	r2, r4
 800a848:	462b      	mov	r3, r5
 800a84a:	f7f5 fe89 	bl	8000560 <__aeabi_dmul>
 800a84e:	a372      	add	r3, pc, #456	; (adr r3, 800aa18 <__ieee754_pow+0x6f0>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fcce 	bl	80001f4 <__adddf3>
 800a858:	4622      	mov	r2, r4
 800a85a:	462b      	mov	r3, r5
 800a85c:	f7f5 fe80 	bl	8000560 <__aeabi_dmul>
 800a860:	a36f      	add	r3, pc, #444	; (adr r3, 800aa20 <__ieee754_pow+0x6f8>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fcc5 	bl	80001f4 <__adddf3>
 800a86a:	4622      	mov	r2, r4
 800a86c:	4606      	mov	r6, r0
 800a86e:	460f      	mov	r7, r1
 800a870:	462b      	mov	r3, r5
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f5 fe73 	bl	8000560 <__aeabi_dmul>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 fe6d 	bl	8000560 <__aeabi_dmul>
 800a886:	4642      	mov	r2, r8
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	464b      	mov	r3, r9
 800a88e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a892:	f7f5 fcaf 	bl	80001f4 <__adddf3>
 800a896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a89a:	f7f5 fe61 	bl	8000560 <__aeabi_dmul>
 800a89e:	4622      	mov	r2, r4
 800a8a0:	462b      	mov	r3, r5
 800a8a2:	f7f5 fca7 	bl	80001f4 <__adddf3>
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	460f      	mov	r7, r1
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	f7f5 fe55 	bl	8000560 <__aeabi_dmul>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	4b68      	ldr	r3, [pc, #416]	; (800aa5c <__ieee754_pow+0x734>)
 800a8ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8be:	f7f5 fc99 	bl	80001f4 <__adddf3>
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	f7f5 fc95 	bl	80001f4 <__adddf3>
 800a8ca:	9802      	ldr	r0, [sp, #8]
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	f7f5 fe42 	bl	8000560 <__aeabi_dmul>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4680      	mov	r8, r0
 800a8e0:	4689      	mov	r9, r1
 800a8e2:	4b5e      	ldr	r3, [pc, #376]	; (800aa5c <__ieee754_pow+0x734>)
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f5 fc82 	bl	80001f0 <__aeabi_dsub>
 800a8ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8f0:	f7f5 fc7e 	bl	80001f0 <__aeabi_dsub>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f7f5 fc78 	bl	80001f0 <__aeabi_dsub>
 800a900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a904:	f7f5 fe2c 	bl	8000560 <__aeabi_dmul>
 800a908:	4622      	mov	r2, r4
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	462b      	mov	r3, r5
 800a910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a914:	f7f5 fe24 	bl	8000560 <__aeabi_dmul>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4630      	mov	r0, r6
 800a91e:	4639      	mov	r1, r7
 800a920:	f7f5 fc68 	bl	80001f4 <__adddf3>
 800a924:	4606      	mov	r6, r0
 800a926:	460f      	mov	r7, r1
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fc60 	bl	80001f4 <__adddf3>
 800a934:	9802      	ldr	r0, [sp, #8]
 800a936:	a33c      	add	r3, pc, #240	; (adr r3, 800aa28 <__ieee754_pow+0x700>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	4604      	mov	r4, r0
 800a93e:	460d      	mov	r5, r1
 800a940:	f7f5 fe0e 	bl	8000560 <__aeabi_dmul>
 800a944:	4642      	mov	r2, r8
 800a946:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a94a:	464b      	mov	r3, r9
 800a94c:	4620      	mov	r0, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	f7f5 fc4e 	bl	80001f0 <__aeabi_dsub>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4630      	mov	r0, r6
 800a95a:	4639      	mov	r1, r7
 800a95c:	f7f5 fc48 	bl	80001f0 <__aeabi_dsub>
 800a960:	a333      	add	r3, pc, #204	; (adr r3, 800aa30 <__ieee754_pow+0x708>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f7f5 fdfb 	bl	8000560 <__aeabi_dmul>
 800a96a:	a333      	add	r3, pc, #204	; (adr r3, 800aa38 <__ieee754_pow+0x710>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	4606      	mov	r6, r0
 800a972:	460f      	mov	r7, r1
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 fdf2 	bl	8000560 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4630      	mov	r0, r6
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 fc36 	bl	80001f4 <__adddf3>
 800a988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a98a:	4b35      	ldr	r3, [pc, #212]	; (800aa60 <__ieee754_pow+0x738>)
 800a98c:	4413      	add	r3, r2
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fc2f 	bl	80001f4 <__adddf3>
 800a996:	4604      	mov	r4, r0
 800a998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a99a:	460d      	mov	r5, r1
 800a99c:	f7f5 fd76 	bl	800048c <__aeabi_i2d>
 800a9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9a2:	4b30      	ldr	r3, [pc, #192]	; (800aa64 <__ieee754_pow+0x73c>)
 800a9a4:	4413      	add	r3, r2
 800a9a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	4622      	mov	r2, r4
 800a9b0:	462b      	mov	r3, r5
 800a9b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9b6:	f7f5 fc1d 	bl	80001f4 <__adddf3>
 800a9ba:	4642      	mov	r2, r8
 800a9bc:	464b      	mov	r3, r9
 800a9be:	f7f5 fc19 	bl	80001f4 <__adddf3>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	f7f5 fc15 	bl	80001f4 <__adddf3>
 800a9ca:	9802      	ldr	r0, [sp, #8]
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	463b      	mov	r3, r7
 800a9d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9d4:	f7f5 fc0c 	bl	80001f0 <__aeabi_dsub>
 800a9d8:	4642      	mov	r2, r8
 800a9da:	464b      	mov	r3, r9
 800a9dc:	f7f5 fc08 	bl	80001f0 <__aeabi_dsub>
 800a9e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9e4:	e607      	b.n	800a5f6 <__ieee754_pow+0x2ce>
 800a9e6:	f04f 0a01 	mov.w	sl, #1
 800a9ea:	e6a5      	b.n	800a738 <__ieee754_pow+0x410>
 800a9ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800aa40 <__ieee754_pow+0x718>
 800a9f0:	e613      	b.n	800a61a <__ieee754_pow+0x2f2>
 800a9f2:	bf00      	nop
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	4a454eef 	.word	0x4a454eef
 800a9fc:	3fca7e28 	.word	0x3fca7e28
 800aa00:	93c9db65 	.word	0x93c9db65
 800aa04:	3fcd864a 	.word	0x3fcd864a
 800aa08:	a91d4101 	.word	0xa91d4101
 800aa0c:	3fd17460 	.word	0x3fd17460
 800aa10:	518f264d 	.word	0x518f264d
 800aa14:	3fd55555 	.word	0x3fd55555
 800aa18:	db6fabff 	.word	0xdb6fabff
 800aa1c:	3fdb6db6 	.word	0x3fdb6db6
 800aa20:	33333303 	.word	0x33333303
 800aa24:	3fe33333 	.word	0x3fe33333
 800aa28:	e0000000 	.word	0xe0000000
 800aa2c:	3feec709 	.word	0x3feec709
 800aa30:	dc3a03fd 	.word	0xdc3a03fd
 800aa34:	3feec709 	.word	0x3feec709
 800aa38:	145b01f5 	.word	0x145b01f5
 800aa3c:	be3e2fe0 	.word	0xbe3e2fe0
 800aa40:	00000000 	.word	0x00000000
 800aa44:	3ff00000 	.word	0x3ff00000
 800aa48:	43400000 	.word	0x43400000
 800aa4c:	0003988e 	.word	0x0003988e
 800aa50:	000bb679 	.word	0x000bb679
 800aa54:	0800c520 	.word	0x0800c520
 800aa58:	3ff00000 	.word	0x3ff00000
 800aa5c:	40080000 	.word	0x40080000
 800aa60:	0800c540 	.word	0x0800c540
 800aa64:	0800c530 	.word	0x0800c530
 800aa68:	a3b4      	add	r3, pc, #720	; (adr r3, 800ad3c <__ieee754_pow+0xa14>)
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	4640      	mov	r0, r8
 800aa70:	4649      	mov	r1, r9
 800aa72:	f7f5 fbbf 	bl	80001f4 <__adddf3>
 800aa76:	4622      	mov	r2, r4
 800aa78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	4630      	mov	r0, r6
 800aa80:	4639      	mov	r1, r7
 800aa82:	f7f5 fbb5 	bl	80001f0 <__aeabi_dsub>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa8e:	f7f5 fff7 	bl	8000a80 <__aeabi_dcmpgt>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f47f adfe 	bne.w	800a694 <__ieee754_pow+0x36c>
 800aa98:	4aa3      	ldr	r2, [pc, #652]	; (800ad28 <__ieee754_pow+0xa00>)
 800aa9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	f340 810a 	ble.w	800acb8 <__ieee754_pow+0x990>
 800aaa4:	151b      	asrs	r3, r3, #20
 800aaa6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aaaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aaae:	fa4a f303 	asr.w	r3, sl, r3
 800aab2:	445b      	add	r3, fp
 800aab4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aab8:	4e9c      	ldr	r6, [pc, #624]	; (800ad2c <__ieee754_pow+0xa04>)
 800aaba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aabe:	4116      	asrs	r6, r2
 800aac0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aac4:	2000      	movs	r0, #0
 800aac6:	ea23 0106 	bic.w	r1, r3, r6
 800aaca:	f1c2 0214 	rsb	r2, r2, #20
 800aace:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aad2:	fa4a fa02 	asr.w	sl, sl, r2
 800aad6:	f1bb 0f00 	cmp.w	fp, #0
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	4620      	mov	r0, r4
 800aae0:	4629      	mov	r1, r5
 800aae2:	bfb8      	it	lt
 800aae4:	f1ca 0a00 	rsblt	sl, sl, #0
 800aae8:	f7f5 fb82 	bl	80001f0 <__aeabi_dsub>
 800aaec:	e9cd 0100 	strd	r0, r1, [sp]
 800aaf0:	4642      	mov	r2, r8
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf8:	f7f5 fb7c 	bl	80001f4 <__adddf3>
 800aafc:	2000      	movs	r0, #0
 800aafe:	a378      	add	r3, pc, #480	; (adr r3, 800ace0 <__ieee754_pow+0x9b8>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	f7f5 fd2a 	bl	8000560 <__aeabi_dmul>
 800ab0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	4620      	mov	r0, r4
 800ab16:	4629      	mov	r1, r5
 800ab18:	f7f5 fb6a 	bl	80001f0 <__aeabi_dsub>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4640      	mov	r0, r8
 800ab22:	4649      	mov	r1, r9
 800ab24:	f7f5 fb64 	bl	80001f0 <__aeabi_dsub>
 800ab28:	a36f      	add	r3, pc, #444	; (adr r3, 800ace8 <__ieee754_pow+0x9c0>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	f7f5 fd17 	bl	8000560 <__aeabi_dmul>
 800ab32:	a36f      	add	r3, pc, #444	; (adr r3, 800acf0 <__ieee754_pow+0x9c8>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	4680      	mov	r8, r0
 800ab3a:	4689      	mov	r9, r1
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f5 fd0e 	bl	8000560 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fb52 	bl	80001f4 <__adddf3>
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	f7f5 fb4a 	bl	80001f4 <__adddf3>
 800ab60:	4632      	mov	r2, r6
 800ab62:	463b      	mov	r3, r7
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	f7f5 fb42 	bl	80001f0 <__aeabi_dsub>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4620      	mov	r0, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7f5 fb3c 	bl	80001f0 <__aeabi_dsub>
 800ab78:	4642      	mov	r2, r8
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	460f      	mov	r7, r1
 800ab7e:	464b      	mov	r3, r9
 800ab80:	4640      	mov	r0, r8
 800ab82:	4649      	mov	r1, r9
 800ab84:	f7f5 fcec 	bl	8000560 <__aeabi_dmul>
 800ab88:	a35b      	add	r3, pc, #364	; (adr r3, 800acf8 <__ieee754_pow+0x9d0>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	f7f5 fce5 	bl	8000560 <__aeabi_dmul>
 800ab96:	a35a      	add	r3, pc, #360	; (adr r3, 800ad00 <__ieee754_pow+0x9d8>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fb28 	bl	80001f0 <__aeabi_dsub>
 800aba0:	4622      	mov	r2, r4
 800aba2:	462b      	mov	r3, r5
 800aba4:	f7f5 fcdc 	bl	8000560 <__aeabi_dmul>
 800aba8:	a357      	add	r3, pc, #348	; (adr r3, 800ad08 <__ieee754_pow+0x9e0>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fb21 	bl	80001f4 <__adddf3>
 800abb2:	4622      	mov	r2, r4
 800abb4:	462b      	mov	r3, r5
 800abb6:	f7f5 fcd3 	bl	8000560 <__aeabi_dmul>
 800abba:	a355      	add	r3, pc, #340	; (adr r3, 800ad10 <__ieee754_pow+0x9e8>)
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f7f5 fb16 	bl	80001f0 <__aeabi_dsub>
 800abc4:	4622      	mov	r2, r4
 800abc6:	462b      	mov	r3, r5
 800abc8:	f7f5 fcca 	bl	8000560 <__aeabi_dmul>
 800abcc:	a352      	add	r3, pc, #328	; (adr r3, 800ad18 <__ieee754_pow+0x9f0>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fb0f 	bl	80001f4 <__adddf3>
 800abd6:	4622      	mov	r2, r4
 800abd8:	462b      	mov	r3, r5
 800abda:	f7f5 fcc1 	bl	8000560 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fb03 	bl	80001f0 <__aeabi_dsub>
 800abea:	4604      	mov	r4, r0
 800abec:	460d      	mov	r5, r1
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 fcb3 	bl	8000560 <__aeabi_dmul>
 800abfa:	2200      	movs	r2, #0
 800abfc:	e9cd 0100 	strd	r0, r1, [sp]
 800ac00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 faf2 	bl	80001f0 <__aeabi_dsub>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac14:	f7f5 fdce 	bl	80007b4 <__aeabi_ddiv>
 800ac18:	4632      	mov	r2, r6
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	463b      	mov	r3, r7
 800ac20:	4640      	mov	r0, r8
 800ac22:	4649      	mov	r1, r9
 800ac24:	f7f5 fc9c 	bl	8000560 <__aeabi_dmul>
 800ac28:	4632      	mov	r2, r6
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	f7f5 fae2 	bl	80001f4 <__adddf3>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fada 	bl	80001f0 <__aeabi_dsub>
 800ac3c:	4642      	mov	r2, r8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	f7f5 fad6 	bl	80001f0 <__aeabi_dsub>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	2000      	movs	r0, #0
 800ac4a:	4939      	ldr	r1, [pc, #228]	; (800ad30 <__ieee754_pow+0xa08>)
 800ac4c:	f7f5 fad0 	bl	80001f0 <__aeabi_dsub>
 800ac50:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ac54:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	da2f      	bge.n	800acbe <__ieee754_pow+0x996>
 800ac5e:	4650      	mov	r0, sl
 800ac60:	ec43 2b10 	vmov	d0, r2, r3
 800ac64:	f001 faa0 	bl	800c1a8 <scalbn>
 800ac68:	ec51 0b10 	vmov	r0, r1, d0
 800ac6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac70:	f7ff bbf1 	b.w	800a456 <__ieee754_pow+0x12e>
 800ac74:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <__ieee754_pow+0xa0c>)
 800ac76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ac7a:	429e      	cmp	r6, r3
 800ac7c:	f77f af0c 	ble.w	800aa98 <__ieee754_pow+0x770>
 800ac80:	4b2d      	ldr	r3, [pc, #180]	; (800ad38 <__ieee754_pow+0xa10>)
 800ac82:	440b      	add	r3, r1
 800ac84:	4303      	orrs	r3, r0
 800ac86:	d00b      	beq.n	800aca0 <__ieee754_pow+0x978>
 800ac88:	a325      	add	r3, pc, #148	; (adr r3, 800ad20 <__ieee754_pow+0x9f8>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac92:	f7f5 fc65 	bl	8000560 <__aeabi_dmul>
 800ac96:	a322      	add	r3, pc, #136	; (adr r3, 800ad20 <__ieee754_pow+0x9f8>)
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	f7ff bbdb 	b.w	800a456 <__ieee754_pow+0x12e>
 800aca0:	4622      	mov	r2, r4
 800aca2:	462b      	mov	r3, r5
 800aca4:	f7f5 faa4 	bl	80001f0 <__aeabi_dsub>
 800aca8:	4642      	mov	r2, r8
 800acaa:	464b      	mov	r3, r9
 800acac:	f7f5 fede 	bl	8000a6c <__aeabi_dcmpge>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f43f aef1 	beq.w	800aa98 <__ieee754_pow+0x770>
 800acb6:	e7e7      	b.n	800ac88 <__ieee754_pow+0x960>
 800acb8:	f04f 0a00 	mov.w	sl, #0
 800acbc:	e718      	b.n	800aaf0 <__ieee754_pow+0x7c8>
 800acbe:	4621      	mov	r1, r4
 800acc0:	e7d4      	b.n	800ac6c <__ieee754_pow+0x944>
 800acc2:	2000      	movs	r0, #0
 800acc4:	491a      	ldr	r1, [pc, #104]	; (800ad30 <__ieee754_pow+0xa08>)
 800acc6:	f7ff bb8f 	b.w	800a3e8 <__ieee754_pow+0xc0>
 800acca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acce:	f7ff bb8b 	b.w	800a3e8 <__ieee754_pow+0xc0>
 800acd2:	4630      	mov	r0, r6
 800acd4:	4639      	mov	r1, r7
 800acd6:	f7ff bb87 	b.w	800a3e8 <__ieee754_pow+0xc0>
 800acda:	4693      	mov	fp, r2
 800acdc:	f7ff bb98 	b.w	800a410 <__ieee754_pow+0xe8>
 800ace0:	00000000 	.word	0x00000000
 800ace4:	3fe62e43 	.word	0x3fe62e43
 800ace8:	fefa39ef 	.word	0xfefa39ef
 800acec:	3fe62e42 	.word	0x3fe62e42
 800acf0:	0ca86c39 	.word	0x0ca86c39
 800acf4:	be205c61 	.word	0xbe205c61
 800acf8:	72bea4d0 	.word	0x72bea4d0
 800acfc:	3e663769 	.word	0x3e663769
 800ad00:	c5d26bf1 	.word	0xc5d26bf1
 800ad04:	3ebbbd41 	.word	0x3ebbbd41
 800ad08:	af25de2c 	.word	0xaf25de2c
 800ad0c:	3f11566a 	.word	0x3f11566a
 800ad10:	16bebd93 	.word	0x16bebd93
 800ad14:	3f66c16c 	.word	0x3f66c16c
 800ad18:	5555553e 	.word	0x5555553e
 800ad1c:	3fc55555 	.word	0x3fc55555
 800ad20:	c2f8f359 	.word	0xc2f8f359
 800ad24:	01a56e1f 	.word	0x01a56e1f
 800ad28:	3fe00000 	.word	0x3fe00000
 800ad2c:	000fffff 	.word	0x000fffff
 800ad30:	3ff00000 	.word	0x3ff00000
 800ad34:	4090cbff 	.word	0x4090cbff
 800ad38:	3f6f3400 	.word	0x3f6f3400
 800ad3c:	652b82fe 	.word	0x652b82fe
 800ad40:	3c971547 	.word	0x3c971547
 800ad44:	00000000 	.word	0x00000000

0800ad48 <__ieee754_rem_pio2>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	ec57 6b10 	vmov	r6, r7, d0
 800ad50:	4bc3      	ldr	r3, [pc, #780]	; (800b060 <__ieee754_rem_pio2+0x318>)
 800ad52:	b08d      	sub	sp, #52	; 0x34
 800ad54:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ad58:	4598      	cmp	r8, r3
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	9704      	str	r7, [sp, #16]
 800ad5e:	dc07      	bgt.n	800ad70 <__ieee754_rem_pio2+0x28>
 800ad60:	2200      	movs	r2, #0
 800ad62:	2300      	movs	r3, #0
 800ad64:	ed84 0b00 	vstr	d0, [r4]
 800ad68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ad6c:	2500      	movs	r5, #0
 800ad6e:	e027      	b.n	800adc0 <__ieee754_rem_pio2+0x78>
 800ad70:	4bbc      	ldr	r3, [pc, #752]	; (800b064 <__ieee754_rem_pio2+0x31c>)
 800ad72:	4598      	cmp	r8, r3
 800ad74:	dc75      	bgt.n	800ae62 <__ieee754_rem_pio2+0x11a>
 800ad76:	9b04      	ldr	r3, [sp, #16]
 800ad78:	4dbb      	ldr	r5, [pc, #748]	; (800b068 <__ieee754_rem_pio2+0x320>)
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	ee10 0a10 	vmov	r0, s0
 800ad80:	a3a9      	add	r3, pc, #676	; (adr r3, 800b028 <__ieee754_rem_pio2+0x2e0>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	4639      	mov	r1, r7
 800ad88:	dd36      	ble.n	800adf8 <__ieee754_rem_pio2+0xb0>
 800ad8a:	f7f5 fa31 	bl	80001f0 <__aeabi_dsub>
 800ad8e:	45a8      	cmp	r8, r5
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	d018      	beq.n	800adc8 <__ieee754_rem_pio2+0x80>
 800ad96:	a3a6      	add	r3, pc, #664	; (adr r3, 800b030 <__ieee754_rem_pio2+0x2e8>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fa28 	bl	80001f0 <__aeabi_dsub>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	e9c4 2300 	strd	r2, r3, [r4]
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fa20 	bl	80001f0 <__aeabi_dsub>
 800adb0:	a39f      	add	r3, pc, #636	; (adr r3, 800b030 <__ieee754_rem_pio2+0x2e8>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fa1b 	bl	80001f0 <__aeabi_dsub>
 800adba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800adbe:	2501      	movs	r5, #1
 800adc0:	4628      	mov	r0, r5
 800adc2:	b00d      	add	sp, #52	; 0x34
 800adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc8:	a39b      	add	r3, pc, #620	; (adr r3, 800b038 <__ieee754_rem_pio2+0x2f0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fa0f 	bl	80001f0 <__aeabi_dsub>
 800add2:	a39b      	add	r3, pc, #620	; (adr r3, 800b040 <__ieee754_rem_pio2+0x2f8>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	4606      	mov	r6, r0
 800adda:	460f      	mov	r7, r1
 800addc:	f7f5 fa08 	bl	80001f0 <__aeabi_dsub>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	e9c4 2300 	strd	r2, r3, [r4]
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fa00 	bl	80001f0 <__aeabi_dsub>
 800adf0:	a393      	add	r3, pc, #588	; (adr r3, 800b040 <__ieee754_rem_pio2+0x2f8>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	e7de      	b.n	800adb6 <__ieee754_rem_pio2+0x6e>
 800adf8:	f7f5 f9fc 	bl	80001f4 <__adddf3>
 800adfc:	45a8      	cmp	r8, r5
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	d016      	beq.n	800ae32 <__ieee754_rem_pio2+0xea>
 800ae04:	a38a      	add	r3, pc, #552	; (adr r3, 800b030 <__ieee754_rem_pio2+0x2e8>)
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f7f5 f9f3 	bl	80001f4 <__adddf3>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	e9c4 2300 	strd	r2, r3, [r4]
 800ae16:	4630      	mov	r0, r6
 800ae18:	4639      	mov	r1, r7
 800ae1a:	f7f5 f9e9 	bl	80001f0 <__aeabi_dsub>
 800ae1e:	a384      	add	r3, pc, #528	; (adr r3, 800b030 <__ieee754_rem_pio2+0x2e8>)
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f7f5 f9e6 	bl	80001f4 <__adddf3>
 800ae28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ae2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae30:	e7c6      	b.n	800adc0 <__ieee754_rem_pio2+0x78>
 800ae32:	a381      	add	r3, pc, #516	; (adr r3, 800b038 <__ieee754_rem_pio2+0x2f0>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 f9dc 	bl	80001f4 <__adddf3>
 800ae3c:	a380      	add	r3, pc, #512	; (adr r3, 800b040 <__ieee754_rem_pio2+0x2f8>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	f7f5 f9d5 	bl	80001f4 <__adddf3>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	e9c4 2300 	strd	r2, r3, [r4]
 800ae52:	4630      	mov	r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 f9cb 	bl	80001f0 <__aeabi_dsub>
 800ae5a:	a379      	add	r3, pc, #484	; (adr r3, 800b040 <__ieee754_rem_pio2+0x2f8>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	e7e0      	b.n	800ae24 <__ieee754_rem_pio2+0xdc>
 800ae62:	4b82      	ldr	r3, [pc, #520]	; (800b06c <__ieee754_rem_pio2+0x324>)
 800ae64:	4598      	cmp	r8, r3
 800ae66:	f300 80d0 	bgt.w	800b00a <__ieee754_rem_pio2+0x2c2>
 800ae6a:	f001 f875 	bl	800bf58 <fabs>
 800ae6e:	ec57 6b10 	vmov	r6, r7, d0
 800ae72:	ee10 0a10 	vmov	r0, s0
 800ae76:	a374      	add	r3, pc, #464	; (adr r3, 800b048 <__ieee754_rem_pio2+0x300>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f5 fb6f 	bl	8000560 <__aeabi_dmul>
 800ae82:	2200      	movs	r2, #0
 800ae84:	4b7a      	ldr	r3, [pc, #488]	; (800b070 <__ieee754_rem_pio2+0x328>)
 800ae86:	f7f5 f9b5 	bl	80001f4 <__adddf3>
 800ae8a:	f7f5 fe19 	bl	8000ac0 <__aeabi_d2iz>
 800ae8e:	4605      	mov	r5, r0
 800ae90:	f7f5 fafc 	bl	800048c <__aeabi_i2d>
 800ae94:	a364      	add	r3, pc, #400	; (adr r3, 800b028 <__ieee754_rem_pio2+0x2e0>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae9e:	f7f5 fb5f 	bl	8000560 <__aeabi_dmul>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4630      	mov	r0, r6
 800aea8:	4639      	mov	r1, r7
 800aeaa:	f7f5 f9a1 	bl	80001f0 <__aeabi_dsub>
 800aeae:	a360      	add	r3, pc, #384	; (adr r3, 800b030 <__ieee754_rem_pio2+0x2e8>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	4682      	mov	sl, r0
 800aeb6:	468b      	mov	fp, r1
 800aeb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aebc:	f7f5 fb50 	bl	8000560 <__aeabi_dmul>
 800aec0:	2d1f      	cmp	r5, #31
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	dc0c      	bgt.n	800aee2 <__ieee754_rem_pio2+0x19a>
 800aec8:	1e6a      	subs	r2, r5, #1
 800aeca:	4b6a      	ldr	r3, [pc, #424]	; (800b074 <__ieee754_rem_pio2+0x32c>)
 800aecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed0:	4543      	cmp	r3, r8
 800aed2:	d006      	beq.n	800aee2 <__ieee754_rem_pio2+0x19a>
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	4650      	mov	r0, sl
 800aeda:	4659      	mov	r1, fp
 800aedc:	f7f5 f988 	bl	80001f0 <__aeabi_dsub>
 800aee0:	e00e      	b.n	800af00 <__ieee754_rem_pio2+0x1b8>
 800aee2:	4632      	mov	r2, r6
 800aee4:	463b      	mov	r3, r7
 800aee6:	4650      	mov	r0, sl
 800aee8:	4659      	mov	r1, fp
 800aeea:	f7f5 f981 	bl	80001f0 <__aeabi_dsub>
 800aeee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aef2:	9305      	str	r3, [sp, #20]
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	dc02      	bgt.n	800af06 <__ieee754_rem_pio2+0x1be>
 800af00:	e9c4 0100 	strd	r0, r1, [r4]
 800af04:	e039      	b.n	800af7a <__ieee754_rem_pio2+0x232>
 800af06:	a34c      	add	r3, pc, #304	; (adr r3, 800b038 <__ieee754_rem_pio2+0x2f0>)
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af10:	f7f5 fb26 	bl	8000560 <__aeabi_dmul>
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4650      	mov	r0, sl
 800af1e:	4659      	mov	r1, fp
 800af20:	f7f5 f966 	bl	80001f0 <__aeabi_dsub>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4680      	mov	r8, r0
 800af2a:	4689      	mov	r9, r1
 800af2c:	4650      	mov	r0, sl
 800af2e:	4659      	mov	r1, fp
 800af30:	f7f5 f95e 	bl	80001f0 <__aeabi_dsub>
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	f7f5 f95a 	bl	80001f0 <__aeabi_dsub>
 800af3c:	a340      	add	r3, pc, #256	; (adr r3, 800b040 <__ieee754_rem_pio2+0x2f8>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4606      	mov	r6, r0
 800af44:	460f      	mov	r7, r1
 800af46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af4a:	f7f5 fb09 	bl	8000560 <__aeabi_dmul>
 800af4e:	4632      	mov	r2, r6
 800af50:	463b      	mov	r3, r7
 800af52:	f7f5 f94d 	bl	80001f0 <__aeabi_dsub>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	4606      	mov	r6, r0
 800af5c:	460f      	mov	r7, r1
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 f945 	bl	80001f0 <__aeabi_dsub>
 800af66:	9a05      	ldr	r2, [sp, #20]
 800af68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b31      	cmp	r3, #49	; 0x31
 800af70:	dc20      	bgt.n	800afb4 <__ieee754_rem_pio2+0x26c>
 800af72:	e9c4 0100 	strd	r0, r1, [r4]
 800af76:	46c2      	mov	sl, r8
 800af78:	46cb      	mov	fp, r9
 800af7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af7e:	4650      	mov	r0, sl
 800af80:	4642      	mov	r2, r8
 800af82:	464b      	mov	r3, r9
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 f933 	bl	80001f0 <__aeabi_dsub>
 800af8a:	463b      	mov	r3, r7
 800af8c:	4632      	mov	r2, r6
 800af8e:	f7f5 f92f 	bl	80001f0 <__aeabi_dsub>
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af9a:	f6bf af11 	bge.w	800adc0 <__ieee754_rem_pio2+0x78>
 800af9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afa2:	6063      	str	r3, [r4, #4]
 800afa4:	f8c4 8000 	str.w	r8, [r4]
 800afa8:	60a0      	str	r0, [r4, #8]
 800afaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afae:	60e3      	str	r3, [r4, #12]
 800afb0:	426d      	negs	r5, r5
 800afb2:	e705      	b.n	800adc0 <__ieee754_rem_pio2+0x78>
 800afb4:	a326      	add	r3, pc, #152	; (adr r3, 800b050 <__ieee754_rem_pio2+0x308>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afbe:	f7f5 facf 	bl	8000560 <__aeabi_dmul>
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 f90f 	bl	80001f0 <__aeabi_dsub>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4682      	mov	sl, r0
 800afd8:	468b      	mov	fp, r1
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 f907 	bl	80001f0 <__aeabi_dsub>
 800afe2:	4632      	mov	r2, r6
 800afe4:	463b      	mov	r3, r7
 800afe6:	f7f5 f903 	bl	80001f0 <__aeabi_dsub>
 800afea:	a31b      	add	r3, pc, #108	; (adr r3, 800b058 <__ieee754_rem_pio2+0x310>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	4606      	mov	r6, r0
 800aff2:	460f      	mov	r7, r1
 800aff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff8:	f7f5 fab2 	bl	8000560 <__aeabi_dmul>
 800affc:	4632      	mov	r2, r6
 800affe:	463b      	mov	r3, r7
 800b000:	f7f5 f8f6 	bl	80001f0 <__aeabi_dsub>
 800b004:	4606      	mov	r6, r0
 800b006:	460f      	mov	r7, r1
 800b008:	e764      	b.n	800aed4 <__ieee754_rem_pio2+0x18c>
 800b00a:	4b1b      	ldr	r3, [pc, #108]	; (800b078 <__ieee754_rem_pio2+0x330>)
 800b00c:	4598      	cmp	r8, r3
 800b00e:	dd35      	ble.n	800b07c <__ieee754_rem_pio2+0x334>
 800b010:	ee10 2a10 	vmov	r2, s0
 800b014:	463b      	mov	r3, r7
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 f8e9 	bl	80001f0 <__aeabi_dsub>
 800b01e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b022:	e9c4 0100 	strd	r0, r1, [r4]
 800b026:	e6a1      	b.n	800ad6c <__ieee754_rem_pio2+0x24>
 800b028:	54400000 	.word	0x54400000
 800b02c:	3ff921fb 	.word	0x3ff921fb
 800b030:	1a626331 	.word	0x1a626331
 800b034:	3dd0b461 	.word	0x3dd0b461
 800b038:	1a600000 	.word	0x1a600000
 800b03c:	3dd0b461 	.word	0x3dd0b461
 800b040:	2e037073 	.word	0x2e037073
 800b044:	3ba3198a 	.word	0x3ba3198a
 800b048:	6dc9c883 	.word	0x6dc9c883
 800b04c:	3fe45f30 	.word	0x3fe45f30
 800b050:	2e000000 	.word	0x2e000000
 800b054:	3ba3198a 	.word	0x3ba3198a
 800b058:	252049c1 	.word	0x252049c1
 800b05c:	397b839a 	.word	0x397b839a
 800b060:	3fe921fb 	.word	0x3fe921fb
 800b064:	4002d97b 	.word	0x4002d97b
 800b068:	3ff921fb 	.word	0x3ff921fb
 800b06c:	413921fb 	.word	0x413921fb
 800b070:	3fe00000 	.word	0x3fe00000
 800b074:	0800c550 	.word	0x0800c550
 800b078:	7fefffff 	.word	0x7fefffff
 800b07c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b080:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b084:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b088:	4630      	mov	r0, r6
 800b08a:	460f      	mov	r7, r1
 800b08c:	f7f5 fd18 	bl	8000ac0 <__aeabi_d2iz>
 800b090:	f7f5 f9fc 	bl	800048c <__aeabi_i2d>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4630      	mov	r0, r6
 800b09a:	4639      	mov	r1, r7
 800b09c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0a0:	f7f5 f8a6 	bl	80001f0 <__aeabi_dsub>
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	4b1f      	ldr	r3, [pc, #124]	; (800b124 <__ieee754_rem_pio2+0x3dc>)
 800b0a8:	f7f5 fa5a 	bl	8000560 <__aeabi_dmul>
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	f7f5 fd06 	bl	8000ac0 <__aeabi_d2iz>
 800b0b4:	f7f5 f9ea 	bl	800048c <__aeabi_i2d>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	4630      	mov	r0, r6
 800b0be:	4639      	mov	r1, r7
 800b0c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0c4:	f7f5 f894 	bl	80001f0 <__aeabi_dsub>
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4b16      	ldr	r3, [pc, #88]	; (800b124 <__ieee754_rem_pio2+0x3dc>)
 800b0cc:	f7f5 fa48 	bl	8000560 <__aeabi_dmul>
 800b0d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b0d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b0d8:	f04f 0803 	mov.w	r8, #3
 800b0dc:	2600      	movs	r6, #0
 800b0de:	2700      	movs	r7, #0
 800b0e0:	4632      	mov	r2, r6
 800b0e2:	463b      	mov	r3, r7
 800b0e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b0e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800b0ec:	f7f5 fca0 	bl	8000a30 <__aeabi_dcmpeq>
 800b0f0:	b9b0      	cbnz	r0, 800b120 <__ieee754_rem_pio2+0x3d8>
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <__ieee754_rem_pio2+0x3e0>)
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	4643      	mov	r3, r8
 800b0fe:	4621      	mov	r1, r4
 800b100:	a806      	add	r0, sp, #24
 800b102:	f000 f98d 	bl	800b420 <__kernel_rem_pio2>
 800b106:	9b04      	ldr	r3, [sp, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	4605      	mov	r5, r0
 800b10c:	f6bf ae58 	bge.w	800adc0 <__ieee754_rem_pio2+0x78>
 800b110:	6863      	ldr	r3, [r4, #4]
 800b112:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b116:	6063      	str	r3, [r4, #4]
 800b118:	68e3      	ldr	r3, [r4, #12]
 800b11a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b11e:	e746      	b.n	800afae <__ieee754_rem_pio2+0x266>
 800b120:	46d0      	mov	r8, sl
 800b122:	e7dd      	b.n	800b0e0 <__ieee754_rem_pio2+0x398>
 800b124:	41700000 	.word	0x41700000
 800b128:	0800c5d0 	.word	0x0800c5d0

0800b12c <__ieee754_sqrt>:
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b130:	4955      	ldr	r1, [pc, #340]	; (800b288 <__ieee754_sqrt+0x15c>)
 800b132:	ec55 4b10 	vmov	r4, r5, d0
 800b136:	43a9      	bics	r1, r5
 800b138:	462b      	mov	r3, r5
 800b13a:	462a      	mov	r2, r5
 800b13c:	d112      	bne.n	800b164 <__ieee754_sqrt+0x38>
 800b13e:	ee10 2a10 	vmov	r2, s0
 800b142:	ee10 0a10 	vmov	r0, s0
 800b146:	4629      	mov	r1, r5
 800b148:	f7f5 fa0a 	bl	8000560 <__aeabi_dmul>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 f84e 	bl	80001f4 <__adddf3>
 800b158:	4604      	mov	r4, r0
 800b15a:	460d      	mov	r5, r1
 800b15c:	ec45 4b10 	vmov	d0, r4, r5
 800b160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b164:	2d00      	cmp	r5, #0
 800b166:	ee10 0a10 	vmov	r0, s0
 800b16a:	4621      	mov	r1, r4
 800b16c:	dc0f      	bgt.n	800b18e <__ieee754_sqrt+0x62>
 800b16e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b172:	4330      	orrs	r0, r6
 800b174:	d0f2      	beq.n	800b15c <__ieee754_sqrt+0x30>
 800b176:	b155      	cbz	r5, 800b18e <__ieee754_sqrt+0x62>
 800b178:	ee10 2a10 	vmov	r2, s0
 800b17c:	4620      	mov	r0, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	f7f5 f836 	bl	80001f0 <__aeabi_dsub>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	f7f5 fb14 	bl	80007b4 <__aeabi_ddiv>
 800b18c:	e7e4      	b.n	800b158 <__ieee754_sqrt+0x2c>
 800b18e:	151b      	asrs	r3, r3, #20
 800b190:	d073      	beq.n	800b27a <__ieee754_sqrt+0x14e>
 800b192:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b196:	07dd      	lsls	r5, r3, #31
 800b198:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b19c:	bf48      	it	mi
 800b19e:	0fc8      	lsrmi	r0, r1, #31
 800b1a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b1a4:	bf44      	itt	mi
 800b1a6:	0049      	lslmi	r1, r1, #1
 800b1a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	1058      	asrs	r0, r3, #1
 800b1b0:	0fcb      	lsrs	r3, r1, #31
 800b1b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b1b6:	0049      	lsls	r1, r1, #1
 800b1b8:	2316      	movs	r3, #22
 800b1ba:	462c      	mov	r4, r5
 800b1bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b1c0:	19a7      	adds	r7, r4, r6
 800b1c2:	4297      	cmp	r7, r2
 800b1c4:	bfde      	ittt	le
 800b1c6:	19bc      	addle	r4, r7, r6
 800b1c8:	1bd2      	suble	r2, r2, r7
 800b1ca:	19ad      	addle	r5, r5, r6
 800b1cc:	0fcf      	lsrs	r7, r1, #31
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b1d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b1d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b1dc:	d1f0      	bne.n	800b1c0 <__ieee754_sqrt+0x94>
 800b1de:	f04f 0c20 	mov.w	ip, #32
 800b1e2:	469e      	mov	lr, r3
 800b1e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b1e8:	42a2      	cmp	r2, r4
 800b1ea:	eb06 070e 	add.w	r7, r6, lr
 800b1ee:	dc02      	bgt.n	800b1f6 <__ieee754_sqrt+0xca>
 800b1f0:	d112      	bne.n	800b218 <__ieee754_sqrt+0xec>
 800b1f2:	428f      	cmp	r7, r1
 800b1f4:	d810      	bhi.n	800b218 <__ieee754_sqrt+0xec>
 800b1f6:	2f00      	cmp	r7, #0
 800b1f8:	eb07 0e06 	add.w	lr, r7, r6
 800b1fc:	da42      	bge.n	800b284 <__ieee754_sqrt+0x158>
 800b1fe:	f1be 0f00 	cmp.w	lr, #0
 800b202:	db3f      	blt.n	800b284 <__ieee754_sqrt+0x158>
 800b204:	f104 0801 	add.w	r8, r4, #1
 800b208:	1b12      	subs	r2, r2, r4
 800b20a:	428f      	cmp	r7, r1
 800b20c:	bf88      	it	hi
 800b20e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b212:	1bc9      	subs	r1, r1, r7
 800b214:	4433      	add	r3, r6
 800b216:	4644      	mov	r4, r8
 800b218:	0052      	lsls	r2, r2, #1
 800b21a:	f1bc 0c01 	subs.w	ip, ip, #1
 800b21e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b222:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b226:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b22a:	d1dd      	bne.n	800b1e8 <__ieee754_sqrt+0xbc>
 800b22c:	430a      	orrs	r2, r1
 800b22e:	d006      	beq.n	800b23e <__ieee754_sqrt+0x112>
 800b230:	1c5c      	adds	r4, r3, #1
 800b232:	bf13      	iteet	ne
 800b234:	3301      	addne	r3, #1
 800b236:	3501      	addeq	r5, #1
 800b238:	4663      	moveq	r3, ip
 800b23a:	f023 0301 	bicne.w	r3, r3, #1
 800b23e:	106a      	asrs	r2, r5, #1
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	07e9      	lsls	r1, r5, #31
 800b244:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b248:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b24c:	bf48      	it	mi
 800b24e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b252:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b256:	461c      	mov	r4, r3
 800b258:	e780      	b.n	800b15c <__ieee754_sqrt+0x30>
 800b25a:	0aca      	lsrs	r2, r1, #11
 800b25c:	3815      	subs	r0, #21
 800b25e:	0549      	lsls	r1, r1, #21
 800b260:	2a00      	cmp	r2, #0
 800b262:	d0fa      	beq.n	800b25a <__ieee754_sqrt+0x12e>
 800b264:	02d6      	lsls	r6, r2, #11
 800b266:	d50a      	bpl.n	800b27e <__ieee754_sqrt+0x152>
 800b268:	f1c3 0420 	rsb	r4, r3, #32
 800b26c:	fa21 f404 	lsr.w	r4, r1, r4
 800b270:	1e5d      	subs	r5, r3, #1
 800b272:	4099      	lsls	r1, r3
 800b274:	4322      	orrs	r2, r4
 800b276:	1b43      	subs	r3, r0, r5
 800b278:	e78b      	b.n	800b192 <__ieee754_sqrt+0x66>
 800b27a:	4618      	mov	r0, r3
 800b27c:	e7f0      	b.n	800b260 <__ieee754_sqrt+0x134>
 800b27e:	0052      	lsls	r2, r2, #1
 800b280:	3301      	adds	r3, #1
 800b282:	e7ef      	b.n	800b264 <__ieee754_sqrt+0x138>
 800b284:	46a0      	mov	r8, r4
 800b286:	e7bf      	b.n	800b208 <__ieee754_sqrt+0xdc>
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	00000000 	.word	0x00000000

0800b290 <__kernel_cos>:
 800b290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	ec59 8b10 	vmov	r8, r9, d0
 800b298:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b29c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b2a0:	ed2d 8b02 	vpush	{d8}
 800b2a4:	eeb0 8a41 	vmov.f32	s16, s2
 800b2a8:	eef0 8a61 	vmov.f32	s17, s3
 800b2ac:	da07      	bge.n	800b2be <__kernel_cos+0x2e>
 800b2ae:	ee10 0a10 	vmov	r0, s0
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	f7f5 fc04 	bl	8000ac0 <__aeabi_d2iz>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f000 8089 	beq.w	800b3d0 <__kernel_cos+0x140>
 800b2be:	4642      	mov	r2, r8
 800b2c0:	464b      	mov	r3, r9
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 f94b 	bl	8000560 <__aeabi_dmul>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	4b4e      	ldr	r3, [pc, #312]	; (800b408 <__kernel_cos+0x178>)
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	f7f5 f945 	bl	8000560 <__aeabi_dmul>
 800b2d6:	a340      	add	r3, pc, #256	; (adr r3, 800b3d8 <__kernel_cos+0x148>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	4682      	mov	sl, r0
 800b2de:	468b      	mov	fp, r1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f5 f93c 	bl	8000560 <__aeabi_dmul>
 800b2e8:	a33d      	add	r3, pc, #244	; (adr r3, 800b3e0 <__kernel_cos+0x150>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f4 ff81 	bl	80001f4 <__adddf3>
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	f7f5 f933 	bl	8000560 <__aeabi_dmul>
 800b2fa:	a33b      	add	r3, pc, #236	; (adr r3, 800b3e8 <__kernel_cos+0x158>)
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f7f4 ff76 	bl	80001f0 <__aeabi_dsub>
 800b304:	4622      	mov	r2, r4
 800b306:	462b      	mov	r3, r5
 800b308:	f7f5 f92a 	bl	8000560 <__aeabi_dmul>
 800b30c:	a338      	add	r3, pc, #224	; (adr r3, 800b3f0 <__kernel_cos+0x160>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f7f4 ff6f 	bl	80001f4 <__adddf3>
 800b316:	4622      	mov	r2, r4
 800b318:	462b      	mov	r3, r5
 800b31a:	f7f5 f921 	bl	8000560 <__aeabi_dmul>
 800b31e:	a336      	add	r3, pc, #216	; (adr r3, 800b3f8 <__kernel_cos+0x168>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f7f4 ff64 	bl	80001f0 <__aeabi_dsub>
 800b328:	4622      	mov	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	f7f5 f918 	bl	8000560 <__aeabi_dmul>
 800b330:	a333      	add	r3, pc, #204	; (adr r3, 800b400 <__kernel_cos+0x170>)
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f7f4 ff5d 	bl	80001f4 <__adddf3>
 800b33a:	4622      	mov	r2, r4
 800b33c:	462b      	mov	r3, r5
 800b33e:	f7f5 f90f 	bl	8000560 <__aeabi_dmul>
 800b342:	4622      	mov	r2, r4
 800b344:	462b      	mov	r3, r5
 800b346:	f7f5 f90b 	bl	8000560 <__aeabi_dmul>
 800b34a:	ec53 2b18 	vmov	r2, r3, d8
 800b34e:	4604      	mov	r4, r0
 800b350:	460d      	mov	r5, r1
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	f7f5 f903 	bl	8000560 <__aeabi_dmul>
 800b35a:	460b      	mov	r3, r1
 800b35c:	4602      	mov	r2, r0
 800b35e:	4629      	mov	r1, r5
 800b360:	4620      	mov	r0, r4
 800b362:	f7f4 ff45 	bl	80001f0 <__aeabi_dsub>
 800b366:	4b29      	ldr	r3, [pc, #164]	; (800b40c <__kernel_cos+0x17c>)
 800b368:	429e      	cmp	r6, r3
 800b36a:	4680      	mov	r8, r0
 800b36c:	4689      	mov	r9, r1
 800b36e:	dc11      	bgt.n	800b394 <__kernel_cos+0x104>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4650      	mov	r0, sl
 800b376:	4659      	mov	r1, fp
 800b378:	f7f4 ff3a 	bl	80001f0 <__aeabi_dsub>
 800b37c:	460b      	mov	r3, r1
 800b37e:	4924      	ldr	r1, [pc, #144]	; (800b410 <__kernel_cos+0x180>)
 800b380:	4602      	mov	r2, r0
 800b382:	2000      	movs	r0, #0
 800b384:	f7f4 ff34 	bl	80001f0 <__aeabi_dsub>
 800b388:	ecbd 8b02 	vpop	{d8}
 800b38c:	ec41 0b10 	vmov	d0, r0, r1
 800b390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b394:	4b1f      	ldr	r3, [pc, #124]	; (800b414 <__kernel_cos+0x184>)
 800b396:	491e      	ldr	r1, [pc, #120]	; (800b410 <__kernel_cos+0x180>)
 800b398:	429e      	cmp	r6, r3
 800b39a:	bfcc      	ite	gt
 800b39c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b418 <__kernel_cos+0x188>)
 800b39e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b3a2:	2400      	movs	r4, #0
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f7f4 ff21 	bl	80001f0 <__aeabi_dsub>
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	4659      	mov	r1, fp
 800b3ba:	f7f4 ff19 	bl	80001f0 <__aeabi_dsub>
 800b3be:	4642      	mov	r2, r8
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	f7f4 ff15 	bl	80001f0 <__aeabi_dsub>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	e7d9      	b.n	800b384 <__kernel_cos+0xf4>
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	490f      	ldr	r1, [pc, #60]	; (800b410 <__kernel_cos+0x180>)
 800b3d4:	e7d8      	b.n	800b388 <__kernel_cos+0xf8>
 800b3d6:	bf00      	nop
 800b3d8:	be8838d4 	.word	0xbe8838d4
 800b3dc:	bda8fae9 	.word	0xbda8fae9
 800b3e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3e4:	3e21ee9e 	.word	0x3e21ee9e
 800b3e8:	809c52ad 	.word	0x809c52ad
 800b3ec:	3e927e4f 	.word	0x3e927e4f
 800b3f0:	19cb1590 	.word	0x19cb1590
 800b3f4:	3efa01a0 	.word	0x3efa01a0
 800b3f8:	16c15177 	.word	0x16c15177
 800b3fc:	3f56c16c 	.word	0x3f56c16c
 800b400:	5555554c 	.word	0x5555554c
 800b404:	3fa55555 	.word	0x3fa55555
 800b408:	3fe00000 	.word	0x3fe00000
 800b40c:	3fd33332 	.word	0x3fd33332
 800b410:	3ff00000 	.word	0x3ff00000
 800b414:	3fe90000 	.word	0x3fe90000
 800b418:	3fd20000 	.word	0x3fd20000
 800b41c:	00000000 	.word	0x00000000

0800b420 <__kernel_rem_pio2>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	ed2d 8b02 	vpush	{d8}
 800b428:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b42c:	1ed4      	subs	r4, r2, #3
 800b42e:	9308      	str	r3, [sp, #32]
 800b430:	9101      	str	r1, [sp, #4]
 800b432:	4bc5      	ldr	r3, [pc, #788]	; (800b748 <__kernel_rem_pio2+0x328>)
 800b434:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b436:	9009      	str	r0, [sp, #36]	; 0x24
 800b438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	9b08      	ldr	r3, [sp, #32]
 800b440:	3b01      	subs	r3, #1
 800b442:	9307      	str	r3, [sp, #28]
 800b444:	2318      	movs	r3, #24
 800b446:	fb94 f4f3 	sdiv	r4, r4, r3
 800b44a:	f06f 0317 	mvn.w	r3, #23
 800b44e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b452:	fb04 3303 	mla	r3, r4, r3, r3
 800b456:	eb03 0a02 	add.w	sl, r3, r2
 800b45a:	9b04      	ldr	r3, [sp, #16]
 800b45c:	9a07      	ldr	r2, [sp, #28]
 800b45e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b738 <__kernel_rem_pio2+0x318>
 800b462:	eb03 0802 	add.w	r8, r3, r2
 800b466:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b468:	1aa7      	subs	r7, r4, r2
 800b46a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b46e:	ae22      	add	r6, sp, #136	; 0x88
 800b470:	2500      	movs	r5, #0
 800b472:	4545      	cmp	r5, r8
 800b474:	dd13      	ble.n	800b49e <__kernel_rem_pio2+0x7e>
 800b476:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b738 <__kernel_rem_pio2+0x318>
 800b47a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b47e:	2600      	movs	r6, #0
 800b480:	9b04      	ldr	r3, [sp, #16]
 800b482:	429e      	cmp	r6, r3
 800b484:	dc32      	bgt.n	800b4ec <__kernel_rem_pio2+0xcc>
 800b486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b488:	9302      	str	r3, [sp, #8]
 800b48a:	9b08      	ldr	r3, [sp, #32]
 800b48c:	199d      	adds	r5, r3, r6
 800b48e:	ab22      	add	r3, sp, #136	; 0x88
 800b490:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b494:	9306      	str	r3, [sp, #24]
 800b496:	ec59 8b18 	vmov	r8, r9, d8
 800b49a:	2700      	movs	r7, #0
 800b49c:	e01f      	b.n	800b4de <__kernel_rem_pio2+0xbe>
 800b49e:	42ef      	cmn	r7, r5
 800b4a0:	d407      	bmi.n	800b4b2 <__kernel_rem_pio2+0x92>
 800b4a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b4a6:	f7f4 fff1 	bl	800048c <__aeabi_i2d>
 800b4aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b4ae:	3501      	adds	r5, #1
 800b4b0:	e7df      	b.n	800b472 <__kernel_rem_pio2+0x52>
 800b4b2:	ec51 0b18 	vmov	r0, r1, d8
 800b4b6:	e7f8      	b.n	800b4aa <__kernel_rem_pio2+0x8a>
 800b4b8:	9906      	ldr	r1, [sp, #24]
 800b4ba:	9d02      	ldr	r5, [sp, #8]
 800b4bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b4c0:	9106      	str	r1, [sp, #24]
 800b4c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b4c6:	9502      	str	r5, [sp, #8]
 800b4c8:	f7f5 f84a 	bl	8000560 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	f7f4 fe8e 	bl	80001f4 <__adddf3>
 800b4d8:	3701      	adds	r7, #1
 800b4da:	4680      	mov	r8, r0
 800b4dc:	4689      	mov	r9, r1
 800b4de:	9b07      	ldr	r3, [sp, #28]
 800b4e0:	429f      	cmp	r7, r3
 800b4e2:	dde9      	ble.n	800b4b8 <__kernel_rem_pio2+0x98>
 800b4e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b4e8:	3601      	adds	r6, #1
 800b4ea:	e7c9      	b.n	800b480 <__kernel_rem_pio2+0x60>
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	aa0e      	add	r2, sp, #56	; 0x38
 800b4f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4f4:	930c      	str	r3, [sp, #48]	; 0x30
 800b4f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b4f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b4fc:	9c04      	ldr	r4, [sp, #16]
 800b4fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b500:	ab9a      	add	r3, sp, #616	; 0x268
 800b502:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b506:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b50a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b50e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b512:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b516:	ab9a      	add	r3, sp, #616	; 0x268
 800b518:	445b      	add	r3, fp
 800b51a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b51e:	2500      	movs	r5, #0
 800b520:	1b63      	subs	r3, r4, r5
 800b522:	2b00      	cmp	r3, #0
 800b524:	dc78      	bgt.n	800b618 <__kernel_rem_pio2+0x1f8>
 800b526:	4650      	mov	r0, sl
 800b528:	ec49 8b10 	vmov	d0, r8, r9
 800b52c:	f000 fe3c 	bl	800c1a8 <scalbn>
 800b530:	ec57 6b10 	vmov	r6, r7, d0
 800b534:	2200      	movs	r2, #0
 800b536:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b53a:	ee10 0a10 	vmov	r0, s0
 800b53e:	4639      	mov	r1, r7
 800b540:	f7f5 f80e 	bl	8000560 <__aeabi_dmul>
 800b544:	ec41 0b10 	vmov	d0, r0, r1
 800b548:	f000 fd1a 	bl	800bf80 <floor>
 800b54c:	2200      	movs	r2, #0
 800b54e:	ec51 0b10 	vmov	r0, r1, d0
 800b552:	4b7e      	ldr	r3, [pc, #504]	; (800b74c <__kernel_rem_pio2+0x32c>)
 800b554:	f7f5 f804 	bl	8000560 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f4 fe46 	bl	80001f0 <__aeabi_dsub>
 800b564:	460f      	mov	r7, r1
 800b566:	4606      	mov	r6, r0
 800b568:	f7f5 faaa 	bl	8000ac0 <__aeabi_d2iz>
 800b56c:	9006      	str	r0, [sp, #24]
 800b56e:	f7f4 ff8d 	bl	800048c <__aeabi_i2d>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4630      	mov	r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	f7f4 fe39 	bl	80001f0 <__aeabi_dsub>
 800b57e:	f1ba 0f00 	cmp.w	sl, #0
 800b582:	4606      	mov	r6, r0
 800b584:	460f      	mov	r7, r1
 800b586:	dd6c      	ble.n	800b662 <__kernel_rem_pio2+0x242>
 800b588:	1e62      	subs	r2, r4, #1
 800b58a:	ab0e      	add	r3, sp, #56	; 0x38
 800b58c:	f1ca 0118 	rsb	r1, sl, #24
 800b590:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b594:	9d06      	ldr	r5, [sp, #24]
 800b596:	fa40 f301 	asr.w	r3, r0, r1
 800b59a:	441d      	add	r5, r3
 800b59c:	408b      	lsls	r3, r1
 800b59e:	1ac0      	subs	r0, r0, r3
 800b5a0:	ab0e      	add	r3, sp, #56	; 0x38
 800b5a2:	9506      	str	r5, [sp, #24]
 800b5a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b5a8:	f1ca 0317 	rsb	r3, sl, #23
 800b5ac:	fa40 f303 	asr.w	r3, r0, r3
 800b5b0:	9302      	str	r3, [sp, #8]
 800b5b2:	9b02      	ldr	r3, [sp, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dd62      	ble.n	800b67e <__kernel_rem_pio2+0x25e>
 800b5b8:	9b06      	ldr	r3, [sp, #24]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	3301      	adds	r3, #1
 800b5be:	9306      	str	r3, [sp, #24]
 800b5c0:	4615      	mov	r5, r2
 800b5c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b5c6:	4294      	cmp	r4, r2
 800b5c8:	f300 8095 	bgt.w	800b6f6 <__kernel_rem_pio2+0x2d6>
 800b5cc:	f1ba 0f00 	cmp.w	sl, #0
 800b5d0:	dd07      	ble.n	800b5e2 <__kernel_rem_pio2+0x1c2>
 800b5d2:	f1ba 0f01 	cmp.w	sl, #1
 800b5d6:	f000 80a2 	beq.w	800b71e <__kernel_rem_pio2+0x2fe>
 800b5da:	f1ba 0f02 	cmp.w	sl, #2
 800b5de:	f000 80c1 	beq.w	800b764 <__kernel_rem_pio2+0x344>
 800b5e2:	9b02      	ldr	r3, [sp, #8]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d14a      	bne.n	800b67e <__kernel_rem_pio2+0x25e>
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	4958      	ldr	r1, [pc, #352]	; (800b750 <__kernel_rem_pio2+0x330>)
 800b5f0:	f7f4 fdfe 	bl	80001f0 <__aeabi_dsub>
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	460f      	mov	r7, r1
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	d040      	beq.n	800b67e <__kernel_rem_pio2+0x25e>
 800b5fc:	4650      	mov	r0, sl
 800b5fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b740 <__kernel_rem_pio2+0x320>
 800b602:	f000 fdd1 	bl	800c1a8 <scalbn>
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	ec53 2b10 	vmov	r2, r3, d0
 800b60e:	f7f4 fdef 	bl	80001f0 <__aeabi_dsub>
 800b612:	4606      	mov	r6, r0
 800b614:	460f      	mov	r7, r1
 800b616:	e032      	b.n	800b67e <__kernel_rem_pio2+0x25e>
 800b618:	2200      	movs	r2, #0
 800b61a:	4b4e      	ldr	r3, [pc, #312]	; (800b754 <__kernel_rem_pio2+0x334>)
 800b61c:	4640      	mov	r0, r8
 800b61e:	4649      	mov	r1, r9
 800b620:	f7f4 ff9e 	bl	8000560 <__aeabi_dmul>
 800b624:	f7f5 fa4c 	bl	8000ac0 <__aeabi_d2iz>
 800b628:	f7f4 ff30 	bl	800048c <__aeabi_i2d>
 800b62c:	2200      	movs	r2, #0
 800b62e:	4b4a      	ldr	r3, [pc, #296]	; (800b758 <__kernel_rem_pio2+0x338>)
 800b630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b634:	f7f4 ff94 	bl	8000560 <__aeabi_dmul>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4640      	mov	r0, r8
 800b63e:	4649      	mov	r1, r9
 800b640:	f7f4 fdd6 	bl	80001f0 <__aeabi_dsub>
 800b644:	f7f5 fa3c 	bl	8000ac0 <__aeabi_d2iz>
 800b648:	ab0e      	add	r3, sp, #56	; 0x38
 800b64a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b64e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b656:	f7f4 fdcd 	bl	80001f4 <__adddf3>
 800b65a:	3501      	adds	r5, #1
 800b65c:	4680      	mov	r8, r0
 800b65e:	4689      	mov	r9, r1
 800b660:	e75e      	b.n	800b520 <__kernel_rem_pio2+0x100>
 800b662:	d105      	bne.n	800b670 <__kernel_rem_pio2+0x250>
 800b664:	1e63      	subs	r3, r4, #1
 800b666:	aa0e      	add	r2, sp, #56	; 0x38
 800b668:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b66c:	15c3      	asrs	r3, r0, #23
 800b66e:	e79f      	b.n	800b5b0 <__kernel_rem_pio2+0x190>
 800b670:	2200      	movs	r2, #0
 800b672:	4b3a      	ldr	r3, [pc, #232]	; (800b75c <__kernel_rem_pio2+0x33c>)
 800b674:	f7f5 f9fa 	bl	8000a6c <__aeabi_dcmpge>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d139      	bne.n	800b6f0 <__kernel_rem_pio2+0x2d0>
 800b67c:	9002      	str	r0, [sp, #8]
 800b67e:	2200      	movs	r2, #0
 800b680:	2300      	movs	r3, #0
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f5 f9d3 	bl	8000a30 <__aeabi_dcmpeq>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f000 80c7 	beq.w	800b81e <__kernel_rem_pio2+0x3fe>
 800b690:	1e65      	subs	r5, r4, #1
 800b692:	462b      	mov	r3, r5
 800b694:	2200      	movs	r2, #0
 800b696:	9904      	ldr	r1, [sp, #16]
 800b698:	428b      	cmp	r3, r1
 800b69a:	da6a      	bge.n	800b772 <__kernel_rem_pio2+0x352>
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	f000 8088 	beq.w	800b7b2 <__kernel_rem_pio2+0x392>
 800b6a2:	ab0e      	add	r3, sp, #56	; 0x38
 800b6a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b6a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 80b4 	beq.w	800b81a <__kernel_rem_pio2+0x3fa>
 800b6b2:	4650      	mov	r0, sl
 800b6b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b740 <__kernel_rem_pio2+0x320>
 800b6b8:	f000 fd76 	bl	800c1a8 <scalbn>
 800b6bc:	00ec      	lsls	r4, r5, #3
 800b6be:	ab72      	add	r3, sp, #456	; 0x1c8
 800b6c0:	191e      	adds	r6, r3, r4
 800b6c2:	ec59 8b10 	vmov	r8, r9, d0
 800b6c6:	f106 0a08 	add.w	sl, r6, #8
 800b6ca:	462f      	mov	r7, r5
 800b6cc:	2f00      	cmp	r7, #0
 800b6ce:	f280 80df 	bge.w	800b890 <__kernel_rem_pio2+0x470>
 800b6d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b738 <__kernel_rem_pio2+0x318>
 800b6d6:	f04f 0a00 	mov.w	sl, #0
 800b6da:	eba5 030a 	sub.w	r3, r5, sl
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f2c0 810a 	blt.w	800b8f8 <__kernel_rem_pio2+0x4d8>
 800b6e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b760 <__kernel_rem_pio2+0x340>
 800b6e8:	ec59 8b18 	vmov	r8, r9, d8
 800b6ec:	2700      	movs	r7, #0
 800b6ee:	e0f5      	b.n	800b8dc <__kernel_rem_pio2+0x4bc>
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	e760      	b.n	800b5b8 <__kernel_rem_pio2+0x198>
 800b6f6:	ab0e      	add	r3, sp, #56	; 0x38
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	b94d      	cbnz	r5, 800b712 <__kernel_rem_pio2+0x2f2>
 800b6fe:	b12b      	cbz	r3, 800b70c <__kernel_rem_pio2+0x2ec>
 800b700:	a80e      	add	r0, sp, #56	; 0x38
 800b702:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b706:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b70a:	2301      	movs	r3, #1
 800b70c:	3201      	adds	r2, #1
 800b70e:	461d      	mov	r5, r3
 800b710:	e759      	b.n	800b5c6 <__kernel_rem_pio2+0x1a6>
 800b712:	a80e      	add	r0, sp, #56	; 0x38
 800b714:	1acb      	subs	r3, r1, r3
 800b716:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b71a:	462b      	mov	r3, r5
 800b71c:	e7f6      	b.n	800b70c <__kernel_rem_pio2+0x2ec>
 800b71e:	1e62      	subs	r2, r4, #1
 800b720:	ab0e      	add	r3, sp, #56	; 0x38
 800b722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b726:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b72a:	a90e      	add	r1, sp, #56	; 0x38
 800b72c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b730:	e757      	b.n	800b5e2 <__kernel_rem_pio2+0x1c2>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
	...
 800b744:	3ff00000 	.word	0x3ff00000
 800b748:	0800c718 	.word	0x0800c718
 800b74c:	40200000 	.word	0x40200000
 800b750:	3ff00000 	.word	0x3ff00000
 800b754:	3e700000 	.word	0x3e700000
 800b758:	41700000 	.word	0x41700000
 800b75c:	3fe00000 	.word	0x3fe00000
 800b760:	0800c6d8 	.word	0x0800c6d8
 800b764:	1e62      	subs	r2, r4, #1
 800b766:	ab0e      	add	r3, sp, #56	; 0x38
 800b768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b770:	e7db      	b.n	800b72a <__kernel_rem_pio2+0x30a>
 800b772:	a90e      	add	r1, sp, #56	; 0x38
 800b774:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b778:	3b01      	subs	r3, #1
 800b77a:	430a      	orrs	r2, r1
 800b77c:	e78b      	b.n	800b696 <__kernel_rem_pio2+0x276>
 800b77e:	3301      	adds	r3, #1
 800b780:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b784:	2900      	cmp	r1, #0
 800b786:	d0fa      	beq.n	800b77e <__kernel_rem_pio2+0x35e>
 800b788:	9a08      	ldr	r2, [sp, #32]
 800b78a:	4422      	add	r2, r4
 800b78c:	00d2      	lsls	r2, r2, #3
 800b78e:	a922      	add	r1, sp, #136	; 0x88
 800b790:	18e3      	adds	r3, r4, r3
 800b792:	9206      	str	r2, [sp, #24]
 800b794:	440a      	add	r2, r1
 800b796:	9302      	str	r3, [sp, #8]
 800b798:	f10b 0108 	add.w	r1, fp, #8
 800b79c:	f102 0308 	add.w	r3, r2, #8
 800b7a0:	1c66      	adds	r6, r4, #1
 800b7a2:	910a      	str	r1, [sp, #40]	; 0x28
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b7a8:	9b02      	ldr	r3, [sp, #8]
 800b7aa:	42b3      	cmp	r3, r6
 800b7ac:	da04      	bge.n	800b7b8 <__kernel_rem_pio2+0x398>
 800b7ae:	461c      	mov	r4, r3
 800b7b0:	e6a6      	b.n	800b500 <__kernel_rem_pio2+0xe0>
 800b7b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e7e3      	b.n	800b780 <__kernel_rem_pio2+0x360>
 800b7b8:	9b06      	ldr	r3, [sp, #24]
 800b7ba:	18ef      	adds	r7, r5, r3
 800b7bc:	ab22      	add	r3, sp, #136	; 0x88
 800b7be:	441f      	add	r7, r3
 800b7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b7c6:	f7f4 fe61 	bl	800048c <__aeabi_i2d>
 800b7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7cc:	461c      	mov	r4, r3
 800b7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7d0:	e9c7 0100 	strd	r0, r1, [r7]
 800b7d4:	eb03 0b05 	add.w	fp, r3, r5
 800b7d8:	2700      	movs	r7, #0
 800b7da:	f04f 0800 	mov.w	r8, #0
 800b7de:	f04f 0900 	mov.w	r9, #0
 800b7e2:	9b07      	ldr	r3, [sp, #28]
 800b7e4:	429f      	cmp	r7, r3
 800b7e6:	dd08      	ble.n	800b7fa <__kernel_rem_pio2+0x3da>
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ea:	aa72      	add	r2, sp, #456	; 0x1c8
 800b7ec:	18eb      	adds	r3, r5, r3
 800b7ee:	4413      	add	r3, r2
 800b7f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b7f4:	3601      	adds	r6, #1
 800b7f6:	3508      	adds	r5, #8
 800b7f8:	e7d6      	b.n	800b7a8 <__kernel_rem_pio2+0x388>
 800b7fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b7fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b802:	f7f4 fead 	bl	8000560 <__aeabi_dmul>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4640      	mov	r0, r8
 800b80c:	4649      	mov	r1, r9
 800b80e:	f7f4 fcf1 	bl	80001f4 <__adddf3>
 800b812:	3701      	adds	r7, #1
 800b814:	4680      	mov	r8, r0
 800b816:	4689      	mov	r9, r1
 800b818:	e7e3      	b.n	800b7e2 <__kernel_rem_pio2+0x3c2>
 800b81a:	3d01      	subs	r5, #1
 800b81c:	e741      	b.n	800b6a2 <__kernel_rem_pio2+0x282>
 800b81e:	f1ca 0000 	rsb	r0, sl, #0
 800b822:	ec47 6b10 	vmov	d0, r6, r7
 800b826:	f000 fcbf 	bl	800c1a8 <scalbn>
 800b82a:	ec57 6b10 	vmov	r6, r7, d0
 800b82e:	2200      	movs	r2, #0
 800b830:	4b99      	ldr	r3, [pc, #612]	; (800ba98 <__kernel_rem_pio2+0x678>)
 800b832:	ee10 0a10 	vmov	r0, s0
 800b836:	4639      	mov	r1, r7
 800b838:	f7f5 f918 	bl	8000a6c <__aeabi_dcmpge>
 800b83c:	b1f8      	cbz	r0, 800b87e <__kernel_rem_pio2+0x45e>
 800b83e:	2200      	movs	r2, #0
 800b840:	4b96      	ldr	r3, [pc, #600]	; (800ba9c <__kernel_rem_pio2+0x67c>)
 800b842:	4630      	mov	r0, r6
 800b844:	4639      	mov	r1, r7
 800b846:	f7f4 fe8b 	bl	8000560 <__aeabi_dmul>
 800b84a:	f7f5 f939 	bl	8000ac0 <__aeabi_d2iz>
 800b84e:	4680      	mov	r8, r0
 800b850:	f7f4 fe1c 	bl	800048c <__aeabi_i2d>
 800b854:	2200      	movs	r2, #0
 800b856:	4b90      	ldr	r3, [pc, #576]	; (800ba98 <__kernel_rem_pio2+0x678>)
 800b858:	f7f4 fe82 	bl	8000560 <__aeabi_dmul>
 800b85c:	460b      	mov	r3, r1
 800b85e:	4602      	mov	r2, r0
 800b860:	4639      	mov	r1, r7
 800b862:	4630      	mov	r0, r6
 800b864:	f7f4 fcc4 	bl	80001f0 <__aeabi_dsub>
 800b868:	f7f5 f92a 	bl	8000ac0 <__aeabi_d2iz>
 800b86c:	1c65      	adds	r5, r4, #1
 800b86e:	ab0e      	add	r3, sp, #56	; 0x38
 800b870:	f10a 0a18 	add.w	sl, sl, #24
 800b874:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b878:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b87c:	e719      	b.n	800b6b2 <__kernel_rem_pio2+0x292>
 800b87e:	4630      	mov	r0, r6
 800b880:	4639      	mov	r1, r7
 800b882:	f7f5 f91d 	bl	8000ac0 <__aeabi_d2iz>
 800b886:	ab0e      	add	r3, sp, #56	; 0x38
 800b888:	4625      	mov	r5, r4
 800b88a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b88e:	e710      	b.n	800b6b2 <__kernel_rem_pio2+0x292>
 800b890:	ab0e      	add	r3, sp, #56	; 0x38
 800b892:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b896:	f7f4 fdf9 	bl	800048c <__aeabi_i2d>
 800b89a:	4642      	mov	r2, r8
 800b89c:	464b      	mov	r3, r9
 800b89e:	f7f4 fe5f 	bl	8000560 <__aeabi_dmul>
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b8a8:	4b7c      	ldr	r3, [pc, #496]	; (800ba9c <__kernel_rem_pio2+0x67c>)
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	f7f4 fe57 	bl	8000560 <__aeabi_dmul>
 800b8b2:	3f01      	subs	r7, #1
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	4689      	mov	r9, r1
 800b8b8:	e708      	b.n	800b6cc <__kernel_rem_pio2+0x2ac>
 800b8ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b8c6:	f7f4 fe4b 	bl	8000560 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	f7f4 fc8f 	bl	80001f4 <__adddf3>
 800b8d6:	3701      	adds	r7, #1
 800b8d8:	4680      	mov	r8, r0
 800b8da:	4689      	mov	r9, r1
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	429f      	cmp	r7, r3
 800b8e0:	dc01      	bgt.n	800b8e6 <__kernel_rem_pio2+0x4c6>
 800b8e2:	45ba      	cmp	sl, r7
 800b8e4:	dae9      	bge.n	800b8ba <__kernel_rem_pio2+0x49a>
 800b8e6:	ab4a      	add	r3, sp, #296	; 0x128
 800b8e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b8ec:	e9c3 8900 	strd	r8, r9, [r3]
 800b8f0:	f10a 0a01 	add.w	sl, sl, #1
 800b8f4:	3e08      	subs	r6, #8
 800b8f6:	e6f0      	b.n	800b6da <__kernel_rem_pio2+0x2ba>
 800b8f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d85b      	bhi.n	800b9b6 <__kernel_rem_pio2+0x596>
 800b8fe:	e8df f003 	tbb	[pc, r3]
 800b902:	264a      	.short	0x264a
 800b904:	0226      	.short	0x0226
 800b906:	ab9a      	add	r3, sp, #616	; 0x268
 800b908:	441c      	add	r4, r3
 800b90a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b90e:	46a2      	mov	sl, r4
 800b910:	46ab      	mov	fp, r5
 800b912:	f1bb 0f00 	cmp.w	fp, #0
 800b916:	dc6c      	bgt.n	800b9f2 <__kernel_rem_pio2+0x5d2>
 800b918:	46a2      	mov	sl, r4
 800b91a:	46ab      	mov	fp, r5
 800b91c:	f1bb 0f01 	cmp.w	fp, #1
 800b920:	f300 8086 	bgt.w	800ba30 <__kernel_rem_pio2+0x610>
 800b924:	2000      	movs	r0, #0
 800b926:	2100      	movs	r1, #0
 800b928:	2d01      	cmp	r5, #1
 800b92a:	f300 80a0 	bgt.w	800ba6e <__kernel_rem_pio2+0x64e>
 800b92e:	9b02      	ldr	r3, [sp, #8]
 800b930:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b934:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 809e 	bne.w	800ba7a <__kernel_rem_pio2+0x65a>
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	e9c3 7800 	strd	r7, r8, [r3]
 800b944:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b948:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b94c:	e033      	b.n	800b9b6 <__kernel_rem_pio2+0x596>
 800b94e:	3408      	adds	r4, #8
 800b950:	ab4a      	add	r3, sp, #296	; 0x128
 800b952:	441c      	add	r4, r3
 800b954:	462e      	mov	r6, r5
 800b956:	2000      	movs	r0, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	da3a      	bge.n	800b9d4 <__kernel_rem_pio2+0x5b4>
 800b95e:	9b02      	ldr	r3, [sp, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d03d      	beq.n	800b9e0 <__kernel_rem_pio2+0x5c0>
 800b964:	4602      	mov	r2, r0
 800b966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b96a:	9c01      	ldr	r4, [sp, #4]
 800b96c:	e9c4 2300 	strd	r2, r3, [r4]
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b978:	f7f4 fc3a 	bl	80001f0 <__aeabi_dsub>
 800b97c:	ae4c      	add	r6, sp, #304	; 0x130
 800b97e:	2401      	movs	r4, #1
 800b980:	42a5      	cmp	r5, r4
 800b982:	da30      	bge.n	800b9e6 <__kernel_rem_pio2+0x5c6>
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	b113      	cbz	r3, 800b98e <__kernel_rem_pio2+0x56e>
 800b988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b98c:	4619      	mov	r1, r3
 800b98e:	9b01      	ldr	r3, [sp, #4]
 800b990:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b994:	e00f      	b.n	800b9b6 <__kernel_rem_pio2+0x596>
 800b996:	ab9a      	add	r3, sp, #616	; 0x268
 800b998:	441c      	add	r4, r3
 800b99a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b99e:	2000      	movs	r0, #0
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	da10      	bge.n	800b9c8 <__kernel_rem_pio2+0x5a8>
 800b9a6:	9b02      	ldr	r3, [sp, #8]
 800b9a8:	b113      	cbz	r3, 800b9b0 <__kernel_rem_pio2+0x590>
 800b9aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	9b01      	ldr	r3, [sp, #4]
 800b9b2:	e9c3 0100 	strd	r0, r1, [r3]
 800b9b6:	9b06      	ldr	r3, [sp, #24]
 800b9b8:	f003 0007 	and.w	r0, r3, #7
 800b9bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b9c0:	ecbd 8b02 	vpop	{d8}
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9cc:	f7f4 fc12 	bl	80001f4 <__adddf3>
 800b9d0:	3d01      	subs	r5, #1
 800b9d2:	e7e6      	b.n	800b9a2 <__kernel_rem_pio2+0x582>
 800b9d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9d8:	f7f4 fc0c 	bl	80001f4 <__adddf3>
 800b9dc:	3e01      	subs	r6, #1
 800b9de:	e7bc      	b.n	800b95a <__kernel_rem_pio2+0x53a>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	e7c1      	b.n	800b96a <__kernel_rem_pio2+0x54a>
 800b9e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b9ea:	f7f4 fc03 	bl	80001f4 <__adddf3>
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	e7c6      	b.n	800b980 <__kernel_rem_pio2+0x560>
 800b9f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b9f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	ec53 2b17 	vmov	r2, r3, d7
 800ba00:	4649      	mov	r1, r9
 800ba02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba06:	f7f4 fbf5 	bl	80001f4 <__adddf3>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460f      	mov	r7, r1
 800ba12:	4640      	mov	r0, r8
 800ba14:	4649      	mov	r1, r9
 800ba16:	f7f4 fbeb 	bl	80001f0 <__aeabi_dsub>
 800ba1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba1e:	f7f4 fbe9 	bl	80001f4 <__adddf3>
 800ba22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba26:	e9ca 0100 	strd	r0, r1, [sl]
 800ba2a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ba2e:	e770      	b.n	800b912 <__kernel_rem_pio2+0x4f2>
 800ba30:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ba34:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ba38:	4630      	mov	r0, r6
 800ba3a:	ec53 2b17 	vmov	r2, r3, d7
 800ba3e:	4639      	mov	r1, r7
 800ba40:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba44:	f7f4 fbd6 	bl	80001f4 <__adddf3>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4689      	mov	r9, r1
 800ba50:	4630      	mov	r0, r6
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f4 fbcc 	bl	80001f0 <__aeabi_dsub>
 800ba58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba5c:	f7f4 fbca 	bl	80001f4 <__adddf3>
 800ba60:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba64:	e9ca 0100 	strd	r0, r1, [sl]
 800ba68:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ba6c:	e756      	b.n	800b91c <__kernel_rem_pio2+0x4fc>
 800ba6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba72:	f7f4 fbbf 	bl	80001f4 <__adddf3>
 800ba76:	3d01      	subs	r5, #1
 800ba78:	e756      	b.n	800b928 <__kernel_rem_pio2+0x508>
 800ba7a:	9b01      	ldr	r3, [sp, #4]
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	601f      	str	r7, [r3, #0]
 800ba80:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ba84:	605c      	str	r4, [r3, #4]
 800ba86:	609d      	str	r5, [r3, #8]
 800ba88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ba8c:	60d3      	str	r3, [r2, #12]
 800ba8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba92:	6110      	str	r0, [r2, #16]
 800ba94:	6153      	str	r3, [r2, #20]
 800ba96:	e78e      	b.n	800b9b6 <__kernel_rem_pio2+0x596>
 800ba98:	41700000 	.word	0x41700000
 800ba9c:	3e700000 	.word	0x3e700000

0800baa0 <__kernel_sin>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	ec55 4b10 	vmov	r4, r5, d0
 800baa8:	b085      	sub	sp, #20
 800baaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800baae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bab2:	ed8d 1b00 	vstr	d1, [sp]
 800bab6:	9002      	str	r0, [sp, #8]
 800bab8:	da06      	bge.n	800bac8 <__kernel_sin+0x28>
 800baba:	ee10 0a10 	vmov	r0, s0
 800babe:	4629      	mov	r1, r5
 800bac0:	f7f4 fffe 	bl	8000ac0 <__aeabi_d2iz>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d051      	beq.n	800bb6c <__kernel_sin+0xcc>
 800bac8:	4622      	mov	r2, r4
 800baca:	462b      	mov	r3, r5
 800bacc:	4620      	mov	r0, r4
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f4 fd46 	bl	8000560 <__aeabi_dmul>
 800bad4:	4682      	mov	sl, r0
 800bad6:	468b      	mov	fp, r1
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fd3e 	bl	8000560 <__aeabi_dmul>
 800bae4:	a341      	add	r3, pc, #260	; (adr r3, 800bbec <__kernel_sin+0x14c>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	4680      	mov	r8, r0
 800baec:	4689      	mov	r9, r1
 800baee:	4650      	mov	r0, sl
 800baf0:	4659      	mov	r1, fp
 800baf2:	f7f4 fd35 	bl	8000560 <__aeabi_dmul>
 800baf6:	a33f      	add	r3, pc, #252	; (adr r3, 800bbf4 <__kernel_sin+0x154>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f7f4 fb78 	bl	80001f0 <__aeabi_dsub>
 800bb00:	4652      	mov	r2, sl
 800bb02:	465b      	mov	r3, fp
 800bb04:	f7f4 fd2c 	bl	8000560 <__aeabi_dmul>
 800bb08:	a33c      	add	r3, pc, #240	; (adr r3, 800bbfc <__kernel_sin+0x15c>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fb71 	bl	80001f4 <__adddf3>
 800bb12:	4652      	mov	r2, sl
 800bb14:	465b      	mov	r3, fp
 800bb16:	f7f4 fd23 	bl	8000560 <__aeabi_dmul>
 800bb1a:	a33a      	add	r3, pc, #232	; (adr r3, 800bc04 <__kernel_sin+0x164>)
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f7f4 fb66 	bl	80001f0 <__aeabi_dsub>
 800bb24:	4652      	mov	r2, sl
 800bb26:	465b      	mov	r3, fp
 800bb28:	f7f4 fd1a 	bl	8000560 <__aeabi_dmul>
 800bb2c:	a337      	add	r3, pc, #220	; (adr r3, 800bc0c <__kernel_sin+0x16c>)
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	f7f4 fb5f 	bl	80001f4 <__adddf3>
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	4606      	mov	r6, r0
 800bb3a:	460f      	mov	r7, r1
 800bb3c:	b9db      	cbnz	r3, 800bb76 <__kernel_sin+0xd6>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4650      	mov	r0, sl
 800bb44:	4659      	mov	r1, fp
 800bb46:	f7f4 fd0b 	bl	8000560 <__aeabi_dmul>
 800bb4a:	a325      	add	r3, pc, #148	; (adr r3, 800bbe0 <__kernel_sin+0x140>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 fb4e 	bl	80001f0 <__aeabi_dsub>
 800bb54:	4642      	mov	r2, r8
 800bb56:	464b      	mov	r3, r9
 800bb58:	f7f4 fd02 	bl	8000560 <__aeabi_dmul>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4620      	mov	r0, r4
 800bb62:	4629      	mov	r1, r5
 800bb64:	f7f4 fb46 	bl	80001f4 <__adddf3>
 800bb68:	4604      	mov	r4, r0
 800bb6a:	460d      	mov	r5, r1
 800bb6c:	ec45 4b10 	vmov	d0, r4, r5
 800bb70:	b005      	add	sp, #20
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb76:	2200      	movs	r2, #0
 800bb78:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <__kernel_sin+0x148>)
 800bb7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb7e:	f7f4 fcef 	bl	8000560 <__aeabi_dmul>
 800bb82:	4632      	mov	r2, r6
 800bb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb88:	463b      	mov	r3, r7
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	f7f4 fce7 	bl	8000560 <__aeabi_dmul>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9a:	f7f4 fb29 	bl	80001f0 <__aeabi_dsub>
 800bb9e:	4652      	mov	r2, sl
 800bba0:	465b      	mov	r3, fp
 800bba2:	f7f4 fcdd 	bl	8000560 <__aeabi_dmul>
 800bba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbaa:	f7f4 fb21 	bl	80001f0 <__aeabi_dsub>
 800bbae:	a30c      	add	r3, pc, #48	; (adr r3, 800bbe0 <__kernel_sin+0x140>)
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	f7f4 fcd0 	bl	8000560 <__aeabi_dmul>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f4 fb14 	bl	80001f4 <__adddf3>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f7f4 fb0c 	bl	80001f0 <__aeabi_dsub>
 800bbd8:	e7c6      	b.n	800bb68 <__kernel_sin+0xc8>
 800bbda:	bf00      	nop
 800bbdc:	f3af 8000 	nop.w
 800bbe0:	55555549 	.word	0x55555549
 800bbe4:	3fc55555 	.word	0x3fc55555
 800bbe8:	3fe00000 	.word	0x3fe00000
 800bbec:	5acfd57c 	.word	0x5acfd57c
 800bbf0:	3de5d93a 	.word	0x3de5d93a
 800bbf4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bbf8:	3e5ae5e6 	.word	0x3e5ae5e6
 800bbfc:	57b1fe7d 	.word	0x57b1fe7d
 800bc00:	3ec71de3 	.word	0x3ec71de3
 800bc04:	19c161d5 	.word	0x19c161d5
 800bc08:	3f2a01a0 	.word	0x3f2a01a0
 800bc0c:	1110f8a6 	.word	0x1110f8a6
 800bc10:	3f811111 	.word	0x3f811111
 800bc14:	00000000 	.word	0x00000000

0800bc18 <atan>:
 800bc18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	ec55 4b10 	vmov	r4, r5, d0
 800bc20:	4bc3      	ldr	r3, [pc, #780]	; (800bf30 <atan+0x318>)
 800bc22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc26:	429e      	cmp	r6, r3
 800bc28:	46ab      	mov	fp, r5
 800bc2a:	dd18      	ble.n	800bc5e <atan+0x46>
 800bc2c:	4bc1      	ldr	r3, [pc, #772]	; (800bf34 <atan+0x31c>)
 800bc2e:	429e      	cmp	r6, r3
 800bc30:	dc01      	bgt.n	800bc36 <atan+0x1e>
 800bc32:	d109      	bne.n	800bc48 <atan+0x30>
 800bc34:	b144      	cbz	r4, 800bc48 <atan+0x30>
 800bc36:	4622      	mov	r2, r4
 800bc38:	462b      	mov	r3, r5
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f7f4 fad9 	bl	80001f4 <__adddf3>
 800bc42:	4604      	mov	r4, r0
 800bc44:	460d      	mov	r5, r1
 800bc46:	e006      	b.n	800bc56 <atan+0x3e>
 800bc48:	f1bb 0f00 	cmp.w	fp, #0
 800bc4c:	f340 8131 	ble.w	800beb2 <atan+0x29a>
 800bc50:	a59b      	add	r5, pc, #620	; (adr r5, 800bec0 <atan+0x2a8>)
 800bc52:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc56:	ec45 4b10 	vmov	d0, r4, r5
 800bc5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5e:	4bb6      	ldr	r3, [pc, #728]	; (800bf38 <atan+0x320>)
 800bc60:	429e      	cmp	r6, r3
 800bc62:	dc14      	bgt.n	800bc8e <atan+0x76>
 800bc64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc68:	429e      	cmp	r6, r3
 800bc6a:	dc0d      	bgt.n	800bc88 <atan+0x70>
 800bc6c:	a396      	add	r3, pc, #600	; (adr r3, 800bec8 <atan+0x2b0>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	ee10 0a10 	vmov	r0, s0
 800bc76:	4629      	mov	r1, r5
 800bc78:	f7f4 fabc 	bl	80001f4 <__adddf3>
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4baf      	ldr	r3, [pc, #700]	; (800bf3c <atan+0x324>)
 800bc80:	f7f4 fefe 	bl	8000a80 <__aeabi_dcmpgt>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d1e6      	bne.n	800bc56 <atan+0x3e>
 800bc88:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bc8c:	e02b      	b.n	800bce6 <atan+0xce>
 800bc8e:	f000 f963 	bl	800bf58 <fabs>
 800bc92:	4bab      	ldr	r3, [pc, #684]	; (800bf40 <atan+0x328>)
 800bc94:	429e      	cmp	r6, r3
 800bc96:	ec55 4b10 	vmov	r4, r5, d0
 800bc9a:	f300 80bf 	bgt.w	800be1c <atan+0x204>
 800bc9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bca2:	429e      	cmp	r6, r3
 800bca4:	f300 80a0 	bgt.w	800bde8 <atan+0x1d0>
 800bca8:	ee10 2a10 	vmov	r2, s0
 800bcac:	ee10 0a10 	vmov	r0, s0
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f7f4 fa9e 	bl	80001f4 <__adddf3>
 800bcb8:	2200      	movs	r2, #0
 800bcba:	4ba0      	ldr	r3, [pc, #640]	; (800bf3c <atan+0x324>)
 800bcbc:	f7f4 fa98 	bl	80001f0 <__aeabi_dsub>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fa91 	bl	80001f4 <__adddf3>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4639      	mov	r1, r7
 800bcda:	f7f4 fd6b 	bl	80007b4 <__aeabi_ddiv>
 800bcde:	f04f 0a00 	mov.w	sl, #0
 800bce2:	4604      	mov	r4, r0
 800bce4:	460d      	mov	r5, r1
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	f7f4 fc37 	bl	8000560 <__aeabi_dmul>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	4689      	mov	r9, r1
 800bcfa:	f7f4 fc31 	bl	8000560 <__aeabi_dmul>
 800bcfe:	a374      	add	r3, pc, #464	; (adr r3, 800bed0 <atan+0x2b8>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	f7f4 fc2a 	bl	8000560 <__aeabi_dmul>
 800bd0c:	a372      	add	r3, pc, #456	; (adr r3, 800bed8 <atan+0x2c0>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fa6f 	bl	80001f4 <__adddf3>
 800bd16:	4632      	mov	r2, r6
 800bd18:	463b      	mov	r3, r7
 800bd1a:	f7f4 fc21 	bl	8000560 <__aeabi_dmul>
 800bd1e:	a370      	add	r3, pc, #448	; (adr r3, 800bee0 <atan+0x2c8>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f7f4 fa66 	bl	80001f4 <__adddf3>
 800bd28:	4632      	mov	r2, r6
 800bd2a:	463b      	mov	r3, r7
 800bd2c:	f7f4 fc18 	bl	8000560 <__aeabi_dmul>
 800bd30:	a36d      	add	r3, pc, #436	; (adr r3, 800bee8 <atan+0x2d0>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f7f4 fa5d 	bl	80001f4 <__adddf3>
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	463b      	mov	r3, r7
 800bd3e:	f7f4 fc0f 	bl	8000560 <__aeabi_dmul>
 800bd42:	a36b      	add	r3, pc, #428	; (adr r3, 800bef0 <atan+0x2d8>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fa54 	bl	80001f4 <__adddf3>
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	463b      	mov	r3, r7
 800bd50:	f7f4 fc06 	bl	8000560 <__aeabi_dmul>
 800bd54:	a368      	add	r3, pc, #416	; (adr r3, 800bef8 <atan+0x2e0>)
 800bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5a:	f7f4 fa4b 	bl	80001f4 <__adddf3>
 800bd5e:	4642      	mov	r2, r8
 800bd60:	464b      	mov	r3, r9
 800bd62:	f7f4 fbfd 	bl	8000560 <__aeabi_dmul>
 800bd66:	a366      	add	r3, pc, #408	; (adr r3, 800bf00 <atan+0x2e8>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	4689      	mov	r9, r1
 800bd70:	4630      	mov	r0, r6
 800bd72:	4639      	mov	r1, r7
 800bd74:	f7f4 fbf4 	bl	8000560 <__aeabi_dmul>
 800bd78:	a363      	add	r3, pc, #396	; (adr r3, 800bf08 <atan+0x2f0>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f7f4 fa37 	bl	80001f0 <__aeabi_dsub>
 800bd82:	4632      	mov	r2, r6
 800bd84:	463b      	mov	r3, r7
 800bd86:	f7f4 fbeb 	bl	8000560 <__aeabi_dmul>
 800bd8a:	a361      	add	r3, pc, #388	; (adr r3, 800bf10 <atan+0x2f8>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fa2e 	bl	80001f0 <__aeabi_dsub>
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	f7f4 fbe2 	bl	8000560 <__aeabi_dmul>
 800bd9c:	a35e      	add	r3, pc, #376	; (adr r3, 800bf18 <atan+0x300>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fa25 	bl	80001f0 <__aeabi_dsub>
 800bda6:	4632      	mov	r2, r6
 800bda8:	463b      	mov	r3, r7
 800bdaa:	f7f4 fbd9 	bl	8000560 <__aeabi_dmul>
 800bdae:	a35c      	add	r3, pc, #368	; (adr r3, 800bf20 <atan+0x308>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 fa1c 	bl	80001f0 <__aeabi_dsub>
 800bdb8:	4632      	mov	r2, r6
 800bdba:	463b      	mov	r3, r7
 800bdbc:	f7f4 fbd0 	bl	8000560 <__aeabi_dmul>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	f7f4 fa14 	bl	80001f4 <__adddf3>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	462b      	mov	r3, r5
 800bdd0:	f7f4 fbc6 	bl	8000560 <__aeabi_dmul>
 800bdd4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	d14b      	bne.n	800be76 <atan+0x25e>
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fa05 	bl	80001f0 <__aeabi_dsub>
 800bde6:	e72c      	b.n	800bc42 <atan+0x2a>
 800bde8:	ee10 0a10 	vmov	r0, s0
 800bdec:	2200      	movs	r2, #0
 800bdee:	4b53      	ldr	r3, [pc, #332]	; (800bf3c <atan+0x324>)
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	f7f4 f9fd 	bl	80001f0 <__aeabi_dsub>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	4b4f      	ldr	r3, [pc, #316]	; (800bf3c <atan+0x324>)
 800bdfe:	4620      	mov	r0, r4
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 f9f7 	bl	80001f4 <__adddf3>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 fcd1 	bl	80007b4 <__aeabi_ddiv>
 800be12:	f04f 0a01 	mov.w	sl, #1
 800be16:	4604      	mov	r4, r0
 800be18:	460d      	mov	r5, r1
 800be1a:	e764      	b.n	800bce6 <atan+0xce>
 800be1c:	4b49      	ldr	r3, [pc, #292]	; (800bf44 <atan+0x32c>)
 800be1e:	429e      	cmp	r6, r3
 800be20:	dc1d      	bgt.n	800be5e <atan+0x246>
 800be22:	ee10 0a10 	vmov	r0, s0
 800be26:	2200      	movs	r2, #0
 800be28:	4b47      	ldr	r3, [pc, #284]	; (800bf48 <atan+0x330>)
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 f9e0 	bl	80001f0 <__aeabi_dsub>
 800be30:	2200      	movs	r2, #0
 800be32:	4606      	mov	r6, r0
 800be34:	460f      	mov	r7, r1
 800be36:	4b44      	ldr	r3, [pc, #272]	; (800bf48 <atan+0x330>)
 800be38:	4620      	mov	r0, r4
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7f4 fb90 	bl	8000560 <__aeabi_dmul>
 800be40:	2200      	movs	r2, #0
 800be42:	4b3e      	ldr	r3, [pc, #248]	; (800bf3c <atan+0x324>)
 800be44:	f7f4 f9d6 	bl	80001f4 <__adddf3>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f7f4 fcb0 	bl	80007b4 <__aeabi_ddiv>
 800be54:	f04f 0a02 	mov.w	sl, #2
 800be58:	4604      	mov	r4, r0
 800be5a:	460d      	mov	r5, r1
 800be5c:	e743      	b.n	800bce6 <atan+0xce>
 800be5e:	462b      	mov	r3, r5
 800be60:	ee10 2a10 	vmov	r2, s0
 800be64:	2000      	movs	r0, #0
 800be66:	4939      	ldr	r1, [pc, #228]	; (800bf4c <atan+0x334>)
 800be68:	f7f4 fca4 	bl	80007b4 <__aeabi_ddiv>
 800be6c:	f04f 0a03 	mov.w	sl, #3
 800be70:	4604      	mov	r4, r0
 800be72:	460d      	mov	r5, r1
 800be74:	e737      	b.n	800bce6 <atan+0xce>
 800be76:	4b36      	ldr	r3, [pc, #216]	; (800bf50 <atan+0x338>)
 800be78:	4e36      	ldr	r6, [pc, #216]	; (800bf54 <atan+0x33c>)
 800be7a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800be7e:	4456      	add	r6, sl
 800be80:	449a      	add	sl, r3
 800be82:	e9da 2300 	ldrd	r2, r3, [sl]
 800be86:	f7f4 f9b3 	bl	80001f0 <__aeabi_dsub>
 800be8a:	4622      	mov	r2, r4
 800be8c:	462b      	mov	r3, r5
 800be8e:	f7f4 f9af 	bl	80001f0 <__aeabi_dsub>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be9a:	f7f4 f9a9 	bl	80001f0 <__aeabi_dsub>
 800be9e:	f1bb 0f00 	cmp.w	fp, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	f6bf aed6 	bge.w	800bc56 <atan+0x3e>
 800beaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beae:	461d      	mov	r5, r3
 800beb0:	e6d1      	b.n	800bc56 <atan+0x3e>
 800beb2:	a51d      	add	r5, pc, #116	; (adr r5, 800bf28 <atan+0x310>)
 800beb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800beb8:	e6cd      	b.n	800bc56 <atan+0x3e>
 800beba:	bf00      	nop
 800bebc:	f3af 8000 	nop.w
 800bec0:	54442d18 	.word	0x54442d18
 800bec4:	3ff921fb 	.word	0x3ff921fb
 800bec8:	8800759c 	.word	0x8800759c
 800becc:	7e37e43c 	.word	0x7e37e43c
 800bed0:	e322da11 	.word	0xe322da11
 800bed4:	3f90ad3a 	.word	0x3f90ad3a
 800bed8:	24760deb 	.word	0x24760deb
 800bedc:	3fa97b4b 	.word	0x3fa97b4b
 800bee0:	a0d03d51 	.word	0xa0d03d51
 800bee4:	3fb10d66 	.word	0x3fb10d66
 800bee8:	c54c206e 	.word	0xc54c206e
 800beec:	3fb745cd 	.word	0x3fb745cd
 800bef0:	920083ff 	.word	0x920083ff
 800bef4:	3fc24924 	.word	0x3fc24924
 800bef8:	5555550d 	.word	0x5555550d
 800befc:	3fd55555 	.word	0x3fd55555
 800bf00:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf04:	bfa2b444 	.word	0xbfa2b444
 800bf08:	52defd9a 	.word	0x52defd9a
 800bf0c:	3fadde2d 	.word	0x3fadde2d
 800bf10:	af749a6d 	.word	0xaf749a6d
 800bf14:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf18:	fe231671 	.word	0xfe231671
 800bf1c:	3fbc71c6 	.word	0x3fbc71c6
 800bf20:	9998ebc4 	.word	0x9998ebc4
 800bf24:	3fc99999 	.word	0x3fc99999
 800bf28:	54442d18 	.word	0x54442d18
 800bf2c:	bff921fb 	.word	0xbff921fb
 800bf30:	440fffff 	.word	0x440fffff
 800bf34:	7ff00000 	.word	0x7ff00000
 800bf38:	3fdbffff 	.word	0x3fdbffff
 800bf3c:	3ff00000 	.word	0x3ff00000
 800bf40:	3ff2ffff 	.word	0x3ff2ffff
 800bf44:	40037fff 	.word	0x40037fff
 800bf48:	3ff80000 	.word	0x3ff80000
 800bf4c:	bff00000 	.word	0xbff00000
 800bf50:	0800c748 	.word	0x0800c748
 800bf54:	0800c728 	.word	0x0800c728

0800bf58 <fabs>:
 800bf58:	ec51 0b10 	vmov	r0, r1, d0
 800bf5c:	ee10 2a10 	vmov	r2, s0
 800bf60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf64:	ec43 2b10 	vmov	d0, r2, r3
 800bf68:	4770      	bx	lr

0800bf6a <finite>:
 800bf6a:	ee10 3a90 	vmov	r3, s1
 800bf6e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800bf72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bf76:	0fc0      	lsrs	r0, r0, #31
 800bf78:	4770      	bx	lr
 800bf7a:	0000      	movs	r0, r0
 800bf7c:	0000      	movs	r0, r0
	...

0800bf80 <floor>:
 800bf80:	ec51 0b10 	vmov	r0, r1, d0
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bf8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bf90:	2e13      	cmp	r6, #19
 800bf92:	460c      	mov	r4, r1
 800bf94:	ee10 5a10 	vmov	r5, s0
 800bf98:	4680      	mov	r8, r0
 800bf9a:	dc34      	bgt.n	800c006 <floor+0x86>
 800bf9c:	2e00      	cmp	r6, #0
 800bf9e:	da16      	bge.n	800bfce <floor+0x4e>
 800bfa0:	a335      	add	r3, pc, #212	; (adr r3, 800c078 <floor+0xf8>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 f925 	bl	80001f4 <__adddf3>
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2300      	movs	r3, #0
 800bfae:	f7f4 fd67 	bl	8000a80 <__aeabi_dcmpgt>
 800bfb2:	b148      	cbz	r0, 800bfc8 <floor+0x48>
 800bfb4:	2c00      	cmp	r4, #0
 800bfb6:	da59      	bge.n	800c06c <floor+0xec>
 800bfb8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bfbc:	4a30      	ldr	r2, [pc, #192]	; (800c080 <floor+0x100>)
 800bfbe:	432b      	orrs	r3, r5
 800bfc0:	2500      	movs	r5, #0
 800bfc2:	42ab      	cmp	r3, r5
 800bfc4:	bf18      	it	ne
 800bfc6:	4614      	movne	r4, r2
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	e025      	b.n	800c01a <floor+0x9a>
 800bfce:	4f2d      	ldr	r7, [pc, #180]	; (800c084 <floor+0x104>)
 800bfd0:	4137      	asrs	r7, r6
 800bfd2:	ea01 0307 	and.w	r3, r1, r7
 800bfd6:	4303      	orrs	r3, r0
 800bfd8:	d01f      	beq.n	800c01a <floor+0x9a>
 800bfda:	a327      	add	r3, pc, #156	; (adr r3, 800c078 <floor+0xf8>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 f908 	bl	80001f4 <__adddf3>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f7f4 fd4a 	bl	8000a80 <__aeabi_dcmpgt>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d0eb      	beq.n	800bfc8 <floor+0x48>
 800bff0:	2c00      	cmp	r4, #0
 800bff2:	bfbe      	ittt	lt
 800bff4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bff8:	fa43 f606 	asrlt.w	r6, r3, r6
 800bffc:	19a4      	addlt	r4, r4, r6
 800bffe:	ea24 0407 	bic.w	r4, r4, r7
 800c002:	2500      	movs	r5, #0
 800c004:	e7e0      	b.n	800bfc8 <floor+0x48>
 800c006:	2e33      	cmp	r6, #51	; 0x33
 800c008:	dd0b      	ble.n	800c022 <floor+0xa2>
 800c00a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c00e:	d104      	bne.n	800c01a <floor+0x9a>
 800c010:	ee10 2a10 	vmov	r2, s0
 800c014:	460b      	mov	r3, r1
 800c016:	f7f4 f8ed 	bl	80001f4 <__adddf3>
 800c01a:	ec41 0b10 	vmov	d0, r0, r1
 800c01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c022:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c02a:	fa23 f707 	lsr.w	r7, r3, r7
 800c02e:	4207      	tst	r7, r0
 800c030:	d0f3      	beq.n	800c01a <floor+0x9a>
 800c032:	a311      	add	r3, pc, #68	; (adr r3, 800c078 <floor+0xf8>)
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	f7f4 f8dc 	bl	80001f4 <__adddf3>
 800c03c:	2200      	movs	r2, #0
 800c03e:	2300      	movs	r3, #0
 800c040:	f7f4 fd1e 	bl	8000a80 <__aeabi_dcmpgt>
 800c044:	2800      	cmp	r0, #0
 800c046:	d0bf      	beq.n	800bfc8 <floor+0x48>
 800c048:	2c00      	cmp	r4, #0
 800c04a:	da02      	bge.n	800c052 <floor+0xd2>
 800c04c:	2e14      	cmp	r6, #20
 800c04e:	d103      	bne.n	800c058 <floor+0xd8>
 800c050:	3401      	adds	r4, #1
 800c052:	ea25 0507 	bic.w	r5, r5, r7
 800c056:	e7b7      	b.n	800bfc8 <floor+0x48>
 800c058:	2301      	movs	r3, #1
 800c05a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c05e:	fa03 f606 	lsl.w	r6, r3, r6
 800c062:	4435      	add	r5, r6
 800c064:	4545      	cmp	r5, r8
 800c066:	bf38      	it	cc
 800c068:	18e4      	addcc	r4, r4, r3
 800c06a:	e7f2      	b.n	800c052 <floor+0xd2>
 800c06c:	2500      	movs	r5, #0
 800c06e:	462c      	mov	r4, r5
 800c070:	e7aa      	b.n	800bfc8 <floor+0x48>
 800c072:	bf00      	nop
 800c074:	f3af 8000 	nop.w
 800c078:	8800759c 	.word	0x8800759c
 800c07c:	7e37e43c 	.word	0x7e37e43c
 800c080:	bff00000 	.word	0xbff00000
 800c084:	000fffff 	.word	0x000fffff

0800c088 <matherr>:
 800c088:	2000      	movs	r0, #0
 800c08a:	4770      	bx	lr
 800c08c:	0000      	movs	r0, r0
	...

0800c090 <nan>:
 800c090:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c098 <nan+0x8>
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	00000000 	.word	0x00000000
 800c09c:	7ff80000 	.word	0x7ff80000

0800c0a0 <rint>:
 800c0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a2:	ec51 0b10 	vmov	r0, r1, d0
 800c0a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c0ae:	2e13      	cmp	r6, #19
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	ee10 4a10 	vmov	r4, s0
 800c0b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c0ba:	dc56      	bgt.n	800c16a <rint+0xca>
 800c0bc:	2e00      	cmp	r6, #0
 800c0be:	da2b      	bge.n	800c118 <rint+0x78>
 800c0c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c0c4:	4302      	orrs	r2, r0
 800c0c6:	d023      	beq.n	800c110 <rint+0x70>
 800c0c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c0cc:	4302      	orrs	r2, r0
 800c0ce:	4254      	negs	r4, r2
 800c0d0:	4314      	orrs	r4, r2
 800c0d2:	0c4b      	lsrs	r3, r1, #17
 800c0d4:	0b24      	lsrs	r4, r4, #12
 800c0d6:	045b      	lsls	r3, r3, #17
 800c0d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c0dc:	ea44 0103 	orr.w	r1, r4, r3
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	492f      	ldr	r1, [pc, #188]	; (800c1a0 <rint+0x100>)
 800c0e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c0e8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7f4 f87f 	bl	80001f4 <__adddf3>
 800c0f6:	e9cd 0100 	strd	r0, r1, [sp]
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	4632      	mov	r2, r6
 800c0fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c102:	f7f4 f875 	bl	80001f0 <__aeabi_dsub>
 800c106:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c10a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c10e:	4639      	mov	r1, r7
 800c110:	ec41 0b10 	vmov	d0, r0, r1
 800c114:	b003      	add	sp, #12
 800c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c118:	4a22      	ldr	r2, [pc, #136]	; (800c1a4 <rint+0x104>)
 800c11a:	4132      	asrs	r2, r6
 800c11c:	ea01 0702 	and.w	r7, r1, r2
 800c120:	4307      	orrs	r7, r0
 800c122:	d0f5      	beq.n	800c110 <rint+0x70>
 800c124:	0852      	lsrs	r2, r2, #1
 800c126:	4011      	ands	r1, r2
 800c128:	430c      	orrs	r4, r1
 800c12a:	d00b      	beq.n	800c144 <rint+0xa4>
 800c12c:	ea23 0202 	bic.w	r2, r3, r2
 800c130:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c134:	2e13      	cmp	r6, #19
 800c136:	fa43 f306 	asr.w	r3, r3, r6
 800c13a:	bf0c      	ite	eq
 800c13c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c140:	2400      	movne	r4, #0
 800c142:	4313      	orrs	r3, r2
 800c144:	4916      	ldr	r1, [pc, #88]	; (800c1a0 <rint+0x100>)
 800c146:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c14a:	4622      	mov	r2, r4
 800c14c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c150:	4620      	mov	r0, r4
 800c152:	4629      	mov	r1, r5
 800c154:	f7f4 f84e 	bl	80001f4 <__adddf3>
 800c158:	e9cd 0100 	strd	r0, r1, [sp]
 800c15c:	4622      	mov	r2, r4
 800c15e:	462b      	mov	r3, r5
 800c160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c164:	f7f4 f844 	bl	80001f0 <__aeabi_dsub>
 800c168:	e7d2      	b.n	800c110 <rint+0x70>
 800c16a:	2e33      	cmp	r6, #51	; 0x33
 800c16c:	dd07      	ble.n	800c17e <rint+0xde>
 800c16e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c172:	d1cd      	bne.n	800c110 <rint+0x70>
 800c174:	ee10 2a10 	vmov	r2, s0
 800c178:	f7f4 f83c 	bl	80001f4 <__adddf3>
 800c17c:	e7c8      	b.n	800c110 <rint+0x70>
 800c17e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c186:	40f2      	lsrs	r2, r6
 800c188:	4210      	tst	r0, r2
 800c18a:	d0c1      	beq.n	800c110 <rint+0x70>
 800c18c:	0852      	lsrs	r2, r2, #1
 800c18e:	4210      	tst	r0, r2
 800c190:	bf1f      	itttt	ne
 800c192:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c196:	ea20 0202 	bicne.w	r2, r0, r2
 800c19a:	4134      	asrne	r4, r6
 800c19c:	4314      	orrne	r4, r2
 800c19e:	e7d1      	b.n	800c144 <rint+0xa4>
 800c1a0:	0800c768 	.word	0x0800c768
 800c1a4:	000fffff 	.word	0x000fffff

0800c1a8 <scalbn>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	ec55 4b10 	vmov	r4, r5, d0
 800c1ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	462b      	mov	r3, r5
 800c1b6:	b9aa      	cbnz	r2, 800c1e4 <scalbn+0x3c>
 800c1b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1bc:	4323      	orrs	r3, r4
 800c1be:	d03b      	beq.n	800c238 <scalbn+0x90>
 800c1c0:	4b31      	ldr	r3, [pc, #196]	; (800c288 <scalbn+0xe0>)
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	ee10 0a10 	vmov	r0, s0
 800c1ca:	f7f4 f9c9 	bl	8000560 <__aeabi_dmul>
 800c1ce:	4b2f      	ldr	r3, [pc, #188]	; (800c28c <scalbn+0xe4>)
 800c1d0:	429e      	cmp	r6, r3
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	da12      	bge.n	800c1fe <scalbn+0x56>
 800c1d8:	a327      	add	r3, pc, #156	; (adr r3, 800c278 <scalbn+0xd0>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f7f4 f9bf 	bl	8000560 <__aeabi_dmul>
 800c1e2:	e009      	b.n	800c1f8 <scalbn+0x50>
 800c1e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c1e8:	428a      	cmp	r2, r1
 800c1ea:	d10c      	bne.n	800c206 <scalbn+0x5e>
 800c1ec:	ee10 2a10 	vmov	r2, s0
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	f7f3 fffe 	bl	80001f4 <__adddf3>
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	e01c      	b.n	800c238 <scalbn+0x90>
 800c1fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c202:	460b      	mov	r3, r1
 800c204:	3a36      	subs	r2, #54	; 0x36
 800c206:	4432      	add	r2, r6
 800c208:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c20c:	428a      	cmp	r2, r1
 800c20e:	dd0b      	ble.n	800c228 <scalbn+0x80>
 800c210:	ec45 4b11 	vmov	d1, r4, r5
 800c214:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c280 <scalbn+0xd8>
 800c218:	f000 f83c 	bl	800c294 <copysign>
 800c21c:	a318      	add	r3, pc, #96	; (adr r3, 800c280 <scalbn+0xd8>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	ec51 0b10 	vmov	r0, r1, d0
 800c226:	e7da      	b.n	800c1de <scalbn+0x36>
 800c228:	2a00      	cmp	r2, #0
 800c22a:	dd08      	ble.n	800c23e <scalbn+0x96>
 800c22c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c230:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c234:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c238:	ec45 4b10 	vmov	d0, r4, r5
 800c23c:	bd70      	pop	{r4, r5, r6, pc}
 800c23e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c242:	da0d      	bge.n	800c260 <scalbn+0xb8>
 800c244:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c248:	429e      	cmp	r6, r3
 800c24a:	ec45 4b11 	vmov	d1, r4, r5
 800c24e:	dce1      	bgt.n	800c214 <scalbn+0x6c>
 800c250:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c278 <scalbn+0xd0>
 800c254:	f000 f81e 	bl	800c294 <copysign>
 800c258:	a307      	add	r3, pc, #28	; (adr r3, 800c278 <scalbn+0xd0>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	e7e0      	b.n	800c222 <scalbn+0x7a>
 800c260:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c264:	3236      	adds	r2, #54	; 0x36
 800c266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c26a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c26e:	4620      	mov	r0, r4
 800c270:	4629      	mov	r1, r5
 800c272:	2200      	movs	r2, #0
 800c274:	4b06      	ldr	r3, [pc, #24]	; (800c290 <scalbn+0xe8>)
 800c276:	e7b2      	b.n	800c1de <scalbn+0x36>
 800c278:	c2f8f359 	.word	0xc2f8f359
 800c27c:	01a56e1f 	.word	0x01a56e1f
 800c280:	8800759c 	.word	0x8800759c
 800c284:	7e37e43c 	.word	0x7e37e43c
 800c288:	43500000 	.word	0x43500000
 800c28c:	ffff3cb0 	.word	0xffff3cb0
 800c290:	3c900000 	.word	0x3c900000

0800c294 <copysign>:
 800c294:	ec51 0b10 	vmov	r0, r1, d0
 800c298:	ee11 0a90 	vmov	r0, s3
 800c29c:	ee10 2a10 	vmov	r2, s0
 800c2a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c2a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c2a8:	ea41 0300 	orr.w	r3, r1, r0
 800c2ac:	ec43 2b10 	vmov	d0, r2, r3
 800c2b0:	4770      	bx	lr
	...

0800c2b4 <_init>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	bf00      	nop
 800c2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ba:	bc08      	pop	{r3}
 800c2bc:	469e      	mov	lr, r3
 800c2be:	4770      	bx	lr

0800c2c0 <_fini>:
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	bf00      	nop
 800c2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2c6:	bc08      	pop	{r3}
 800c2c8:	469e      	mov	lr, r3
 800c2ca:	4770      	bx	lr
