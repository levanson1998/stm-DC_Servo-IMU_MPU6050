
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800ba40  0800ba40  0001ba40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee8  0800bee8  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef0  0800bef0  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800bef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  2000023c  0800c134  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800c134  00020824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a86  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a95  00000000  00000000  00033cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00037768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a13  00000000  00000000  00038608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de53  00000000  00000000  0005101b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000939fd  00000000  00000000  0005ee6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f286b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e44  00000000  00000000  000f28e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000023c 	.word	0x2000023c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ba24 	.word	0x0800ba24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000240 	.word	0x20000240
 80001d4:	0800ba24 	.word	0x0800ba24

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b972 	b.w	8000eac <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	4604      	mov	r4, r0
 8000be8:	4688      	mov	r8, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4615      	mov	r5, r2
 8000bf2:	d967      	bls.n	8000cc4 <__udivmoddi4+0xe4>
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	b14a      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfa:	f1c2 0720 	rsb	r7, r2, #32
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	fa20 f707 	lsr.w	r7, r0, r7
 8000c06:	4095      	lsls	r5, r2
 8000c08:	ea47 0803 	orr.w	r8, r7, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c18:	fa1f fc85 	uxth.w	ip, r5
 8000c1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c24:	fb07 f10c 	mul.w	r1, r7, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x60>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c32:	f080 811b 	bcs.w	8000e6c <__udivmoddi4+0x28c>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 8118 	bls.w	8000e6c <__udivmoddi4+0x28c>
 8000c3c:	3f02      	subs	r7, #2
 8000c3e:	442b      	add	r3, r5
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x290>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x290>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	442c      	add	r4, r5
 8000c6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c70:	eba4 040c 	sub.w	r4, r4, ip
 8000c74:	2700      	movs	r7, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa0>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xbe>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80eb 	beq.w	8000e66 <__udivmoddi4+0x286>
 8000c90:	2700      	movs	r7, #0
 8000c92:	e9c6 0100 	strd	r0, r1, [r6]
 8000c96:	4638      	mov	r0, r7
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f783 	clz	r7, r3
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d147      	bne.n	8000d36 <__udivmoddi4+0x156>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd0>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80fa 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa0>
 8000cbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xe8>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 808f 	bne.w	8000df0 <__udivmoddi4+0x210>
 8000cd2:	1b49      	subs	r1, r1, r5
 8000cd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd8:	fa1f f885 	uxth.w	r8, r5
 8000cdc:	2701      	movs	r7, #1
 8000cde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce2:	0c23      	lsrs	r3, r4, #16
 8000ce4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x122>
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000d02:	4684      	mov	ip, r0
 8000d04:	1a59      	subs	r1, r3, r1
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d14:	fb08 f800 	mul.w	r8, r8, r0
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x14c>
 8000d1c:	192c      	adds	r4, r5, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x14a>
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	f200 80b6 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 0408 	sub.w	r4, r4, r8
 8000d30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d34:	e79f      	b.n	8000c76 <__udivmoddi4+0x96>
 8000d36:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3a:	40bb      	lsls	r3, r7
 8000d3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d44:	fa01 f407 	lsl.w	r4, r1, r7
 8000d48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d54:	4325      	orrs	r5, r4
 8000d56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d60:	fa1f fa8e 	uxth.w	sl, lr
 8000d64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d68:	fb09 f40a 	mul.w	r4, r9, sl
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d72:	fa00 f107 	lsl.w	r1, r0, r7
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b0>
 8000d78:	eb1e 0303 	adds.w	r3, lr, r3
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d80:	f080 8087 	bcs.w	8000e92 <__udivmoddi4+0x2b2>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f240 8084 	bls.w	8000e92 <__udivmoddi4+0x2b2>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4473      	add	r3, lr
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	b2ad      	uxth	r5, r5
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3310 	mls	r3, r8, r0, r3
 8000d9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da4:	45a2      	cmp	sl, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1da>
 8000da8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db0:	d26b      	bcs.n	8000e8a <__udivmoddi4+0x2aa>
 8000db2:	45a2      	cmp	sl, r4
 8000db4:	d969      	bls.n	8000e8a <__udivmoddi4+0x2aa>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4474      	add	r4, lr
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	eba4 040a 	sub.w	r4, r4, sl
 8000dc6:	454c      	cmp	r4, r9
 8000dc8:	46c2      	mov	sl, r8
 8000dca:	464b      	mov	r3, r9
 8000dcc:	d354      	bcc.n	8000e78 <__udivmoddi4+0x298>
 8000dce:	d051      	beq.n	8000e74 <__udivmoddi4+0x294>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d069      	beq.n	8000ea8 <__udivmoddi4+0x2c8>
 8000dd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000ddc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de0:	40fd      	lsrs	r5, r7
 8000de2:	40fc      	lsrs	r4, r7
 8000de4:	ea4c 0505 	orr.w	r5, ip, r5
 8000de8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dec:	2700      	movs	r7, #0
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f703 	lsr.w	r7, r0, r3
 8000df8:	4095      	lsls	r5, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000e02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e06:	4338      	orrs	r0, r7
 8000e08:	0c01      	lsrs	r1, r0, #16
 8000e0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0e:	fa1f f885 	uxth.w	r8, r5
 8000e12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1a:	fb07 f308 	mul.w	r3, r7, r8
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x256>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e2c:	d22f      	bcs.n	8000e8e <__udivmoddi4+0x2ae>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d92d      	bls.n	8000e8e <__udivmoddi4+0x2ae>
 8000e32:	3f02      	subs	r7, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	b281      	uxth	r1, r0
 8000e3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb00 f308 	mul.w	r3, r0, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x27e>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e54:	d217      	bcs.n	8000e86 <__udivmoddi4+0x2a6>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d915      	bls.n	8000e86 <__udivmoddi4+0x2a6>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1ac9      	subs	r1, r1, r3
 8000e60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e64:	e73b      	b.n	8000cde <__udivmoddi4+0xfe>
 8000e66:	4637      	mov	r7, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e709      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	e6e7      	b.n	8000c40 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x8c>
 8000e74:	4541      	cmp	r1, r8
 8000e76:	d2ab      	bcs.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e80:	3801      	subs	r0, #1
 8000e82:	4613      	mov	r3, r2
 8000e84:	e7a4      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e86:	4660      	mov	r0, ip
 8000e88:	e7e9      	b.n	8000e5e <__udivmoddi4+0x27e>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	e795      	b.n	8000dba <__udivmoddi4+0x1da>
 8000e8e:	4667      	mov	r7, ip
 8000e90:	e7d1      	b.n	8000e36 <__udivmoddi4+0x256>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e77c      	b.n	8000d90 <__udivmoddi4+0x1b0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	442c      	add	r4, r5
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0x14c>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	442b      	add	r3, r5
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x124>
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xda>
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	e6e9      	b.n	8000c80 <__udivmoddi4+0xa0>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	200b      	movs	r0, #11
 8000ed8:	f002 fc97 	bl	800380a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000edc:	200b      	movs	r0, #11
 8000ede:	f002 fcb0 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f002 fc8f 	bl	800380a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f002 fca8 	bl	8003842 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a48      	ldr	r2, [pc, #288]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b46      	ldr	r3, [pc, #280]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_GPIO_Init+0x144>)
 8000fc4:	f003 f96a 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fd0:	f003 f964 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fdc:	f003 f95e 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0x144>)
 8000ff8:	f002 ffce 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin;
 8000ffc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_GPIO_Init+0x148>)
 8001016:	f002 ffbf 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 800101a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0x148>)
 8001034:	f002 ffb0 	bl	8003f98 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40020c00 	.word	0x40020c00

0800104c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x50>)
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <MX_I2C1_Init+0x54>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C1_Init+0x50>)
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x58>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_I2C1_Init+0x50>)
 800106a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2C1_Init+0x50>)
 800108a:	f003 f93b 	bl	8004304 <HAL_I2C_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001094:	f000 fa38 	bl	8001508 <Error_Handler>
  }

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200002b4 	.word	0x200002b4
 80010a0:	40005400 	.word	0x40005400
 80010a4:	00061a80 	.word	0x00061a80

080010a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a31      	ldr	r2, [pc, #196]	; (800118c <HAL_I2C_MspInit+0xe4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d15c      	bne.n	8001184 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IUM_SCL_Pin|IMU_SDA_Pin;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_I2C_MspInit+0xec>)
 8001104:	f002 ff48 	bl	8003f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_I2C_MspInit+0xf4>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800112c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800115c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001160:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800116a:	f002 fb85 	bl	8003878 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001174:	f000 f9c8 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	20000308 	.word	0x20000308
 800119c:	40026010 	.word	0x40026010

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f002 f9c2 	bl	800352c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 f848 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f7ff fea8 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b0:	f7ff fe7e 	bl	8000eb0 <MX_DMA_Init>
  MX_TIM1_Init();
 80011b4:	f000 fa88 	bl	80016c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b8:	f000 fb32 	bl	8001820 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011bc:	f000 fb84 	bl	80018c8 <MX_TIM4_Init>
  MX_TIM9_Init();
 80011c0:	f000 fc24 	bl	8001a0c <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 fd94 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80011c8:	f000 fbd2 	bl	8001970 <MX_TIM5_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff3e 	bl	800104c <MX_I2C1_Init>


  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f002 fa1c 	bl	8003610 <HAL_Delay>
  MPU9250_Reset();
 80011d8:	f000 ff74 	bl	80020c4 <MPU9250_Reset>
  MPU9250_INIT();
 80011dc:	f000 fe5e 	bl	8001e9c <MPU9250_INIT>
  initMPU9250();
 80011e0:	f001 f826 	bl	8002230 <initMPU9250>
  initAK8963();
 80011e4:	f000 ff8c 	bl	8002100 <initAK8963>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <main+0x80>)
 80011ec:	f004 fd24 	bl	8005c38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011f0:	2104      	movs	r1, #4
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <main+0x80>)
 80011f4:	f004 fd20 	bl	8005c38 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011f8:	213c      	movs	r1, #60	; 0x3c
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <main+0x84>)
 80011fc:	f004 fde0 	bl	8005dc0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001200:	213c      	movs	r1, #60	; 0x3c
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <main+0x88>)
 8001204:	f004 fddc 	bl	8005dc0 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 9);
 8001208:	2209      	movs	r2, #9
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <main+0x8c>)
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <main+0x90>)
 800120e:	f005 fcab 	bl	8006b68 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim9);
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <main+0x94>)
 8001214:	f004 fcb7 	bl	8005b86 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <main+0x98>)
 800121a:	f004 fcb4 	bl	8005b86 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x7e>
 8001220:	200006a8 	.word	0x200006a8
 8001224:	20000628 	.word	0x20000628
 8001228:	20000728 	.word	0x20000728
 800122c:	20000458 	.word	0x20000458
 8001230:	200007c8 	.word	0x200007c8
 8001234:	200006e8 	.word	0x200006e8
 8001238:	20000668 	.word	0x20000668

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f006 fbbc 	bl	80079c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SystemClock_Config+0xcc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <SystemClock_Config+0xcc>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <SystemClock_Config+0xcc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <SystemClock_Config+0xd0>)
 8001286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SystemClock_Config+0xd0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ac:	2308      	movs	r3, #8
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ba:	2304      	movs	r3, #4
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 ffd2 	bl	800526c <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ce:	f000 f91b 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2102      	movs	r1, #2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fa2b 	bl	800574c <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012fc:	f000 f904 	bl	8001508 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	; 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 80a0 	bne.w	8001466 <HAL_TIM_PeriodElapsedCallback+0x156>
		testt[7] = HAL_GetTick() - testt[8];
 8001326:	f002 f967 	bl	80035f8 <HAL_GetTick>
 800132a:	ee07 0a90 	vmov	s15, r0
 800132e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001332:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001334:	edd3 7a08 	vldr	s15, [r3, #32]
 8001338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133c:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800133e:	edc3 7a07 	vstr	s15, [r3, #28]
		testt[8] = HAL_GetTick();
 8001342:	f002 f959 	bl	80035f8 <HAL_GetTick>
 8001346:	ee07 0a90 	vmov	s15, r0
 800134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134e:	4b60      	ldr	r3, [pc, #384]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001350:	edc3 7a08 	vstr	s15, [r3, #32]

//		IMU9250_READ_DMA();

		float *duty_cycles;

		Get_Velocity();
 8001354:	f001 fd5a 	bl	8002e0c <Get_Velocity>

//		enc[0] = 12;
//		enc[1] = 10;
		enc_ser[0] += enc[0];
 8001358:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b219      	sxth	r1, r3
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b21b      	sxth	r3, r3
 8001364:	b29a      	uxth	r2, r3
 8001366:	b28b      	uxth	r3, r1
 8001368:	4413      	add	r3, r2
 800136a:	b29b      	uxth	r3, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001370:	801a      	strh	r2, [r3, #0]
		enc_ser[1] += enc[1];
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001374:	885b      	ldrh	r3, [r3, #2]
 8001376:	b219      	sxth	r1, r3
 8001378:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800137a:	885b      	ldrh	r3, [r3, #2]
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	b28b      	uxth	r3, r1
 8001382:	4413      	add	r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800138a:	805a      	strh	r2, [r3, #2]
		enc_test[0] += enc[0];
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b52      	ldr	r3, [pc, #328]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800139a:	6013      	str	r3, [r2, #0]
		enc_test[1] += enc[1];
 800139c:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800139e:	885b      	ldrh	r3, [r3, #2]
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a4c      	ldr	r2, [pc, #304]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80013aa:	6053      	str	r3, [r2, #4]

		duty_cycles = PID_Calculate(_velo, _motor_dir, &enc[0]);
 80013ac:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80013b2:	4619      	mov	r1, r3
 80013b4:	484b      	ldr	r0, [pc, #300]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80013b6:	f001 fd99 	bl	8002eec <PID_Calculate>
 80013ba:	63f8      	str	r0, [r7, #60]	; 0x3c

//		keep safe when error serial
		if (check_error == 1){
 80013bc:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d102      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0xba>
			time_error = 0;
 80013c4:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	801a      	strh	r2, [r3, #0]
		}

		if(time_error <= 1000){
 80013ca:	4b48      	ldr	r3, [pc, #288]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d2:	d81e      	bhi.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x102>
			time_error += 1;
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80013de:	801a      	strh	r2, [r3, #0]
			Control_Motor(0,0,0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f001 fc9b 	bl	8002d20 <Control_Motor>
			if((time_error % 20) == 0){
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80013f0:	fba3 1302 	umull	r1, r3, r3, r2
 80013f4:	0919      	lsrs	r1, r3, #4
 80013f6:	460b      	mov	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d129      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x14a>
				HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	483a      	ldr	r0, [pc, #232]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800140c:	f002 ff5f 	bl	80042ce <HAL_GPIO_TogglePin>
 8001410:	e023      	b.n	800145a <HAL_TIM_PeriodElapsedCallback+0x14a>
			}
		}
		else{
			HAL_GPIO_WritePin(GPIOD, LED_ORG_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001418:	4836      	ldr	r0, [pc, #216]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800141a:	f002 ff3f 	bl	800429c <HAL_GPIO_WritePin>
			Control_Motor(*(duty_cycles), *(duty_cycles+1), *(duty_cycles+2));
 800141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	b218      	sxth	r0, r3
 800142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001430:	3304      	adds	r3, #4
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b219      	sxth	r1, r3
 8001440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001442:	3308      	adds	r3, #8
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	edc7 7a00 	vstr	s15, [r7]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	f001 fc63 	bl	8002d20 <Control_Motor>
		}


		struct data_mpu9250 ss = ReadMPU9250();
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4618      	mov	r0, r3
 8001460:	f000 ffa2 	bl	80023a8 <ReadMPU9250>
		enc_ser[0] = 0;
		enc_ser[1] = 0;
*/

	}
}
 8001464:	e02d      	b.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
	else if(htim->Instance==htim9.Instance){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d127      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
		testt[5] = HAL_GetTick() - testt[6];
 8001472:	f002 f8c1 	bl	80035f8 <HAL_GetTick>
 8001476:	ee07 0a90 	vmov	s15, r0
 800147a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001480:	edd3 7a06 	vldr	s15, [r3, #24]
 8001484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800148a:	edc3 7a05 	vstr	s15, [r3, #20]
		testt[6] = HAL_GetTick();
 800148e:	f002 f8b3 	bl	80035f8 <HAL_GetTick>
 8001492:	ee07 0a90 	vmov	s15, r0
 8001496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800149c:	edc3 7a06 	vstr	s15, [r3, #24]
		test_abc++;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]
		state_uart=HAL_UART_GetState(&huart2);
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80014b6:	f005 fcff 	bl	8006eb8 <HAL_UART_GetState>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3740      	adds	r7, #64	; 0x40
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000668 	.word	0x20000668
 80014d0:	200003ac 	.word	0x200003ac
 80014d4:	20000464 	.word	0x20000464
 80014d8:	2000036c 	.word	0x2000036c
 80014dc:	20000558 	.word	0x20000558
 80014e0:	20000524 	.word	0x20000524
 80014e4:	20000404 	.word	0x20000404
 80014e8:	2000025a 	.word	0x2000025a
 80014ec:	20000258 	.word	0x20000258
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	200006e8 	.word	0x200006e8
 80014fc:	200004b0 	.word	0x200004b0
 8001500:	200007c8 	.word	0x200007c8
 8001504:	20000368 	.word	0x20000368

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_MspInit+0x4c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_MspInit+0x4c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f002 f808 	bl	80035d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <DMA1_Stream0_IRQHandler+0x10>)
 80015ca:	f002 fa7d 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000308 	.word	0x20000308

080015d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream5_IRQHandler+0x10>)
 80015de:	f002 fa73 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000768 	.word	0x20000768

080015ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80015f2:	f004 fc1c 	bl	8005e2e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80015f8:	f004 fc19 	bl	8005e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200006a8 	.word	0x200006a8
 8001604:	200006e8 	.word	0x200006e8

08001608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART2_IRQHandler+0x10>)
 800160e:	f005 fb2b 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200007c8 	.word	0x200007c8

0800161c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM5_IRQHandler+0x10>)
 8001622:	f004 fc04 	bl	8005e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000668 	.word	0x20000668

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f006 f988 	bl	8007974 <__errno>
 8001664:	4602      	mov	r2, r0
 8001666:	230c      	movs	r3, #12
 8001668:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20020000 	.word	0x20020000
 8001690:	00000400 	.word	0x00000400
 8001694:	2000025c 	.word	0x2000025c
 8001698:	20000828 	.word	0x20000828

0800169c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <SystemInit+0x28>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <SystemInit+0x28>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SystemInit+0x28>)
 80016b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b6:	609a      	str	r2, [r3, #8]
#endif
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b096      	sub	sp, #88	; 0x58
 80016cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2220      	movs	r2, #32
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f006 f961 	bl	80079c8 <memset>

  htim1.Instance = TIM1;
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <MX_TIM1_Init+0x150>)
 8001708:	4a44      	ldr	r2, [pc, #272]	; (800181c <MX_TIM1_Init+0x154>)
 800170a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <MX_TIM1_Init+0x150>)
 800170e:	2207      	movs	r2, #7
 8001710:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <MX_TIM1_Init+0x150>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 599;
 8001718:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <MX_TIM1_Init+0x150>)
 800171a:	f240 2257 	movw	r2, #599	; 0x257
 800171e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <MX_TIM1_Init+0x150>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <MX_TIM1_Init+0x150>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <MX_TIM1_Init+0x150>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001732:	4839      	ldr	r0, [pc, #228]	; (8001818 <MX_TIM1_Init+0x150>)
 8001734:	f004 f9fc 	bl	8005b30 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800173e:	f7ff fee3 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800174c:	4619      	mov	r1, r3
 800174e:	4832      	ldr	r0, [pc, #200]	; (8001818 <MX_TIM1_Init+0x150>)
 8001750:	f004 fd3c 	bl	80061cc <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800175a:	f7ff fed5 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175e:	482e      	ldr	r0, [pc, #184]	; (8001818 <MX_TIM1_Init+0x150>)
 8001760:	f004 fa35 	bl	8005bce <HAL_TIM_PWM_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800176a:	f7ff fecd 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177a:	4619      	mov	r1, r3
 800177c:	4826      	ldr	r0, [pc, #152]	; (8001818 <MX_TIM1_Init+0x150>)
 800177e:	f005 f8d1 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001788:	f7ff febe 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <MX_TIM1_Init+0x150>)
 80017b2:	f004 fc45 	bl	8006040 <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017bc:	f7ff fea4 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	2204      	movs	r2, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <MX_TIM1_Init+0x150>)
 80017ca:	f004 fc39 	bl	8006040 <HAL_TIM_PWM_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017d4:	f7ff fe98 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <MX_TIM1_Init+0x150>)
 80017fc:	f005 f900 	bl	8006a00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001806:	f7ff fe7f 	bl	8001508 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800180a:	4803      	ldr	r0, [pc, #12]	; (8001818 <MX_TIM1_Init+0x150>)
 800180c:	f000 fa36 	bl	8001c7c <HAL_TIM_MspPostInit>

}
 8001810:	bf00      	nop
 8001812:	3758      	adds	r7, #88	; 0x58
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200006a8 	.word	0x200006a8
 800181c:	40010000 	.word	0x40010000

08001820 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f006 f8ca 	bl	80079c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <MX_TIM2_Init+0xa4>)
 800183e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <MX_TIM2_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001852:	f242 7210 	movw	r2, #10000	; 0x2710
 8001856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_TIM2_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001864:	2303      	movs	r3, #3
 8001866:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186c:	2301      	movs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001874:	230a      	movs	r3, #10
 8001876:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001884:	230a      	movs	r3, #10
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001890:	f004 fa04 	bl	8005c9c <HAL_TIM_Encoder_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800189a:	f7ff fe35 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_TIM2_Init+0xa4>)
 80018ac:	f005 f83a 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018b6:	f7ff fe27 	bl	8001508 <Error_Handler>
  }

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	; 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000728 	.word	0x20000728

080018c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2224      	movs	r2, #36	; 0x24
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f006 f876 	bl	80079c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MX_TIM4_Init+0xa0>)
 80018e6:	4a21      	ldr	r2, [pc, #132]	; (800196c <MX_TIM4_Init+0xa4>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_TIM4_Init+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM4_Init+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM4_Init+0xa0>)
 80018f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80018fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM4_Init+0xa0>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_TIM4_Init+0xa0>)
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800190a:	2303      	movs	r3, #3
 800190c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001912:	2301      	movs	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800191a:	230a      	movs	r3, #10
 800191c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001922:	2301      	movs	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800192a:	230a      	movs	r3, #10
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_TIM4_Init+0xa0>)
 8001936:	f004 f9b1 	bl	8005c9c <HAL_TIM_Encoder_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001940:	f7ff fde2 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM4_Init+0xa0>)
 8001952:	f004 ffe7 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800195c:	f7ff fdd4 	bl	8001508 <Error_Handler>
  }

}
 8001960:	bf00      	nop
 8001962:	3730      	adds	r7, #48	; 0x30
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000628 	.word	0x20000628
 800196c:	40000800 	.word	0x40000800

08001970 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	463b      	mov	r3, r7
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_TIM5_Init+0x94>)
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <MX_TIM5_Init+0x98>)
 8001990:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <MX_TIM5_Init+0x94>)
 8001994:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001998:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_TIM5_Init+0x94>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_TIM5_Init+0x94>)
 80019a2:	2231      	movs	r2, #49	; 0x31
 80019a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_TIM5_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <MX_TIM5_Init+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019b2:	4814      	ldr	r0, [pc, #80]	; (8001a04 <MX_TIM5_Init+0x94>)
 80019b4:	f004 f8bc 	bl	8005b30 <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80019be:	f7ff fda3 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM5_Init+0x94>)
 80019d0:	f004 fbfc 	bl	80061cc <HAL_TIM_ConfigClockSource>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80019da:	f7ff fd95 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_TIM5_Init+0x94>)
 80019ec:	f004 ff9a 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80019f6:	f7ff fd87 	bl	8001508 <Error_Handler>
  }

}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000668 	.word	0x20000668
 8001a08:	40000c00 	.word	0x40000c00

08001a0c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a20:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <MX_TIM9_Init+0x70>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a26:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001a2a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a38:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a48:	f004 f872 	bl	8005b30 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001a52:	f7ff fd59 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_TIM9_Init+0x6c>)
 8001a62:	f004 fbb3 	bl	80061cc <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001a6c:	f7ff fd4c 	bl	8001508 <Error_Handler>
  }

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200006e8 	.word	0x200006e8
 8001a7c:	40014000 	.word	0x40014000

08001a80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_TIM_Base_MspInit+0xb8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d116      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a28      	ldr	r2, [pc, #160]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2018      	movs	r0, #24
 8001ab4:	f001 fea9 	bl	800380a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ab8:	2018      	movs	r0, #24
 8001aba:	f001 fec2 	bl	8003842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001abe:	e036      	b.n	8001b2e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_TIM_Base_MspInit+0xc0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d116      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2032      	movs	r0, #50	; 0x32
 8001aec:	f001 fe8d 	bl	800380a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001af0:	2032      	movs	r0, #50	; 0x32
 8001af2:	f001 fea6 	bl	8003842 <HAL_NVIC_EnableIRQ>
}
 8001af6:	e01a      	b.n	8001b2e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_TIM_Base_MspInit+0xc4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d115      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_TIM_Base_MspInit+0xbc>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2018      	movs	r0, #24
 8001b24:	f001 fe71 	bl	800380a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b28:	2018      	movs	r0, #24
 8001b2a:	f001 fe8a 	bl	8003842 <HAL_NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40000c00 	.word	0x40000c00
 8001b44:	40014000 	.word	0x40014000

08001b48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d14a      	bne.n	8001c00 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a37      	ldr	r2, [pc, #220]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4825      	ldr	r0, [pc, #148]	; (8001c70 <HAL_TIM_Encoder_MspInit+0x128>)
 8001bda:	f002 f9dd 	bl	8003f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 8001bde:	2308      	movs	r3, #8
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481e      	ldr	r0, [pc, #120]	; (8001c74 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001bfa:	f002 f9cd 	bl	8003f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bfe:	e030      	b.n	8001c62 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x130>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a16      	ldr	r2, [pc, #88]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x124>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 8001c42:	23c0      	movs	r3, #192	; 0xc0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001c5e:	f002 f99b 	bl	8003f98 <HAL_GPIO_Init>
}
 8001c62:	bf00      	nop
 8001c64:	3730      	adds	r7, #48	; 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40000800 	.word	0x40000800

08001c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_MspPostInit+0x68>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11e      	bne.n	8001cdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	f043 0310 	orr.w	r3, r3, #16
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8001cba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001cbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_TIM_MspPostInit+0x70>)
 8001cd8:	f002 f95e 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40021000 	.word	0x40021000

08001cf0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f004 fed0 	bl	8006acc <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f7ff fbe9 	bl	8001508 <Error_Handler>
  }

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200007c8 	.word	0x200007c8
 8001d40:	40004400 	.word	0x40004400

08001d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <HAL_UART_MspInit+0xf0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d162      	bne.n	8001e2c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_UART_MspInit+0xf4>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_UART_MspInit+0xf4>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_UART_MspInit+0xf4>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_UART_MspInit+0xf4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_UART_MspInit+0xf4>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_UART_MspInit+0xf4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dae:	2307      	movs	r3, #7
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4820      	ldr	r0, [pc, #128]	; (8001e3c <HAL_UART_MspInit+0xf8>)
 8001dba:	f002 f8ed 	bl	8003f98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_UART_MspInit+0x100>)
 8001dc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001e02:	f001 fd39 	bl	8003878 <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e0c:	f7ff fb7c 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_UART_MspInit+0xfc>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2026      	movs	r0, #38	; 0x26
 8001e22:	f001 fcf2 	bl	800380a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e26:	2026      	movs	r0, #38	; 0x26
 8001e28:	f001 fd0b 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40004400 	.word	0x40004400
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	20000768 	.word	0x20000768
 8001e44:	40026088 	.word	0x40026088

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e4e:	e003      	b.n	8001e58 <LoopCopyDataInit>

08001e50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e56:	3104      	adds	r1, #4

08001e58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e58:	480b      	ldr	r0, [pc, #44]	; (8001e88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e60:	d3f6      	bcc.n	8001e50 <CopyDataInit>
  ldr  r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e64:	e002      	b.n	8001e6c <LoopFillZerobss>

08001e66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e68:	f842 3b04 	str.w	r3, [r2], #4

08001e6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e70:	d3f9      	bcc.n	8001e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e72:	f7ff fc13 	bl	800169c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f005 fd83 	bl	8007980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7ff f991 	bl	80011a0 <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e84:	0800bef8 	.word	0x0800bef8
  ldr  r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e8c:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8001e90:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 8001e94:	20000824 	.word	0x20000824

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <MPU9250_INIT>:
#include "IMU_MPU9250.h"
#include "i2c.h"
#include "gpio.h"


void MPU9250_INIT(){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af04      	add	r7, sp, #16
	// reset mpu9250
	TxBuffer9250[0] = 0x80;
 8001ea2:	4b86      	ldr	r3, [pc, #536]	; (80020bc <MPU9250_INIT+0x220>)
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8001ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	4b82      	ldr	r3, [pc, #520]	; (80020bc <MPU9250_INIT+0x220>)
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	226b      	movs	r2, #107	; 0x6b
 8001eba:	21d0      	movs	r1, #208	; 0xd0
 8001ebc:	4880      	ldr	r0, [pc, #512]	; (80020c0 <MPU9250_INIT+0x224>)
 8001ebe:	f002 fb59 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001ec2:	20c8      	movs	r0, #200	; 0xc8
 8001ec4:	f001 fba4 	bl	8003610 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	TxBuffer9250[0] = 0x01;
 8001ec8:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <MPU9250_INIT+0x220>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <MPU9250_INIT+0x220>)
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	226b      	movs	r2, #107	; 0x6b
 8001ee0:	21d0      	movs	r1, #208	; 0xd0
 8001ee2:	4877      	ldr	r0, [pc, #476]	; (80020c0 <MPU9250_INIT+0x224>)
 8001ee4:	f002 fb46 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001ee8:	20c8      	movs	r0, #200	; 0xc8
 8001eea:	f001 fb91 	bl	8003610 <HAL_Delay>

	TxBuffer9250[0] = 0x00;
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <MPU9250_INIT+0x220>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_2, 1, TxBuffer9250, 1, 1000);
 8001ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2301      	movs	r3, #1
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <MPU9250_INIT+0x220>)
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	226c      	movs	r2, #108	; 0x6c
 8001f06:	21d0      	movs	r1, #208	; 0xd0
 8001f08:	486d      	ldr	r0, [pc, #436]	; (80020c0 <MPU9250_INIT+0x224>)
 8001f0a:	f002 fb33 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f0e:	20c8      	movs	r0, #200	; 0xc8
 8001f10:	f001 fb7e 	bl	8003610 <HAL_Delay>

	// Tat interupt
	TxBuffer9250[0] = 0x00;
 8001f14:	4b69      	ldr	r3, [pc, #420]	; (80020bc <MPU9250_INIT+0x220>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_ENABLE, 1, TxBuffer9250, 1, 1000);
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	2301      	movs	r3, #1
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	4b65      	ldr	r3, [pc, #404]	; (80020bc <MPU9250_INIT+0x220>)
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2238      	movs	r2, #56	; 0x38
 8001f2c:	21d0      	movs	r1, #208	; 0xd0
 8001f2e:	4864      	ldr	r0, [pc, #400]	; (80020c0 <MPU9250_INIT+0x224>)
 8001f30:	f002 fb20 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f34:	20c8      	movs	r0, #200	; 0xc8
 8001f36:	f001 fb6b 	bl	8003610 <HAL_Delay>

	// tat FIFO
	TxBuffer9250[0] = 0x00;
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <MPU9250_INIT+0x220>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, TxBuffer9250, 1, 1000);
 8001f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	2301      	movs	r3, #1
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <MPU9250_INIT+0x220>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	2223      	movs	r2, #35	; 0x23
 8001f52:	21d0      	movs	r1, #208	; 0xd0
 8001f54:	485a      	ldr	r0, [pc, #360]	; (80020c0 <MPU9250_INIT+0x224>)
 8001f56:	f002 fb0d 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f5a:	20c8      	movs	r0, #200	; 0xc8
 8001f5c:	f001 fb58 	bl	8003610 <HAL_Delay>

	TxBuffer9250[0] = 0x00;
 8001f60:	4b56      	ldr	r3, [pc, #344]	; (80020bc <MPU9250_INIT+0x220>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	9302      	str	r3, [sp, #8]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	4b52      	ldr	r3, [pc, #328]	; (80020bc <MPU9250_INIT+0x220>)
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	226b      	movs	r2, #107	; 0x6b
 8001f78:	21d0      	movs	r1, #208	; 0xd0
 8001f7a:	4851      	ldr	r0, [pc, #324]	; (80020c0 <MPU9250_INIT+0x224>)
 8001f7c:	f002 fafa 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001f80:	20c8      	movs	r0, #200	; 0xc8
 8001f82:	f001 fb45 	bl	8003610 <HAL_Delay>

	// Disable I2C master
	TxBuffer9250[0] = 0x00;
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <MPU9250_INIT+0x220>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, I2C_MST_CTRL, 1, TxBuffer9250, 1, 1000);
 8001f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	2301      	movs	r3, #1
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <MPU9250_INIT+0x220>)
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	2224      	movs	r2, #36	; 0x24
 8001f9e:	21d0      	movs	r1, #208	; 0xd0
 8001fa0:	4847      	ldr	r0, [pc, #284]	; (80020c0 <MPU9250_INIT+0x224>)
 8001fa2:	f002 fae7 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001fa6:	20c8      	movs	r0, #200	; 0xc8
 8001fa8:	f001 fb32 	bl	8003610 <HAL_Delay>

	// Reset FIFO and DMP
	TxBuffer9250[0] = 0x0C;
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <MPU9250_INIT+0x220>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, TxBuffer9250, 1, 1000);
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <MPU9250_INIT+0x220>)
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	226a      	movs	r2, #106	; 0x6a
 8001fc4:	21d0      	movs	r1, #208	; 0xd0
 8001fc6:	483e      	ldr	r0, [pc, #248]	; (80020c0 <MPU9250_INIT+0x224>)
 8001fc8:	f002 fad4 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001fcc:	20c8      	movs	r0, #200	; 0xc8
 8001fce:	f001 fb1f 	bl	8003610 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	// Set low-pass filter to 188 Hz
	TxBuffer9250[0] = 0x01;
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <MPU9250_INIT+0x220>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, CONFIG, 1, TxBuffer9250, 1, 1000);
 8001fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <MPU9250_INIT+0x220>)
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	221a      	movs	r2, #26
 8001fea:	21d0      	movs	r1, #208	; 0xd0
 8001fec:	4834      	ldr	r0, [pc, #208]	; (80020c0 <MPU9250_INIT+0x224>)
 8001fee:	f002 fac1 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001ff2:	20c8      	movs	r0, #200	; 0xc8
 8001ff4:	f001 fb0c 	bl	8003610 <HAL_Delay>

	// Set sample rate to 1 kHz
	TxBuffer9250[0] = 0x00;
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <MPU9250_INIT+0x220>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, SMPLRT_DIV, 1, TxBuffer9250, 1, 1000);
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	2301      	movs	r3, #1
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <MPU9250_INIT+0x220>)
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	2219      	movs	r2, #25
 8002010:	21d0      	movs	r1, #208	; 0xd0
 8002012:	482b      	ldr	r0, [pc, #172]	; (80020c0 <MPU9250_INIT+0x224>)
 8002014:	f002 faae 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002018:	20c8      	movs	r0, #200	; 0xc8
 800201a:	f001 faf9 	bl	8003610 <HAL_Delay>

	// Set gyro full-scale to 250 degrees per second, maximum sensitivity
	TxBuffer9250[0] = 0x00;
 800201e:	4b27      	ldr	r3, [pc, #156]	; (80020bc <MPU9250_INIT+0x220>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, GYRO_CONFIG, 1, TxBuffer9250, 1, 1000);
 8002024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2301      	movs	r3, #1
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MPU9250_INIT+0x220>)
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	221b      	movs	r2, #27
 8002036:	21d0      	movs	r1, #208	; 0xd0
 8002038:	4821      	ldr	r0, [pc, #132]	; (80020c0 <MPU9250_INIT+0x224>)
 800203a:	f002 fa9b 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800203e:	20c8      	movs	r0, #200	; 0xc8
 8002040:	f001 fae6 	bl	8003610 <HAL_Delay>

	// Set accelerometer full-scale to 2 g, maximum sensitivity
	TxBuffer9250[0] = 0x00;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <MPU9250_INIT+0x220>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, TxBuffer9250, 1, 1000);
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MPU9250_INIT+0x220>)
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	221c      	movs	r2, #28
 800205c:	21d0      	movs	r1, #208	; 0xd0
 800205e:	4818      	ldr	r0, [pc, #96]	; (80020c0 <MPU9250_INIT+0x224>)
 8002060:	f002 fa88 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002064:	20c8      	movs	r0, #200	; 0xc8
 8002066:	f001 fad3 	bl	8003610 <HAL_Delay>

	// Enable FIFO
	TxBuffer9250[0] = 0x40;
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MPU9250_INIT+0x220>)
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, TxBuffer9250, 1, 1000);
 8002070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	2301      	movs	r3, #1
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MPU9250_INIT+0x220>)
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2301      	movs	r3, #1
 8002080:	226a      	movs	r2, #106	; 0x6a
 8002082:	21d0      	movs	r1, #208	; 0xd0
 8002084:	480e      	ldr	r0, [pc, #56]	; (80020c0 <MPU9250_INIT+0x224>)
 8002086:	f002 fa75 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800208a:	20c8      	movs	r0, #200	; 0xc8
 800208c:	f001 fac0 	bl	8003610 <HAL_Delay>

	// Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
	TxBuffer9250[0] = 0x78;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <MPU9250_INIT+0x220>)
 8002092:	2278      	movs	r2, #120	; 0x78
 8002094:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, TxBuffer9250, 1, 1000);
 8002096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MPU9250_INIT+0x220>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2301      	movs	r3, #1
 80020a6:	2223      	movs	r2, #35	; 0x23
 80020a8:	21d0      	movs	r1, #208	; 0xd0
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MPU9250_INIT+0x224>)
 80020ac:	f002 fa62 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80020b0:	20c8      	movs	r0, #200	; 0xc8
 80020b2:	f001 faad 	bl	8003610 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
			HAL_Delay(100);
		}
	}
*/
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000544 	.word	0x20000544
 80020c0:	200002b4 	.word	0x200002b4

080020c4 <MPU9250_Reset>:

void MPU9250_Reset(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af04      	add	r7, sp, #16
	TxBuffer9250[0] = 0x80;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MPU9250_Reset+0x34>)
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 80020d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <MPU9250_Reset+0x34>)
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2301      	movs	r3, #1
 80020e0:	226b      	movs	r2, #107	; 0x6b
 80020e2:	21d0      	movs	r1, #208	; 0xd0
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <MPU9250_Reset+0x38>)
 80020e6:	f002 fa45 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80020ea:	20c8      	movs	r0, #200	; 0xc8
 80020ec:	f001 fa90 	bl	8003610 <HAL_Delay>
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000544 	.word	0x20000544
 80020fc:	200002b4 	.word	0x200002b4

08002100 <initAK8963>:

void initAK8963(){
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af04      	add	r7, sp, #16
	// Power down magnetometer
	TxBuffer9250[0] = 0x00;
 8002106:	4b45      	ldr	r3, [pc, #276]	; (800221c <initAK8963+0x11c>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 800210c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2301      	movs	r3, #1
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <initAK8963+0x11c>)
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	220a      	movs	r2, #10
 800211e:	2118      	movs	r1, #24
 8002120:	483f      	ldr	r0, [pc, #252]	; (8002220 <initAK8963+0x120>)
 8002122:	f002 fa27 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002126:	20c8      	movs	r0, #200	; 0xc8
 8002128:	f001 fa72 	bl	8003610 <HAL_Delay>

	// Enter Fuse ROM access mode
	TxBuffer9250[0] = 0x0F;
 800212c:	4b3b      	ldr	r3, [pc, #236]	; (800221c <initAK8963+0x11c>)
 800212e:	220f      	movs	r2, #15
 8002130:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	4b37      	ldr	r3, [pc, #220]	; (800221c <initAK8963+0x11c>)
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	220a      	movs	r2, #10
 8002144:	2118      	movs	r1, #24
 8002146:	4836      	ldr	r0, [pc, #216]	; (8002220 <initAK8963+0x120>)
 8002148:	f002 fa14 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800214c:	20c8      	movs	r0, #200	; 0xc8
 800214e:	f001 fa5f 	bl	8003610 <HAL_Delay>

	// Power down magnetometer
	TxBuffer9250[0] = 0x00;
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <initAK8963+0x11c>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 8002158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2301      	movs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <initAK8963+0x11c>)
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	220a      	movs	r2, #10
 800216a:	2118      	movs	r1, #24
 800216c:	482c      	ldr	r0, [pc, #176]	; (8002220 <initAK8963+0x120>)
 800216e:	f002 fa01 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002172:	20c8      	movs	r0, #200	; 0xc8
 8002174:	f001 fa4c 	bl	8003610 <HAL_Delay>

	// Set magnetometer data resolution and sample ODR
	TxBuffer9250[0] = 0x16;
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <initAK8963+0x11c>)
 800217a:	2216      	movs	r2, #22
 800217c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
 800217e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	2301      	movs	r3, #1
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <initAK8963+0x11c>)
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	220a      	movs	r2, #10
 8002190:	2118      	movs	r1, #24
 8002192:	4823      	ldr	r0, [pc, #140]	; (8002220 <initAK8963+0x120>)
 8002194:	f002 f9ee 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002198:	20c8      	movs	r0, #200	; 0xc8
 800219a:	f001 fa39 	bl	8003610 <HAL_Delay>

	// -----------------------
//	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ASAX, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[2], 3, 1000);

	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[1], 1, 1000);
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	2301      	movs	r3, #1
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <initAK8963+0x124>)
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	2200      	movs	r2, #0
 80021b0:	2118      	movs	r1, #24
 80021b2:	481b      	ldr	r0, [pc, #108]	; (8002220 <initAK8963+0x120>)
 80021b4:	f002 fad8 	bl	8004768 <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 80021b8:	2064      	movs	r0, #100	; 0x64
 80021ba:	f001 fa29 	bl	8003610 <HAL_Delay>

	if (RxBuffer9250[1] == 0x48)
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <initAK8963+0x128>)
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b48      	cmp	r3, #72	; 0x48
 80021c4:	d106      	bne.n	80021d4 <initAK8963+0xd4>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021cc:	4817      	ldr	r0, [pc, #92]	; (800222c <initAK8963+0x12c>)
 80021ce:	f002 f865 	bl	800429c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
			HAL_Delay(100);
		}
	}
}
 80021d2:	e01f      	b.n	8002214 <initAK8963+0x114>
		for(j=0;j<=11;j++){
 80021d4:	2300      	movs	r3, #0
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	e019      	b.n	800220e <initAK8963+0x10e>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 80021da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021de:	4813      	ldr	r0, [pc, #76]	; (800222c <initAK8963+0x12c>)
 80021e0:	f002 f875 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 80021e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021e8:	4810      	ldr	r0, [pc, #64]	; (800222c <initAK8963+0x12c>)
 80021ea:	f002 f870 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 80021ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f2:	480e      	ldr	r0, [pc, #56]	; (800222c <initAK8963+0x12c>)
 80021f4:	f002 f86b 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
 80021f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <initAK8963+0x12c>)
 80021fe:	f002 f866 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	f001 fa04 	bl	8003610 <HAL_Delay>
		for(j=0;j<=11;j++){
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	3301      	adds	r3, #1
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b0b      	cmp	r3, #11
 8002212:	d9e2      	bls.n	80021da <initAK8963+0xda>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000544 	.word	0x20000544
 8002220:	200002b4 	.word	0x200002b4
 8002224:	200004fd 	.word	0x200004fd
 8002228:	200004fc 	.word	0x200004fc
 800222c:	40020c00 	.word	0x40020c00

08002230 <initMPU9250>:

void initMPU9250(){
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af04      	add	r7, sp, #16
	 // Initialize MPU9250 device
	 // wake up device
	TxBuffer9250[0] = 0x00;
 8002236:	4b58      	ldr	r3, [pc, #352]	; (8002398 <initMPU9250+0x168>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2301      	movs	r3, #1
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	4b54      	ldr	r3, [pc, #336]	; (8002398 <initMPU9250+0x168>)
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	226b      	movs	r2, #107	; 0x6b
 800224e:	21d0      	movs	r1, #208	; 0xd0
 8002250:	4852      	ldr	r0, [pc, #328]	; (800239c <initMPU9250+0x16c>)
 8002252:	f002 f98f 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002256:	20c8      	movs	r0, #200	; 0xc8
 8002258:	f001 f9da 	bl	8003610 <HAL_Delay>

	// get stable time source
	TxBuffer9250[0] = 0x01;
 800225c:	4b4e      	ldr	r3, [pc, #312]	; (8002398 <initMPU9250+0x168>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, TxBuffer9250, 1, 1000);
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <initMPU9250+0x168>)
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	226b      	movs	r2, #107	; 0x6b
 8002274:	21d0      	movs	r1, #208	; 0xd0
 8002276:	4849      	ldr	r0, [pc, #292]	; (800239c <initMPU9250+0x16c>)
 8002278:	f002 f97c 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800227c:	20c8      	movs	r0, #200	; 0xc8
 800227e:	f001 f9c7 	bl	8003610 <HAL_Delay>

	TxBuffer9250[0] = 0x03;
 8002282:	4b45      	ldr	r3, [pc, #276]	; (8002398 <initMPU9250+0x168>)
 8002284:	2203      	movs	r2, #3
 8002286:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, CONFIG, 1, TxBuffer9250, 1, 1000);
 8002288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	2301      	movs	r3, #1
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <initMPU9250+0x168>)
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	221a      	movs	r2, #26
 800229a:	21d0      	movs	r1, #208	; 0xd0
 800229c:	483f      	ldr	r0, [pc, #252]	; (800239c <initMPU9250+0x16c>)
 800229e:	f002 f969 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80022a2:	20c8      	movs	r0, #200	; 0xc8
 80022a4:	f001 f9b4 	bl	8003610 <HAL_Delay>

	// Use a 200 Hz rate; the same rate set in CONFIG above
	TxBuffer9250[0] = 0x04;
 80022a8:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <initMPU9250+0x168>)
 80022aa:	2204      	movs	r2, #4
 80022ac:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, SMPLRT_DIV, 1, TxBuffer9250, 1, 1000);
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	4b37      	ldr	r3, [pc, #220]	; (8002398 <initMPU9250+0x168>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	2219      	movs	r2, #25
 80022c0:	21d0      	movs	r1, #208	; 0xd0
 80022c2:	4836      	ldr	r0, [pc, #216]	; (800239c <initMPU9250+0x16c>)
 80022c4:	f002 f956 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80022c8:	20c8      	movs	r0, #200	; 0xc8
 80022ca:	f001 f9a1 	bl	8003610 <HAL_Delay>

	TxBuffer9250[0] = 0x22;
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <initMPU9250+0x168>)
 80022d0:	2222      	movs	r2, #34	; 0x22
 80022d2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_PIN_CFG, 1, TxBuffer9250, 1, 1000);
 80022d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2301      	movs	r3, #1
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <initMPU9250+0x168>)
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2301      	movs	r3, #1
 80022e4:	2237      	movs	r2, #55	; 0x37
 80022e6:	21d0      	movs	r1, #208	; 0xd0
 80022e8:	482c      	ldr	r0, [pc, #176]	; (800239c <initMPU9250+0x16c>)
 80022ea:	f002 f943 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80022ee:	20c8      	movs	r0, #200	; 0xc8
 80022f0:	f001 f98e 	bl	8003610 <HAL_Delay>

	TxBuffer9250[0] = 0x01;
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <initMPU9250+0x168>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_ENABLE, 1, TxBuffer9250, 1, 1000);
 80022fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	2301      	movs	r3, #1
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <initMPU9250+0x168>)
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	2238      	movs	r2, #56	; 0x38
 800230c:	21d0      	movs	r1, #208	; 0xd0
 800230e:	4823      	ldr	r0, [pc, #140]	; (800239c <initMPU9250+0x16c>)
 8002310:	f002 f930 	bl	8004574 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002314:	20c8      	movs	r0, #200	; 0xc8
 8002316:	f001 f97b 	bl	8003610 <HAL_Delay>

	// -----------------------
	// test MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, WHO_AM_I_MPU9250, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[0], 1, 1000);
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <initMPU9250+0x170>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	2275      	movs	r2, #117	; 0x75
 800232c:	21d0      	movs	r1, #208	; 0xd0
 800232e:	481b      	ldr	r0, [pc, #108]	; (800239c <initMPU9250+0x16c>)
 8002330:	f002 fa1a 	bl	8004768 <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 8002334:	2064      	movs	r0, #100	; 0x64
 8002336:	f001 f96b 	bl	8003610 <HAL_Delay>
	if (RxBuffer9250[0] == 0x71)
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <initMPU9250+0x170>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b71      	cmp	r3, #113	; 0x71
 8002340:	d106      	bne.n	8002350 <initMPU9250+0x120>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	4816      	ldr	r0, [pc, #88]	; (80023a4 <initMPU9250+0x174>)
 800234a:	f001 ffa7 	bl	800429c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
			HAL_Delay(100);
		}
	}
}
 800234e:	e01f      	b.n	8002390 <initMPU9250+0x160>
		for(j=0;j<=11;j++){
 8002350:	2300      	movs	r3, #0
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	e019      	b.n	800238a <initMPU9250+0x15a>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8002356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235a:	4812      	ldr	r0, [pc, #72]	; (80023a4 <initMPU9250+0x174>)
 800235c:	f001 ffb7 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 8002360:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002364:	480f      	ldr	r0, [pc, #60]	; (80023a4 <initMPU9250+0x174>)
 8002366:	f001 ffb2 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 800236a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <initMPU9250+0x174>)
 8002370:	f001 ffad 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_BLU_Pin);
 8002374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002378:	480a      	ldr	r0, [pc, #40]	; (80023a4 <initMPU9250+0x174>)
 800237a:	f001 ffa8 	bl	80042ce <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800237e:	2064      	movs	r0, #100	; 0x64
 8002380:	f001 f946 	bl	8003610 <HAL_Delay>
		for(j=0;j<=11;j++){
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	3301      	adds	r3, #1
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b0b      	cmp	r3, #11
 800238e:	d9e2      	bls.n	8002356 <initMPU9250+0x126>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000544 	.word	0x20000544
 800239c:	200002b4 	.word	0x200002b4
 80023a0:	200004fc 	.word	0x200004fc
 80023a4:	40020c00 	.word	0x40020c00

080023a8 <ReadMPU9250>:
	};

 * GPIO: PB9 -> IMU_SDA
 * 		 PB8 -> IMU_SCL
*/
struct data_mpu9250 ReadMPU9250(){
 80023a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023ac:	b097      	sub	sp, #92	; 0x5c
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	struct data_mpu9250 mpu;
	int8_t i;
	int16_t DataBuffer16[10];
	IMU9250_READ_DMA();
 80023b2:	f000 fc61 	bl	8002c78 <IMU9250_READ_DMA>

	for(i=0;i<6;i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80023bc:	e02b      	b.n	8002416 <ReadMPU9250+0x6e>
	{
		DataBuffer16[i] = (int16_t)(((uint16_t)DataBuffer9250[2*i]<<8) | DataBuffer9250[2*i + 1]);
 80023be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <ReadMPU9250+0x80>)
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	b219      	sxth	r1, r3
 80023cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <ReadMPU9250+0x80>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	b21a      	sxth	r2, r3
 80023da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023de:	430a      	orrs	r2, r1
 80023e0:	b212      	sxth	r2, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80023e8:	440b      	add	r3, r1
 80023ea:	f823 2c4c 	strh.w	r2, [r3, #-76]
		DataBuffer16_test[i]=DataBuffer16[i];
 80023ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023f2:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80023fc:	440b      	add	r3, r1
 80023fe:	f933 1c4c 	ldrsh.w	r1, [r3, #-76]
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <ReadMPU9250+0x84>)
 8002404:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0;i<6;i++)
 8002408:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002416:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800241a:	2b05      	cmp	r3, #5
 800241c:	ddcf      	ble.n	80023be <ReadMPU9250+0x16>
	}

	for(i=6;i<9;i++)
 800241e:	2306      	movs	r3, #6
 8002420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002424:	e030      	b.n	8002488 <ReadMPU9250+0xe0>
 8002426:	bf00      	nop
 8002428:	2000056c 	.word	0x2000056c
 800242c:	2000040c 	.word	0x2000040c
	{
		DataBuffer16[i] = (int16_t)((DataBuffer9250[2*i]) | (uint16_t)DataBuffer9250[2*i + 1]<<8);
 8002430:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4ae2      	ldr	r2, [pc, #904]	; (80027c0 <ReadMPU9250+0x418>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	b219      	sxth	r1, r3
 800243c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3301      	adds	r3, #1
 8002444:	4ade      	ldr	r2, [pc, #888]	; (80027c0 <ReadMPU9250+0x418>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b21a      	sxth	r2, r3
 800244c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002450:	430a      	orrs	r2, r1
 8002452:	b212      	sxth	r2, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800245a:	440b      	add	r3, r1
 800245c:	f823 2c4c 	strh.w	r2, [r3, #-76]
		DataBuffer16_test[i]=DataBuffer16[i];
 8002460:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002464:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800246e:	440b      	add	r3, r1
 8002470:	f933 1c4c 	ldrsh.w	r1, [r3, #-76]
 8002474:	4bd3      	ldr	r3, [pc, #844]	; (80027c4 <ReadMPU9250+0x41c>)
 8002476:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=6;i<9;i++)
 800247a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3301      	adds	r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002488:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800248c:	2b08      	cmp	r3, #8
 800248e:	ddcf      	ble.n	8002430 <ReadMPU9250+0x88>
	}

	accel_x_temp1 = DataBuffer16[0];
 8002490:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249c:	4bca      	ldr	r3, [pc, #808]	; (80027c8 <ReadMPU9250+0x420>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
	accel_y_temp1 = DataBuffer16[1];
 80024a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	4bc7      	ldr	r3, [pc, #796]	; (80027cc <ReadMPU9250+0x424>)
 80024b0:	edc3 7a00 	vstr	s15, [r3]
	accel_z_temp1 = DataBuffer16[2];
 80024b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c0:	4bc3      	ldr	r3, [pc, #780]	; (80027d0 <ReadMPU9250+0x428>)
 80024c2:	edc3 7a00 	vstr	s15, [r3]

	mpu.accel_x = DataBuffer16[0];
 80024c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	mpu.accel_y = DataBuffer16[1];
 80024d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	mpu.accel_z = DataBuffer16[2];
 80024e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
//	mpu.accel_x = atan(gyroAngleX);


//	mpu.temp1 = (float)DataBuffer16[3];

	gyro_x_temp1 = DataBuffer16[3];
 80024f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002502:	4bb4      	ldr	r3, [pc, #720]	; (80027d4 <ReadMPU9250+0x42c>)
 8002504:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_temp1 = DataBuffer16[4];
 8002508:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002514:	4bb0      	ldr	r3, [pc, #704]	; (80027d8 <ReadMPU9250+0x430>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_temp1 = DataBuffer16[5];
 800251a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002526:	4bad      	ldr	r3, [pc, #692]	; (80027dc <ReadMPU9250+0x434>)
 8002528:	edc3 7a00 	vstr	s15, [r3]

	mpu.gyro_x = DataBuffer16[3];
 800252c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002538:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	mpu.gyro_y = DataBuffer16[4];
 800253c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002548:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	mpu.gyro_z = DataBuffer16[5]/131.0f;
 800254c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002558:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80027e0 <ReadMPU9250+0x438>
 800255c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002560:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	mpu.gyro_y = roundf((float)gyro_y_temp1*1000.0f/131.0F);
	mpu.gyro_z = roundf((float)gyro_z_temp1*1000.0f/131.0F);
*/


	mag_x_temp1 = DataBuffer16[6];
 8002564:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002570:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <ReadMPU9250+0x43c>)
 8002572:	edc3 7a00 	vstr	s15, [r3]
	mag_y_temp1 = DataBuffer16[7];
 8002576:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002582:	4b99      	ldr	r3, [pc, #612]	; (80027e8 <ReadMPU9250+0x440>)
 8002584:	edc3 7a00 	vstr	s15, [r3]
	mag_z_temp1 = DataBuffer16[8];
 8002588:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002594:	4b95      	ldr	r3, [pc, #596]	; (80027ec <ReadMPU9250+0x444>)
 8002596:	edc3 7a00 	vstr	s15, [r3]

	mpu.mag_x = DataBuffer16[6];
 800259a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	mpu.mag_y = DataBuffer16[7];
 80025aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	mpu.mag_z = DataBuffer16[8];
 80025ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
//	mpu9250_test[3] = mpu.gyro_x/1000.0f;
//	mpu9250_test[4] = mpu.gyro_y/1000.0f;
//	mpu9250_test[5] = mpu.gyro_z/1000.0f;

//	mpu.accel_x = roundf((float)((atan2((double)accel_y_temp1,(double)accel_z_temp1))*RA_TO_DEC)*1000);
	mpu.roll=atan2(mpu.accel_y, mpu.accel_z);
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ff6f 	bl	80004b0 <__aeabi_f2d>
 80025d2:	4604      	mov	r4, r0
 80025d4:	460d      	mov	r5, r1
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ff69 	bl	80004b0 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ec43 2b11 	vmov	d1, r2, r3
 80025e6:	ec45 4b10 	vmov	d0, r4, r5
 80025ea:	f006 ffa9 	bl	8009540 <atan2>
 80025ee:	ec54 3b10 	vmov	r3, r4, d0
 80025f2:	4618      	mov	r0, r3
 80025f4:	4621      	mov	r1, r4
 80025f6:	f7fe fa8b 	bl	8000b10 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
	mpu.pitch=atan2(-mpu.accel_x, sqrt(pow(mpu.accel_y, 2)+pow(mpu.accel_z, 2)));
 80025fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002602:	eef1 7a67 	vneg.f32	s15, s15
 8002606:	ee17 3a90 	vmov	r3, s15
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ff50 	bl	80004b0 <__aeabi_f2d>
 8002610:	4605      	mov	r5, r0
 8002612:	460e      	mov	r6, r1
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff4a 	bl	80004b0 <__aeabi_f2d>
 800261c:	4603      	mov	r3, r0
 800261e:	460c      	mov	r4, r1
 8002620:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80027b8 <ReadMPU9250+0x410>
 8002624:	ec44 3b10 	vmov	d0, r3, r4
 8002628:	f006 ff8c 	bl	8009544 <pow>
 800262c:	ec59 8b10 	vmov	r8, r9, d0
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff3c 	bl	80004b0 <__aeabi_f2d>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 80027b8 <ReadMPU9250+0x410>
 8002640:	ec44 3b10 	vmov	d0, r3, r4
 8002644:	f006 ff7e 	bl	8009544 <pow>
 8002648:	ec54 3b10 	vmov	r3, r4, d0
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	4640      	mov	r0, r8
 8002652:	4649      	mov	r1, r9
 8002654:	f7fd fdce 	bl	80001f4 <__adddf3>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	ec44 3b17 	vmov	d7, r3, r4
 8002660:	eeb0 0a47 	vmov.f32	s0, s14
 8002664:	eef0 0a67 	vmov.f32	s1, s15
 8002668:	f007 f8dc 	bl	8009824 <sqrt>
 800266c:	eeb0 7a40 	vmov.f32	s14, s0
 8002670:	eef0 7a60 	vmov.f32	s15, s1
 8002674:	eeb0 1a47 	vmov.f32	s2, s14
 8002678:	eef0 1a67 	vmov.f32	s3, s15
 800267c:	ec46 5b10 	vmov	d0, r5, r6
 8002680:	f006 ff5e 	bl	8009540 <atan2>
 8002684:	ec54 3b10 	vmov	r3, r4, d0
 8002688:	4618      	mov	r0, r3
 800268a:	4621      	mov	r1, r4
 800268c:	f7fe fa40 	bl	8000b10 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
	m_x=mpu.mag_x*cos(mpu.pitch)+mpu.mag_z*sin(mpu.pitch);
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff0a 	bl	80004b0 <__aeabi_f2d>
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff04 	bl	80004b0 <__aeabi_f2d>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	ec43 2b10 	vmov	d0, r2, r3
 80026b0:	f006 feba 	bl	8009428 <cos>
 80026b4:	ec53 2b10 	vmov	r2, r3, d0
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd ff50 	bl	8000560 <__aeabi_dmul>
 80026c0:	4603      	mov	r3, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	4625      	mov	r5, r4
 80026c6:	461c      	mov	r4, r3
 80026c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fef0 	bl	80004b0 <__aeabi_f2d>
 80026d0:	4680      	mov	r8, r0
 80026d2:	4689      	mov	r9, r1
 80026d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd feea 	bl	80004b0 <__aeabi_f2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	ec43 2b10 	vmov	d0, r2, r3
 80026e4:	f006 fee4 	bl	80094b0 <sin>
 80026e8:	ec53 2b10 	vmov	r2, r3, d0
 80026ec:	4640      	mov	r0, r8
 80026ee:	4649      	mov	r1, r9
 80026f0:	f7fd ff36 	bl	8000560 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4620      	mov	r0, r4
 80026fa:	4629      	mov	r1, r5
 80026fc:	f7fd fd7a 	bl	80001f4 <__adddf3>
 8002700:	4603      	mov	r3, r0
 8002702:	460c      	mov	r4, r1
 8002704:	4618      	mov	r0, r3
 8002706:	4621      	mov	r1, r4
 8002708:	f7fe fa02 	bl	8000b10 <__aeabi_d2f>
 800270c:	4602      	mov	r2, r0
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <ReadMPU9250+0x448>)
 8002710:	601a      	str	r2, [r3, #0]
	m_y=mpu.mag_x*sin(mpu.roll)*sin(mpu.pitch)+mpu.mag_y*cos(mpu.roll)-mpu.mag_z*sin(mpu.roll)*cos(mpu.pitch);
 8002712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fecb 	bl	80004b0 <__aeabi_f2d>
 800271a:	4604      	mov	r4, r0
 800271c:	460d      	mov	r5, r1
 800271e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fec5 	bl	80004b0 <__aeabi_f2d>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	ec43 2b10 	vmov	d0, r2, r3
 800272e:	f006 febf 	bl	80094b0 <sin>
 8002732:	ec53 2b10 	vmov	r2, r3, d0
 8002736:	4620      	mov	r0, r4
 8002738:	4629      	mov	r1, r5
 800273a:	f7fd ff11 	bl	8000560 <__aeabi_dmul>
 800273e:	4603      	mov	r3, r0
 8002740:	460c      	mov	r4, r1
 8002742:	4625      	mov	r5, r4
 8002744:	461c      	mov	r4, r3
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd feb1 	bl	80004b0 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	ec43 2b10 	vmov	d0, r2, r3
 8002756:	f006 feab 	bl	80094b0 <sin>
 800275a:	ec53 2b10 	vmov	r2, r3, d0
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fd fefd 	bl	8000560 <__aeabi_dmul>
 8002766:	4603      	mov	r3, r0
 8002768:	460c      	mov	r4, r1
 800276a:	4625      	mov	r5, r4
 800276c:	461c      	mov	r4, r3
 800276e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fe9d 	bl	80004b0 <__aeabi_f2d>
 8002776:	4680      	mov	r8, r0
 8002778:	4689      	mov	r9, r1
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fe97 	bl	80004b0 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	ec43 2b10 	vmov	d0, r2, r3
 800278a:	f006 fe4d 	bl	8009428 <cos>
 800278e:	ec53 2b10 	vmov	r2, r3, d0
 8002792:	4640      	mov	r0, r8
 8002794:	4649      	mov	r1, r9
 8002796:	f7fd fee3 	bl	8000560 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd fd27 	bl	80001f4 <__adddf3>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	4625      	mov	r5, r4
 80027ac:	461c      	mov	r4, r3
 80027ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b0:	4618      	mov	r0, r3
 80027b2:	e01f      	b.n	80027f4 <ReadMPU9250+0x44c>
 80027b4:	f3af 8000 	nop.w
 80027b8:	00000000 	.word	0x00000000
 80027bc:	40000000 	.word	0x40000000
 80027c0:	2000056c 	.word	0x2000056c
 80027c4:	2000040c 	.word	0x2000040c
 80027c8:	200004f8 	.word	0x200004f8
 80027cc:	2000038c 	.word	0x2000038c
 80027d0:	20000614 	.word	0x20000614
 80027d4:	200005bc 	.word	0x200005bc
 80027d8:	200003a4 	.word	0x200003a4
 80027dc:	20000438 	.word	0x20000438
 80027e0:	43030000 	.word	0x43030000
 80027e4:	200003a8 	.word	0x200003a8
 80027e8:	2000039c 	.word	0x2000039c
 80027ec:	20000430 	.word	0x20000430
 80027f0:	20000504 	.word	0x20000504
 80027f4:	f7fd fe5c 	bl	80004b0 <__aeabi_f2d>
 80027f8:	4680      	mov	r8, r0
 80027fa:	4689      	mov	r9, r1
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe56 	bl	80004b0 <__aeabi_f2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	ec43 2b10 	vmov	d0, r2, r3
 800280c:	f006 fe50 	bl	80094b0 <sin>
 8002810:	ec53 2b10 	vmov	r2, r3, d0
 8002814:	4640      	mov	r0, r8
 8002816:	4649      	mov	r1, r9
 8002818:	f7fd fea2 	bl	8000560 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4690      	mov	r8, r2
 8002822:	4699      	mov	r9, r3
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe42 	bl	80004b0 <__aeabi_f2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	ec43 2b10 	vmov	d0, r2, r3
 8002834:	f006 fdf8 	bl	8009428 <cos>
 8002838:	ec53 2b10 	vmov	r2, r3, d0
 800283c:	4640      	mov	r0, r8
 800283e:	4649      	mov	r1, r9
 8002840:	f7fd fe8e 	bl	8000560 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	f7fd fcd0 	bl	80001f0 <__aeabi_dsub>
 8002850:	4603      	mov	r3, r0
 8002852:	460c      	mov	r4, r1
 8002854:	4618      	mov	r0, r3
 8002856:	4621      	mov	r1, r4
 8002858:	f7fe f95a 	bl	8000b10 <__aeabi_d2f>
 800285c:	4602      	mov	r2, r0
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <ReadMPU9250+0x64c>)
 8002860:	601a      	str	r2, [r3, #0]


	mpu.yaw=atan2(m_y, m_x);
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <ReadMPU9250+0x64c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe22 	bl	80004b0 <__aeabi_f2d>
 800286c:	4604      	mov	r4, r0
 800286e:	460d      	mov	r5, r1
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <ReadMPU9250+0x650>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fe1b 	bl	80004b0 <__aeabi_f2d>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	ec43 2b11 	vmov	d1, r2, r3
 8002882:	ec45 4b10 	vmov	d0, r4, r5
 8002886:	f006 fe5b 	bl	8009540 <atan2>
 800288a:	ec54 3b10 	vmov	r3, r4, d0
 800288e:	4618      	mov	r0, r3
 8002890:	4621      	mov	r1, r4
 8002892:	f7fe f93d 	bl	8000b10 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	653b      	str	r3, [r7, #80]	; 0x50
	mpu9250_test[7] = mpu.yaw*RA_TO_DEC;
 800289a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800289e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80029fc <ReadMPU9250+0x654>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <ReadMPU9250+0x658>)
 80028a8:	edc3 7a07 	vstr	s15, [r3, #28]



	pre_dt = current_dt;
 80028ac:	4b55      	ldr	r3, [pc, #340]	; (8002a04 <ReadMPU9250+0x65c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <ReadMPU9250+0x660>)
 80028b2:	6013      	str	r3, [r2, #0]
	current_dt = HAL_GetTick();
 80028b4:	f000 fea0 	bl	80035f8 <HAL_GetTick>
 80028b8:	ee07 0a90 	vmov	s15, r0
 80028bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <ReadMPU9250+0x65c>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]
	dt_now = (current_dt-pre_dt)/1000.0F;
 80028c6:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <ReadMPU9250+0x65c>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <ReadMPU9250+0x660>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002a0c <ReadMPU9250+0x664>
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028de:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <ReadMPU9250+0x668>)
 80028e0:	edc3 7a00 	vstr	s15, [r3]
	dt_led += dt_now;
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <ReadMPU9250+0x66c>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <ReadMPU9250+0x668>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <ReadMPU9250+0x66c>)
 80028f6:	edc3 7a00 	vstr	s15, [r3]

	if (dt_led > 3.0){
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <ReadMPU9250+0x66c>)
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290c:	dd24      	ble.n	8002958 <ReadMPU9250+0x5b0>
		DataBuffer9250[12] = 0;
 800290e:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <ReadMPU9250+0x670>)
 8002910:	2200      	movs	r2, #0
 8002912:	731a      	strb	r2, [r3, #12]
		DataBuffer9250[13] = 0;
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <ReadMPU9250+0x670>)
 8002916:	2200      	movs	r2, #0
 8002918:	735a      	strb	r2, [r3, #13]
		DataBuffer9250[14] = 0;
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <ReadMPU9250+0x670>)
 800291c:	2200      	movs	r2, #0
 800291e:	739a      	strb	r2, [r3, #14]
		DataBuffer9250[15] = 0;
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <ReadMPU9250+0x670>)
 8002922:	2200      	movs	r2, #0
 8002924:	73da      	strb	r2, [r3, #15]
		DataBuffer9250[16] = 0;
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <ReadMPU9250+0x670>)
 8002928:	2200      	movs	r2, #0
 800292a:	741a      	strb	r2, [r3, #16]
		DataBuffer9250[17] = 0;
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <ReadMPU9250+0x670>)
 800292e:	2200      	movs	r2, #0
 8002930:	745a      	strb	r2, [r3, #17]
//		TxBuffer9250[0] = 0x82;
//		HAL_I2C_Mem_Write(&hi2c1, AK8963_ADDRESS, AK8963_CNTL, 1, TxBuffer9250, 1, 1000);
		if (dt_led > 5.0){
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <ReadMPU9250+0x66c>)
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800293c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	dd03      	ble.n	800294e <ReadMPU9250+0x5a6>
//			HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_XOUT_L, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[12], 6, 1000);
			dt_led = 0;
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <ReadMPU9250+0x66c>)
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 800294e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002952:	4832      	ldr	r0, [pc, #200]	; (8002a1c <ReadMPU9250+0x674>)
 8002954:	f001 fcbb 	bl	80042ce <HAL_GPIO_TogglePin>
	}

	delta_yaw = (-pre_yaw+mpu.yaw);
 8002958:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800295c:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <ReadMPU9250+0x678>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <ReadMPU9250+0x67c>)
 8002968:	edc3 7a00 	vstr	s15, [r3]
	mpu9250_test[5] = mpu.gyro_z*dt_now;
 800296c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <ReadMPU9250+0x668>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <ReadMPU9250+0x658>)
 800297c:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu9250_test[6] = delta_yaw;
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <ReadMPU9250+0x67c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <ReadMPU9250+0x658>)
 8002986:	6193      	str	r3, [r2, #24]
	pre_yaw = mpu.yaw;
 8002988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298a:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <ReadMPU9250+0x678>)
 800298c:	6013      	str	r3, [r2, #0]
	mpu.yaw = IMU_Kalman(mpu.gyro_z*dt_now, mpu.yaw, dt_now);
 800298e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <ReadMPU9250+0x668>)
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <ReadMPU9250+0x668>)
 80029a2:	edd3 6a00 	vldr	s13, [r3]
 80029a6:	eeb0 1a66 	vmov.f32	s2, s13
 80029aa:	eef0 0a47 	vmov.f32	s1, s14
 80029ae:	eeb0 0a67 	vmov.f32	s0, s15
 80029b2:	f000 f839 	bl	8002a28 <IMU_Kalman>
 80029b6:	eef0 7a40 	vmov.f32	s15, s0
 80029ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

//	mpu9250_test[6] = mpu.roll*RA_TO_DEC;
//	mpu9250_test[7] = mpu.pitch*RA_TO_DEC;
	mpu9250_test[8] = mpu.yaw*RA_TO_DEC;
 80029be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80029c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029fc <ReadMPU9250+0x654>
 80029c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <ReadMPU9250+0x658>)
 80029cc:	edc3 7a08 	vstr	s15, [r3, #32]

	return mpu;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	461d      	mov	r5, r3
 80029d4:	f107 0420 	add.w	r4, r7, #32
 80029d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	602b      	str	r3, [r5, #0]
}
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	375c      	adds	r7, #92	; 0x5c
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029f2:	bf00      	nop
 80029f4:	20000370 	.word	0x20000370
 80029f8:	20000504 	.word	0x20000504
 80029fc:	42652ee1 	.word	0x42652ee1
 8002a00:	200005f0 	.word	0x200005f0
 8002a04:	20000520 	.word	0x20000520
 8002a08:	200003a0 	.word	0x200003a0
 8002a0c:	447a0000 	.word	0x447a0000
 8002a10:	20000428 	.word	0x20000428
 8002a14:	2000037c 	.word	0x2000037c
 8002a18:	2000056c 	.word	0x2000056c
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	2000044c 	.word	0x2000044c
 8002a24:	20000434 	.word	0x20000434

08002a28 <IMU_Kalman>:
float P[2][2]={{0, 0}, {0, 0}};
float K[2] = {0, 0};
int8_t imu_onetime = 0;
float kalman_test[4];

float IMU_Kalman(float newrate, float newangle, float dt){
 8002a28:	b480      	push	{r7}
 8002a2a:	b08b      	sub	sp, #44	; 0x2c
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a32:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a36:	ed87 1a01 	vstr	s2, [r7, #4]
	float rate, S, y, Q_angle, R_measure, Q_bias;
	Q_angle = 0.001F;
 8002a3a:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <IMU_Kalman+0x22c>)
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
	Q_bias = 0.003F;
 8002a3e:	4b86      	ldr	r3, [pc, #536]	; (8002c58 <IMU_Kalman+0x230>)
 8002a40:	623b      	str	r3, [r7, #32]
	R_measure = 0.03F;
 8002a42:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <IMU_Kalman+0x234>)
 8002a44:	61fb      	str	r3, [r7, #28]

	rate = newrate - bias;
 8002a46:	4b86      	ldr	r3, [pc, #536]	; (8002c60 <IMU_Kalman+0x238>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a54:	edc7 7a06 	vstr	s15, [r7, #24]
	if (imu_onetime == 0){
 8002a58:	4b82      	ldr	r3, [pc, #520]	; (8002c64 <IMU_Kalman+0x23c>)
 8002a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <IMU_Kalman+0x46>
		angle = newangle;
 8002a62:	4a81      	ldr	r2, [pc, #516]	; (8002c68 <IMU_Kalman+0x240>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6013      	str	r3, [r2, #0]
		imu_onetime = 1;
 8002a68:	4b7e      	ldr	r3, [pc, #504]	; (8002c64 <IMU_Kalman+0x23c>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
	}

	angle += dt*rate;
 8002a6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7a:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <IMU_Kalman+0x240>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	4b78      	ldr	r3, [pc, #480]	; (8002c68 <IMU_Kalman+0x240>)
 8002a86:	edc3 7a00 	vstr	s15, [r3]
	kalman_test[0] = newrate;
 8002a8a:	4a78      	ldr	r2, [pc, #480]	; (8002c6c <IMU_Kalman+0x244>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6013      	str	r3, [r2, #0]

	P[0][0] += dt*(dt*P[1][1]-P[0][1]-P[1][0]+Q_angle);
 8002a90:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <IMU_Kalman+0x248>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <IMU_Kalman+0x248>)
 8002a98:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002aa4:	4b72      	ldr	r3, [pc, #456]	; (8002c70 <IMU_Kalman+0x248>)
 8002aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aaa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <IMU_Kalman+0x248>)
 8002ab0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ab4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002abc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002acc:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <IMU_Kalman+0x248>)
 8002ace:	edc3 7a00 	vstr	s15, [r3]
	P[0][1] -= dt*P[1][1];
 8002ad2:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <IMU_Kalman+0x248>)
 8002ad4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ad8:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <IMU_Kalman+0x248>)
 8002ada:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aea:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <IMU_Kalman+0x248>)
 8002aec:	edc3 7a01 	vstr	s15, [r3, #4]
	P[1][0] -= dt*P[1][1];
 8002af0:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <IMU_Kalman+0x248>)
 8002af2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <IMU_Kalman+0x248>)
 8002af8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <IMU_Kalman+0x248>)
 8002b0a:	edc3 7a02 	vstr	s15, [r3, #8]
	P[1][1] += Q_bias*dt;
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <IMU_Kalman+0x248>)
 8002b10:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b14:	edd7 6a08 	vldr	s13, [r7, #32]
 8002b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	4b52      	ldr	r3, [pc, #328]	; (8002c70 <IMU_Kalman+0x248>)
 8002b26:	edc3 7a03 	vstr	s15, [r3, #12]

	S = P[0][0] + R_measure;
 8002b2a:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <IMU_Kalman+0x248>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b38:	edc7 7a05 	vstr	s15, [r7, #20]

	K[0] = P[0][0]/S;
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <IMU_Kalman+0x248>)
 8002b3e:	edd3 6a00 	vldr	s13, [r3]
 8002b42:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <IMU_Kalman+0x24c>)
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
	K[1] = P[1][0]/S;
 8002b50:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <IMU_Kalman+0x248>)
 8002b52:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b56:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b5e:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <IMU_Kalman+0x24c>)
 8002b60:	edc3 7a01 	vstr	s15, [r3, #4]

	y = newangle - angle;
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <IMU_Kalman+0x240>)
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	edc7 7a04 	vstr	s15, [r7, #16]
	kalman_test[1] = newangle;
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <IMU_Kalman+0x244>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6053      	str	r3, [r2, #4]
	kalman_test[2] = y;
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <IMU_Kalman+0x244>)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6093      	str	r3, [r2, #8]
	angle += K[0]*y;
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <IMU_Kalman+0x24c>)
 8002b84:	ed93 7a00 	vldr	s14, [r3]
 8002b88:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <IMU_Kalman+0x240>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9a:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <IMU_Kalman+0x240>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
	bias += K[1]*y;
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <IMU_Kalman+0x24c>)
 8002ba2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ba6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <IMU_Kalman+0x238>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <IMU_Kalman+0x238>)
 8002bba:	edc3 7a00 	vstr	s15, [r3]
//	bias = roundf(bias*10000.0f)/10000.0f;

	P[0][0] -= K[0]*P[0][0];
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <IMU_Kalman+0x248>)
 8002bc0:	ed93 7a00 	vldr	s14, [r3]
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <IMU_Kalman+0x24c>)
 8002bc6:	edd3 6a00 	vldr	s13, [r3]
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <IMU_Kalman+0x248>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <IMU_Kalman+0x248>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
	P[0][1] -= K[0]*P[0][1];
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <IMU_Kalman+0x248>)
 8002be0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <IMU_Kalman+0x24c>)
 8002be6:	edd3 6a00 	vldr	s13, [r3]
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <IMU_Kalman+0x248>)
 8002bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <IMU_Kalman+0x248>)
 8002bfa:	edc3 7a01 	vstr	s15, [r3, #4]
	P[1][0] -= K[1]*P[0][0];
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <IMU_Kalman+0x248>)
 8002c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <IMU_Kalman+0x24c>)
 8002c06:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <IMU_Kalman+0x248>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <IMU_Kalman+0x248>)
 8002c1a:	edc3 7a02 	vstr	s15, [r3, #8]
	P[1][1] -= K[1]*P[0][1];
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <IMU_Kalman+0x248>)
 8002c20:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <IMU_Kalman+0x24c>)
 8002c26:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <IMU_Kalman+0x248>)
 8002c2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <IMU_Kalman+0x248>)
 8002c3a:	edc3 7a03 	vstr	s15, [r3, #12]

	return angle;
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <IMU_Kalman+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	ee07 3a90 	vmov	s15, r3
}
 8002c46:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4a:	372c      	adds	r7, #44	; 0x2c
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	3a83126f 	.word	0x3a83126f
 8002c58:	3b449ba6 	.word	0x3b449ba6
 8002c5c:	3cf5c28f 	.word	0x3cf5c28f
 8002c60:	20000260 	.word	0x20000260
 8002c64:	2000027c 	.word	0x2000027c
 8002c68:	20000818 	.word	0x20000818
 8002c6c:	20000808 	.word	0x20000808
 8002c70:	20000264 	.word	0x20000264
 8002c74:	20000274 	.word	0x20000274

08002c78 <IMU9250_READ_DMA>:

void IMU9250_READ_DMA(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ST1, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[5], 1, 1000);
 8002c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c82:	9302      	str	r3, [sp, #8]
 8002c84:	2301      	movs	r3, #1
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <IMU9250_READ_DMA+0x90>)
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	2202      	movs	r2, #2
 8002c90:	2118      	movs	r1, #24
 8002c92:	481e      	ldr	r0, [pc, #120]	; (8002d0c <IMU9250_READ_DMA+0x94>)
 8002c94:	f001 fd68 	bl	8004768 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ST2, I2C_MEMADD_SIZE_8BIT, &RxBuffer9250[6], 1, 1000);
 8002c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <IMU9250_READ_DMA+0x98>)
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	2209      	movs	r2, #9
 8002caa:	2118      	movs	r1, #24
 8002cac:	4817      	ldr	r0, [pc, #92]	; (8002d0c <IMU9250_READ_DMA+0x94>)
 8002cae:	f001 fd5b 	bl	8004768 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[0], 6, 1000);
 8002cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	2306      	movs	r3, #6
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <IMU9250_READ_DMA+0x9c>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	223b      	movs	r2, #59	; 0x3b
 8002cc4:	21d0      	movs	r1, #208	; 0xd0
 8002cc6:	4811      	ldr	r0, [pc, #68]	; (8002d0c <IMU9250_READ_DMA+0x94>)
 8002cc8:	f001 fd4e 	bl	8004768 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[6], 6, 1000);
 8002ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd0:	9302      	str	r3, [sp, #8]
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <IMU9250_READ_DMA+0xa0>)
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2243      	movs	r2, #67	; 0x43
 8002cde:	21d0      	movs	r1, #208	; 0xd0
 8002ce0:	480a      	ldr	r0, [pc, #40]	; (8002d0c <IMU9250_READ_DMA+0x94>)
 8002ce2:	f001 fd41 	bl	8004768 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_XOUT_L, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[12], 6, 1000);
 8002ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	2306      	movs	r3, #6
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <IMU9250_READ_DMA+0xa4>)
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	2118      	movs	r1, #24
 8002cfa:	4804      	ldr	r0, [pc, #16]	; (8002d0c <IMU9250_READ_DMA+0x94>)
 8002cfc:	f001 fd34 	bl	8004768 <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, AK8963_ST1, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250ST, 1, 1);
//	if (DataBuffer9250ST & 0x01){
//		HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
//		HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer9250[12], 6, 1);
//	}
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000501 	.word	0x20000501
 8002d0c:	200002b4 	.word	0x200002b4
 8002d10:	20000502 	.word	0x20000502
 8002d14:	2000056c 	.word	0x2000056c
 8002d18:	20000572 	.word	0x20000572
 8002d1c:	20000578 	.word	0x20000578

08002d20 <Control_Motor>:
 *		 x1: motor left
 *		 1: tien
 *		 0: lui
 *
*/
void Control_Motor(int16_t duty_r,int16_t duty_l, uint8_t dir_motor){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	80fb      	strh	r3, [r7, #6]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	80bb      	strh	r3, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	70fb      	strb	r3, [r7, #3]
	mt_test[0] = duty_r;
 8002d32:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <Control_Motor+0xe0>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	8013      	strh	r3, [r2, #0]
	mt_test[1] = duty_l;
 8002d38:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <Control_Motor+0xe0>)
 8002d3a:	88bb      	ldrh	r3, [r7, #4]
 8002d3c:	8053      	strh	r3, [r2, #2]

	mt_test[2] = dir_motor;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	b21a      	sxth	r2, r3
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <Control_Motor+0xe0>)
 8002d44:	809a      	strh	r2, [r3, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_r);
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <Control_Motor+0xe4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
	if((duty_r == 0) & (duty_l == 0)){
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <Control_Motor+0x4a>
		HAL_GPIO_WritePin(GPIOD, LED_BLU_Pin, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d62:	4829      	ldr	r0, [pc, #164]	; (8002e08 <Control_Motor+0xe8>)
 8002d64:	f001 fa9a 	bl	800429c <HAL_GPIO_WritePin>
 8002d68:	e005      	b.n	8002d76 <Control_Motor+0x56>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, LED_BLU_Pin, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d70:	4825      	ldr	r0, [pc, #148]	; (8002e08 <Control_Motor+0xe8>)
 8002d72:	f001 fa93 	bl	800429c <HAL_GPIO_WritePin>
	}

	if(dir_motor&1){
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00c      	beq.n	8002d9a <Control_Motor+0x7a>
//		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
//		tien
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_SET);
 8002d80:	2201      	movs	r2, #1
 8002d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d86:	4820      	ldr	r0, [pc, #128]	; (8002e08 <Control_Motor+0xe8>)
 8002d88:	f001 fa88 	bl	800429c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d92:	481d      	ldr	r0, [pc, #116]	; (8002e08 <Control_Motor+0xe8>)
 8002d94:	f001 fa82 	bl	800429c <HAL_GPIO_WritePin>
 8002d98:	e00b      	b.n	8002db2 <Control_Motor+0x92>
	}
	else{
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_RESET);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002da0:	4819      	ldr	r0, [pc, #100]	; (8002e08 <Control_Motor+0xe8>)
 8002da2:	f001 fa7b 	bl	800429c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_SET);
 8002da6:	2201      	movs	r2, #1
 8002da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dac:	4816      	ldr	r0, [pc, #88]	; (8002e08 <Control_Motor+0xe8>)
 8002dae:	f001 fa75 	bl	800429c <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_l);
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <Control_Motor+0xe4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
	if(dir_motor&2){
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <Control_Motor+0xc0>
//		tien
//		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_SET);
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dcc:	480e      	ldr	r0, [pc, #56]	; (8002e08 <Control_Motor+0xe8>)
 8002dce:	f001 fa65 	bl	800429c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_RESET);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <Control_Motor+0xe8>)
 8002dda:	f001 fa5f 	bl	800429c <HAL_GPIO_WritePin>
	else{
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_SET);
	}
}
 8002dde:	e00b      	b.n	8002df8 <Control_Motor+0xd8>
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de6:	4808      	ldr	r0, [pc, #32]	; (8002e08 <Control_Motor+0xe8>)
 8002de8:	f001 fa58 	bl	800429c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_SET);
 8002dec:	2201      	movs	r2, #1
 8002dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <Control_Motor+0xe8>)
 8002df4:	f001 fa52 	bl	800429c <HAL_GPIO_WritePin>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000548 	.word	0x20000548
 8002e04:	200006a8 	.word	0x200006a8
 8002e08:	40020c00 	.word	0x40020c00

08002e0c <Get_Velocity>:
 * GPIO: PB7 -> ENC-L1
 * 		 PB6 -> ENC-L2
 * 		 PA5 -> ENC-R1
 * 		 PB3 -> ENC-R2
*/
volatile int16_t * Get_Velocity(){
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
	if (mt_onetime==1){
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <Get_Velocity+0xd4>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10b      	bne.n	8002e32 <Get_Velocity+0x26>
		TIM4->CNT=5000;
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <Get_Velocity+0xd8>)
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT=5000;
 8002e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
		mt_onetime=0;
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <Get_Velocity+0xd4>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
	}
//	volatile float enc[2];
	enc[0]= (TIM2->CNT)-5000;
 8002e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002e3e:	3b08      	subs	r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <Get_Velocity+0xdc>)
 8002e46:	801a      	strh	r2, [r3, #0]
//	if ((TIM2->CNT)>=5000) enc[1]=-1;
//	else enc[1]=1;

	enc[1]= (TIM4->CNT)-5000;
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <Get_Velocity+0xd8>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002e52:	3b08      	subs	r3, #8
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <Get_Velocity+0xdc>)
 8002e5a:	805a      	strh	r2, [r3, #2]
//	else enc[3]=-1;

	TIM4->CNT=5000;
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <Get_Velocity+0xd8>)
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=5000;
 8002e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
	int i;
  	for (int i=0;i<2; i++){
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e02a      	b.n	8002eca <Get_Velocity+0xbe>
		if (enc[i]>=0){
 8002e74:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <Get_Velocity+0xdc>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0c      	blt.n	8002e9c <Get_Velocity+0x90>
			enc[2]=enc[2]|(i+1);
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <Get_Velocity+0xdc>)
 8002e84:	889b      	ldrh	r3, [r3, #4]
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	4313      	orrs	r3, r2
 8002e94:	b21a      	sxth	r2, r3
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <Get_Velocity+0xdc>)
 8002e98:	809a      	strh	r2, [r3, #4]
 8002e9a:	e013      	b.n	8002ec4 <Get_Velocity+0xb8>
		}
		else if (enc[i]<0){
 8002e9c:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <Get_Velocity+0xdc>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0c      	bge.n	8002ec4 <Get_Velocity+0xb8>
			enc[2]=enc[2]&(2-i);
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <Get_Velocity+0xdc>)
 8002eac:	889b      	ldrh	r3, [r3, #4]
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f1c3 0302 	rsb	r3, r3, #2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <Get_Velocity+0xdc>)
 8002ec2:	809a      	strh	r2, [r3, #4]
  	for (int i=0;i<2; i++){
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	ddd1      	ble.n	8002e74 <Get_Velocity+0x68>
		}
  	}

	return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000004 	.word	0x20000004
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	20000464 	.word	0x20000464

08002eec <PID_Calculate>:
 * PID_in is array 2 value (target L, target R)
 * PID_current is array 2 value (velo L, velo R)
 * return *PID_out is velo of 2 motors Left and Right

*/
float * PID_Calculate(float *_PID_in, int PID_dir, volatile int16_t *_PID_current){
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
//	dir_=3;
	PID_out[2]=(float)dir_;
*/


  	for (int i=0;i<2; i++){
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e2dc      	b.n	80034b8 <PID_Calculate+0x5cc>

  		if (!(PID_dir&(i+1))) PID_in[i]=*(_PID_in+i)*(-1);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d110      	bne.n	8002f2c <PID_Calculate+0x40>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	eef1 7a67 	vneg.f32	s15, s15
 8002f1a:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <PID_Calculate+0x3c>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	edc3 7a00 	vstr	s15, [r3]
 8002f26:	e00b      	b.n	8002f40 <PID_Calculate+0x54>
 8002f28:	200005a8 	.word	0x200005a8
  		else 				 PID_in[i]=*(_PID_in+i);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	49b4      	ldr	r1, [pc, #720]	; (8003208 <PID_Calculate+0x31c>)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  		PID_Test[i+2]=PID_in[i];
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3302      	adds	r3, #2
 8002f44:	49b0      	ldr	r1, [pc, #704]	; (8003208 <PID_Calculate+0x31c>)
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	440a      	add	r2, r1
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	49af      	ldr	r1, [pc, #700]	; (800320c <PID_Calculate+0x320>)
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	601a      	str	r2, [r3, #0]

  		PID_in[i]*=updateVel;
 8002f56:	4aac      	ldr	r2, [pc, #688]	; (8003208 <PID_Calculate+0x31c>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8003210 <PID_Calculate+0x324>
 8002f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f6a:	4aa7      	ldr	r2, [pc, #668]	; (8003208 <PID_Calculate+0x31c>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	edc3 7a00 	vstr	s15, [r3]

  		PID_current[i] = *(_PID_current+i);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	4aa2      	ldr	r2, [pc, #648]	; (8003214 <PID_Calculate+0x328>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	edc3 7a00 	vstr	s15, [r3]

  		if(fabs(PID_in[i])>10.0f){ // > 10
 8002f96:	4a9c      	ldr	r2, [pc, #624]	; (8003208 <PID_Calculate+0x31c>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	eef0 7ae7 	vabs.f32	s15, s15
 8002fa6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	dd1d      	ble.n	8002ff0 <PID_Calculate+0x104>
  			PID_Kp[i]=_PID_Kp[i];
 8002fb4:	4a98      	ldr	r2, [pc, #608]	; (8003218 <PID_Calculate+0x32c>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4997      	ldr	r1, [pc, #604]	; (800321c <PID_Calculate+0x330>)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i];
 8002fc8:	4a95      	ldr	r2, [pc, #596]	; (8003220 <PID_Calculate+0x334>)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4994      	ldr	r1, [pc, #592]	; (8003224 <PID_Calculate+0x338>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i];
 8002fdc:	4a92      	ldr	r2, [pc, #584]	; (8003228 <PID_Calculate+0x33c>)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4991      	ldr	r1, [pc, #580]	; (800322c <PID_Calculate+0x340>)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=10.0f){ // 10 - 7
 8002ff0:	4a85      	ldr	r2, [pc, #532]	; (8003208 <PID_Calculate+0x31c>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	eef0 7ae7 	vabs.f32	s15, s15
 8003000:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d820      	bhi.n	8003050 <PID_Calculate+0x164>
  			PID_Kp[i]=_PID_Kp[i+2];
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3302      	adds	r3, #2
 8003012:	4a81      	ldr	r2, [pc, #516]	; (8003218 <PID_Calculate+0x32c>)
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4980      	ldr	r1, [pc, #512]	; (800321c <PID_Calculate+0x330>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+2];
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3302      	adds	r3, #2
 8003028:	4a7d      	ldr	r2, [pc, #500]	; (8003220 <PID_Calculate+0x334>)
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	497c      	ldr	r1, [pc, #496]	; (8003224 <PID_Calculate+0x338>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+2];
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3302      	adds	r3, #2
 800303e:	4a7a      	ldr	r2, [pc, #488]	; (8003228 <PID_Calculate+0x33c>)
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4979      	ldr	r1, [pc, #484]	; (800322c <PID_Calculate+0x340>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=7.0f){ // 7 - 4.5
 8003050:	4a6d      	ldr	r2, [pc, #436]	; (8003208 <PID_Calculate+0x31c>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	eef0 7ae7 	vabs.f32	s15, s15
 8003060:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	d820      	bhi.n	80030b0 <PID_Calculate+0x1c4>
  			PID_Kp[i]=_PID_Kp[i+4];
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3304      	adds	r3, #4
 8003072:	4a69      	ldr	r2, [pc, #420]	; (8003218 <PID_Calculate+0x32c>)
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4968      	ldr	r1, [pc, #416]	; (800321c <PID_Calculate+0x330>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+4];
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3304      	adds	r3, #4
 8003088:	4a65      	ldr	r2, [pc, #404]	; (8003220 <PID_Calculate+0x334>)
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4964      	ldr	r1, [pc, #400]	; (8003224 <PID_Calculate+0x338>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+4];
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3304      	adds	r3, #4
 800309e:	4a62      	ldr	r2, [pc, #392]	; (8003228 <PID_Calculate+0x33c>)
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4961      	ldr	r1, [pc, #388]	; (800322c <PID_Calculate+0x340>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=4.5f){ // 4.5 - 2
 80030b0:	4a55      	ldr	r2, [pc, #340]	; (8003208 <PID_Calculate+0x31c>)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	eef0 7ae7 	vabs.f32	s15, s15
 80030c0:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80030c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d820      	bhi.n	8003110 <PID_Calculate+0x224>
  			PID_Kp[i]=_PID_Kp[i+6];
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3306      	adds	r3, #6
 80030d2:	4a51      	ldr	r2, [pc, #324]	; (8003218 <PID_Calculate+0x32c>)
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4950      	ldr	r1, [pc, #320]	; (800321c <PID_Calculate+0x330>)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+6];
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3306      	adds	r3, #6
 80030e8:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <PID_Calculate+0x334>)
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	494c      	ldr	r1, [pc, #304]	; (8003224 <PID_Calculate+0x338>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+6];
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3306      	adds	r3, #6
 80030fe:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <PID_Calculate+0x33c>)
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4949      	ldr	r1, [pc, #292]	; (800322c <PID_Calculate+0x340>)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])<=2.0f){ // 0 - 2.0
 8003110:	4a3d      	ldr	r2, [pc, #244]	; (8003208 <PID_Calculate+0x31c>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	eef0 7ae7 	vabs.f32	s15, s15
 8003120:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	d820      	bhi.n	8003170 <PID_Calculate+0x284>
  			PID_Kp[i]=_PID_Kp[i+8];
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3308      	adds	r3, #8
 8003132:	4a39      	ldr	r2, [pc, #228]	; (8003218 <PID_Calculate+0x32c>)
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4938      	ldr	r1, [pc, #224]	; (800321c <PID_Calculate+0x330>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=_PID_Ki[i+8];
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3308      	adds	r3, #8
 8003148:	4a35      	ldr	r2, [pc, #212]	; (8003220 <PID_Calculate+0x334>)
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4934      	ldr	r1, [pc, #208]	; (8003224 <PID_Calculate+0x338>)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=_PID_Kd[i+8];
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3308      	adds	r3, #8
 800315e:	4a32      	ldr	r2, [pc, #200]	; (8003228 <PID_Calculate+0x33c>)
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4931      	ldr	r1, [pc, #196]	; (800322c <PID_Calculate+0x340>)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	601a      	str	r2, [r3, #0]
  		}
  		if (fabs(PID_in[i])>20.0f){ // 0 - 2.0
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <PID_Calculate+0x31c>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	eef0 7ae7 	vabs.f32	s15, s15
 8003180:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	dd14      	ble.n	80031b8 <PID_Calculate+0x2cc>
  			PID_Kp[i]=0.0;
 800318e:	4a23      	ldr	r2, [pc, #140]	; (800321c <PID_Calculate+0x330>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
  			PID_Ki[i]=0.0;
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <PID_Calculate+0x338>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
  			PID_Kd[i]=0.0;
 80031aa:	4a20      	ldr	r2, [pc, #128]	; (800322c <PID_Calculate+0x340>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  		}

//  		if(((PID_in_pre[i]==0) & (!PID_in[i]==0)) | (PID_in_pre[i]*PID_in[i] <= 0)){
  		if(PID_in_pre[i]*PID_in[i] <= 0){
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <PID_Calculate+0x344>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	ed93 7a00 	vldr	s14, [r3]
 80031c4:	4a10      	ldr	r2, [pc, #64]	; (8003208 <PID_Calculate+0x31c>)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d832      	bhi.n	8003244 <PID_Calculate+0x358>
  			PID_out[i]=265*PID_in[i]/fabs(PID_in[i]);
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <PID_Calculate+0x31c>)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003234 <PID_Calculate+0x348>
 80031ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80031f2:	4a05      	ldr	r2, [pc, #20]	; (8003208 <PID_Calculate+0x31c>)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eeb0 7ae7 	vabs.f32	s14, s15
 8003202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003206:	e017      	b.n	8003238 <PID_Calculate+0x34c>
 8003208:	200005a8 	.word	0x200005a8
 800320c:	200003dc 	.word	0x200003dc
 8003210:	41fea3d7 	.word	0x41fea3d7
 8003214:	200005e0 	.word	0x200005e0
 8003218:	20000010 	.word	0x20000010
 800321c:	20000528 	.word	0x20000528
 8003220:	20000038 	.word	0x20000038
 8003224:	20000380 	.word	0x20000380
 8003228:	20000284 	.word	0x20000284
 800322c:	20000450 	.word	0x20000450
 8003230:	20000618 	.word	0x20000618
 8003234:	43848000 	.word	0x43848000
 8003238:	4aa9      	ldr	r2, [pc, #676]	; (80034e0 <PID_Calculate+0x5f4>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	edc3 7a00 	vstr	s15, [r3]
  		}

  		PID_in_pre[i] = PID_in[i];
 8003244:	4aa7      	ldr	r2, [pc, #668]	; (80034e4 <PID_Calculate+0x5f8>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	49a6      	ldr	r1, [pc, #664]	; (80034e8 <PID_Calculate+0x5fc>)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	601a      	str	r2, [r3, #0]


//		PID_Test[i] = PID_current[i];
//		PID_Test[i+2]=PID_in[i];

		E0[i] = (PID_in[i]-PID_current[i]);
 8003258:	4aa2      	ldr	r2, [pc, #648]	; (80034e4 <PID_Calculate+0x5f8>)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	4aa1      	ldr	r2, [pc, #644]	; (80034ec <PID_Calculate+0x600>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003274:	4a9e      	ldr	r2, [pc, #632]	; (80034f0 <PID_Calculate+0x604>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	edc3 7a00 	vstr	s15, [r3]

		A0[i] = PID_Kp[i] + PID_Ki[i]/400.0F + PID_Kd[i]*200.0F;
 8003280:	4a9c      	ldr	r2, [pc, #624]	; (80034f4 <PID_Calculate+0x608>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	ed93 7a00 	vldr	s14, [r3]
 800328c:	4a9a      	ldr	r2, [pc, #616]	; (80034f8 <PID_Calculate+0x60c>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	edd3 6a00 	vldr	s13, [r3]
 8003298:	ed9f 6a98 	vldr	s12, [pc, #608]	; 80034fc <PID_Calculate+0x610>
 800329c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a4:	4a96      	ldr	r2, [pc, #600]	; (8003500 <PID_Calculate+0x614>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003504 <PID_Calculate+0x618>
 80032b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032bc:	4a92      	ldr	r2, [pc, #584]	; (8003508 <PID_Calculate+0x61c>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	edc3 7a00 	vstr	s15, [r3]
		A1[i] = -PID_Kp[i] + PID_Ki[i]/400.0F - 400.0F*PID_Kd[i];
 80032c8:	4a8b      	ldr	r2, [pc, #556]	; (80034f8 <PID_Calculate+0x60c>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	eddf 6a89 	vldr	s13, [pc, #548]	; 80034fc <PID_Calculate+0x610>
 80032d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032dc:	4a85      	ldr	r2, [pc, #532]	; (80034f4 <PID_Calculate+0x608>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ec:	4a84      	ldr	r2, [pc, #528]	; (8003500 <PID_Calculate+0x614>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eddf 6a80 	vldr	s13, [pc, #512]	; 80034fc <PID_Calculate+0x610>
 80032fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003304:	4a81      	ldr	r2, [pc, #516]	; (800350c <PID_Calculate+0x620>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	edc3 7a00 	vstr	s15, [r3]
		A2[i] = PID_Kd[i]*200.0F;
 8003310:	4a7b      	ldr	r2, [pc, #492]	; (8003500 <PID_Calculate+0x614>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003504 <PID_Calculate+0x618>
 8003320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003324:	4a7a      	ldr	r2, [pc, #488]	; (8003510 <PID_Calculate+0x624>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	edc3 7a00 	vstr	s15, [r3]
		PID_out[i] += A0[i]*E0[i] + A1[i]*E1[i] + A2[i]*E2[i];
 8003330:	4a6b      	ldr	r2, [pc, #428]	; (80034e0 <PID_Calculate+0x5f4>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	4a72      	ldr	r2, [pc, #456]	; (8003508 <PID_Calculate+0x61c>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	edd3 6a00 	vldr	s13, [r3]
 8003348:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <PID_Calculate+0x604>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003358:	4a6c      	ldr	r2, [pc, #432]	; (800350c <PID_Calculate+0x620>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	ed93 6a00 	vldr	s12, [r3]
 8003364:	4a6b      	ldr	r2, [pc, #428]	; (8003514 <PID_Calculate+0x628>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	edd3 7a00 	vldr	s15, [r3]
 8003370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003374:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003378:	4a65      	ldr	r2, [pc, #404]	; (8003510 <PID_Calculate+0x624>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	ed93 6a00 	vldr	s12, [r3]
 8003384:	4a64      	ldr	r2, [pc, #400]	; (8003518 <PID_Calculate+0x62c>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <PID_Calculate+0x5f4>)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	edc3 7a00 	vstr	s15, [r3]

		E2[i] = E1[i];
 80033a8:	4a5a      	ldr	r2, [pc, #360]	; (8003514 <PID_Calculate+0x628>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4959      	ldr	r1, [pc, #356]	; (8003518 <PID_Calculate+0x62c>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	601a      	str	r2, [r3, #0]
		E1[i] = E0[i];
 80033bc:	4a4c      	ldr	r2, [pc, #304]	; (80034f0 <PID_Calculate+0x604>)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4953      	ldr	r1, [pc, #332]	; (8003514 <PID_Calculate+0x628>)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	601a      	str	r2, [r3, #0]

//		PID_Test[i+6]=PID_out[i];

		if (PID_out[i]>PID_out_max){
 80033d0:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <PID_Calculate+0x5f4>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	ed93 7a00 	vldr	s14, [r3]
 80033dc:	4b4f      	ldr	r3, [pc, #316]	; (800351c <PID_Calculate+0x630>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	dd07      	ble.n	80033fc <PID_Calculate+0x510>
			PID_out[i]=PID_out_max;
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <PID_Calculate+0x630>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	493b      	ldr	r1, [pc, #236]	; (80034e0 <PID_Calculate+0x5f4>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e014      	b.n	8003426 <PID_Calculate+0x53a>
		}
		else if (PID_out[i]<PID_out_min){
 80033fc:	4a38      	ldr	r2, [pc, #224]	; (80034e0 <PID_Calculate+0x5f4>)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	ed93 7a00 	vldr	s14, [r3]
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <PID_Calculate+0x634>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003416:	d506      	bpl.n	8003426 <PID_Calculate+0x53a>
			PID_out[i]=PID_out_min;
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <PID_Calculate+0x634>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4930      	ldr	r1, [pc, #192]	; (80034e0 <PID_Calculate+0x5f4>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	601a      	str	r2, [r3, #0]
		}

		if (PID_out[i]>=0){
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <PID_Calculate+0x5f4>)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	db07      	blt.n	800344c <PID_Calculate+0x560>
			dir_=dir_|(i+1);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	4b38      	ldr	r3, [pc, #224]	; (8003524 <PID_Calculate+0x638>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	4a37      	ldr	r2, [pc, #220]	; (8003524 <PID_Calculate+0x638>)
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e012      	b.n	8003472 <PID_Calculate+0x586>
		}
		else if (PID_out[i]<0)
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <PID_Calculate+0x5f4>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	d507      	bpl.n	8003472 <PID_Calculate+0x586>
			dir_=dir_&(2-i);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f1c3 0202 	rsb	r2, r3, #2
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <PID_Calculate+0x638>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4013      	ands	r3, r2
 800346e:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <PID_Calculate+0x638>)
 8003470:	6013      	str	r3, [r2, #0]


		PID_out_[i]=fabs(PID_out[i]);
 8003472:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <PID_Calculate+0x5f4>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	eef0 7ae7 	vabs.f32	s15, s15
 8003482:	4a29      	ldr	r2, [pc, #164]	; (8003528 <PID_Calculate+0x63c>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	edc3 7a00 	vstr	s15, [r3]
		if (PID_in[i]==0){
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <PID_Calculate+0x5f8>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a2:	d106      	bne.n	80034b2 <PID_Calculate+0x5c6>
			PID_out[i]=0;
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <PID_Calculate+0x5f4>)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
  	for (int i=0;i<2; i++){
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f77f ad1f 	ble.w	8002efe <PID_Calculate+0x12>
		}
	}
  	PID_out_[2]=(float)dir_;
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <PID_Calculate+0x638>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <PID_Calculate+0x63c>)
 80034ce:	edc3 7a02 	vstr	s15, [r3, #8]


//	PID_Test[5] += PID_out[0];
	return PID_out_;
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <PID_Calculate+0x63c>)
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	200004a4 	.word	0x200004a4
 80034e4:	200005a8 	.word	0x200005a8
 80034e8:	20000618 	.word	0x20000618
 80034ec:	200005e0 	.word	0x200005e0
 80034f0:	200003d4 	.word	0x200003d4
 80034f4:	20000528 	.word	0x20000528
 80034f8:	20000380 	.word	0x20000380
 80034fc:	43c80000 	.word	0x43c80000
 8003500:	20000450 	.word	0x20000450
 8003504:	43480000 	.word	0x43480000
 8003508:	20000420 	.word	0x20000420
 800350c:	20000620 	.word	0x20000620
 8003510:	20000538 	.word	0x20000538
 8003514:	20000510 	.word	0x20000510
 8003518:	2000046c 	.word	0x2000046c
 800351c:	20000008 	.word	0x20000008
 8003520:	2000000c 	.word	0x2000000c
 8003524:	20000280 	.word	0x20000280
 8003528:	200004b4 	.word	0x200004b4

0800352c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_Init+0x40>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_Init+0x40>)
 8003536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_Init+0x40>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <HAL_Init+0x40>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_Init+0x40>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_Init+0x40>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003554:	2003      	movs	r0, #3
 8003556:	f000 f94d 	bl	80037f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800355a:	2000      	movs	r0, #0
 800355c:	f000 f808 	bl	8003570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003560:	f7fd ffda 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023c00 	.word	0x40023c00

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x54>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_InitTick+0x58>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003586:	fbb3 f3f1 	udiv	r3, r3, r1
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f965 	bl	800385e <HAL_SYSTICK_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00e      	b.n	80035bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d80a      	bhi.n	80035ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a4:	2200      	movs	r2, #0
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ac:	f000 f92d 	bl	800380a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <HAL_InitTick+0x5c>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000000 	.word	0x20000000
 80035c8:	20000064 	.word	0x20000064
 80035cc:	20000060 	.word	0x20000060

080035d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x20>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x24>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_IncTick+0x24>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000064 	.word	0x20000064
 80035f4:	2000081c 	.word	0x2000081c

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000081c 	.word	0x2000081c

08003610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff ffee 	bl	80035f8 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d005      	beq.n	8003636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_Delay+0x40>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003636:	bf00      	nop
 8003638:	f7ff ffde 	bl	80035f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d8f7      	bhi.n	8003638 <HAL_Delay+0x28>
  {
  }
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000064 	.word	0x20000064

08003654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800367c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60d3      	str	r3, [r2, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <__NVIC_GetPriorityGrouping+0x18>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 0307 	and.w	r3, r3, #7
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	db0b      	blt.n	80036e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	4907      	ldr	r1, [pc, #28]	; (80036f0 <__NVIC_EnableIRQ+0x38>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2001      	movs	r0, #1
 80036da:	fa00 f202 	lsl.w	r2, r0, r2
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db0a      	blt.n	800371e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	490c      	ldr	r1, [pc, #48]	; (8003740 <__NVIC_SetPriority+0x4c>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	440b      	add	r3, r1
 8003718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800371c:	e00a      	b.n	8003734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <__NVIC_SetPriority+0x50>)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3b04      	subs	r3, #4
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440b      	add	r3, r1
 8003732:	761a      	strb	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f1c3 0307 	rsb	r3, r3, #7
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf28      	it	cs
 8003766:	2304      	movcs	r3, #4
 8003768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3304      	adds	r3, #4
 800376e:	2b06      	cmp	r3, #6
 8003770:	d902      	bls.n	8003778 <NVIC_EncodePriority+0x30>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3b03      	subs	r3, #3
 8003776:	e000      	b.n	800377a <NVIC_EncodePriority+0x32>
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	401a      	ands	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43d9      	mvns	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	4313      	orrs	r3, r2
         );
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c0:	d301      	bcc.n	80037c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00f      	b.n	80037e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <SysTick_Config+0x40>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ce:	210f      	movs	r1, #15
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d4:	f7ff ff8e 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <SysTick_Config+0x40>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <SysTick_Config+0x40>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	e000e010 	.word	0xe000e010

080037f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff29 	bl	8003654 <__NVIC_SetPriorityGrouping>
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	4603      	mov	r3, r0
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800381c:	f7ff ff3e 	bl	800369c <__NVIC_GetPriorityGrouping>
 8003820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7ff ff8e 	bl	8003748 <NVIC_EncodePriority>
 800382c:	4602      	mov	r2, r0
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff5d 	bl	80036f4 <__NVIC_SetPriority>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff31 	bl	80036b8 <__NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ffa2 	bl	80037b0 <SysTick_Config>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7ff feb8 	bl	80035f8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e099      	b.n	80039c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b4:	e00f      	b.n	80038d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b6:	f7ff fe9f 	bl	80035f8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d908      	bls.n	80038d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e078      	b.n	80039c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e8      	bne.n	80038b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_DMA_Init+0x158>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b04      	cmp	r3, #4
 800392e:	d107      	bne.n	8003940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4313      	orrs	r3, r2
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0307 	bic.w	r3, r3, #7
 8003956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b04      	cmp	r3, #4
 8003968:	d117      	bne.n	800399a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fa91 	bl	8003ea4 <DMA_CheckFifoParam>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003996:	2301      	movs	r3, #1
 8003998:	e016      	b.n	80039c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa48 	bl	8003e38 <DMA_CalcBaseAndBitshift>
 80039a8:	4603      	mov	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	223f      	movs	r2, #63	; 0x3f
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	f010803f 	.word	0xf010803f

080039d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_DMA_Start_IT+0x26>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e040      	b.n	8003a7c <HAL_DMA_Start_IT+0xa8>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d12f      	bne.n	8003a6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f9da 	bl	8003ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	223f      	movs	r2, #63	; 0x3f
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0216 	orr.w	r2, r2, #22
 8003a42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e005      	b.n	8003a7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
 8003a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d004      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00c      	b.n	8003abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ad4:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_DMA_IRQHandler+0x258>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a92      	ldr	r2, [pc, #584]	; (8003d24 <HAL_DMA_IRQHandler+0x25c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	2208      	movs	r2, #8
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0204 	bic.w	r2, r2, #4
 8003b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2208      	movs	r2, #8
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d043      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d024      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
 8003bf6:	e01f      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01b      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e016      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0208 	bic.w	r2, r2, #8
 8003c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 808e 	beq.w	8003d66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8086 	beq.w	8003d66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2220      	movs	r2, #32
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d136      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0216 	bic.w	r2, r2, #22
 8003c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x1da>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0208 	bic.w	r2, r2, #8
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	223f      	movs	r2, #63	; 0x3f
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d07d      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
        }
        return;
 8003cde:	e078      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01c      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d030      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e02b      	b.n	8003d66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d027      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e022      	b.n	8003d66 <HAL_DMA_IRQHandler+0x29e>
 8003d20:	20000000 	.word	0x20000000
 8003d24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0210 	bic.w	r2, r2, #16
 8003d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d032      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d022      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d307      	bcc.n	8003dae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f2      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x2ca>
 8003dac:	e000      	b.n	8003db0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
 8003dd0:	e000      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003dd2:	bf00      	nop
    }
  }
}
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop

08003ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d108      	bne.n	8003e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e1a:	e007      	b.n	8003e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3b10      	subs	r3, #16
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <DMA_CalcBaseAndBitshift+0x64>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d909      	bls.n	8003e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	1d1a      	adds	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	659a      	str	r2, [r3, #88]	; 0x58
 8003e78:	e007      	b.n	8003e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ea0:	0800ba58 	.word	0x0800ba58

08003ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11f      	bne.n	8003efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d855      	bhi.n	8003f70 <DMA_CheckFifoParam+0xcc>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <DMA_CheckFifoParam+0x28>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003eef 	.word	0x08003eef
 8003ed4:	08003edd 	.word	0x08003edd
 8003ed8:	08003f71 	.word	0x08003f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d045      	beq.n	8003f74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e042      	b.n	8003f74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef6:	d13f      	bne.n	8003f78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efc:	e03c      	b.n	8003f78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f06:	d121      	bne.n	8003f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d836      	bhi.n	8003f7c <DMA_CheckFifoParam+0xd8>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <DMA_CheckFifoParam+0x70>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f2b 	.word	0x08003f2b
 8003f1c:	08003f25 	.word	0x08003f25
 8003f20:	08003f3d 	.word	0x08003f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	e02f      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d024      	beq.n	8003f80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3a:	e021      	b.n	8003f80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f44:	d11e      	bne.n	8003f84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f4a:	e01b      	b.n	8003f84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <DMA_CheckFifoParam+0xb4>
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d003      	beq.n	8003f5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f56:	e018      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e015      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00e      	beq.n	8003f88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6e:	e00b      	b.n	8003f88 <DMA_CheckFifoParam+0xe4>
      break;
 8003f70:	bf00      	nop
 8003f72:	e00a      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;
 8003f74:	bf00      	nop
 8003f76:	e008      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e006      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;
 8003f7c:	bf00      	nop
 8003f7e:	e004      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;   
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;
 8003f88:	bf00      	nop
    }
  } 
  
  return status; 
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e159      	b.n	8004268 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	f040 8148 	bne.w	8004262 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_GPIO_Init+0x5a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d007      	beq.n	8003ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe6:	2b11      	cmp	r3, #17
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b12      	cmp	r3, #18
 8003ff0:	d130      	bne.n	8004054 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004028:	2201      	movs	r2, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 0201 	and.w	r2, r3, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0xfc>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b12      	cmp	r3, #18
 8004092:	d123      	bne.n	80040dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	08da      	lsrs	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3208      	adds	r2, #8
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	220f      	movs	r2, #15
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	08da      	lsrs	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3208      	adds	r2, #8
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2203      	movs	r2, #3
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0203 	and.w	r2, r3, #3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a2 	beq.w	8004262 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b56      	ldr	r3, [pc, #344]	; (800427c <HAL_GPIO_Init+0x2e4>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a55      	ldr	r2, [pc, #340]	; (800427c <HAL_GPIO_Init+0x2e4>)
 8004128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_GPIO_Init+0x2e4>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800413a:	4a51      	ldr	r2, [pc, #324]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a48      	ldr	r2, [pc, #288]	; (8004284 <HAL_GPIO_Init+0x2ec>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d019      	beq.n	800419a <HAL_GPIO_Init+0x202>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a47      	ldr	r2, [pc, #284]	; (8004288 <HAL_GPIO_Init+0x2f0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x1fe>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a46      	ldr	r2, [pc, #280]	; (800428c <HAL_GPIO_Init+0x2f4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00d      	beq.n	8004192 <HAL_GPIO_Init+0x1fa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a45      	ldr	r2, [pc, #276]	; (8004290 <HAL_GPIO_Init+0x2f8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <HAL_GPIO_Init+0x1f6>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a44      	ldr	r2, [pc, #272]	; (8004294 <HAL_GPIO_Init+0x2fc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_GPIO_Init+0x1f2>
 8004186:	2304      	movs	r3, #4
 8004188:	e008      	b.n	800419c <HAL_GPIO_Init+0x204>
 800418a:	2307      	movs	r3, #7
 800418c:	e006      	b.n	800419c <HAL_GPIO_Init+0x204>
 800418e:	2303      	movs	r3, #3
 8004190:	e004      	b.n	800419c <HAL_GPIO_Init+0x204>
 8004192:	2302      	movs	r3, #2
 8004194:	e002      	b.n	800419c <HAL_GPIO_Init+0x204>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_GPIO_Init+0x204>
 800419a:	2300      	movs	r3, #0
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	f002 0203 	and.w	r2, r2, #3
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	4093      	lsls	r3, r2
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041ac:	4934      	ldr	r1, [pc, #208]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	3302      	adds	r3, #2
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ba:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_GPIO_Init+0x300>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041de:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <HAL_GPIO_Init+0x300>)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041e4:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <HAL_GPIO_Init+0x300>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004208:	4a23      	ldr	r2, [pc, #140]	; (8004298 <HAL_GPIO_Init+0x300>)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <HAL_GPIO_Init+0x300>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800425c:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <HAL_GPIO_Init+0x300>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3301      	adds	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	f67f aea2 	bls.w	8003fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004270:	bf00      	nop
 8004272:	3724      	adds	r7, #36	; 0x24
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40023800 	.word	0x40023800
 8004280:	40013800 	.word	0x40013800
 8004284:	40020000 	.word	0x40020000
 8004288:	40020400 	.word	0x40020400
 800428c:	40020800 	.word	0x40020800
 8004290:	40020c00 	.word	0x40020c00
 8004294:	40021000 	.word	0x40021000
 8004298:	40013c00 	.word	0x40013c00

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
 80042a8:	4613      	mov	r3, r2
 80042aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042b8:	e003      	b.n	80042c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ba:	887b      	ldrh	r3, [r7, #2]
 80042bc:	041a      	lsls	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	619a      	str	r2, [r3, #24]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	401a      	ands	r2, r3
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d104      	bne.n	80042f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	041a      	lsls	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80042f0:	e002      	b.n	80042f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e11f      	b.n	8004556 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc febc 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004368:	f001 fbba 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 800436c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a7b      	ldr	r2, [pc, #492]	; (8004560 <HAL_I2C_Init+0x25c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d807      	bhi.n	8004388 <HAL_I2C_Init+0x84>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a7a      	ldr	r2, [pc, #488]	; (8004564 <HAL_I2C_Init+0x260>)
 800437c:	4293      	cmp	r3, r2
 800437e:	bf94      	ite	ls
 8004380:	2301      	movls	r3, #1
 8004382:	2300      	movhi	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e006      	b.n	8004396 <HAL_I2C_Init+0x92>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_I2C_Init+0x264>)
 800438c:	4293      	cmp	r3, r2
 800438e:	bf94      	ite	ls
 8004390:	2301      	movls	r3, #1
 8004392:	2300      	movhi	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0db      	b.n	8004556 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a72      	ldr	r2, [pc, #456]	; (800456c <HAL_I2C_Init+0x268>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	0c9b      	lsrs	r3, r3, #18
 80043a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4a64      	ldr	r2, [pc, #400]	; (8004560 <HAL_I2C_Init+0x25c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d802      	bhi.n	80043d8 <HAL_I2C_Init+0xd4>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	3301      	adds	r3, #1
 80043d6:	e009      	b.n	80043ec <HAL_I2C_Init+0xe8>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	4a63      	ldr	r2, [pc, #396]	; (8004570 <HAL_I2C_Init+0x26c>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	3301      	adds	r3, #1
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4956      	ldr	r1, [pc, #344]	; (8004560 <HAL_I2C_Init+0x25c>)
 8004408:	428b      	cmp	r3, r1
 800440a:	d80d      	bhi.n	8004428 <HAL_I2C_Init+0x124>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e59      	subs	r1, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	fbb1 f3f3 	udiv	r3, r1, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b04      	cmp	r3, #4
 8004422:	bf38      	it	cc
 8004424:	2304      	movcc	r3, #4
 8004426:	e04f      	b.n	80044c8 <HAL_I2C_Init+0x1c4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d111      	bne.n	8004454 <HAL_I2C_Init+0x150>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e58      	subs	r0, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e012      	b.n	800447a <HAL_I2C_Init+0x176>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e58      	subs	r0, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	0099      	lsls	r1, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Init+0x17e>
 800447e:	2301      	movs	r3, #1
 8004480:	e022      	b.n	80044c8 <HAL_I2C_Init+0x1c4>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10e      	bne.n	80044a8 <HAL_I2C_Init+0x1a4>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1e58      	subs	r0, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	440b      	add	r3, r1
 8004498:	fbb0 f3f3 	udiv	r3, r0, r3
 800449c:	3301      	adds	r3, #1
 800449e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a6:	e00f      	b.n	80044c8 <HAL_I2C_Init+0x1c4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1e58      	subs	r0, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	0099      	lsls	r1, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	6809      	ldr	r1, [r1, #0]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6911      	ldr	r1, [r2, #16]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	430b      	orrs	r3, r1
 800450a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	000186a0 	.word	0x000186a0
 8004564:	001e847f 	.word	0x001e847f
 8004568:	003d08ff 	.word	0x003d08ff
 800456c:	431bde83 	.word	0x431bde83
 8004570:	10624dd3 	.word	0x10624dd3

08004574 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800458e:	f7ff f833 	bl	80035f8 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 80d9 	bne.w	8004754 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2319      	movs	r3, #25
 80045a8:	2201      	movs	r2, #1
 80045aa:	496d      	ldr	r1, [pc, #436]	; (8004760 <HAL_I2C_Mem_Write+0x1ec>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fc7f 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
 80045ba:	e0cc      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Mem_Write+0x56>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0c5      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d007      	beq.n	80045f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2221      	movs	r2, #33	; 0x21
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a4d      	ldr	r2, [pc, #308]	; (8004764 <HAL_I2C_Mem_Write+0x1f0>)
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004632:	88f8      	ldrh	r0, [r7, #6]
 8004634:	893a      	ldrh	r2, [r7, #8]
 8004636:	8979      	ldrh	r1, [r7, #10]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fab6 	bl	8004bb4 <I2C_RequestMemoryWrite>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d052      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e081      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fd00 	bl	800505c <I2C_WaitOnTXEFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b04      	cmp	r3, #4
 8004668:	d107      	bne.n	800467a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004678:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06b      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d11b      	bne.n	80046f4 <HAL_I2C_Mem_Write+0x180>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1aa      	bne.n	8004652 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fcec 	bl	80050de <I2C_WaitOnBTFFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b04      	cmp	r3, #4
 8004712:	d107      	bne.n	8004724 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e016      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	00100002 	.word	0x00100002
 8004764:	ffff0000 	.word	0xffff0000

08004768 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	460b      	mov	r3, r1
 800477c:	813b      	strh	r3, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004782:	f7fe ff39 	bl	80035f8 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	f040 8208 	bne.w	8004ba6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2319      	movs	r3, #25
 800479c:	2201      	movs	r2, #1
 800479e:	497b      	ldr	r1, [pc, #492]	; (800498c <HAL_I2C_Mem_Read+0x224>)
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb85 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
 80047ae:	e1fb      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_I2C_Mem_Read+0x56>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e1f4      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d007      	beq.n	80047e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a5b      	ldr	r2, [pc, #364]	; (8004990 <HAL_I2C_Mem_Read+0x228>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004826:	88f8      	ldrh	r0, [r7, #6]
 8004828:	893a      	ldrh	r2, [r7, #8]
 800482a:	8979      	ldrh	r1, [r7, #10]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4603      	mov	r3, r0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa52 	bl	8004ce0 <I2C_RequestMemoryRead>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1b0      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d113      	bne.n	8004876 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e184      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	2b01      	cmp	r3, #1
 800487c:	d11b      	bne.n	80048b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e164      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d11b      	bne.n	80048f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	e144      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800490c:	e138      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	2b03      	cmp	r3, #3
 8004914:	f200 80f1 	bhi.w	8004afa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b01      	cmp	r3, #1
 800491e:	d123      	bne.n	8004968 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fc1b 	bl	8005160 <I2C_WaitOnRXNEFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e139      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004966:	e10b      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	2b02      	cmp	r3, #2
 800496e:	d14e      	bne.n	8004a0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	2200      	movs	r2, #0
 8004978:	4906      	ldr	r1, [pc, #24]	; (8004994 <HAL_I2C_Mem_Read+0x22c>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa98 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e10e      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
 800498a:	bf00      	nop
 800498c:	00100002 	.word	0x00100002
 8004990:	ffff0000 	.word	0xffff0000
 8004994:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0c:	e0b8      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	4966      	ldr	r1, [pc, #408]	; (8004bb0 <HAL_I2C_Mem_Read+0x448>)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fa49 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0bf      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	494f      	ldr	r1, [pc, #316]	; (8004bb0 <HAL_I2C_Mem_Read+0x448>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fa1b 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e091      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af8:	e042      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fb2e 	bl	8005160 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e04c      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d118      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f aec2 	bne.w	800490e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	00010004 	.word	0x00010004

08004bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f960 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c04:	d103      	bne.n	8004c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e05f      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	492d      	ldr	r1, [pc, #180]	; (8004cdc <I2C_RequestMemoryWrite+0x128>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f998 	bl	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e04c      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fa02 	bl	800505c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d107      	bne.n	8004c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02b      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e021      	b.n	8004cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f9dc 	bl	800505c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e005      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc6:	893b      	ldrh	r3, [r7, #8]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	00010002 	.word	0x00010002

08004ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	817b      	strh	r3, [r7, #10]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	813b      	strh	r3, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f8c2 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d103      	bne.n	8004d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0aa      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	4952      	ldr	r1, [pc, #328]	; (8004eac <I2C_RequestMemoryRead+0x1cc>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f8fa 	bl	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e097      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f964 	bl	800505c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e076      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	611a      	str	r2, [r3, #16]
 8004dc6:	e021      	b.n	8004e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f93e 	bl	800505c <I2C_WaitOnTXEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d107      	bne.n	8004dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e050      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e02:	893b      	ldrh	r3, [r7, #8]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0e:	6a39      	ldr	r1, [r7, #32]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f923 	bl	800505c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d107      	bne.n	8004e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e035      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f82b 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6e:	d103      	bne.n	8004e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e013      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e7c:	897b      	ldrh	r3, [r7, #10]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	6a3a      	ldr	r2, [r7, #32]
 8004e90:	4906      	ldr	r1, [pc, #24]	; (8004eac <I2C_RequestMemoryRead+0x1cc>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f863 	bl	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010002 	.word	0x00010002

08004eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec0:	e025      	b.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec8:	d021      	beq.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fe fb95 	bl	80035f8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d116      	bne.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e023      	b.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10d      	bne.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	e00c      	b.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d0b6      	beq.n	8004ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f6c:	e051      	b.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7c:	d123      	bne.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f043 0204 	orr.w	r2, r3, #4
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e046      	b.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fcc:	d021      	beq.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fe fb13 	bl	80035f8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d116      	bne.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0220 	orr.w	r2, r3, #32
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e020      	b.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d10c      	bne.n	8005036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf14      	ite	ne
 800502e:	2301      	movne	r3, #1
 8005030:	2300      	moveq	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	e00b      	b.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	43da      	mvns	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf14      	ite	ne
 8005048:	2301      	movne	r3, #1
 800504a:	2300      	moveq	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d18d      	bne.n	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005068:	e02d      	b.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f8ce 	bl	800520c <I2C_IsAcknowledgeFailed>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e02d      	b.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005080:	d021      	beq.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005082:	f7fe fab9 	bl	80035f8 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d302      	bcc.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d116      	bne.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e007      	b.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b80      	cmp	r3, #128	; 0x80
 80050d2:	d1ca      	bne.n	800506a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ea:	e02d      	b.n	8005148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f88d 	bl	800520c <I2C_IsAcknowledgeFailed>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e02d      	b.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005102:	d021      	beq.n	8005148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005104:	f7fe fa78 	bl	80035f8 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	d302      	bcc.n	800511a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e007      	b.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d1ca      	bne.n	80050ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800516c:	e042      	b.n	80051f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d119      	bne.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e029      	b.n	8005204 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b0:	f7fe fa22 	bl	80035f8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e007      	b.n	8005204 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d1b5      	bne.n	800516e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005222:	d11b      	bne.n	800525c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800522c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f043 0204 	orr.w	r2, r3, #4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e25b      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d075      	beq.n	8005376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528a:	4ba3      	ldr	r3, [pc, #652]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b04      	cmp	r3, #4
 8005294:	d00c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005296:	4ba0      	ldr	r3, [pc, #640]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d112      	bne.n	80052c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a2:	4b9d      	ldr	r3, [pc, #628]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ae:	d10b      	bne.n	80052c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	4b99      	ldr	r3, [pc, #612]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05b      	beq.n	8005374 <HAL_RCC_OscConfig+0x108>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d157      	bne.n	8005374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e236      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCC_OscConfig+0x74>
 80052d2:	4b91      	ldr	r3, [pc, #580]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a90      	ldr	r2, [pc, #576]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e01d      	b.n	800531c <HAL_RCC_OscConfig+0xb0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x98>
 80052ea:	4b8b      	ldr	r3, [pc, #556]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a8a      	ldr	r2, [pc, #552]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b88      	ldr	r3, [pc, #544]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a87      	ldr	r2, [pc, #540]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0xb0>
 8005304:	4b84      	ldr	r3, [pc, #528]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a83      	ldr	r2, [pc, #524]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b81      	ldr	r3, [pc, #516]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a80      	ldr	r2, [pc, #512]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fe f968 	bl	80035f8 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532c:	f7fe f964 	bl	80035f8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1fb      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b76      	ldr	r3, [pc, #472]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0xc0>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fe f954 	bl	80035f8 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005354:	f7fe f950 	bl	80035f8 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1e7      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	4b6c      	ldr	r3, [pc, #432]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0xe8>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d063      	beq.n	800544a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005382:	4b65      	ldr	r3, [pc, #404]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538e:	4b62      	ldr	r3, [pc, #392]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539a:	4b5f      	ldr	r3, [pc, #380]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	4b5c      	ldr	r3, [pc, #368]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCC_OscConfig+0x152>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e1bb      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b56      	ldr	r3, [pc, #344]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4952      	ldr	r1, [pc, #328]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	e03a      	b.n	800544a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	4b4f      	ldr	r3, [pc, #316]	; (800551c <HAL_RCC_OscConfig+0x2b0>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fe f909 	bl	80035f8 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fe f905 	bl	80035f8 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e19c      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fc:	4b46      	ldr	r3, [pc, #280]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b43      	ldr	r3, [pc, #268]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4940      	ldr	r1, [pc, #256]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541e:	4b3f      	ldr	r3, [pc, #252]	; (800551c <HAL_RCC_OscConfig+0x2b0>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fe f8e8 	bl	80035f8 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542c:	f7fe f8e4 	bl	80035f8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e17b      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543e:	4b36      	ldr	r3, [pc, #216]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d030      	beq.n	80054b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545e:	4b30      	ldr	r3, [pc, #192]	; (8005520 <HAL_RCC_OscConfig+0x2b4>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fe f8c8 	bl	80035f8 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546c:	f7fe f8c4 	bl	80035f8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e15b      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547e:	4b26      	ldr	r3, [pc, #152]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x200>
 800548a:	e015      	b.n	80054b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_OscConfig+0x2b4>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005492:	f7fe f8b1 	bl	80035f8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549a:	f7fe f8ad 	bl	80035f8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e144      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ac:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80054ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80a0 	beq.w	8005606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	4a0e      	ldr	r2, [pc, #56]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e4:	6413      	str	r3, [r2, #64]	; 0x40
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f2:	2301      	movs	r3, #1
 80054f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_OscConfig+0x2b8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d121      	bne.n	8005546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_RCC_OscConfig+0x2b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a07      	ldr	r2, [pc, #28]	; (8005524 <HAL_RCC_OscConfig+0x2b8>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550e:	f7fe f873 	bl	80035f8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	e011      	b.n	800553a <HAL_RCC_OscConfig+0x2ce>
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	42470000 	.word	0x42470000
 8005520:	42470e80 	.word	0x42470e80
 8005524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005528:	f7fe f866 	bl	80035f8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0fd      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553a:	4b81      	ldr	r3, [pc, #516]	; (8005740 <HAL_RCC_OscConfig+0x4d4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d106      	bne.n	800555c <HAL_RCC_OscConfig+0x2f0>
 800554e:	4b7d      	ldr	r3, [pc, #500]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a7c      	ldr	r2, [pc, #496]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
 800555a:	e01c      	b.n	8005596 <HAL_RCC_OscConfig+0x32a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b05      	cmp	r3, #5
 8005562:	d10c      	bne.n	800557e <HAL_RCC_OscConfig+0x312>
 8005564:	4b77      	ldr	r3, [pc, #476]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	4a76      	ldr	r2, [pc, #472]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800556a:	f043 0304 	orr.w	r3, r3, #4
 800556e:	6713      	str	r3, [r2, #112]	; 0x70
 8005570:	4b74      	ldr	r3, [pc, #464]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	4a73      	ldr	r2, [pc, #460]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	6713      	str	r3, [r2, #112]	; 0x70
 800557c:	e00b      	b.n	8005596 <HAL_RCC_OscConfig+0x32a>
 800557e:	4b71      	ldr	r3, [pc, #452]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a70      	ldr	r2, [pc, #448]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
 800558a:	4b6e      	ldr	r3, [pc, #440]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a6d      	ldr	r2, [pc, #436]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005590:	f023 0304 	bic.w	r3, r3, #4
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d015      	beq.n	80055ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559e:	f7fe f82b 	bl	80035f8 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a4:	e00a      	b.n	80055bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a6:	f7fe f827 	bl	80035f8 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e0bc      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	4b61      	ldr	r3, [pc, #388]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0ee      	beq.n	80055a6 <HAL_RCC_OscConfig+0x33a>
 80055c8:	e014      	b.n	80055f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ca:	f7fe f815 	bl	80035f8 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fe f811 	bl	80035f8 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0a6      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e8:	4b56      	ldr	r3, [pc, #344]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ee      	bne.n	80055d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d105      	bne.n	8005606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055fa:	4b52      	ldr	r3, [pc, #328]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4a51      	ldr	r2, [pc, #324]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8092 	beq.w	8005734 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005610:	4b4c      	ldr	r3, [pc, #304]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b08      	cmp	r3, #8
 800561a:	d05c      	beq.n	80056d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d141      	bne.n	80056a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005624:	4b48      	ldr	r3, [pc, #288]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562a:	f7fd ffe5 	bl	80035f8 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005632:	f7fd ffe1 	bl	80035f8 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e078      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005644:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	019b      	lsls	r3, r3, #6
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	3b01      	subs	r3, #1
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	061b      	lsls	r3, r3, #24
 8005674:	4933      	ldr	r1, [pc, #204]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800567a:	4b33      	ldr	r3, [pc, #204]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 800567c:	2201      	movs	r2, #1
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fd ffba 	bl	80035f8 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005688:	f7fd ffb6 	bl	80035f8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e04d      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569a:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0x41c>
 80056a6:	e045      	b.n	8005734 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fd ffa3 	bl	80035f8 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b6:	f7fd ff9f 	bl	80035f8 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e036      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c8:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x44a>
 80056d4:	e02e      	b.n	8005734 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e029      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d11c      	bne.n	8005730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d115      	bne.n	8005730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800570a:	4013      	ands	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	d10d      	bne.n	8005730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800571e:	429a      	cmp	r2, r3
 8005720:	d106      	bne.n	8005730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40007000 	.word	0x40007000
 8005744:	40023800 	.word	0x40023800
 8005748:	42470060 	.word	0x42470060

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cc      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b68      	ldr	r3, [pc, #416]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d90c      	bls.n	8005788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b65      	ldr	r3, [pc, #404]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a58      	ldr	r2, [pc, #352]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a52      	ldr	r2, [pc, #328]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d044      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d119      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d003      	beq.n	800580a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	2b03      	cmp	r3, #3
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e06f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e067      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b37      	ldr	r3, [pc, #220]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4934      	ldr	r1, [pc, #208]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fd fedc 	bl	80035f8 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fd fed8 	bl	80035f8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e04f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d20c      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4601      	mov	r1, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	5cd3      	ldrb	r3, [r2, r3]
 80058e6:	fa21 f303 	lsr.w	r3, r1, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd fe3c 	bl	8003570 <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023c00 	.word	0x40023c00
 8005908:	40023800 	.word	0x40023800
 800590c:	0800ba40 	.word	0x0800ba40
 8005910:	20000000 	.word	0x20000000
 8005914:	20000060 	.word	0x20000060

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	2300      	movs	r3, #0
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800592e:	4b63      	ldr	r3, [pc, #396]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b04      	cmp	r3, #4
 8005938:	d007      	beq.n	800594a <HAL_RCC_GetSysClockFreq+0x32>
 800593a:	2b08      	cmp	r3, #8
 800593c:	d008      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x38>
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 80b4 	bne.w	8005aac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005944:	4b5e      	ldr	r3, [pc, #376]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005946:	60bb      	str	r3, [r7, #8]
       break;
 8005948:	e0b3      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800594a:	4b5e      	ldr	r3, [pc, #376]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800594c:	60bb      	str	r3, [r7, #8]
      break;
 800594e:	e0b0      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005950:	4b5a      	ldr	r3, [pc, #360]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005958:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800595a:	4b58      	ldr	r3, [pc, #352]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d04a      	beq.n	80059fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005966:	4b55      	ldr	r3, [pc, #340]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	099b      	lsrs	r3, r3, #6
 800596c:	f04f 0400 	mov.w	r4, #0
 8005970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	ea03 0501 	and.w	r5, r3, r1
 800597c:	ea04 0602 	and.w	r6, r4, r2
 8005980:	4629      	mov	r1, r5
 8005982:	4632      	mov	r2, r6
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	0154      	lsls	r4, r2, #5
 800598e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005992:	014b      	lsls	r3, r1, #5
 8005994:	4619      	mov	r1, r3
 8005996:	4622      	mov	r2, r4
 8005998:	1b49      	subs	r1, r1, r5
 800599a:	eb62 0206 	sbc.w	r2, r2, r6
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	f04f 0400 	mov.w	r4, #0
 80059a6:	0194      	lsls	r4, r2, #6
 80059a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059ac:	018b      	lsls	r3, r1, #6
 80059ae:	1a5b      	subs	r3, r3, r1
 80059b0:	eb64 0402 	sbc.w	r4, r4, r2
 80059b4:	f04f 0100 	mov.w	r1, #0
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	00e2      	lsls	r2, r4, #3
 80059be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059c2:	00d9      	lsls	r1, r3, #3
 80059c4:	460b      	mov	r3, r1
 80059c6:	4614      	mov	r4, r2
 80059c8:	195b      	adds	r3, r3, r5
 80059ca:	eb44 0406 	adc.w	r4, r4, r6
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	0262      	lsls	r2, r4, #9
 80059d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80059dc:	0259      	lsls	r1, r3, #9
 80059de:	460b      	mov	r3, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	4621      	mov	r1, r4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	461a      	mov	r2, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	f7fb f8de 	bl	8000bb0 <__aeabi_uldivmod>
 80059f4:	4603      	mov	r3, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e049      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fc:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	f04f 0400 	mov.w	r4, #0
 8005a06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	ea03 0501 	and.w	r5, r3, r1
 8005a12:	ea04 0602 	and.w	r6, r4, r2
 8005a16:	4629      	mov	r1, r5
 8005a18:	4632      	mov	r2, r6
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	0154      	lsls	r4, r2, #5
 8005a24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a28:	014b      	lsls	r3, r1, #5
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	1b49      	subs	r1, r1, r5
 8005a30:	eb62 0206 	sbc.w	r2, r2, r6
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	0194      	lsls	r4, r2, #6
 8005a3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a42:	018b      	lsls	r3, r1, #6
 8005a44:	1a5b      	subs	r3, r3, r1
 8005a46:	eb64 0402 	sbc.w	r4, r4, r2
 8005a4a:	f04f 0100 	mov.w	r1, #0
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	00e2      	lsls	r2, r4, #3
 8005a54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a58:	00d9      	lsls	r1, r3, #3
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	195b      	adds	r3, r3, r5
 8005a60:	eb44 0406 	adc.w	r4, r4, r6
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	02a2      	lsls	r2, r4, #10
 8005a6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a72:	0299      	lsls	r1, r3, #10
 8005a74:	460b      	mov	r3, r1
 8005a76:	4614      	mov	r4, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f04f 0400 	mov.w	r4, #0
 8005a82:	461a      	mov	r2, r3
 8005a84:	4623      	mov	r3, r4
 8005a86:	f7fb f893 	bl	8000bb0 <__aeabi_uldivmod>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	60bb      	str	r3, [r7, #8]
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005aae:	60bb      	str	r3, [r7, #8]
      break;
 8005ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	007a1200 	.word	0x007a1200

08005ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000000 	.word	0x20000000

08005ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ae4:	f7ff fff0 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005ae8:	4601      	mov	r1, r0
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0a9b      	lsrs	r3, r3, #10
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4a03      	ldr	r2, [pc, #12]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	0800ba50 	.word	0x0800ba50

08005b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b0c:	f7ff ffdc 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005b10:	4601      	mov	r1, r0
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	0b5b      	lsrs	r3, r3, #13
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	0800ba50 	.word	0x0800ba50

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e01d      	b.n	8005b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb ff92 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fc0c 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d007      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e01d      	b.n	8005c1c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f815 	bl	8005c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 fbbd 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2201      	movs	r2, #1
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fe44 	bl	80068d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <HAL_TIM_PWM_Start+0x60>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d107      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d007      	beq.n	8005c8c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000

08005c9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e083      	b.n	8005db8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7fb ff3f 	bl	8001b48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 fb4b 	bl	800638c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d3c:	f023 030c 	bic.w	r3, r3, #12
 8005d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	011a      	lsls	r2, r3, #4
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	031b      	lsls	r3, r3, #12
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_TIM_Encoder_Start+0x16>
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d008      	beq.n	8005de6 <HAL_TIM_Encoder_Start+0x26>
 8005dd4:	e00f      	b.n	8005df6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fd7a 	bl	80068d8 <TIM_CCxChannelCmd>
      break;
 8005de4:	e016      	b.n	8005e14 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2201      	movs	r2, #1
 8005dec:	2104      	movs	r1, #4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fd72 	bl	80068d8 <TIM_CCxChannelCmd>
      break;
 8005df4:	e00e      	b.n	8005e14 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fd6a 	bl	80068d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2104      	movs	r1, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fd63 	bl	80068d8 <TIM_CCxChannelCmd>
      break;
 8005e12:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d122      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d11b      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0202 	mvn.w	r2, #2
 8005e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa6c 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005e76:	e005      	b.n	8005e84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fa5e 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa6f 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d122      	bne.n	8005ede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d11b      	bne.n	8005ede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f06f 0204 	mvn.w	r2, #4
 8005eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa42 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005eca:	e005      	b.n	8005ed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fa34 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa45 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d122      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d11b      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f06f 0208 	mvn.w	r2, #8
 8005f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2204      	movs	r2, #4
 8005f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa18 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005f1e:	e005      	b.n	8005f2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fa0a 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa1b 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d122      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d11b      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0210 	mvn.w	r2, #16
 8005f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f9ee 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005f72:	e005      	b.n	8005f80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f9e0 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f9f1 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10e      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d107      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0201 	mvn.w	r2, #1
 8005faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fb f9af 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d10e      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d107      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fd6d 	bl	8006ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d10e      	bne.n	800600a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9b6 	bl	8006376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b20      	cmp	r3, #32
 8006016:	d10e      	bne.n	8006036 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f06f 0220 	mvn.w	r2, #32
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fd37 	bl	8006aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006056:	2302      	movs	r3, #2
 8006058:	e0b4      	b.n	80061c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	f200 809f 	bhi.w	80061b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080061b1 	.word	0x080061b1
 8006080:	080061b1 	.word	0x080061b1
 8006084:	080061b1 	.word	0x080061b1
 8006088:	080060ed 	.word	0x080060ed
 800608c:	080061b1 	.word	0x080061b1
 8006090:	080061b1 	.word	0x080061b1
 8006094:	080061b1 	.word	0x080061b1
 8006098:	0800612f 	.word	0x0800612f
 800609c:	080061b1 	.word	0x080061b1
 80060a0:	080061b1 	.word	0x080061b1
 80060a4:	080061b1 	.word	0x080061b1
 80060a8:	0800616f 	.word	0x0800616f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f9ea 	bl	800648c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	619a      	str	r2, [r3, #24]
      break;
 80060ea:	e062      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa30 	bl	8006558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	619a      	str	r2, [r3, #24]
      break;
 800612c:	e041      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fa7b 	bl	8006630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0208 	orr.w	r2, r2, #8
 8006148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0204 	bic.w	r2, r2, #4
 8006158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	61da      	str	r2, [r3, #28]
      break;
 800616c:	e021      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fac5 	bl	8006704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	021a      	lsls	r2, r3, #8
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	61da      	str	r2, [r3, #28]
      break;
 80061ae:	e000      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80061b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIM_ConfigClockSource+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e0a6      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x166>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800620a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d067      	beq.n	80062ec <HAL_TIM_ConfigClockSource+0x120>
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d80b      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x6c>
 8006220:	2b10      	cmp	r3, #16
 8006222:	d073      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x140>
 8006224:	2b10      	cmp	r3, #16
 8006226:	d802      	bhi.n	800622e <HAL_TIM_ConfigClockSource+0x62>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d06f      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800622c:	e078      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800622e:	2b20      	cmp	r3, #32
 8006230:	d06c      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x140>
 8006232:	2b30      	cmp	r3, #48	; 0x30
 8006234:	d06a      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006236:	e073      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006238:	2b70      	cmp	r3, #112	; 0x70
 800623a:	d00d      	beq.n	8006258 <HAL_TIM_ConfigClockSource+0x8c>
 800623c:	2b70      	cmp	r3, #112	; 0x70
 800623e:	d804      	bhi.n	800624a <HAL_TIM_ConfigClockSource+0x7e>
 8006240:	2b50      	cmp	r3, #80	; 0x50
 8006242:	d033      	beq.n	80062ac <HAL_TIM_ConfigClockSource+0xe0>
 8006244:	2b60      	cmp	r3, #96	; 0x60
 8006246:	d041      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006248:	e06a      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d066      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x152>
 8006250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006254:	d017      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006256:	e063      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6899      	ldr	r1, [r3, #8]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f000 fb16 	bl	8006898 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800627a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
      break;
 8006284:	e04c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6899      	ldr	r1, [r3, #8]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f000 faff 	bl	8006898 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a8:	609a      	str	r2, [r3, #8]
      break;
 80062aa:	e039      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6859      	ldr	r1, [r3, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	461a      	mov	r2, r3
 80062ba:	f000 fa73 	bl	80067a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2150      	movs	r1, #80	; 0x50
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 facc 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 80062ca:	e029      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	461a      	mov	r2, r3
 80062da:	f000 fa92 	bl	8006802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2160      	movs	r1, #96	; 0x60
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fabc 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 80062ea:	e019      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6859      	ldr	r1, [r3, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	461a      	mov	r2, r3
 80062fa:	f000 fa53 	bl	80067a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2140      	movs	r1, #64	; 0x40
 8006304:	4618      	mov	r0, r3
 8006306:	f000 faac 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 800630a:	e009      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 faa3 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 800631c:	e000      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800631e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a34      	ldr	r2, [pc, #208]	; (8006470 <TIM_Base_SetConfig+0xe4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00f      	beq.n	80063c4 <TIM_Base_SetConfig+0x38>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0x38>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a31      	ldr	r2, [pc, #196]	; (8006474 <TIM_Base_SetConfig+0xe8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a30      	ldr	r2, [pc, #192]	; (8006478 <TIM_Base_SetConfig+0xec>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2f      	ldr	r2, [pc, #188]	; (800647c <TIM_Base_SetConfig+0xf0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a25      	ldr	r2, [pc, #148]	; (8006470 <TIM_Base_SetConfig+0xe4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01b      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d017      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <TIM_Base_SetConfig+0xe8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a21      	ldr	r2, [pc, #132]	; (8006478 <TIM_Base_SetConfig+0xec>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00f      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a20      	ldr	r2, [pc, #128]	; (800647c <TIM_Base_SetConfig+0xf0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00b      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <TIM_Base_SetConfig+0xf4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d007      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <TIM_Base_SetConfig+0xf8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <TIM_Base_SetConfig+0xfc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d108      	bne.n	8006428 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <TIM_Base_SetConfig+0xe4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d103      	bne.n	800645c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	615a      	str	r2, [r3, #20]
}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400
 8006488:	40014800 	.word	0x40014800

0800648c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f023 0201 	bic.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0302 	bic.w	r3, r3, #2
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <TIM_OC1_SetConfig+0xc8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10c      	bne.n	8006502 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0308 	bic.w	r3, r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <TIM_OC1_SetConfig+0xc8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40010000 	.word	0x40010000

08006558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f023 0210 	bic.w	r2, r3, #16
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <TIM_OC2_SetConfig+0xd4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <TIM_OC2_SetConfig+0xd4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d113      	bne.n	8006604 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40010000 	.word	0x40010000

08006630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <TIM_OC3_SetConfig+0xd0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d10d      	bne.n	80066aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a14      	ldr	r2, [pc, #80]	; (8006700 <TIM_OC3_SetConfig+0xd0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d113      	bne.n	80066da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40010000 	.word	0x40010000

08006704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	031b      	lsls	r3, r3, #12
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a10      	ldr	r2, [pc, #64]	; (80067a0 <TIM_OC4_SetConfig+0x9c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d109      	bne.n	8006778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800676a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	019b      	lsls	r3, r3, #6
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40010000 	.word	0x40010000

080067a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 030a 	bic.w	r3, r3, #10
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f023 0210 	bic.w	r2, r3, #16
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800682c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	031b      	lsls	r3, r3, #12
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800683e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	f043 0307 	orr.w	r3, r3, #7
 8006884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	021a      	lsls	r2, r3, #8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4313      	orrs	r3, r2
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2201      	movs	r2, #1
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	401a      	ands	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	fa01 f303 	lsl.w	r3, r1, r3
 8006910:	431a      	orrs	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
	...

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e050      	b.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006988:	d013      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a16      	ldr	r2, [pc, #88]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a13      	ldr	r2, [pc, #76]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10c      	bne.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40014000 	.word	0x40014000

08006a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e03d      	b.n	8006a98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e03f      	b.n	8006b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fb f926 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2224      	movs	r2, #36	; 0x24
 8006afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fbb3 	bl	800727c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d166      	bne.n	8006c50 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_UART_Receive_DMA+0x26>
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e05f      	b.n	8006c52 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_UART_Receive_DMA+0x38>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e058      	b.n	8006c52 <HAL_UART_Receive_DMA+0xea>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2222      	movs	r2, #34	; 0x22
 8006bbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <HAL_UART_Receive_DMA+0xf4>)
 8006bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bce:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <HAL_UART_Receive_DMA+0xf8>)
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	4a23      	ldr	r2, [pc, #140]	; (8006c64 <HAL_UART_Receive_DMA+0xfc>)
 8006bd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	2200      	movs	r2, #0
 8006be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	f7fc feeb 	bl	80039d4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695a      	ldr	r2, [r3, #20]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08006ef5 	.word	0x08006ef5
 8006c60:	08006f5d 	.word	0x08006f5d
 8006c64:	08006f79 	.word	0x08006f79

08006c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_UART_IRQHandler+0x52>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa60 	bl	8007178 <UART_Receive_IT>
      return;
 8006cb8:	e0d1      	b.n	8006e5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80b0 	beq.w	8006e22 <HAL_UART_IRQHandler+0x1ba>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x70>
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80a5 	beq.w	8006e22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x90>
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <HAL_UART_IRQHandler+0xb0>
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d10:	f043 0202 	orr.w	r2, r3, #2
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <HAL_UART_IRQHandler+0xd0>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d30:	f043 0204 	orr.w	r2, r3, #4
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00f      	beq.n	8006d62 <HAL_UART_IRQHandler+0xfa>
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_UART_IRQHandler+0xee>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5a:	f043 0208 	orr.w	r2, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d078      	beq.n	8006e5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_UART_IRQHandler+0x11c>
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9fa 	bl	8007178 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	f003 0308 	and.w	r3, r3, #8
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <HAL_UART_IRQHandler+0x144>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d031      	beq.n	8006e10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f943 	bl	8007038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	d123      	bne.n	8006e08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695a      	ldr	r2, [r3, #20]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d013      	beq.n	8006e00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	4a21      	ldr	r2, [pc, #132]	; (8006e64 <HAL_UART_IRQHandler+0x1fc>)
 8006dde:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fc fe4d 	bl	8003a84 <HAL_DMA_Abort_IT>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d016      	beq.n	8006e1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfe:	e00e      	b.n	8006e1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f84f 	bl	8006ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	e00a      	b.n	8006e1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f84b 	bl	8006ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0e:	e006      	b.n	8006e1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f847 	bl	8006ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006e1c:	e01e      	b.n	8006e5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1e:	bf00      	nop
    return;
 8006e20:	e01c      	b.n	8006e5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_UART_IRQHandler+0x1d6>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f930 	bl	800709c <UART_Transmit_IT>
    return;
 8006e3c:	e00f      	b.n	8006e5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <HAL_UART_IRQHandler+0x1f6>
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f978 	bl	8007148 <UART_EndTransmit_IT>
    return;
 8006e58:	bf00      	nop
 8006e5a:	e000      	b.n	8006e5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8006e5c:	bf00      	nop
  }
}
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	08007075 	.word	0x08007075

08006e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b2db      	uxtb	r3, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11e      	bne.n	8006f4e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f24:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f44:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff ff94 	bl	8006e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff ff90 	bl	8006e90 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b21      	cmp	r3, #33	; 0x21
 8006faa:	d108      	bne.n	8006fbe <UART_DMAError+0x46>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fb8:	68b8      	ldr	r0, [r7, #8]
 8006fba:	f000 f827 	bl	800700c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	bf0c      	ite	eq
 8006fcc:	2301      	moveq	r3, #1
 8006fce:	2300      	movne	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b22      	cmp	r3, #34	; 0x22
 8006fde:	d108      	bne.n	8006ff2 <UART_DMAError+0x7a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006fec:	68b8      	ldr	r0, [r7, #8]
 8006fee:	f000 f823 	bl	8007038 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	f043 0210 	orr.w	r2, r3, #16
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	f7ff ff50 	bl	8006ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007022:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800704e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0201 	bic.w	r2, r2, #1
 800705e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff ff08 	bl	8006ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b21      	cmp	r3, #33	; 0x21
 80070ae:	d144      	bne.n	800713a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d11a      	bne.n	80070f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d105      	bne.n	80070e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]
 80070e2:	e00e      	b.n	8007102 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]
 80070ee:	e008      	b.n	8007102 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6211      	str	r1, [r2, #32]
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4619      	mov	r1, r3
 8007110:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10f      	bne.n	8007136 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007124:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007134:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fe7d 	bl	8006e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b22      	cmp	r3, #34	; 0x22
 800718a:	d171      	bne.n	8007270 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d123      	bne.n	80071de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10e      	bne.n	80071c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	1c9a      	adds	r2, r3, #2
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	629a      	str	r2, [r3, #40]	; 0x28
 80071c0:	e029      	b.n	8007216 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	629a      	str	r2, [r3, #40]	; 0x28
 80071dc:	e01b      	b.n	8007216 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6858      	ldr	r0, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	1c59      	adds	r1, r3, #1
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6291      	str	r1, [r2, #40]	; 0x28
 80071f6:	b2c2      	uxtb	r2, r0
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e00c      	b.n	8007216 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	1c58      	adds	r0, r3, #1
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	6288      	str	r0, [r1, #40]	; 0x28
 800720e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	4619      	mov	r1, r3
 8007224:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007226:	2b00      	cmp	r3, #0
 8007228:	d120      	bne.n	800726c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0220 	bic.w	r2, r2, #32
 8007238:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff fe0a 	bl	8006e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e002      	b.n	8007272 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e000      	b.n	8007272 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80072be:	f023 030c 	bic.w	r3, r3, #12
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6812      	ldr	r2, [r2, #0]
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	430b      	orrs	r3, r1
 80072ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ea:	f040 818b 	bne.w	8007604 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4ac1      	ldr	r2, [pc, #772]	; (80075f8 <UART_SetConfig+0x37c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d005      	beq.n	8007304 <UART_SetConfig+0x88>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4abf      	ldr	r2, [pc, #764]	; (80075fc <UART_SetConfig+0x380>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	f040 80bd 	bne.w	800747e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007304:	f7fe fc00 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 8007308:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	461d      	mov	r5, r3
 800730e:	f04f 0600 	mov.w	r6, #0
 8007312:	46a8      	mov	r8, r5
 8007314:	46b1      	mov	r9, r6
 8007316:	eb18 0308 	adds.w	r3, r8, r8
 800731a:	eb49 0409 	adc.w	r4, r9, r9
 800731e:	4698      	mov	r8, r3
 8007320:	46a1      	mov	r9, r4
 8007322:	eb18 0805 	adds.w	r8, r8, r5
 8007326:	eb49 0906 	adc.w	r9, r9, r6
 800732a:	f04f 0100 	mov.w	r1, #0
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007336:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800733a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800733e:	4688      	mov	r8, r1
 8007340:	4691      	mov	r9, r2
 8007342:	eb18 0005 	adds.w	r0, r8, r5
 8007346:	eb49 0106 	adc.w	r1, r9, r6
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	461d      	mov	r5, r3
 8007350:	f04f 0600 	mov.w	r6, #0
 8007354:	196b      	adds	r3, r5, r5
 8007356:	eb46 0406 	adc.w	r4, r6, r6
 800735a:	461a      	mov	r2, r3
 800735c:	4623      	mov	r3, r4
 800735e:	f7f9 fc27 	bl	8000bb0 <__aeabi_uldivmod>
 8007362:	4603      	mov	r3, r0
 8007364:	460c      	mov	r4, r1
 8007366:	461a      	mov	r2, r3
 8007368:	4ba5      	ldr	r3, [pc, #660]	; (8007600 <UART_SetConfig+0x384>)
 800736a:	fba3 2302 	umull	r2, r3, r3, r2
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	461d      	mov	r5, r3
 8007378:	f04f 0600 	mov.w	r6, #0
 800737c:	46a9      	mov	r9, r5
 800737e:	46b2      	mov	sl, r6
 8007380:	eb19 0309 	adds.w	r3, r9, r9
 8007384:	eb4a 040a 	adc.w	r4, sl, sl
 8007388:	4699      	mov	r9, r3
 800738a:	46a2      	mov	sl, r4
 800738c:	eb19 0905 	adds.w	r9, r9, r5
 8007390:	eb4a 0a06 	adc.w	sl, sl, r6
 8007394:	f04f 0100 	mov.w	r1, #0
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073a8:	4689      	mov	r9, r1
 80073aa:	4692      	mov	sl, r2
 80073ac:	eb19 0005 	adds.w	r0, r9, r5
 80073b0:	eb4a 0106 	adc.w	r1, sl, r6
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	461d      	mov	r5, r3
 80073ba:	f04f 0600 	mov.w	r6, #0
 80073be:	196b      	adds	r3, r5, r5
 80073c0:	eb46 0406 	adc.w	r4, r6, r6
 80073c4:	461a      	mov	r2, r3
 80073c6:	4623      	mov	r3, r4
 80073c8:	f7f9 fbf2 	bl	8000bb0 <__aeabi_uldivmod>
 80073cc:	4603      	mov	r3, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	461a      	mov	r2, r3
 80073d2:	4b8b      	ldr	r3, [pc, #556]	; (8007600 <UART_SetConfig+0x384>)
 80073d4:	fba3 1302 	umull	r1, r3, r3, r2
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	2164      	movs	r1, #100	; 0x64
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	3332      	adds	r3, #50	; 0x32
 80073e6:	4a86      	ldr	r2, [pc, #536]	; (8007600 <UART_SetConfig+0x384>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073f4:	4498      	add	r8, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	461d      	mov	r5, r3
 80073fa:	f04f 0600 	mov.w	r6, #0
 80073fe:	46a9      	mov	r9, r5
 8007400:	46b2      	mov	sl, r6
 8007402:	eb19 0309 	adds.w	r3, r9, r9
 8007406:	eb4a 040a 	adc.w	r4, sl, sl
 800740a:	4699      	mov	r9, r3
 800740c:	46a2      	mov	sl, r4
 800740e:	eb19 0905 	adds.w	r9, r9, r5
 8007412:	eb4a 0a06 	adc.w	sl, sl, r6
 8007416:	f04f 0100 	mov.w	r1, #0
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800742a:	4689      	mov	r9, r1
 800742c:	4692      	mov	sl, r2
 800742e:	eb19 0005 	adds.w	r0, r9, r5
 8007432:	eb4a 0106 	adc.w	r1, sl, r6
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	461d      	mov	r5, r3
 800743c:	f04f 0600 	mov.w	r6, #0
 8007440:	196b      	adds	r3, r5, r5
 8007442:	eb46 0406 	adc.w	r4, r6, r6
 8007446:	461a      	mov	r2, r3
 8007448:	4623      	mov	r3, r4
 800744a:	f7f9 fbb1 	bl	8000bb0 <__aeabi_uldivmod>
 800744e:	4603      	mov	r3, r0
 8007450:	460c      	mov	r4, r1
 8007452:	461a      	mov	r2, r3
 8007454:	4b6a      	ldr	r3, [pc, #424]	; (8007600 <UART_SetConfig+0x384>)
 8007456:	fba3 1302 	umull	r1, r3, r3, r2
 800745a:	095b      	lsrs	r3, r3, #5
 800745c:	2164      	movs	r1, #100	; 0x64
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	3332      	adds	r3, #50	; 0x32
 8007468:	4a65      	ldr	r2, [pc, #404]	; (8007600 <UART_SetConfig+0x384>)
 800746a:	fba2 2303 	umull	r2, r3, r2, r3
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	f003 0207 	and.w	r2, r3, #7
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4442      	add	r2, r8
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	e26f      	b.n	800795e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800747e:	f7fe fb2f 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8007482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	461d      	mov	r5, r3
 8007488:	f04f 0600 	mov.w	r6, #0
 800748c:	46a8      	mov	r8, r5
 800748e:	46b1      	mov	r9, r6
 8007490:	eb18 0308 	adds.w	r3, r8, r8
 8007494:	eb49 0409 	adc.w	r4, r9, r9
 8007498:	4698      	mov	r8, r3
 800749a:	46a1      	mov	r9, r4
 800749c:	eb18 0805 	adds.w	r8, r8, r5
 80074a0:	eb49 0906 	adc.w	r9, r9, r6
 80074a4:	f04f 0100 	mov.w	r1, #0
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074b8:	4688      	mov	r8, r1
 80074ba:	4691      	mov	r9, r2
 80074bc:	eb18 0005 	adds.w	r0, r8, r5
 80074c0:	eb49 0106 	adc.w	r1, r9, r6
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	461d      	mov	r5, r3
 80074ca:	f04f 0600 	mov.w	r6, #0
 80074ce:	196b      	adds	r3, r5, r5
 80074d0:	eb46 0406 	adc.w	r4, r6, r6
 80074d4:	461a      	mov	r2, r3
 80074d6:	4623      	mov	r3, r4
 80074d8:	f7f9 fb6a 	bl	8000bb0 <__aeabi_uldivmod>
 80074dc:	4603      	mov	r3, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	461a      	mov	r2, r3
 80074e2:	4b47      	ldr	r3, [pc, #284]	; (8007600 <UART_SetConfig+0x384>)
 80074e4:	fba3 2302 	umull	r2, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	461d      	mov	r5, r3
 80074f2:	f04f 0600 	mov.w	r6, #0
 80074f6:	46a9      	mov	r9, r5
 80074f8:	46b2      	mov	sl, r6
 80074fa:	eb19 0309 	adds.w	r3, r9, r9
 80074fe:	eb4a 040a 	adc.w	r4, sl, sl
 8007502:	4699      	mov	r9, r3
 8007504:	46a2      	mov	sl, r4
 8007506:	eb19 0905 	adds.w	r9, r9, r5
 800750a:	eb4a 0a06 	adc.w	sl, sl, r6
 800750e:	f04f 0100 	mov.w	r1, #0
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800751a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800751e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007522:	4689      	mov	r9, r1
 8007524:	4692      	mov	sl, r2
 8007526:	eb19 0005 	adds.w	r0, r9, r5
 800752a:	eb4a 0106 	adc.w	r1, sl, r6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	461d      	mov	r5, r3
 8007534:	f04f 0600 	mov.w	r6, #0
 8007538:	196b      	adds	r3, r5, r5
 800753a:	eb46 0406 	adc.w	r4, r6, r6
 800753e:	461a      	mov	r2, r3
 8007540:	4623      	mov	r3, r4
 8007542:	f7f9 fb35 	bl	8000bb0 <__aeabi_uldivmod>
 8007546:	4603      	mov	r3, r0
 8007548:	460c      	mov	r4, r1
 800754a:	461a      	mov	r2, r3
 800754c:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <UART_SetConfig+0x384>)
 800754e:	fba3 1302 	umull	r1, r3, r3, r2
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	2164      	movs	r1, #100	; 0x64
 8007556:	fb01 f303 	mul.w	r3, r1, r3
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	3332      	adds	r3, #50	; 0x32
 8007560:	4a27      	ldr	r2, [pc, #156]	; (8007600 <UART_SetConfig+0x384>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800756e:	4498      	add	r8, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	461d      	mov	r5, r3
 8007574:	f04f 0600 	mov.w	r6, #0
 8007578:	46a9      	mov	r9, r5
 800757a:	46b2      	mov	sl, r6
 800757c:	eb19 0309 	adds.w	r3, r9, r9
 8007580:	eb4a 040a 	adc.w	r4, sl, sl
 8007584:	4699      	mov	r9, r3
 8007586:	46a2      	mov	sl, r4
 8007588:	eb19 0905 	adds.w	r9, r9, r5
 800758c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007590:	f04f 0100 	mov.w	r1, #0
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800759c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075a4:	4689      	mov	r9, r1
 80075a6:	4692      	mov	sl, r2
 80075a8:	eb19 0005 	adds.w	r0, r9, r5
 80075ac:	eb4a 0106 	adc.w	r1, sl, r6
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	461d      	mov	r5, r3
 80075b6:	f04f 0600 	mov.w	r6, #0
 80075ba:	196b      	adds	r3, r5, r5
 80075bc:	eb46 0406 	adc.w	r4, r6, r6
 80075c0:	461a      	mov	r2, r3
 80075c2:	4623      	mov	r3, r4
 80075c4:	f7f9 faf4 	bl	8000bb0 <__aeabi_uldivmod>
 80075c8:	4603      	mov	r3, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	461a      	mov	r2, r3
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <UART_SetConfig+0x384>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	; 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	3332      	adds	r3, #50	; 0x32
 80075e2:	4a07      	ldr	r2, [pc, #28]	; (8007600 <UART_SetConfig+0x384>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 0207 	and.w	r2, r3, #7
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4442      	add	r2, r8
 80075f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80075f6:	e1b2      	b.n	800795e <UART_SetConfig+0x6e2>
 80075f8:	40011000 	.word	0x40011000
 80075fc:	40011400 	.word	0x40011400
 8007600:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4ad7      	ldr	r2, [pc, #860]	; (8007968 <UART_SetConfig+0x6ec>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d005      	beq.n	800761a <UART_SetConfig+0x39e>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4ad6      	ldr	r2, [pc, #856]	; (800796c <UART_SetConfig+0x6f0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	f040 80d1 	bne.w	80077bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800761a:	f7fe fa75 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 800761e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	469a      	mov	sl, r3
 8007624:	f04f 0b00 	mov.w	fp, #0
 8007628:	46d0      	mov	r8, sl
 800762a:	46d9      	mov	r9, fp
 800762c:	eb18 0308 	adds.w	r3, r8, r8
 8007630:	eb49 0409 	adc.w	r4, r9, r9
 8007634:	4698      	mov	r8, r3
 8007636:	46a1      	mov	r9, r4
 8007638:	eb18 080a 	adds.w	r8, r8, sl
 800763c:	eb49 090b 	adc.w	r9, r9, fp
 8007640:	f04f 0100 	mov.w	r1, #0
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800764c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007650:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007654:	4688      	mov	r8, r1
 8007656:	4691      	mov	r9, r2
 8007658:	eb1a 0508 	adds.w	r5, sl, r8
 800765c:	eb4b 0609 	adc.w	r6, fp, r9
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4619      	mov	r1, r3
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	f04f 0400 	mov.w	r4, #0
 8007672:	0094      	lsls	r4, r2, #2
 8007674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007678:	008b      	lsls	r3, r1, #2
 800767a:	461a      	mov	r2, r3
 800767c:	4623      	mov	r3, r4
 800767e:	4628      	mov	r0, r5
 8007680:	4631      	mov	r1, r6
 8007682:	f7f9 fa95 	bl	8000bb0 <__aeabi_uldivmod>
 8007686:	4603      	mov	r3, r0
 8007688:	460c      	mov	r4, r1
 800768a:	461a      	mov	r2, r3
 800768c:	4bb8      	ldr	r3, [pc, #736]	; (8007970 <UART_SetConfig+0x6f4>)
 800768e:	fba3 2302 	umull	r2, r3, r3, r2
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	469b      	mov	fp, r3
 800769c:	f04f 0c00 	mov.w	ip, #0
 80076a0:	46d9      	mov	r9, fp
 80076a2:	46e2      	mov	sl, ip
 80076a4:	eb19 0309 	adds.w	r3, r9, r9
 80076a8:	eb4a 040a 	adc.w	r4, sl, sl
 80076ac:	4699      	mov	r9, r3
 80076ae:	46a2      	mov	sl, r4
 80076b0:	eb19 090b 	adds.w	r9, r9, fp
 80076b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076b8:	f04f 0100 	mov.w	r1, #0
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076cc:	4689      	mov	r9, r1
 80076ce:	4692      	mov	sl, r2
 80076d0:	eb1b 0509 	adds.w	r5, fp, r9
 80076d4:	eb4c 060a 	adc.w	r6, ip, sl
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4619      	mov	r1, r3
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	f04f 0400 	mov.w	r4, #0
 80076ea:	0094      	lsls	r4, r2, #2
 80076ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076f0:	008b      	lsls	r3, r1, #2
 80076f2:	461a      	mov	r2, r3
 80076f4:	4623      	mov	r3, r4
 80076f6:	4628      	mov	r0, r5
 80076f8:	4631      	mov	r1, r6
 80076fa:	f7f9 fa59 	bl	8000bb0 <__aeabi_uldivmod>
 80076fe:	4603      	mov	r3, r0
 8007700:	460c      	mov	r4, r1
 8007702:	461a      	mov	r2, r3
 8007704:	4b9a      	ldr	r3, [pc, #616]	; (8007970 <UART_SetConfig+0x6f4>)
 8007706:	fba3 1302 	umull	r1, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	2164      	movs	r1, #100	; 0x64
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	3332      	adds	r3, #50	; 0x32
 8007718:	4a95      	ldr	r2, [pc, #596]	; (8007970 <UART_SetConfig+0x6f4>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007724:	4498      	add	r8, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	469b      	mov	fp, r3
 800772a:	f04f 0c00 	mov.w	ip, #0
 800772e:	46d9      	mov	r9, fp
 8007730:	46e2      	mov	sl, ip
 8007732:	eb19 0309 	adds.w	r3, r9, r9
 8007736:	eb4a 040a 	adc.w	r4, sl, sl
 800773a:	4699      	mov	r9, r3
 800773c:	46a2      	mov	sl, r4
 800773e:	eb19 090b 	adds.w	r9, r9, fp
 8007742:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007752:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007756:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800775a:	4689      	mov	r9, r1
 800775c:	4692      	mov	sl, r2
 800775e:	eb1b 0509 	adds.w	r5, fp, r9
 8007762:	eb4c 060a 	adc.w	r6, ip, sl
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	4619      	mov	r1, r3
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	f04f 0300 	mov.w	r3, #0
 8007774:	f04f 0400 	mov.w	r4, #0
 8007778:	0094      	lsls	r4, r2, #2
 800777a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800777e:	008b      	lsls	r3, r1, #2
 8007780:	461a      	mov	r2, r3
 8007782:	4623      	mov	r3, r4
 8007784:	4628      	mov	r0, r5
 8007786:	4631      	mov	r1, r6
 8007788:	f7f9 fa12 	bl	8000bb0 <__aeabi_uldivmod>
 800778c:	4603      	mov	r3, r0
 800778e:	460c      	mov	r4, r1
 8007790:	461a      	mov	r2, r3
 8007792:	4b77      	ldr	r3, [pc, #476]	; (8007970 <UART_SetConfig+0x6f4>)
 8007794:	fba3 1302 	umull	r1, r3, r3, r2
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	2164      	movs	r1, #100	; 0x64
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	3332      	adds	r3, #50	; 0x32
 80077a6:	4a72      	ldr	r2, [pc, #456]	; (8007970 <UART_SetConfig+0x6f4>)
 80077a8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4442      	add	r2, r8
 80077b8:	609a      	str	r2, [r3, #8]
 80077ba:	e0d0      	b.n	800795e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80077bc:	f7fe f990 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 80077c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	469a      	mov	sl, r3
 80077c6:	f04f 0b00 	mov.w	fp, #0
 80077ca:	46d0      	mov	r8, sl
 80077cc:	46d9      	mov	r9, fp
 80077ce:	eb18 0308 	adds.w	r3, r8, r8
 80077d2:	eb49 0409 	adc.w	r4, r9, r9
 80077d6:	4698      	mov	r8, r3
 80077d8:	46a1      	mov	r9, r4
 80077da:	eb18 080a 	adds.w	r8, r8, sl
 80077de:	eb49 090b 	adc.w	r9, r9, fp
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077f6:	4688      	mov	r8, r1
 80077f8:	4691      	mov	r9, r2
 80077fa:	eb1a 0508 	adds.w	r5, sl, r8
 80077fe:	eb4b 0609 	adc.w	r6, fp, r9
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4619      	mov	r1, r3
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	f04f 0400 	mov.w	r4, #0
 8007814:	0094      	lsls	r4, r2, #2
 8007816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800781a:	008b      	lsls	r3, r1, #2
 800781c:	461a      	mov	r2, r3
 800781e:	4623      	mov	r3, r4
 8007820:	4628      	mov	r0, r5
 8007822:	4631      	mov	r1, r6
 8007824:	f7f9 f9c4 	bl	8000bb0 <__aeabi_uldivmod>
 8007828:	4603      	mov	r3, r0
 800782a:	460c      	mov	r4, r1
 800782c:	461a      	mov	r2, r3
 800782e:	4b50      	ldr	r3, [pc, #320]	; (8007970 <UART_SetConfig+0x6f4>)
 8007830:	fba3 2302 	umull	r2, r3, r3, r2
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	469b      	mov	fp, r3
 800783e:	f04f 0c00 	mov.w	ip, #0
 8007842:	46d9      	mov	r9, fp
 8007844:	46e2      	mov	sl, ip
 8007846:	eb19 0309 	adds.w	r3, r9, r9
 800784a:	eb4a 040a 	adc.w	r4, sl, sl
 800784e:	4699      	mov	r9, r3
 8007850:	46a2      	mov	sl, r4
 8007852:	eb19 090b 	adds.w	r9, r9, fp
 8007856:	eb4a 0a0c 	adc.w	sl, sl, ip
 800785a:	f04f 0100 	mov.w	r1, #0
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007866:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800786a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800786e:	4689      	mov	r9, r1
 8007870:	4692      	mov	sl, r2
 8007872:	eb1b 0509 	adds.w	r5, fp, r9
 8007876:	eb4c 060a 	adc.w	r6, ip, sl
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4619      	mov	r1, r3
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	f04f 0400 	mov.w	r4, #0
 800788c:	0094      	lsls	r4, r2, #2
 800788e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007892:	008b      	lsls	r3, r1, #2
 8007894:	461a      	mov	r2, r3
 8007896:	4623      	mov	r3, r4
 8007898:	4628      	mov	r0, r5
 800789a:	4631      	mov	r1, r6
 800789c:	f7f9 f988 	bl	8000bb0 <__aeabi_uldivmod>
 80078a0:	4603      	mov	r3, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	461a      	mov	r2, r3
 80078a6:	4b32      	ldr	r3, [pc, #200]	; (8007970 <UART_SetConfig+0x6f4>)
 80078a8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	2164      	movs	r1, #100	; 0x64
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	3332      	adds	r3, #50	; 0x32
 80078ba:	4a2d      	ldr	r2, [pc, #180]	; (8007970 <UART_SetConfig+0x6f4>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078c6:	4498      	add	r8, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	469b      	mov	fp, r3
 80078cc:	f04f 0c00 	mov.w	ip, #0
 80078d0:	46d9      	mov	r9, fp
 80078d2:	46e2      	mov	sl, ip
 80078d4:	eb19 0309 	adds.w	r3, r9, r9
 80078d8:	eb4a 040a 	adc.w	r4, sl, sl
 80078dc:	4699      	mov	r9, r3
 80078de:	46a2      	mov	sl, r4
 80078e0:	eb19 090b 	adds.w	r9, r9, fp
 80078e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078e8:	f04f 0100 	mov.w	r1, #0
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078fc:	4689      	mov	r9, r1
 80078fe:	4692      	mov	sl, r2
 8007900:	eb1b 0509 	adds.w	r5, fp, r9
 8007904:	eb4c 060a 	adc.w	r6, ip, sl
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4619      	mov	r1, r3
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	f04f 0400 	mov.w	r4, #0
 800791a:	0094      	lsls	r4, r2, #2
 800791c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007920:	008b      	lsls	r3, r1, #2
 8007922:	461a      	mov	r2, r3
 8007924:	4623      	mov	r3, r4
 8007926:	4628      	mov	r0, r5
 8007928:	4631      	mov	r1, r6
 800792a:	f7f9 f941 	bl	8000bb0 <__aeabi_uldivmod>
 800792e:	4603      	mov	r3, r0
 8007930:	460c      	mov	r4, r1
 8007932:	461a      	mov	r2, r3
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <UART_SetConfig+0x6f4>)
 8007936:	fba3 1302 	umull	r1, r3, r3, r2
 800793a:	095b      	lsrs	r3, r3, #5
 800793c:	2164      	movs	r1, #100	; 0x64
 800793e:	fb01 f303 	mul.w	r3, r1, r3
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	3332      	adds	r3, #50	; 0x32
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <UART_SetConfig+0x6f4>)
 800794a:	fba2 2303 	umull	r2, r3, r2, r3
 800794e:	095b      	lsrs	r3, r3, #5
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4442      	add	r2, r8
 800795a:	609a      	str	r2, [r3, #8]
}
 800795c:	e7ff      	b.n	800795e <UART_SetConfig+0x6e2>
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	40011000 	.word	0x40011000
 800796c:	40011400 	.word	0x40011400
 8007970:	51eb851f 	.word	0x51eb851f

08007974 <__errno>:
 8007974:	4b01      	ldr	r3, [pc, #4]	; (800797c <__errno+0x8>)
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000068 	.word	0x20000068

08007980 <__libc_init_array>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4e0d      	ldr	r6, [pc, #52]	; (80079b8 <__libc_init_array+0x38>)
 8007984:	4c0d      	ldr	r4, [pc, #52]	; (80079bc <__libc_init_array+0x3c>)
 8007986:	1ba4      	subs	r4, r4, r6
 8007988:	10a4      	asrs	r4, r4, #2
 800798a:	2500      	movs	r5, #0
 800798c:	42a5      	cmp	r5, r4
 800798e:	d109      	bne.n	80079a4 <__libc_init_array+0x24>
 8007990:	4e0b      	ldr	r6, [pc, #44]	; (80079c0 <__libc_init_array+0x40>)
 8007992:	4c0c      	ldr	r4, [pc, #48]	; (80079c4 <__libc_init_array+0x44>)
 8007994:	f004 f846 	bl	800ba24 <_init>
 8007998:	1ba4      	subs	r4, r4, r6
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	2500      	movs	r5, #0
 800799e:	42a5      	cmp	r5, r4
 80079a0:	d105      	bne.n	80079ae <__libc_init_array+0x2e>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079a8:	4798      	blx	r3
 80079aa:	3501      	adds	r5, #1
 80079ac:	e7ee      	b.n	800798c <__libc_init_array+0xc>
 80079ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079b2:	4798      	blx	r3
 80079b4:	3501      	adds	r5, #1
 80079b6:	e7f2      	b.n	800799e <__libc_init_array+0x1e>
 80079b8:	0800bef0 	.word	0x0800bef0
 80079bc:	0800bef0 	.word	0x0800bef0
 80079c0:	0800bef0 	.word	0x0800bef0
 80079c4:	0800bef4 	.word	0x0800bef4

080079c8 <memset>:
 80079c8:	4402      	add	r2, r0
 80079ca:	4603      	mov	r3, r0
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d100      	bne.n	80079d2 <memset+0xa>
 80079d0:	4770      	bx	lr
 80079d2:	f803 1b01 	strb.w	r1, [r3], #1
 80079d6:	e7f9      	b.n	80079cc <memset+0x4>

080079d8 <__cvt>:
 80079d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	ec55 4b10 	vmov	r4, r5, d0
 80079e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80079e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	460e      	mov	r6, r1
 80079ea:	4691      	mov	r9, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	bfb8      	it	lt
 80079f0:	4622      	movlt	r2, r4
 80079f2:	462b      	mov	r3, r5
 80079f4:	f027 0720 	bic.w	r7, r7, #32
 80079f8:	bfbb      	ittet	lt
 80079fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079fe:	461d      	movlt	r5, r3
 8007a00:	2300      	movge	r3, #0
 8007a02:	232d      	movlt	r3, #45	; 0x2d
 8007a04:	bfb8      	it	lt
 8007a06:	4614      	movlt	r4, r2
 8007a08:	2f46      	cmp	r7, #70	; 0x46
 8007a0a:	700b      	strb	r3, [r1, #0]
 8007a0c:	d004      	beq.n	8007a18 <__cvt+0x40>
 8007a0e:	2f45      	cmp	r7, #69	; 0x45
 8007a10:	d100      	bne.n	8007a14 <__cvt+0x3c>
 8007a12:	3601      	adds	r6, #1
 8007a14:	2102      	movs	r1, #2
 8007a16:	e000      	b.n	8007a1a <__cvt+0x42>
 8007a18:	2103      	movs	r1, #3
 8007a1a:	ab03      	add	r3, sp, #12
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	ab02      	add	r3, sp, #8
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	4632      	mov	r2, r6
 8007a24:	4653      	mov	r3, sl
 8007a26:	ec45 4b10 	vmov	d0, r4, r5
 8007a2a:	f000 fbad 	bl	8008188 <_dtoa_r>
 8007a2e:	2f47      	cmp	r7, #71	; 0x47
 8007a30:	4680      	mov	r8, r0
 8007a32:	d102      	bne.n	8007a3a <__cvt+0x62>
 8007a34:	f019 0f01 	tst.w	r9, #1
 8007a38:	d026      	beq.n	8007a88 <__cvt+0xb0>
 8007a3a:	2f46      	cmp	r7, #70	; 0x46
 8007a3c:	eb08 0906 	add.w	r9, r8, r6
 8007a40:	d111      	bne.n	8007a66 <__cvt+0x8e>
 8007a42:	f898 3000 	ldrb.w	r3, [r8]
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	d10a      	bne.n	8007a60 <__cvt+0x88>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 ffed 	bl	8000a30 <__aeabi_dcmpeq>
 8007a56:	b918      	cbnz	r0, 8007a60 <__cvt+0x88>
 8007a58:	f1c6 0601 	rsb	r6, r6, #1
 8007a5c:	f8ca 6000 	str.w	r6, [sl]
 8007a60:	f8da 3000 	ldr.w	r3, [sl]
 8007a64:	4499      	add	r9, r3
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7f8 ffdf 	bl	8000a30 <__aeabi_dcmpeq>
 8007a72:	b938      	cbnz	r0, 8007a84 <__cvt+0xac>
 8007a74:	2230      	movs	r2, #48	; 0x30
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	454b      	cmp	r3, r9
 8007a7a:	d205      	bcs.n	8007a88 <__cvt+0xb0>
 8007a7c:	1c59      	adds	r1, r3, #1
 8007a7e:	9103      	str	r1, [sp, #12]
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	e7f8      	b.n	8007a76 <__cvt+0x9e>
 8007a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a8c:	eba3 0308 	sub.w	r3, r3, r8
 8007a90:	4640      	mov	r0, r8
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	b004      	add	sp, #16
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a9a <__exponent>:
 8007a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	bfba      	itte	lt
 8007aa2:	4249      	neglt	r1, r1
 8007aa4:	232d      	movlt	r3, #45	; 0x2d
 8007aa6:	232b      	movge	r3, #43	; 0x2b
 8007aa8:	2909      	cmp	r1, #9
 8007aaa:	f804 2b02 	strb.w	r2, [r4], #2
 8007aae:	7043      	strb	r3, [r0, #1]
 8007ab0:	dd20      	ble.n	8007af4 <__exponent+0x5a>
 8007ab2:	f10d 0307 	add.w	r3, sp, #7
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	260a      	movs	r6, #10
 8007aba:	fb91 f5f6 	sdiv	r5, r1, r6
 8007abe:	fb06 1115 	mls	r1, r6, r5, r1
 8007ac2:	3130      	adds	r1, #48	; 0x30
 8007ac4:	2d09      	cmp	r5, #9
 8007ac6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007aca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007ace:	4629      	mov	r1, r5
 8007ad0:	dc09      	bgt.n	8007ae6 <__exponent+0x4c>
 8007ad2:	3130      	adds	r1, #48	; 0x30
 8007ad4:	3b02      	subs	r3, #2
 8007ad6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ada:	42bb      	cmp	r3, r7
 8007adc:	4622      	mov	r2, r4
 8007ade:	d304      	bcc.n	8007aea <__exponent+0x50>
 8007ae0:	1a10      	subs	r0, r2, r0
 8007ae2:	b003      	add	sp, #12
 8007ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	e7e7      	b.n	8007aba <__exponent+0x20>
 8007aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aee:	f804 2b01 	strb.w	r2, [r4], #1
 8007af2:	e7f2      	b.n	8007ada <__exponent+0x40>
 8007af4:	2330      	movs	r3, #48	; 0x30
 8007af6:	4419      	add	r1, r3
 8007af8:	7083      	strb	r3, [r0, #2]
 8007afa:	1d02      	adds	r2, r0, #4
 8007afc:	70c1      	strb	r1, [r0, #3]
 8007afe:	e7ef      	b.n	8007ae0 <__exponent+0x46>

08007b00 <_printf_float>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	b08d      	sub	sp, #52	; 0x34
 8007b06:	460c      	mov	r4, r1
 8007b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	461f      	mov	r7, r3
 8007b10:	4605      	mov	r5, r0
 8007b12:	f001 f8f1 	bl	8008cf8 <_localeconv_r>
 8007b16:	6803      	ldr	r3, [r0, #0]
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f8 fb5c 	bl	80001d8 <strlen>
 8007b20:	2300      	movs	r3, #0
 8007b22:	930a      	str	r3, [sp, #40]	; 0x28
 8007b24:	f8d8 3000 	ldr.w	r3, [r8]
 8007b28:	9005      	str	r0, [sp, #20]
 8007b2a:	3307      	adds	r3, #7
 8007b2c:	f023 0307 	bic.w	r3, r3, #7
 8007b30:	f103 0208 	add.w	r2, r3, #8
 8007b34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b38:	f8d4 b000 	ldr.w	fp, [r4]
 8007b3c:	f8c8 2000 	str.w	r2, [r8]
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b48:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b5a:	4ba7      	ldr	r3, [pc, #668]	; (8007df8 <_printf_float+0x2f8>)
 8007b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b60:	f7f8 ff98 	bl	8000a94 <__aeabi_dcmpun>
 8007b64:	bb70      	cbnz	r0, 8007bc4 <_printf_float+0xc4>
 8007b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b6a:	4ba3      	ldr	r3, [pc, #652]	; (8007df8 <_printf_float+0x2f8>)
 8007b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b70:	f7f8 ff72 	bl	8000a58 <__aeabi_dcmple>
 8007b74:	bb30      	cbnz	r0, 8007bc4 <_printf_float+0xc4>
 8007b76:	2200      	movs	r2, #0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	f7f8 ff61 	bl	8000a44 <__aeabi_dcmplt>
 8007b82:	b110      	cbz	r0, 8007b8a <_printf_float+0x8a>
 8007b84:	232d      	movs	r3, #45	; 0x2d
 8007b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8a:	4a9c      	ldr	r2, [pc, #624]	; (8007dfc <_printf_float+0x2fc>)
 8007b8c:	4b9c      	ldr	r3, [pc, #624]	; (8007e00 <_printf_float+0x300>)
 8007b8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b92:	bf8c      	ite	hi
 8007b94:	4690      	movhi	r8, r2
 8007b96:	4698      	movls	r8, r3
 8007b98:	2303      	movs	r3, #3
 8007b9a:	f02b 0204 	bic.w	r2, fp, #4
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	f04f 0900 	mov.w	r9, #0
 8007ba6:	9700      	str	r7, [sp, #0]
 8007ba8:	4633      	mov	r3, r6
 8007baa:	aa0b      	add	r2, sp, #44	; 0x2c
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 f9e6 	bl	8007f80 <_printf_common>
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f040 808d 	bne.w	8007cd4 <_printf_float+0x1d4>
 8007bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bbe:	b00d      	add	sp, #52	; 0x34
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	f7f8 ff62 	bl	8000a94 <__aeabi_dcmpun>
 8007bd0:	b110      	cbz	r0, 8007bd8 <_printf_float+0xd8>
 8007bd2:	4a8c      	ldr	r2, [pc, #560]	; (8007e04 <_printf_float+0x304>)
 8007bd4:	4b8c      	ldr	r3, [pc, #560]	; (8007e08 <_printf_float+0x308>)
 8007bd6:	e7da      	b.n	8007b8e <_printf_float+0x8e>
 8007bd8:	6861      	ldr	r1, [r4, #4]
 8007bda:	1c4b      	adds	r3, r1, #1
 8007bdc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007be0:	a80a      	add	r0, sp, #40	; 0x28
 8007be2:	d13e      	bne.n	8007c62 <_printf_float+0x162>
 8007be4:	2306      	movs	r3, #6
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	2300      	movs	r3, #0
 8007bea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007bee:	ab09      	add	r3, sp, #36	; 0x24
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	ec49 8b10 	vmov	d0, r8, r9
 8007bf6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bfa:	6022      	str	r2, [r4, #0]
 8007bfc:	f8cd a004 	str.w	sl, [sp, #4]
 8007c00:	6861      	ldr	r1, [r4, #4]
 8007c02:	4628      	mov	r0, r5
 8007c04:	f7ff fee8 	bl	80079d8 <__cvt>
 8007c08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007c0c:	2b47      	cmp	r3, #71	; 0x47
 8007c0e:	4680      	mov	r8, r0
 8007c10:	d109      	bne.n	8007c26 <_printf_float+0x126>
 8007c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c14:	1cd8      	adds	r0, r3, #3
 8007c16:	db02      	blt.n	8007c1e <_printf_float+0x11e>
 8007c18:	6862      	ldr	r2, [r4, #4]
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	dd47      	ble.n	8007cae <_printf_float+0x1ae>
 8007c1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c22:	fa5f fa8a 	uxtb.w	sl, sl
 8007c26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c2c:	d824      	bhi.n	8007c78 <_printf_float+0x178>
 8007c2e:	3901      	subs	r1, #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c36:	9109      	str	r1, [sp, #36]	; 0x24
 8007c38:	f7ff ff2f 	bl	8007a9a <__exponent>
 8007c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3e:	1813      	adds	r3, r2, r0
 8007c40:	2a01      	cmp	r2, #1
 8007c42:	4681      	mov	r9, r0
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	dc02      	bgt.n	8007c4e <_printf_float+0x14e>
 8007c48:	6822      	ldr	r2, [r4, #0]
 8007c4a:	07d1      	lsls	r1, r2, #31
 8007c4c:	d501      	bpl.n	8007c52 <_printf_float+0x152>
 8007c4e:	3301      	adds	r3, #1
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0a5      	beq.n	8007ba6 <_printf_float+0xa6>
 8007c5a:	232d      	movs	r3, #45	; 0x2d
 8007c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c60:	e7a1      	b.n	8007ba6 <_printf_float+0xa6>
 8007c62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007c66:	f000 8177 	beq.w	8007f58 <_printf_float+0x458>
 8007c6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c6e:	d1bb      	bne.n	8007be8 <_printf_float+0xe8>
 8007c70:	2900      	cmp	r1, #0
 8007c72:	d1b9      	bne.n	8007be8 <_printf_float+0xe8>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e7b6      	b.n	8007be6 <_printf_float+0xe6>
 8007c78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007c7c:	d119      	bne.n	8007cb2 <_printf_float+0x1b2>
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	dd0c      	ble.n	8007c9e <_printf_float+0x19e>
 8007c84:	6121      	str	r1, [r4, #16]
 8007c86:	b913      	cbnz	r3, 8007c8e <_printf_float+0x18e>
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	07d2      	lsls	r2, r2, #31
 8007c8c:	d502      	bpl.n	8007c94 <_printf_float+0x194>
 8007c8e:	3301      	adds	r3, #1
 8007c90:	440b      	add	r3, r1
 8007c92:	6123      	str	r3, [r4, #16]
 8007c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c96:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c98:	f04f 0900 	mov.w	r9, #0
 8007c9c:	e7d9      	b.n	8007c52 <_printf_float+0x152>
 8007c9e:	b913      	cbnz	r3, 8007ca6 <_printf_float+0x1a6>
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	07d0      	lsls	r0, r2, #31
 8007ca4:	d501      	bpl.n	8007caa <_printf_float+0x1aa>
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	e7f3      	b.n	8007c92 <_printf_float+0x192>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7f1      	b.n	8007c92 <_printf_float+0x192>
 8007cae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007cb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	db05      	blt.n	8007cc6 <_printf_float+0x1c6>
 8007cba:	6822      	ldr	r2, [r4, #0]
 8007cbc:	6123      	str	r3, [r4, #16]
 8007cbe:	07d1      	lsls	r1, r2, #31
 8007cc0:	d5e8      	bpl.n	8007c94 <_printf_float+0x194>
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	e7e5      	b.n	8007c92 <_printf_float+0x192>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfd4      	ite	le
 8007cca:	f1c3 0302 	rsble	r3, r3, #2
 8007cce:	2301      	movgt	r3, #1
 8007cd0:	4413      	add	r3, r2
 8007cd2:	e7de      	b.n	8007c92 <_printf_float+0x192>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	055a      	lsls	r2, r3, #21
 8007cd8:	d407      	bmi.n	8007cea <_printf_float+0x1ea>
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	4642      	mov	r2, r8
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d12b      	bne.n	8007d40 <_printf_float+0x240>
 8007ce8:	e767      	b.n	8007bba <_printf_float+0xba>
 8007cea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cee:	f240 80dc 	bls.w	8007eaa <_printf_float+0x3aa>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cfa:	f7f8 fe99 	bl	8000a30 <__aeabi_dcmpeq>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d033      	beq.n	8007d6a <_printf_float+0x26a>
 8007d02:	2301      	movs	r3, #1
 8007d04:	4a41      	ldr	r2, [pc, #260]	; (8007e0c <_printf_float+0x30c>)
 8007d06:	4631      	mov	r1, r6
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b8      	blx	r7
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	f43f af54 	beq.w	8007bba <_printf_float+0xba>
 8007d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d16:	429a      	cmp	r2, r3
 8007d18:	db02      	blt.n	8007d20 <_printf_float+0x220>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	07d8      	lsls	r0, r3, #31
 8007d1e:	d50f      	bpl.n	8007d40 <_printf_float+0x240>
 8007d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d24:	4631      	mov	r1, r6
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b8      	blx	r7
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f43f af45 	beq.w	8007bba <_printf_float+0xba>
 8007d30:	f04f 0800 	mov.w	r8, #0
 8007d34:	f104 091a 	add.w	r9, r4, #26
 8007d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	4543      	cmp	r3, r8
 8007d3e:	dc09      	bgt.n	8007d54 <_printf_float+0x254>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	079b      	lsls	r3, r3, #30
 8007d44:	f100 8103 	bmi.w	8007f4e <_printf_float+0x44e>
 8007d48:	68e0      	ldr	r0, [r4, #12]
 8007d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4c:	4298      	cmp	r0, r3
 8007d4e:	bfb8      	it	lt
 8007d50:	4618      	movlt	r0, r3
 8007d52:	e734      	b.n	8007bbe <_printf_float+0xbe>
 8007d54:	2301      	movs	r3, #1
 8007d56:	464a      	mov	r2, r9
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b8      	blx	r7
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f43f af2b 	beq.w	8007bba <_printf_float+0xba>
 8007d64:	f108 0801 	add.w	r8, r8, #1
 8007d68:	e7e6      	b.n	8007d38 <_printf_float+0x238>
 8007d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dc2b      	bgt.n	8007dc8 <_printf_float+0x2c8>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4a26      	ldr	r2, [pc, #152]	; (8007e0c <_printf_float+0x30c>)
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f af1d 	beq.w	8007bba <_printf_float+0xba>
 8007d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d82:	b923      	cbnz	r3, 8007d8e <_printf_float+0x28e>
 8007d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d86:	b913      	cbnz	r3, 8007d8e <_printf_float+0x28e>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	07d9      	lsls	r1, r3, #31
 8007d8c:	d5d8      	bpl.n	8007d40 <_printf_float+0x240>
 8007d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f af0e 	beq.w	8007bba <_printf_float+0xba>
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	f104 0a1a 	add.w	sl, r4, #26
 8007da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da8:	425b      	negs	r3, r3
 8007daa:	454b      	cmp	r3, r9
 8007dac:	dc01      	bgt.n	8007db2 <_printf_float+0x2b2>
 8007dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db0:	e794      	b.n	8007cdc <_printf_float+0x1dc>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4652      	mov	r2, sl
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f43f aefc 	beq.w	8007bba <_printf_float+0xba>
 8007dc2:	f109 0901 	add.w	r9, r9, #1
 8007dc6:	e7ee      	b.n	8007da6 <_printf_float+0x2a6>
 8007dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	bfa8      	it	ge
 8007dd0:	461a      	movge	r2, r3
 8007dd2:	2a00      	cmp	r2, #0
 8007dd4:	4691      	mov	r9, r2
 8007dd6:	dd07      	ble.n	8007de8 <_printf_float+0x2e8>
 8007dd8:	4613      	mov	r3, r2
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4642      	mov	r2, r8
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	f43f aee9 	beq.w	8007bba <_printf_float+0xba>
 8007de8:	f104 031a 	add.w	r3, r4, #26
 8007dec:	f04f 0b00 	mov.w	fp, #0
 8007df0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df4:	9306      	str	r3, [sp, #24]
 8007df6:	e015      	b.n	8007e24 <_printf_float+0x324>
 8007df8:	7fefffff 	.word	0x7fefffff
 8007dfc:	0800ba64 	.word	0x0800ba64
 8007e00:	0800ba60 	.word	0x0800ba60
 8007e04:	0800ba6c 	.word	0x0800ba6c
 8007e08:	0800ba68 	.word	0x0800ba68
 8007e0c:	0800ba70 	.word	0x0800ba70
 8007e10:	2301      	movs	r3, #1
 8007e12:	9a06      	ldr	r2, [sp, #24]
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f aecd 	beq.w	8007bba <_printf_float+0xba>
 8007e20:	f10b 0b01 	add.w	fp, fp, #1
 8007e24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e28:	ebaa 0309 	sub.w	r3, sl, r9
 8007e2c:	455b      	cmp	r3, fp
 8007e2e:	dcef      	bgt.n	8007e10 <_printf_float+0x310>
 8007e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e34:	429a      	cmp	r2, r3
 8007e36:	44d0      	add	r8, sl
 8007e38:	db15      	blt.n	8007e66 <_printf_float+0x366>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	07da      	lsls	r2, r3, #31
 8007e3e:	d412      	bmi.n	8007e66 <_printf_float+0x366>
 8007e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e44:	eba3 020a 	sub.w	r2, r3, sl
 8007e48:	eba3 0a01 	sub.w	sl, r3, r1
 8007e4c:	4592      	cmp	sl, r2
 8007e4e:	bfa8      	it	ge
 8007e50:	4692      	movge	sl, r2
 8007e52:	f1ba 0f00 	cmp.w	sl, #0
 8007e56:	dc0e      	bgt.n	8007e76 <_printf_float+0x376>
 8007e58:	f04f 0800 	mov.w	r8, #0
 8007e5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e60:	f104 091a 	add.w	r9, r4, #26
 8007e64:	e019      	b.n	8007e9a <_printf_float+0x39a>
 8007e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	47b8      	blx	r7
 8007e70:	3001      	adds	r0, #1
 8007e72:	d1e5      	bne.n	8007e40 <_printf_float+0x340>
 8007e74:	e6a1      	b.n	8007bba <_printf_float+0xba>
 8007e76:	4653      	mov	r3, sl
 8007e78:	4642      	mov	r2, r8
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	d1e9      	bne.n	8007e58 <_printf_float+0x358>
 8007e84:	e699      	b.n	8007bba <_printf_float+0xba>
 8007e86:	2301      	movs	r3, #1
 8007e88:	464a      	mov	r2, r9
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f ae92 	beq.w	8007bba <_printf_float+0xba>
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	eba3 030a 	sub.w	r3, r3, sl
 8007ea4:	4543      	cmp	r3, r8
 8007ea6:	dcee      	bgt.n	8007e86 <_printf_float+0x386>
 8007ea8:	e74a      	b.n	8007d40 <_printf_float+0x240>
 8007eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eac:	2a01      	cmp	r2, #1
 8007eae:	dc01      	bgt.n	8007eb4 <_printf_float+0x3b4>
 8007eb0:	07db      	lsls	r3, r3, #31
 8007eb2:	d53a      	bpl.n	8007f2a <_printf_float+0x42a>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b8      	blx	r7
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f43f ae7b 	beq.w	8007bba <_printf_float+0xba>
 8007ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f108 0801 	add.w	r8, r8, #1
 8007ed4:	f43f ae71 	beq.w	8007bba <_printf_float+0xba>
 8007ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eda:	2200      	movs	r2, #0
 8007edc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f7f8 fda3 	bl	8000a30 <__aeabi_dcmpeq>
 8007eea:	b9c8      	cbnz	r0, 8007f20 <_printf_float+0x420>
 8007eec:	4653      	mov	r3, sl
 8007eee:	4642      	mov	r2, r8
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d10e      	bne.n	8007f18 <_printf_float+0x418>
 8007efa:	e65e      	b.n	8007bba <_printf_float+0xba>
 8007efc:	2301      	movs	r3, #1
 8007efe:	4652      	mov	r2, sl
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f ae57 	beq.w	8007bba <_printf_float+0xba>
 8007f0c:	f108 0801 	add.w	r8, r8, #1
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	3b01      	subs	r3, #1
 8007f14:	4543      	cmp	r3, r8
 8007f16:	dcf1      	bgt.n	8007efc <_printf_float+0x3fc>
 8007f18:	464b      	mov	r3, r9
 8007f1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f1e:	e6de      	b.n	8007cde <_printf_float+0x1de>
 8007f20:	f04f 0800 	mov.w	r8, #0
 8007f24:	f104 0a1a 	add.w	sl, r4, #26
 8007f28:	e7f2      	b.n	8007f10 <_printf_float+0x410>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e7df      	b.n	8007eee <_printf_float+0x3ee>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	464a      	mov	r2, r9
 8007f32:	4631      	mov	r1, r6
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b8      	blx	r7
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f43f ae3e 	beq.w	8007bba <_printf_float+0xba>
 8007f3e:	f108 0801 	add.w	r8, r8, #1
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	dcf0      	bgt.n	8007f2e <_printf_float+0x42e>
 8007f4c:	e6fc      	b.n	8007d48 <_printf_float+0x248>
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	f104 0919 	add.w	r9, r4, #25
 8007f56:	e7f4      	b.n	8007f42 <_printf_float+0x442>
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	f43f ae8b 	beq.w	8007c74 <_printf_float+0x174>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f64:	ab09      	add	r3, sp, #36	; 0x24
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	ec49 8b10 	vmov	d0, r8, r9
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	f8cd a004 	str.w	sl, [sp, #4]
 8007f72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7ff fd2e 	bl	80079d8 <__cvt>
 8007f7c:	4680      	mov	r8, r0
 8007f7e:	e648      	b.n	8007c12 <_printf_float+0x112>

08007f80 <_printf_common>:
 8007f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	4691      	mov	r9, r2
 8007f86:	461f      	mov	r7, r3
 8007f88:	688a      	ldr	r2, [r1, #8]
 8007f8a:	690b      	ldr	r3, [r1, #16]
 8007f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	bfb8      	it	lt
 8007f94:	4613      	movlt	r3, r2
 8007f96:	f8c9 3000 	str.w	r3, [r9]
 8007f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	b112      	cbz	r2, 8007faa <_printf_common+0x2a>
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	f8c9 3000 	str.w	r3, [r9]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	0699      	lsls	r1, r3, #26
 8007fae:	bf42      	ittt	mi
 8007fb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007fb4:	3302      	addmi	r3, #2
 8007fb6:	f8c9 3000 	strmi.w	r3, [r9]
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	f015 0506 	ands.w	r5, r5, #6
 8007fc0:	d107      	bne.n	8007fd2 <_printf_common+0x52>
 8007fc2:	f104 0a19 	add.w	sl, r4, #25
 8007fc6:	68e3      	ldr	r3, [r4, #12]
 8007fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	42ab      	cmp	r3, r5
 8007fd0:	dc28      	bgt.n	8008024 <_printf_common+0xa4>
 8007fd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	3300      	adds	r3, #0
 8007fda:	bf18      	it	ne
 8007fdc:	2301      	movne	r3, #1
 8007fde:	0692      	lsls	r2, r2, #26
 8007fe0:	d42d      	bmi.n	800803e <_printf_common+0xbe>
 8007fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4630      	mov	r0, r6
 8007fea:	47c0      	blx	r8
 8007fec:	3001      	adds	r0, #1
 8007fee:	d020      	beq.n	8008032 <_printf_common+0xb2>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	68e5      	ldr	r5, [r4, #12]
 8007ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ff8:	f003 0306 	and.w	r3, r3, #6
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	bf08      	it	eq
 8008000:	1aad      	subeq	r5, r5, r2
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	6922      	ldr	r2, [r4, #16]
 8008006:	bf0c      	ite	eq
 8008008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800800c:	2500      	movne	r5, #0
 800800e:	4293      	cmp	r3, r2
 8008010:	bfc4      	itt	gt
 8008012:	1a9b      	subgt	r3, r3, r2
 8008014:	18ed      	addgt	r5, r5, r3
 8008016:	f04f 0900 	mov.w	r9, #0
 800801a:	341a      	adds	r4, #26
 800801c:	454d      	cmp	r5, r9
 800801e:	d11a      	bne.n	8008056 <_printf_common+0xd6>
 8008020:	2000      	movs	r0, #0
 8008022:	e008      	b.n	8008036 <_printf_common+0xb6>
 8008024:	2301      	movs	r3, #1
 8008026:	4652      	mov	r2, sl
 8008028:	4639      	mov	r1, r7
 800802a:	4630      	mov	r0, r6
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d103      	bne.n	800803a <_printf_common+0xba>
 8008032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803a:	3501      	adds	r5, #1
 800803c:	e7c3      	b.n	8007fc6 <_printf_common+0x46>
 800803e:	18e1      	adds	r1, r4, r3
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	2030      	movs	r0, #48	; 0x30
 8008044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008048:	4422      	add	r2, r4
 800804a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800804e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008052:	3302      	adds	r3, #2
 8008054:	e7c5      	b.n	8007fe2 <_printf_common+0x62>
 8008056:	2301      	movs	r3, #1
 8008058:	4622      	mov	r2, r4
 800805a:	4639      	mov	r1, r7
 800805c:	4630      	mov	r0, r6
 800805e:	47c0      	blx	r8
 8008060:	3001      	adds	r0, #1
 8008062:	d0e6      	beq.n	8008032 <_printf_common+0xb2>
 8008064:	f109 0901 	add.w	r9, r9, #1
 8008068:	e7d8      	b.n	800801c <_printf_common+0x9c>

0800806a <quorem>:
 800806a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806e:	6903      	ldr	r3, [r0, #16]
 8008070:	690c      	ldr	r4, [r1, #16]
 8008072:	42a3      	cmp	r3, r4
 8008074:	4680      	mov	r8, r0
 8008076:	f2c0 8082 	blt.w	800817e <quorem+0x114>
 800807a:	3c01      	subs	r4, #1
 800807c:	f101 0714 	add.w	r7, r1, #20
 8008080:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008084:	f100 0614 	add.w	r6, r0, #20
 8008088:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800808c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008090:	eb06 030c 	add.w	r3, r6, ip
 8008094:	3501      	adds	r5, #1
 8008096:	eb07 090c 	add.w	r9, r7, ip
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	fbb0 f5f5 	udiv	r5, r0, r5
 80080a0:	b395      	cbz	r5, 8008108 <quorem+0x9e>
 80080a2:	f04f 0a00 	mov.w	sl, #0
 80080a6:	4638      	mov	r0, r7
 80080a8:	46b6      	mov	lr, r6
 80080aa:	46d3      	mov	fp, sl
 80080ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80080b0:	b293      	uxth	r3, r2
 80080b2:	fb05 a303 	mla	r3, r5, r3, sl
 80080b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	ebab 0303 	sub.w	r3, fp, r3
 80080c0:	0c12      	lsrs	r2, r2, #16
 80080c2:	f8de b000 	ldr.w	fp, [lr]
 80080c6:	fb05 a202 	mla	r2, r5, r2, sl
 80080ca:	fa13 f38b 	uxtah	r3, r3, fp
 80080ce:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80080d2:	fa1f fb82 	uxth.w	fp, r2
 80080d6:	f8de 2000 	ldr.w	r2, [lr]
 80080da:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80080de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080e8:	4581      	cmp	r9, r0
 80080ea:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80080ee:	f84e 3b04 	str.w	r3, [lr], #4
 80080f2:	d2db      	bcs.n	80080ac <quorem+0x42>
 80080f4:	f856 300c 	ldr.w	r3, [r6, ip]
 80080f8:	b933      	cbnz	r3, 8008108 <quorem+0x9e>
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	3b04      	subs	r3, #4
 80080fe:	429e      	cmp	r6, r3
 8008100:	461a      	mov	r2, r3
 8008102:	d330      	bcc.n	8008166 <quorem+0xfc>
 8008104:	f8c8 4010 	str.w	r4, [r8, #16]
 8008108:	4640      	mov	r0, r8
 800810a:	f001 f82b 	bl	8009164 <__mcmp>
 800810e:	2800      	cmp	r0, #0
 8008110:	db25      	blt.n	800815e <quorem+0xf4>
 8008112:	3501      	adds	r5, #1
 8008114:	4630      	mov	r0, r6
 8008116:	f04f 0c00 	mov.w	ip, #0
 800811a:	f857 2b04 	ldr.w	r2, [r7], #4
 800811e:	f8d0 e000 	ldr.w	lr, [r0]
 8008122:	b293      	uxth	r3, r2
 8008124:	ebac 0303 	sub.w	r3, ip, r3
 8008128:	0c12      	lsrs	r2, r2, #16
 800812a:	fa13 f38e 	uxtah	r3, r3, lr
 800812e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008132:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800813c:	45b9      	cmp	r9, r7
 800813e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008142:	f840 3b04 	str.w	r3, [r0], #4
 8008146:	d2e8      	bcs.n	800811a <quorem+0xb0>
 8008148:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800814c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008150:	b92a      	cbnz	r2, 800815e <quorem+0xf4>
 8008152:	3b04      	subs	r3, #4
 8008154:	429e      	cmp	r6, r3
 8008156:	461a      	mov	r2, r3
 8008158:	d30b      	bcc.n	8008172 <quorem+0x108>
 800815a:	f8c8 4010 	str.w	r4, [r8, #16]
 800815e:	4628      	mov	r0, r5
 8008160:	b003      	add	sp, #12
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	3b04      	subs	r3, #4
 800816a:	2a00      	cmp	r2, #0
 800816c:	d1ca      	bne.n	8008104 <quorem+0x9a>
 800816e:	3c01      	subs	r4, #1
 8008170:	e7c5      	b.n	80080fe <quorem+0x94>
 8008172:	6812      	ldr	r2, [r2, #0]
 8008174:	3b04      	subs	r3, #4
 8008176:	2a00      	cmp	r2, #0
 8008178:	d1ef      	bne.n	800815a <quorem+0xf0>
 800817a:	3c01      	subs	r4, #1
 800817c:	e7ea      	b.n	8008154 <quorem+0xea>
 800817e:	2000      	movs	r0, #0
 8008180:	e7ee      	b.n	8008160 <quorem+0xf6>
 8008182:	0000      	movs	r0, r0
 8008184:	0000      	movs	r0, r0
	...

08008188 <_dtoa_r>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	ec57 6b10 	vmov	r6, r7, d0
 8008190:	b097      	sub	sp, #92	; 0x5c
 8008192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008194:	9106      	str	r1, [sp, #24]
 8008196:	4604      	mov	r4, r0
 8008198:	920b      	str	r2, [sp, #44]	; 0x2c
 800819a:	9312      	str	r3, [sp, #72]	; 0x48
 800819c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081a0:	e9cd 6700 	strd	r6, r7, [sp]
 80081a4:	b93d      	cbnz	r5, 80081b6 <_dtoa_r+0x2e>
 80081a6:	2010      	movs	r0, #16
 80081a8:	f000 fdb4 	bl	8008d14 <malloc>
 80081ac:	6260      	str	r0, [r4, #36]	; 0x24
 80081ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081b2:	6005      	str	r5, [r0, #0]
 80081b4:	60c5      	str	r5, [r0, #12]
 80081b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b8:	6819      	ldr	r1, [r3, #0]
 80081ba:	b151      	cbz	r1, 80081d2 <_dtoa_r+0x4a>
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	604a      	str	r2, [r1, #4]
 80081c0:	2301      	movs	r3, #1
 80081c2:	4093      	lsls	r3, r2
 80081c4:	608b      	str	r3, [r1, #8]
 80081c6:	4620      	mov	r0, r4
 80081c8:	f000 fdeb 	bl	8008da2 <_Bfree>
 80081cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	1e3b      	subs	r3, r7, #0
 80081d4:	bfbb      	ittet	lt
 80081d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081da:	9301      	strlt	r3, [sp, #4]
 80081dc:	2300      	movge	r3, #0
 80081de:	2201      	movlt	r2, #1
 80081e0:	bfac      	ite	ge
 80081e2:	f8c8 3000 	strge.w	r3, [r8]
 80081e6:	f8c8 2000 	strlt.w	r2, [r8]
 80081ea:	4baf      	ldr	r3, [pc, #700]	; (80084a8 <_dtoa_r+0x320>)
 80081ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081f0:	ea33 0308 	bics.w	r3, r3, r8
 80081f4:	d114      	bne.n	8008220 <_dtoa_r+0x98>
 80081f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	9b00      	ldr	r3, [sp, #0]
 8008200:	b923      	cbnz	r3, 800820c <_dtoa_r+0x84>
 8008202:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008206:	2800      	cmp	r0, #0
 8008208:	f000 8542 	beq.w	8008c90 <_dtoa_r+0xb08>
 800820c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800820e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80084bc <_dtoa_r+0x334>
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8544 	beq.w	8008ca0 <_dtoa_r+0xb18>
 8008218:	f10b 0303 	add.w	r3, fp, #3
 800821c:	f000 bd3e 	b.w	8008c9c <_dtoa_r+0xb14>
 8008220:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008224:	2200      	movs	r2, #0
 8008226:	2300      	movs	r3, #0
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f8 fc00 	bl	8000a30 <__aeabi_dcmpeq>
 8008230:	4681      	mov	r9, r0
 8008232:	b168      	cbz	r0, 8008250 <_dtoa_r+0xc8>
 8008234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008236:	2301      	movs	r3, #1
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8524 	beq.w	8008c8a <_dtoa_r+0xb02>
 8008242:	4b9a      	ldr	r3, [pc, #616]	; (80084ac <_dtoa_r+0x324>)
 8008244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008246:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	f000 bd28 	b.w	8008ca0 <_dtoa_r+0xb18>
 8008250:	aa14      	add	r2, sp, #80	; 0x50
 8008252:	a915      	add	r1, sp, #84	; 0x54
 8008254:	ec47 6b10 	vmov	d0, r6, r7
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fffa 	bl	8009252 <__d2b>
 800825e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008262:	9004      	str	r0, [sp, #16]
 8008264:	2d00      	cmp	r5, #0
 8008266:	d07c      	beq.n	8008362 <_dtoa_r+0x1da>
 8008268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800826c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008270:	46b2      	mov	sl, r6
 8008272:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800827a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800827e:	2200      	movs	r2, #0
 8008280:	4b8b      	ldr	r3, [pc, #556]	; (80084b0 <_dtoa_r+0x328>)
 8008282:	4650      	mov	r0, sl
 8008284:	4659      	mov	r1, fp
 8008286:	f7f7 ffb3 	bl	80001f0 <__aeabi_dsub>
 800828a:	a381      	add	r3, pc, #516	; (adr r3, 8008490 <_dtoa_r+0x308>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f7f8 f966 	bl	8000560 <__aeabi_dmul>
 8008294:	a380      	add	r3, pc, #512	; (adr r3, 8008498 <_dtoa_r+0x310>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f7 ffab 	bl	80001f4 <__adddf3>
 800829e:	4606      	mov	r6, r0
 80082a0:	4628      	mov	r0, r5
 80082a2:	460f      	mov	r7, r1
 80082a4:	f7f8 f8f2 	bl	800048c <__aeabi_i2d>
 80082a8:	a37d      	add	r3, pc, #500	; (adr r3, 80084a0 <_dtoa_r+0x318>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f8 f957 	bl	8000560 <__aeabi_dmul>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4630      	mov	r0, r6
 80082b8:	4639      	mov	r1, r7
 80082ba:	f7f7 ff9b 	bl	80001f4 <__adddf3>
 80082be:	4606      	mov	r6, r0
 80082c0:	460f      	mov	r7, r1
 80082c2:	f7f8 fbfd 	bl	8000ac0 <__aeabi_d2iz>
 80082c6:	2200      	movs	r2, #0
 80082c8:	4682      	mov	sl, r0
 80082ca:	2300      	movs	r3, #0
 80082cc:	4630      	mov	r0, r6
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 fbb8 	bl	8000a44 <__aeabi_dcmplt>
 80082d4:	b148      	cbz	r0, 80082ea <_dtoa_r+0x162>
 80082d6:	4650      	mov	r0, sl
 80082d8:	f7f8 f8d8 	bl	800048c <__aeabi_i2d>
 80082dc:	4632      	mov	r2, r6
 80082de:	463b      	mov	r3, r7
 80082e0:	f7f8 fba6 	bl	8000a30 <__aeabi_dcmpeq>
 80082e4:	b908      	cbnz	r0, 80082ea <_dtoa_r+0x162>
 80082e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80082ea:	f1ba 0f16 	cmp.w	sl, #22
 80082ee:	d859      	bhi.n	80083a4 <_dtoa_r+0x21c>
 80082f0:	4970      	ldr	r1, [pc, #448]	; (80084b4 <_dtoa_r+0x32c>)
 80082f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80082f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082fe:	f7f8 fbbf 	bl	8000a80 <__aeabi_dcmpgt>
 8008302:	2800      	cmp	r0, #0
 8008304:	d050      	beq.n	80083a8 <_dtoa_r+0x220>
 8008306:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800830a:	2300      	movs	r3, #0
 800830c:	930f      	str	r3, [sp, #60]	; 0x3c
 800830e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008310:	1b5d      	subs	r5, r3, r5
 8008312:	f1b5 0801 	subs.w	r8, r5, #1
 8008316:	bf49      	itett	mi
 8008318:	f1c5 0301 	rsbmi	r3, r5, #1
 800831c:	2300      	movpl	r3, #0
 800831e:	9305      	strmi	r3, [sp, #20]
 8008320:	f04f 0800 	movmi.w	r8, #0
 8008324:	bf58      	it	pl
 8008326:	9305      	strpl	r3, [sp, #20]
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	db3e      	blt.n	80083ac <_dtoa_r+0x224>
 800832e:	2300      	movs	r3, #0
 8008330:	44d0      	add	r8, sl
 8008332:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	9b06      	ldr	r3, [sp, #24]
 800833a:	2b09      	cmp	r3, #9
 800833c:	f200 8090 	bhi.w	8008460 <_dtoa_r+0x2d8>
 8008340:	2b05      	cmp	r3, #5
 8008342:	bfc4      	itt	gt
 8008344:	3b04      	subgt	r3, #4
 8008346:	9306      	strgt	r3, [sp, #24]
 8008348:	9b06      	ldr	r3, [sp, #24]
 800834a:	f1a3 0302 	sub.w	r3, r3, #2
 800834e:	bfcc      	ite	gt
 8008350:	2500      	movgt	r5, #0
 8008352:	2501      	movle	r5, #1
 8008354:	2b03      	cmp	r3, #3
 8008356:	f200 808f 	bhi.w	8008478 <_dtoa_r+0x2f0>
 800835a:	e8df f003 	tbb	[pc, r3]
 800835e:	7f7d      	.short	0x7f7d
 8008360:	7131      	.short	0x7131
 8008362:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008366:	441d      	add	r5, r3
 8008368:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800836c:	2820      	cmp	r0, #32
 800836e:	dd13      	ble.n	8008398 <_dtoa_r+0x210>
 8008370:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008374:	9b00      	ldr	r3, [sp, #0]
 8008376:	fa08 f800 	lsl.w	r8, r8, r0
 800837a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800837e:	fa23 f000 	lsr.w	r0, r3, r0
 8008382:	ea48 0000 	orr.w	r0, r8, r0
 8008386:	f7f8 f871 	bl	800046c <__aeabi_ui2d>
 800838a:	2301      	movs	r3, #1
 800838c:	4682      	mov	sl, r0
 800838e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008392:	3d01      	subs	r5, #1
 8008394:	9313      	str	r3, [sp, #76]	; 0x4c
 8008396:	e772      	b.n	800827e <_dtoa_r+0xf6>
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	f1c0 0020 	rsb	r0, r0, #32
 800839e:	fa03 f000 	lsl.w	r0, r3, r0
 80083a2:	e7f0      	b.n	8008386 <_dtoa_r+0x1fe>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e7b1      	b.n	800830c <_dtoa_r+0x184>
 80083a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80083aa:	e7b0      	b.n	800830e <_dtoa_r+0x186>
 80083ac:	9b05      	ldr	r3, [sp, #20]
 80083ae:	eba3 030a 	sub.w	r3, r3, sl
 80083b2:	9305      	str	r3, [sp, #20]
 80083b4:	f1ca 0300 	rsb	r3, sl, #0
 80083b8:	9307      	str	r3, [sp, #28]
 80083ba:	2300      	movs	r3, #0
 80083bc:	930e      	str	r3, [sp, #56]	; 0x38
 80083be:	e7bb      	b.n	8008338 <_dtoa_r+0x1b0>
 80083c0:	2301      	movs	r3, #1
 80083c2:	930a      	str	r3, [sp, #40]	; 0x28
 80083c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	dd59      	ble.n	800847e <_dtoa_r+0x2f6>
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	4699      	mov	r9, r3
 80083ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083d0:	2200      	movs	r2, #0
 80083d2:	6072      	str	r2, [r6, #4]
 80083d4:	2204      	movs	r2, #4
 80083d6:	f102 0014 	add.w	r0, r2, #20
 80083da:	4298      	cmp	r0, r3
 80083dc:	6871      	ldr	r1, [r6, #4]
 80083de:	d953      	bls.n	8008488 <_dtoa_r+0x300>
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fcaa 	bl	8008d3a <_Balloc>
 80083e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e8:	6030      	str	r0, [r6, #0]
 80083ea:	f1b9 0f0e 	cmp.w	r9, #14
 80083ee:	f8d3 b000 	ldr.w	fp, [r3]
 80083f2:	f200 80e6 	bhi.w	80085c2 <_dtoa_r+0x43a>
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	f000 80e3 	beq.w	80085c2 <_dtoa_r+0x43a>
 80083fc:	ed9d 7b00 	vldr	d7, [sp]
 8008400:	f1ba 0f00 	cmp.w	sl, #0
 8008404:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008408:	dd74      	ble.n	80084f4 <_dtoa_r+0x36c>
 800840a:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <_dtoa_r+0x32c>)
 800840c:	f00a 030f 	and.w	r3, sl, #15
 8008410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008414:	ed93 7b00 	vldr	d7, [r3]
 8008418:	ea4f 162a 	mov.w	r6, sl, asr #4
 800841c:	06f0      	lsls	r0, r6, #27
 800841e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008422:	d565      	bpl.n	80084f0 <_dtoa_r+0x368>
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <_dtoa_r+0x330>)
 8008426:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800842a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800842e:	f7f8 f9c1 	bl	80007b4 <__aeabi_ddiv>
 8008432:	e9cd 0100 	strd	r0, r1, [sp]
 8008436:	f006 060f 	and.w	r6, r6, #15
 800843a:	2503      	movs	r5, #3
 800843c:	4f1e      	ldr	r7, [pc, #120]	; (80084b8 <_dtoa_r+0x330>)
 800843e:	e04c      	b.n	80084da <_dtoa_r+0x352>
 8008440:	2301      	movs	r3, #1
 8008442:	930a      	str	r3, [sp, #40]	; 0x28
 8008444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008446:	4453      	add	r3, sl
 8008448:	f103 0901 	add.w	r9, r3, #1
 800844c:	9302      	str	r3, [sp, #8]
 800844e:	464b      	mov	r3, r9
 8008450:	2b01      	cmp	r3, #1
 8008452:	bfb8      	it	lt
 8008454:	2301      	movlt	r3, #1
 8008456:	e7ba      	b.n	80083ce <_dtoa_r+0x246>
 8008458:	2300      	movs	r3, #0
 800845a:	e7b2      	b.n	80083c2 <_dtoa_r+0x23a>
 800845c:	2300      	movs	r3, #0
 800845e:	e7f0      	b.n	8008442 <_dtoa_r+0x2ba>
 8008460:	2501      	movs	r5, #1
 8008462:	2300      	movs	r3, #0
 8008464:	9306      	str	r3, [sp, #24]
 8008466:	950a      	str	r5, [sp, #40]	; 0x28
 8008468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800846c:	9302      	str	r3, [sp, #8]
 800846e:	4699      	mov	r9, r3
 8008470:	2200      	movs	r2, #0
 8008472:	2312      	movs	r3, #18
 8008474:	920b      	str	r2, [sp, #44]	; 0x2c
 8008476:	e7aa      	b.n	80083ce <_dtoa_r+0x246>
 8008478:	2301      	movs	r3, #1
 800847a:	930a      	str	r3, [sp, #40]	; 0x28
 800847c:	e7f4      	b.n	8008468 <_dtoa_r+0x2e0>
 800847e:	2301      	movs	r3, #1
 8008480:	9302      	str	r3, [sp, #8]
 8008482:	4699      	mov	r9, r3
 8008484:	461a      	mov	r2, r3
 8008486:	e7f5      	b.n	8008474 <_dtoa_r+0x2ec>
 8008488:	3101      	adds	r1, #1
 800848a:	6071      	str	r1, [r6, #4]
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	e7a2      	b.n	80083d6 <_dtoa_r+0x24e>
 8008490:	636f4361 	.word	0x636f4361
 8008494:	3fd287a7 	.word	0x3fd287a7
 8008498:	8b60c8b3 	.word	0x8b60c8b3
 800849c:	3fc68a28 	.word	0x3fc68a28
 80084a0:	509f79fb 	.word	0x509f79fb
 80084a4:	3fd34413 	.word	0x3fd34413
 80084a8:	7ff00000 	.word	0x7ff00000
 80084ac:	0800ba71 	.word	0x0800ba71
 80084b0:	3ff80000 	.word	0x3ff80000
 80084b4:	0800baa8 	.word	0x0800baa8
 80084b8:	0800ba80 	.word	0x0800ba80
 80084bc:	0800ba7b 	.word	0x0800ba7b
 80084c0:	07f1      	lsls	r1, r6, #31
 80084c2:	d508      	bpl.n	80084d6 <_dtoa_r+0x34e>
 80084c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084cc:	f7f8 f848 	bl	8000560 <__aeabi_dmul>
 80084d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084d4:	3501      	adds	r5, #1
 80084d6:	1076      	asrs	r6, r6, #1
 80084d8:	3708      	adds	r7, #8
 80084da:	2e00      	cmp	r6, #0
 80084dc:	d1f0      	bne.n	80084c0 <_dtoa_r+0x338>
 80084de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e6:	f7f8 f965 	bl	80007b4 <__aeabi_ddiv>
 80084ea:	e9cd 0100 	strd	r0, r1, [sp]
 80084ee:	e01a      	b.n	8008526 <_dtoa_r+0x39e>
 80084f0:	2502      	movs	r5, #2
 80084f2:	e7a3      	b.n	800843c <_dtoa_r+0x2b4>
 80084f4:	f000 80a0 	beq.w	8008638 <_dtoa_r+0x4b0>
 80084f8:	f1ca 0600 	rsb	r6, sl, #0
 80084fc:	4b9f      	ldr	r3, [pc, #636]	; (800877c <_dtoa_r+0x5f4>)
 80084fe:	4fa0      	ldr	r7, [pc, #640]	; (8008780 <_dtoa_r+0x5f8>)
 8008500:	f006 020f 	and.w	r2, r6, #15
 8008504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008510:	f7f8 f826 	bl	8000560 <__aeabi_dmul>
 8008514:	e9cd 0100 	strd	r0, r1, [sp]
 8008518:	1136      	asrs	r6, r6, #4
 800851a:	2300      	movs	r3, #0
 800851c:	2502      	movs	r5, #2
 800851e:	2e00      	cmp	r6, #0
 8008520:	d17f      	bne.n	8008622 <_dtoa_r+0x49a>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e1      	bne.n	80084ea <_dtoa_r+0x362>
 8008526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8087 	beq.w	800863c <_dtoa_r+0x4b4>
 800852e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008532:	2200      	movs	r2, #0
 8008534:	4b93      	ldr	r3, [pc, #588]	; (8008784 <_dtoa_r+0x5fc>)
 8008536:	4630      	mov	r0, r6
 8008538:	4639      	mov	r1, r7
 800853a:	f7f8 fa83 	bl	8000a44 <__aeabi_dcmplt>
 800853e:	2800      	cmp	r0, #0
 8008540:	d07c      	beq.n	800863c <_dtoa_r+0x4b4>
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	d079      	beq.n	800863c <_dtoa_r+0x4b4>
 8008548:	9b02      	ldr	r3, [sp, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dd35      	ble.n	80085ba <_dtoa_r+0x432>
 800854e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008552:	9308      	str	r3, [sp, #32]
 8008554:	4639      	mov	r1, r7
 8008556:	2200      	movs	r2, #0
 8008558:	4b8b      	ldr	r3, [pc, #556]	; (8008788 <_dtoa_r+0x600>)
 800855a:	4630      	mov	r0, r6
 800855c:	f7f8 f800 	bl	8000560 <__aeabi_dmul>
 8008560:	e9cd 0100 	strd	r0, r1, [sp]
 8008564:	9f02      	ldr	r7, [sp, #8]
 8008566:	3501      	adds	r5, #1
 8008568:	4628      	mov	r0, r5
 800856a:	f7f7 ff8f 	bl	800048c <__aeabi_i2d>
 800856e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008572:	f7f7 fff5 	bl	8000560 <__aeabi_dmul>
 8008576:	2200      	movs	r2, #0
 8008578:	4b84      	ldr	r3, [pc, #528]	; (800878c <_dtoa_r+0x604>)
 800857a:	f7f7 fe3b 	bl	80001f4 <__adddf3>
 800857e:	4605      	mov	r5, r0
 8008580:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008584:	2f00      	cmp	r7, #0
 8008586:	d15d      	bne.n	8008644 <_dtoa_r+0x4bc>
 8008588:	2200      	movs	r2, #0
 800858a:	4b81      	ldr	r3, [pc, #516]	; (8008790 <_dtoa_r+0x608>)
 800858c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008590:	f7f7 fe2e 	bl	80001f0 <__aeabi_dsub>
 8008594:	462a      	mov	r2, r5
 8008596:	4633      	mov	r3, r6
 8008598:	e9cd 0100 	strd	r0, r1, [sp]
 800859c:	f7f8 fa70 	bl	8000a80 <__aeabi_dcmpgt>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f040 8288 	bne.w	8008ab6 <_dtoa_r+0x92e>
 80085a6:	462a      	mov	r2, r5
 80085a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80085ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085b0:	f7f8 fa48 	bl	8000a44 <__aeabi_dcmplt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 827c 	bne.w	8008ab2 <_dtoa_r+0x92a>
 80085ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085be:	e9cd 2300 	strd	r2, r3, [sp]
 80085c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f2c0 8150 	blt.w	800886a <_dtoa_r+0x6e2>
 80085ca:	f1ba 0f0e 	cmp.w	sl, #14
 80085ce:	f300 814c 	bgt.w	800886a <_dtoa_r+0x6e2>
 80085d2:	4b6a      	ldr	r3, [pc, #424]	; (800877c <_dtoa_r+0x5f4>)
 80085d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085d8:	ed93 7b00 	vldr	d7, [r3]
 80085dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085e4:	f280 80d8 	bge.w	8008798 <_dtoa_r+0x610>
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	f300 80d4 	bgt.w	8008798 <_dtoa_r+0x610>
 80085f0:	f040 825e 	bne.w	8008ab0 <_dtoa_r+0x928>
 80085f4:	2200      	movs	r2, #0
 80085f6:	4b66      	ldr	r3, [pc, #408]	; (8008790 <_dtoa_r+0x608>)
 80085f8:	ec51 0b17 	vmov	r0, r1, d7
 80085fc:	f7f7 ffb0 	bl	8000560 <__aeabi_dmul>
 8008600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008604:	f7f8 fa32 	bl	8000a6c <__aeabi_dcmpge>
 8008608:	464f      	mov	r7, r9
 800860a:	464e      	mov	r6, r9
 800860c:	2800      	cmp	r0, #0
 800860e:	f040 8234 	bne.w	8008a7a <_dtoa_r+0x8f2>
 8008612:	2331      	movs	r3, #49	; 0x31
 8008614:	f10b 0501 	add.w	r5, fp, #1
 8008618:	f88b 3000 	strb.w	r3, [fp]
 800861c:	f10a 0a01 	add.w	sl, sl, #1
 8008620:	e22f      	b.n	8008a82 <_dtoa_r+0x8fa>
 8008622:	07f2      	lsls	r2, r6, #31
 8008624:	d505      	bpl.n	8008632 <_dtoa_r+0x4aa>
 8008626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800862a:	f7f7 ff99 	bl	8000560 <__aeabi_dmul>
 800862e:	3501      	adds	r5, #1
 8008630:	2301      	movs	r3, #1
 8008632:	1076      	asrs	r6, r6, #1
 8008634:	3708      	adds	r7, #8
 8008636:	e772      	b.n	800851e <_dtoa_r+0x396>
 8008638:	2502      	movs	r5, #2
 800863a:	e774      	b.n	8008526 <_dtoa_r+0x39e>
 800863c:	f8cd a020 	str.w	sl, [sp, #32]
 8008640:	464f      	mov	r7, r9
 8008642:	e791      	b.n	8008568 <_dtoa_r+0x3e0>
 8008644:	4b4d      	ldr	r3, [pc, #308]	; (800877c <_dtoa_r+0x5f4>)
 8008646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800864a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d047      	beq.n	80086e4 <_dtoa_r+0x55c>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	2000      	movs	r0, #0
 800865a:	494e      	ldr	r1, [pc, #312]	; (8008794 <_dtoa_r+0x60c>)
 800865c:	f7f8 f8aa 	bl	80007b4 <__aeabi_ddiv>
 8008660:	462a      	mov	r2, r5
 8008662:	4633      	mov	r3, r6
 8008664:	f7f7 fdc4 	bl	80001f0 <__aeabi_dsub>
 8008668:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800866c:	465d      	mov	r5, fp
 800866e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008672:	f7f8 fa25 	bl	8000ac0 <__aeabi_d2iz>
 8008676:	4606      	mov	r6, r0
 8008678:	f7f7 ff08 	bl	800048c <__aeabi_i2d>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008684:	f7f7 fdb4 	bl	80001f0 <__aeabi_dsub>
 8008688:	3630      	adds	r6, #48	; 0x30
 800868a:	f805 6b01 	strb.w	r6, [r5], #1
 800868e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008692:	e9cd 0100 	strd	r0, r1, [sp]
 8008696:	f7f8 f9d5 	bl	8000a44 <__aeabi_dcmplt>
 800869a:	2800      	cmp	r0, #0
 800869c:	d163      	bne.n	8008766 <_dtoa_r+0x5de>
 800869e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a2:	2000      	movs	r0, #0
 80086a4:	4937      	ldr	r1, [pc, #220]	; (8008784 <_dtoa_r+0x5fc>)
 80086a6:	f7f7 fda3 	bl	80001f0 <__aeabi_dsub>
 80086aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086ae:	f7f8 f9c9 	bl	8000a44 <__aeabi_dcmplt>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f040 80b7 	bne.w	8008826 <_dtoa_r+0x69e>
 80086b8:	eba5 030b 	sub.w	r3, r5, fp
 80086bc:	429f      	cmp	r7, r3
 80086be:	f77f af7c 	ble.w	80085ba <_dtoa_r+0x432>
 80086c2:	2200      	movs	r2, #0
 80086c4:	4b30      	ldr	r3, [pc, #192]	; (8008788 <_dtoa_r+0x600>)
 80086c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086ca:	f7f7 ff49 	bl	8000560 <__aeabi_dmul>
 80086ce:	2200      	movs	r2, #0
 80086d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80086d4:	4b2c      	ldr	r3, [pc, #176]	; (8008788 <_dtoa_r+0x600>)
 80086d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086da:	f7f7 ff41 	bl	8000560 <__aeabi_dmul>
 80086de:	e9cd 0100 	strd	r0, r1, [sp]
 80086e2:	e7c4      	b.n	800866e <_dtoa_r+0x4e6>
 80086e4:	462a      	mov	r2, r5
 80086e6:	4633      	mov	r3, r6
 80086e8:	f7f7 ff3a 	bl	8000560 <__aeabi_dmul>
 80086ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80086f0:	eb0b 0507 	add.w	r5, fp, r7
 80086f4:	465e      	mov	r6, fp
 80086f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086fa:	f7f8 f9e1 	bl	8000ac0 <__aeabi_d2iz>
 80086fe:	4607      	mov	r7, r0
 8008700:	f7f7 fec4 	bl	800048c <__aeabi_i2d>
 8008704:	3730      	adds	r7, #48	; 0x30
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800870e:	f7f7 fd6f 	bl	80001f0 <__aeabi_dsub>
 8008712:	f806 7b01 	strb.w	r7, [r6], #1
 8008716:	42ae      	cmp	r6, r5
 8008718:	e9cd 0100 	strd	r0, r1, [sp]
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	d126      	bne.n	8008770 <_dtoa_r+0x5e8>
 8008722:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <_dtoa_r+0x60c>)
 8008724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008728:	f7f7 fd64 	bl	80001f4 <__adddf3>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008734:	f7f8 f9a4 	bl	8000a80 <__aeabi_dcmpgt>
 8008738:	2800      	cmp	r0, #0
 800873a:	d174      	bne.n	8008826 <_dtoa_r+0x69e>
 800873c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008740:	2000      	movs	r0, #0
 8008742:	4914      	ldr	r1, [pc, #80]	; (8008794 <_dtoa_r+0x60c>)
 8008744:	f7f7 fd54 	bl	80001f0 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008750:	f7f8 f978 	bl	8000a44 <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	f43f af30 	beq.w	80085ba <_dtoa_r+0x432>
 800875a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800875e:	2b30      	cmp	r3, #48	; 0x30
 8008760:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008764:	d002      	beq.n	800876c <_dtoa_r+0x5e4>
 8008766:	f8dd a020 	ldr.w	sl, [sp, #32]
 800876a:	e04a      	b.n	8008802 <_dtoa_r+0x67a>
 800876c:	4615      	mov	r5, r2
 800876e:	e7f4      	b.n	800875a <_dtoa_r+0x5d2>
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <_dtoa_r+0x600>)
 8008772:	f7f7 fef5 	bl	8000560 <__aeabi_dmul>
 8008776:	e9cd 0100 	strd	r0, r1, [sp]
 800877a:	e7bc      	b.n	80086f6 <_dtoa_r+0x56e>
 800877c:	0800baa8 	.word	0x0800baa8
 8008780:	0800ba80 	.word	0x0800ba80
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	40240000 	.word	0x40240000
 800878c:	401c0000 	.word	0x401c0000
 8008790:	40140000 	.word	0x40140000
 8008794:	3fe00000 	.word	0x3fe00000
 8008798:	e9dd 6700 	ldrd	r6, r7, [sp]
 800879c:	465d      	mov	r5, fp
 800879e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a2:	4630      	mov	r0, r6
 80087a4:	4639      	mov	r1, r7
 80087a6:	f7f8 f805 	bl	80007b4 <__aeabi_ddiv>
 80087aa:	f7f8 f989 	bl	8000ac0 <__aeabi_d2iz>
 80087ae:	4680      	mov	r8, r0
 80087b0:	f7f7 fe6c 	bl	800048c <__aeabi_i2d>
 80087b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087b8:	f7f7 fed2 	bl	8000560 <__aeabi_dmul>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80087c8:	f7f7 fd12 	bl	80001f0 <__aeabi_dsub>
 80087cc:	f805 6b01 	strb.w	r6, [r5], #1
 80087d0:	eba5 060b 	sub.w	r6, r5, fp
 80087d4:	45b1      	cmp	r9, r6
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	d139      	bne.n	8008850 <_dtoa_r+0x6c8>
 80087dc:	f7f7 fd0a 	bl	80001f4 <__adddf3>
 80087e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	f7f8 f94a 	bl	8000a80 <__aeabi_dcmpgt>
 80087ec:	b9c8      	cbnz	r0, 8008822 <_dtoa_r+0x69a>
 80087ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087f2:	4630      	mov	r0, r6
 80087f4:	4639      	mov	r1, r7
 80087f6:	f7f8 f91b 	bl	8000a30 <__aeabi_dcmpeq>
 80087fa:	b110      	cbz	r0, 8008802 <_dtoa_r+0x67a>
 80087fc:	f018 0f01 	tst.w	r8, #1
 8008800:	d10f      	bne.n	8008822 <_dtoa_r+0x69a>
 8008802:	9904      	ldr	r1, [sp, #16]
 8008804:	4620      	mov	r0, r4
 8008806:	f000 facc 	bl	8008da2 <_Bfree>
 800880a:	2300      	movs	r3, #0
 800880c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800880e:	702b      	strb	r3, [r5, #0]
 8008810:	f10a 0301 	add.w	r3, sl, #1
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 8241 	beq.w	8008ca0 <_dtoa_r+0xb18>
 800881e:	601d      	str	r5, [r3, #0]
 8008820:	e23e      	b.n	8008ca0 <_dtoa_r+0xb18>
 8008822:	f8cd a020 	str.w	sl, [sp, #32]
 8008826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800882a:	2a39      	cmp	r2, #57	; 0x39
 800882c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008830:	d108      	bne.n	8008844 <_dtoa_r+0x6bc>
 8008832:	459b      	cmp	fp, r3
 8008834:	d10a      	bne.n	800884c <_dtoa_r+0x6c4>
 8008836:	9b08      	ldr	r3, [sp, #32]
 8008838:	3301      	adds	r3, #1
 800883a:	9308      	str	r3, [sp, #32]
 800883c:	2330      	movs	r3, #48	; 0x30
 800883e:	f88b 3000 	strb.w	r3, [fp]
 8008842:	465b      	mov	r3, fp
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	3201      	adds	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	e78c      	b.n	8008766 <_dtoa_r+0x5de>
 800884c:	461d      	mov	r5, r3
 800884e:	e7ea      	b.n	8008826 <_dtoa_r+0x69e>
 8008850:	2200      	movs	r2, #0
 8008852:	4b9b      	ldr	r3, [pc, #620]	; (8008ac0 <_dtoa_r+0x938>)
 8008854:	f7f7 fe84 	bl	8000560 <__aeabi_dmul>
 8008858:	2200      	movs	r2, #0
 800885a:	2300      	movs	r3, #0
 800885c:	4606      	mov	r6, r0
 800885e:	460f      	mov	r7, r1
 8008860:	f7f8 f8e6 	bl	8000a30 <__aeabi_dcmpeq>
 8008864:	2800      	cmp	r0, #0
 8008866:	d09a      	beq.n	800879e <_dtoa_r+0x616>
 8008868:	e7cb      	b.n	8008802 <_dtoa_r+0x67a>
 800886a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886c:	2a00      	cmp	r2, #0
 800886e:	f000 808b 	beq.w	8008988 <_dtoa_r+0x800>
 8008872:	9a06      	ldr	r2, [sp, #24]
 8008874:	2a01      	cmp	r2, #1
 8008876:	dc6e      	bgt.n	8008956 <_dtoa_r+0x7ce>
 8008878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800887a:	2a00      	cmp	r2, #0
 800887c:	d067      	beq.n	800894e <_dtoa_r+0x7c6>
 800887e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008882:	9f07      	ldr	r7, [sp, #28]
 8008884:	9d05      	ldr	r5, [sp, #20]
 8008886:	9a05      	ldr	r2, [sp, #20]
 8008888:	2101      	movs	r1, #1
 800888a:	441a      	add	r2, r3
 800888c:	4620      	mov	r0, r4
 800888e:	9205      	str	r2, [sp, #20]
 8008890:	4498      	add	r8, r3
 8008892:	f000 fb26 	bl	8008ee2 <__i2b>
 8008896:	4606      	mov	r6, r0
 8008898:	2d00      	cmp	r5, #0
 800889a:	dd0c      	ble.n	80088b6 <_dtoa_r+0x72e>
 800889c:	f1b8 0f00 	cmp.w	r8, #0
 80088a0:	dd09      	ble.n	80088b6 <_dtoa_r+0x72e>
 80088a2:	4545      	cmp	r5, r8
 80088a4:	9a05      	ldr	r2, [sp, #20]
 80088a6:	462b      	mov	r3, r5
 80088a8:	bfa8      	it	ge
 80088aa:	4643      	movge	r3, r8
 80088ac:	1ad2      	subs	r2, r2, r3
 80088ae:	9205      	str	r2, [sp, #20]
 80088b0:	1aed      	subs	r5, r5, r3
 80088b2:	eba8 0803 	sub.w	r8, r8, r3
 80088b6:	9b07      	ldr	r3, [sp, #28]
 80088b8:	b1eb      	cbz	r3, 80088f6 <_dtoa_r+0x76e>
 80088ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d067      	beq.n	8008990 <_dtoa_r+0x808>
 80088c0:	b18f      	cbz	r7, 80088e6 <_dtoa_r+0x75e>
 80088c2:	4631      	mov	r1, r6
 80088c4:	463a      	mov	r2, r7
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 fbaa 	bl	8009020 <__pow5mult>
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	4601      	mov	r1, r0
 80088d0:	4606      	mov	r6, r0
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fb0e 	bl	8008ef4 <__multiply>
 80088d8:	9904      	ldr	r1, [sp, #16]
 80088da:	9008      	str	r0, [sp, #32]
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fa60 	bl	8008da2 <_Bfree>
 80088e2:	9b08      	ldr	r3, [sp, #32]
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	9b07      	ldr	r3, [sp, #28]
 80088e8:	1bda      	subs	r2, r3, r7
 80088ea:	d004      	beq.n	80088f6 <_dtoa_r+0x76e>
 80088ec:	9904      	ldr	r1, [sp, #16]
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fb96 	bl	8009020 <__pow5mult>
 80088f4:	9004      	str	r0, [sp, #16]
 80088f6:	2101      	movs	r1, #1
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 faf2 	bl	8008ee2 <__i2b>
 80088fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008900:	4607      	mov	r7, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 81d0 	beq.w	8008ca8 <_dtoa_r+0xb20>
 8008908:	461a      	mov	r2, r3
 800890a:	4601      	mov	r1, r0
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fb87 	bl	8009020 <__pow5mult>
 8008912:	9b06      	ldr	r3, [sp, #24]
 8008914:	2b01      	cmp	r3, #1
 8008916:	4607      	mov	r7, r0
 8008918:	dc40      	bgt.n	800899c <_dtoa_r+0x814>
 800891a:	9b00      	ldr	r3, [sp, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d139      	bne.n	8008994 <_dtoa_r+0x80c>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008926:	2b00      	cmp	r3, #0
 8008928:	d136      	bne.n	8008998 <_dtoa_r+0x810>
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008930:	0d1b      	lsrs	r3, r3, #20
 8008932:	051b      	lsls	r3, r3, #20
 8008934:	b12b      	cbz	r3, 8008942 <_dtoa_r+0x7ba>
 8008936:	9b05      	ldr	r3, [sp, #20]
 8008938:	3301      	adds	r3, #1
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	f108 0801 	add.w	r8, r8, #1
 8008940:	2301      	movs	r3, #1
 8008942:	9307      	str	r3, [sp, #28]
 8008944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d12a      	bne.n	80089a0 <_dtoa_r+0x818>
 800894a:	2001      	movs	r0, #1
 800894c:	e030      	b.n	80089b0 <_dtoa_r+0x828>
 800894e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008950:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008954:	e795      	b.n	8008882 <_dtoa_r+0x6fa>
 8008956:	9b07      	ldr	r3, [sp, #28]
 8008958:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800895c:	42bb      	cmp	r3, r7
 800895e:	bfbf      	itttt	lt
 8008960:	9b07      	ldrlt	r3, [sp, #28]
 8008962:	9707      	strlt	r7, [sp, #28]
 8008964:	1afa      	sublt	r2, r7, r3
 8008966:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008968:	bfbb      	ittet	lt
 800896a:	189b      	addlt	r3, r3, r2
 800896c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800896e:	1bdf      	subge	r7, r3, r7
 8008970:	2700      	movlt	r7, #0
 8008972:	f1b9 0f00 	cmp.w	r9, #0
 8008976:	bfb5      	itete	lt
 8008978:	9b05      	ldrlt	r3, [sp, #20]
 800897a:	9d05      	ldrge	r5, [sp, #20]
 800897c:	eba3 0509 	sublt.w	r5, r3, r9
 8008980:	464b      	movge	r3, r9
 8008982:	bfb8      	it	lt
 8008984:	2300      	movlt	r3, #0
 8008986:	e77e      	b.n	8008886 <_dtoa_r+0x6fe>
 8008988:	9f07      	ldr	r7, [sp, #28]
 800898a:	9d05      	ldr	r5, [sp, #20]
 800898c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800898e:	e783      	b.n	8008898 <_dtoa_r+0x710>
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	e7ab      	b.n	80088ec <_dtoa_r+0x764>
 8008994:	2300      	movs	r3, #0
 8008996:	e7d4      	b.n	8008942 <_dtoa_r+0x7ba>
 8008998:	9b00      	ldr	r3, [sp, #0]
 800899a:	e7d2      	b.n	8008942 <_dtoa_r+0x7ba>
 800899c:	2300      	movs	r3, #0
 800899e:	9307      	str	r3, [sp, #28]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80089a6:	6918      	ldr	r0, [r3, #16]
 80089a8:	f000 fa4d 	bl	8008e46 <__hi0bits>
 80089ac:	f1c0 0020 	rsb	r0, r0, #32
 80089b0:	4440      	add	r0, r8
 80089b2:	f010 001f 	ands.w	r0, r0, #31
 80089b6:	d047      	beq.n	8008a48 <_dtoa_r+0x8c0>
 80089b8:	f1c0 0320 	rsb	r3, r0, #32
 80089bc:	2b04      	cmp	r3, #4
 80089be:	dd3b      	ble.n	8008a38 <_dtoa_r+0x8b0>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	f1c0 001c 	rsb	r0, r0, #28
 80089c6:	4403      	add	r3, r0
 80089c8:	9305      	str	r3, [sp, #20]
 80089ca:	4405      	add	r5, r0
 80089cc:	4480      	add	r8, r0
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	dd05      	ble.n	80089e0 <_dtoa_r+0x858>
 80089d4:	461a      	mov	r2, r3
 80089d6:	9904      	ldr	r1, [sp, #16]
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fb6f 	bl	80090bc <__lshift>
 80089de:	9004      	str	r0, [sp, #16]
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	dd05      	ble.n	80089f2 <_dtoa_r+0x86a>
 80089e6:	4639      	mov	r1, r7
 80089e8:	4642      	mov	r2, r8
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 fb66 	bl	80090bc <__lshift>
 80089f0:	4607      	mov	r7, r0
 80089f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089f4:	b353      	cbz	r3, 8008a4c <_dtoa_r+0x8c4>
 80089f6:	4639      	mov	r1, r7
 80089f8:	9804      	ldr	r0, [sp, #16]
 80089fa:	f000 fbb3 	bl	8009164 <__mcmp>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	da24      	bge.n	8008a4c <_dtoa_r+0x8c4>
 8008a02:	2300      	movs	r3, #0
 8008a04:	220a      	movs	r2, #10
 8008a06:	9904      	ldr	r1, [sp, #16]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 f9e1 	bl	8008dd0 <__multadd>
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a10:	9004      	str	r0, [sp, #16]
 8008a12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 814d 	beq.w	8008cb6 <_dtoa_r+0xb2e>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4631      	mov	r1, r6
 8008a20:	220a      	movs	r2, #10
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 f9d4 	bl	8008dd0 <__multadd>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	dc4f      	bgt.n	8008ad0 <_dtoa_r+0x948>
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	dd4c      	ble.n	8008ad0 <_dtoa_r+0x948>
 8008a36:	e011      	b.n	8008a5c <_dtoa_r+0x8d4>
 8008a38:	d0c9      	beq.n	80089ce <_dtoa_r+0x846>
 8008a3a:	9a05      	ldr	r2, [sp, #20]
 8008a3c:	331c      	adds	r3, #28
 8008a3e:	441a      	add	r2, r3
 8008a40:	9205      	str	r2, [sp, #20]
 8008a42:	441d      	add	r5, r3
 8008a44:	4498      	add	r8, r3
 8008a46:	e7c2      	b.n	80089ce <_dtoa_r+0x846>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	e7f6      	b.n	8008a3a <_dtoa_r+0x8b2>
 8008a4c:	f1b9 0f00 	cmp.w	r9, #0
 8008a50:	dc38      	bgt.n	8008ac4 <_dtoa_r+0x93c>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	dd35      	ble.n	8008ac4 <_dtoa_r+0x93c>
 8008a58:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	b963      	cbnz	r3, 8008a7a <_dtoa_r+0x8f2>
 8008a60:	4639      	mov	r1, r7
 8008a62:	2205      	movs	r2, #5
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f9b3 	bl	8008dd0 <__multadd>
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	9804      	ldr	r0, [sp, #16]
 8008a70:	f000 fb78 	bl	8009164 <__mcmp>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f73f adcc 	bgt.w	8008612 <_dtoa_r+0x48a>
 8008a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7c:	465d      	mov	r5, fp
 8008a7e:	ea6f 0a03 	mvn.w	sl, r3
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	4639      	mov	r1, r7
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 f98a 	bl	8008da2 <_Bfree>
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	f43f aeb7 	beq.w	8008802 <_dtoa_r+0x67a>
 8008a94:	f1b9 0f00 	cmp.w	r9, #0
 8008a98:	d005      	beq.n	8008aa6 <_dtoa_r+0x91e>
 8008a9a:	45b1      	cmp	r9, r6
 8008a9c:	d003      	beq.n	8008aa6 <_dtoa_r+0x91e>
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f97e 	bl	8008da2 <_Bfree>
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 f97a 	bl	8008da2 <_Bfree>
 8008aae:	e6a8      	b.n	8008802 <_dtoa_r+0x67a>
 8008ab0:	2700      	movs	r7, #0
 8008ab2:	463e      	mov	r6, r7
 8008ab4:	e7e1      	b.n	8008a7a <_dtoa_r+0x8f2>
 8008ab6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008aba:	463e      	mov	r6, r7
 8008abc:	e5a9      	b.n	8008612 <_dtoa_r+0x48a>
 8008abe:	bf00      	nop
 8008ac0:	40240000 	.word	0x40240000
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 80fa 	beq.w	8008cc4 <_dtoa_r+0xb3c>
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	dd05      	ble.n	8008ae0 <_dtoa_r+0x958>
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	462a      	mov	r2, r5
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 faef 	bl	80090bc <__lshift>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	9b07      	ldr	r3, [sp, #28]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d04c      	beq.n	8008b80 <_dtoa_r+0x9f8>
 8008ae6:	6871      	ldr	r1, [r6, #4]
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 f926 	bl	8008d3a <_Balloc>
 8008aee:	6932      	ldr	r2, [r6, #16]
 8008af0:	3202      	adds	r2, #2
 8008af2:	4605      	mov	r5, r0
 8008af4:	0092      	lsls	r2, r2, #2
 8008af6:	f106 010c 	add.w	r1, r6, #12
 8008afa:	300c      	adds	r0, #12
 8008afc:	f000 f912 	bl	8008d24 <memcpy>
 8008b00:	2201      	movs	r2, #1
 8008b02:	4629      	mov	r1, r5
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fad9 	bl	80090bc <__lshift>
 8008b0a:	9b00      	ldr	r3, [sp, #0]
 8008b0c:	f8cd b014 	str.w	fp, [sp, #20]
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	46b1      	mov	r9, r6
 8008b16:	9307      	str	r3, [sp, #28]
 8008b18:	4606      	mov	r6, r0
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	9804      	ldr	r0, [sp, #16]
 8008b1e:	f7ff faa4 	bl	800806a <quorem>
 8008b22:	4649      	mov	r1, r9
 8008b24:	4605      	mov	r5, r0
 8008b26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b2a:	9804      	ldr	r0, [sp, #16]
 8008b2c:	f000 fb1a 	bl	8009164 <__mcmp>
 8008b30:	4632      	mov	r2, r6
 8008b32:	9000      	str	r0, [sp, #0]
 8008b34:	4639      	mov	r1, r7
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fb2e 	bl	8009198 <__mdiff>
 8008b3c:	68c3      	ldr	r3, [r0, #12]
 8008b3e:	4602      	mov	r2, r0
 8008b40:	bb03      	cbnz	r3, 8008b84 <_dtoa_r+0x9fc>
 8008b42:	4601      	mov	r1, r0
 8008b44:	9008      	str	r0, [sp, #32]
 8008b46:	9804      	ldr	r0, [sp, #16]
 8008b48:	f000 fb0c 	bl	8009164 <__mcmp>
 8008b4c:	9a08      	ldr	r2, [sp, #32]
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4611      	mov	r1, r2
 8008b52:	4620      	mov	r0, r4
 8008b54:	9308      	str	r3, [sp, #32]
 8008b56:	f000 f924 	bl	8008da2 <_Bfree>
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	b9a3      	cbnz	r3, 8008b88 <_dtoa_r+0xa00>
 8008b5e:	9a06      	ldr	r2, [sp, #24]
 8008b60:	b992      	cbnz	r2, 8008b88 <_dtoa_r+0xa00>
 8008b62:	9a07      	ldr	r2, [sp, #28]
 8008b64:	b982      	cbnz	r2, 8008b88 <_dtoa_r+0xa00>
 8008b66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b6a:	d029      	beq.n	8008bc0 <_dtoa_r+0xa38>
 8008b6c:	9b00      	ldr	r3, [sp, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dd01      	ble.n	8008b76 <_dtoa_r+0x9ee>
 8008b72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008b76:	9b05      	ldr	r3, [sp, #20]
 8008b78:	1c5d      	adds	r5, r3, #1
 8008b7a:	f883 8000 	strb.w	r8, [r3]
 8008b7e:	e782      	b.n	8008a86 <_dtoa_r+0x8fe>
 8008b80:	4630      	mov	r0, r6
 8008b82:	e7c2      	b.n	8008b0a <_dtoa_r+0x982>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e7e3      	b.n	8008b50 <_dtoa_r+0x9c8>
 8008b88:	9a00      	ldr	r2, [sp, #0]
 8008b8a:	2a00      	cmp	r2, #0
 8008b8c:	db04      	blt.n	8008b98 <_dtoa_r+0xa10>
 8008b8e:	d125      	bne.n	8008bdc <_dtoa_r+0xa54>
 8008b90:	9a06      	ldr	r2, [sp, #24]
 8008b92:	bb1a      	cbnz	r2, 8008bdc <_dtoa_r+0xa54>
 8008b94:	9a07      	ldr	r2, [sp, #28]
 8008b96:	bb0a      	cbnz	r2, 8008bdc <_dtoa_r+0xa54>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	ddec      	ble.n	8008b76 <_dtoa_r+0x9ee>
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	9904      	ldr	r1, [sp, #16]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fa8b 	bl	80090bc <__lshift>
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	9004      	str	r0, [sp, #16]
 8008baa:	f000 fadb 	bl	8009164 <__mcmp>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	dc03      	bgt.n	8008bba <_dtoa_r+0xa32>
 8008bb2:	d1e0      	bne.n	8008b76 <_dtoa_r+0x9ee>
 8008bb4:	f018 0f01 	tst.w	r8, #1
 8008bb8:	d0dd      	beq.n	8008b76 <_dtoa_r+0x9ee>
 8008bba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bbe:	d1d8      	bne.n	8008b72 <_dtoa_r+0x9ea>
 8008bc0:	9b05      	ldr	r3, [sp, #20]
 8008bc2:	9a05      	ldr	r2, [sp, #20]
 8008bc4:	1c5d      	adds	r5, r3, #1
 8008bc6:	2339      	movs	r3, #57	; 0x39
 8008bc8:	7013      	strb	r3, [r2, #0]
 8008bca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bce:	2b39      	cmp	r3, #57	; 0x39
 8008bd0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008bd4:	d04f      	beq.n	8008c76 <_dtoa_r+0xaee>
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	e754      	b.n	8008a86 <_dtoa_r+0x8fe>
 8008bdc:	9a05      	ldr	r2, [sp, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f102 0501 	add.w	r5, r2, #1
 8008be4:	dd06      	ble.n	8008bf4 <_dtoa_r+0xa6c>
 8008be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bea:	d0e9      	beq.n	8008bc0 <_dtoa_r+0xa38>
 8008bec:	f108 0801 	add.w	r8, r8, #1
 8008bf0:	9b05      	ldr	r3, [sp, #20]
 8008bf2:	e7c2      	b.n	8008b7a <_dtoa_r+0x9f2>
 8008bf4:	9a02      	ldr	r2, [sp, #8]
 8008bf6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008bfa:	eba5 030b 	sub.w	r3, r5, fp
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d021      	beq.n	8008c46 <_dtoa_r+0xabe>
 8008c02:	2300      	movs	r3, #0
 8008c04:	220a      	movs	r2, #10
 8008c06:	9904      	ldr	r1, [sp, #16]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 f8e1 	bl	8008dd0 <__multadd>
 8008c0e:	45b1      	cmp	r9, r6
 8008c10:	9004      	str	r0, [sp, #16]
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	f04f 020a 	mov.w	r2, #10
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	d105      	bne.n	8008c2c <_dtoa_r+0xaa4>
 8008c20:	f000 f8d6 	bl	8008dd0 <__multadd>
 8008c24:	4681      	mov	r9, r0
 8008c26:	4606      	mov	r6, r0
 8008c28:	9505      	str	r5, [sp, #20]
 8008c2a:	e776      	b.n	8008b1a <_dtoa_r+0x992>
 8008c2c:	f000 f8d0 	bl	8008dd0 <__multadd>
 8008c30:	4631      	mov	r1, r6
 8008c32:	4681      	mov	r9, r0
 8008c34:	2300      	movs	r3, #0
 8008c36:	220a      	movs	r2, #10
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 f8c9 	bl	8008dd0 <__multadd>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	e7f2      	b.n	8008c28 <_dtoa_r+0xaa0>
 8008c42:	f04f 0900 	mov.w	r9, #0
 8008c46:	2201      	movs	r2, #1
 8008c48:	9904      	ldr	r1, [sp, #16]
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fa36 	bl	80090bc <__lshift>
 8008c50:	4639      	mov	r1, r7
 8008c52:	9004      	str	r0, [sp, #16]
 8008c54:	f000 fa86 	bl	8009164 <__mcmp>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	dcb6      	bgt.n	8008bca <_dtoa_r+0xa42>
 8008c5c:	d102      	bne.n	8008c64 <_dtoa_r+0xadc>
 8008c5e:	f018 0f01 	tst.w	r8, #1
 8008c62:	d1b2      	bne.n	8008bca <_dtoa_r+0xa42>
 8008c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c68:	2b30      	cmp	r3, #48	; 0x30
 8008c6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008c6e:	f47f af0a 	bne.w	8008a86 <_dtoa_r+0x8fe>
 8008c72:	4615      	mov	r5, r2
 8008c74:	e7f6      	b.n	8008c64 <_dtoa_r+0xadc>
 8008c76:	4593      	cmp	fp, r2
 8008c78:	d105      	bne.n	8008c86 <_dtoa_r+0xafe>
 8008c7a:	2331      	movs	r3, #49	; 0x31
 8008c7c:	f10a 0a01 	add.w	sl, sl, #1
 8008c80:	f88b 3000 	strb.w	r3, [fp]
 8008c84:	e6ff      	b.n	8008a86 <_dtoa_r+0x8fe>
 8008c86:	4615      	mov	r5, r2
 8008c88:	e79f      	b.n	8008bca <_dtoa_r+0xa42>
 8008c8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008cf0 <_dtoa_r+0xb68>
 8008c8e:	e007      	b.n	8008ca0 <_dtoa_r+0xb18>
 8008c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008cf4 <_dtoa_r+0xb6c>
 8008c96:	b11b      	cbz	r3, 8008ca0 <_dtoa_r+0xb18>
 8008c98:	f10b 0308 	add.w	r3, fp, #8
 8008c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	b017      	add	sp, #92	; 0x5c
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca8:	9b06      	ldr	r3, [sp, #24]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	f77f ae35 	ble.w	800891a <_dtoa_r+0x792>
 8008cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cb2:	9307      	str	r3, [sp, #28]
 8008cb4:	e649      	b.n	800894a <_dtoa_r+0x7c2>
 8008cb6:	9b02      	ldr	r3, [sp, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dc03      	bgt.n	8008cc4 <_dtoa_r+0xb3c>
 8008cbc:	9b06      	ldr	r3, [sp, #24]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	f73f aecc 	bgt.w	8008a5c <_dtoa_r+0x8d4>
 8008cc4:	465d      	mov	r5, fp
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	9804      	ldr	r0, [sp, #16]
 8008cca:	f7ff f9ce 	bl	800806a <quorem>
 8008cce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008cd2:	f805 8b01 	strb.w	r8, [r5], #1
 8008cd6:	9a02      	ldr	r2, [sp, #8]
 8008cd8:	eba5 030b 	sub.w	r3, r5, fp
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	ddb0      	ble.n	8008c42 <_dtoa_r+0xaba>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	9904      	ldr	r1, [sp, #16]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 f872 	bl	8008dd0 <__multadd>
 8008cec:	9004      	str	r0, [sp, #16]
 8008cee:	e7ea      	b.n	8008cc6 <_dtoa_r+0xb3e>
 8008cf0:	0800ba70 	.word	0x0800ba70
 8008cf4:	0800ba72 	.word	0x0800ba72

08008cf8 <_localeconv_r>:
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <_localeconv_r+0x14>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6a18      	ldr	r0, [r3, #32]
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <_localeconv_r+0x18>)
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bf08      	it	eq
 8008d04:	4618      	moveq	r0, r3
 8008d06:	30f0      	adds	r0, #240	; 0xf0
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	20000068 	.word	0x20000068
 8008d10:	200000cc 	.word	0x200000cc

08008d14 <malloc>:
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <malloc+0xc>)
 8008d16:	4601      	mov	r1, r0
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f000 baf7 	b.w	800930c <_malloc_r>
 8008d1e:	bf00      	nop
 8008d20:	20000068 	.word	0x20000068

08008d24 <memcpy>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	1e43      	subs	r3, r0, #1
 8008d28:	440a      	add	r2, r1
 8008d2a:	4291      	cmp	r1, r2
 8008d2c:	d100      	bne.n	8008d30 <memcpy+0xc>
 8008d2e:	bd10      	pop	{r4, pc}
 8008d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d38:	e7f7      	b.n	8008d2a <memcpy+0x6>

08008d3a <_Balloc>:
 8008d3a:	b570      	push	{r4, r5, r6, lr}
 8008d3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d3e:	4604      	mov	r4, r0
 8008d40:	460e      	mov	r6, r1
 8008d42:	b93d      	cbnz	r5, 8008d54 <_Balloc+0x1a>
 8008d44:	2010      	movs	r0, #16
 8008d46:	f7ff ffe5 	bl	8008d14 <malloc>
 8008d4a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d50:	6005      	str	r5, [r0, #0]
 8008d52:	60c5      	str	r5, [r0, #12]
 8008d54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d56:	68eb      	ldr	r3, [r5, #12]
 8008d58:	b183      	cbz	r3, 8008d7c <_Balloc+0x42>
 8008d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d62:	b9b8      	cbnz	r0, 8008d94 <_Balloc+0x5a>
 8008d64:	2101      	movs	r1, #1
 8008d66:	fa01 f506 	lsl.w	r5, r1, r6
 8008d6a:	1d6a      	adds	r2, r5, #5
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fabe 	bl	80092f0 <_calloc_r>
 8008d74:	b160      	cbz	r0, 8008d90 <_Balloc+0x56>
 8008d76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008d7a:	e00e      	b.n	8008d9a <_Balloc+0x60>
 8008d7c:	2221      	movs	r2, #33	; 0x21
 8008d7e:	2104      	movs	r1, #4
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fab5 	bl	80092f0 <_calloc_r>
 8008d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d88:	60e8      	str	r0, [r5, #12]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <_Balloc+0x20>
 8008d90:	2000      	movs	r0, #0
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	6802      	ldr	r2, [r0, #0]
 8008d96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da0:	e7f7      	b.n	8008d92 <_Balloc+0x58>

08008da2 <_Bfree>:
 8008da2:	b570      	push	{r4, r5, r6, lr}
 8008da4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008da6:	4606      	mov	r6, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	b93c      	cbnz	r4, 8008dbc <_Bfree+0x1a>
 8008dac:	2010      	movs	r0, #16
 8008dae:	f7ff ffb1 	bl	8008d14 <malloc>
 8008db2:	6270      	str	r0, [r6, #36]	; 0x24
 8008db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008db8:	6004      	str	r4, [r0, #0]
 8008dba:	60c4      	str	r4, [r0, #12]
 8008dbc:	b13d      	cbz	r5, 8008dce <_Bfree+0x2c>
 8008dbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dc0:	686a      	ldr	r2, [r5, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc8:	6029      	str	r1, [r5, #0]
 8008dca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008dce:	bd70      	pop	{r4, r5, r6, pc}

08008dd0 <__multadd>:
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	690d      	ldr	r5, [r1, #16]
 8008dd6:	461f      	mov	r7, r3
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	f101 0c14 	add.w	ip, r1, #20
 8008de0:	2300      	movs	r3, #0
 8008de2:	f8dc 0000 	ldr.w	r0, [ip]
 8008de6:	b281      	uxth	r1, r0
 8008de8:	fb02 7101 	mla	r1, r2, r1, r7
 8008dec:	0c0f      	lsrs	r7, r1, #16
 8008dee:	0c00      	lsrs	r0, r0, #16
 8008df0:	fb02 7000 	mla	r0, r2, r0, r7
 8008df4:	b289      	uxth	r1, r1
 8008df6:	3301      	adds	r3, #1
 8008df8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e02:	f84c 1b04 	str.w	r1, [ip], #4
 8008e06:	dcec      	bgt.n	8008de2 <__multadd+0x12>
 8008e08:	b1d7      	cbz	r7, 8008e40 <__multadd+0x70>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dc12      	bgt.n	8008e36 <__multadd+0x66>
 8008e10:	6861      	ldr	r1, [r4, #4]
 8008e12:	4630      	mov	r0, r6
 8008e14:	3101      	adds	r1, #1
 8008e16:	f7ff ff90 	bl	8008d3a <_Balloc>
 8008e1a:	6922      	ldr	r2, [r4, #16]
 8008e1c:	3202      	adds	r2, #2
 8008e1e:	f104 010c 	add.w	r1, r4, #12
 8008e22:	4680      	mov	r8, r0
 8008e24:	0092      	lsls	r2, r2, #2
 8008e26:	300c      	adds	r0, #12
 8008e28:	f7ff ff7c 	bl	8008d24 <memcpy>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7ff ffb7 	bl	8008da2 <_Bfree>
 8008e34:	4644      	mov	r4, r8
 8008e36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e3a:	3501      	adds	r5, #1
 8008e3c:	615f      	str	r7, [r3, #20]
 8008e3e:	6125      	str	r5, [r4, #16]
 8008e40:	4620      	mov	r0, r4
 8008e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e46 <__hi0bits>:
 8008e46:	0c02      	lsrs	r2, r0, #16
 8008e48:	0412      	lsls	r2, r2, #16
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	b9b2      	cbnz	r2, 8008e7c <__hi0bits+0x36>
 8008e4e:	0403      	lsls	r3, r0, #16
 8008e50:	2010      	movs	r0, #16
 8008e52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e56:	bf04      	itt	eq
 8008e58:	021b      	lsleq	r3, r3, #8
 8008e5a:	3008      	addeq	r0, #8
 8008e5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e60:	bf04      	itt	eq
 8008e62:	011b      	lsleq	r3, r3, #4
 8008e64:	3004      	addeq	r0, #4
 8008e66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	009b      	lsleq	r3, r3, #2
 8008e6e:	3002      	addeq	r0, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	db06      	blt.n	8008e82 <__hi0bits+0x3c>
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	d503      	bpl.n	8008e80 <__hi0bits+0x3a>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	4770      	bx	lr
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e7e8      	b.n	8008e52 <__hi0bits+0xc>
 8008e80:	2020      	movs	r0, #32
 8008e82:	4770      	bx	lr

08008e84 <__lo0bits>:
 8008e84:	6803      	ldr	r3, [r0, #0]
 8008e86:	f013 0207 	ands.w	r2, r3, #7
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	d00b      	beq.n	8008ea6 <__lo0bits+0x22>
 8008e8e:	07da      	lsls	r2, r3, #31
 8008e90:	d423      	bmi.n	8008eda <__lo0bits+0x56>
 8008e92:	0798      	lsls	r0, r3, #30
 8008e94:	bf49      	itett	mi
 8008e96:	085b      	lsrmi	r3, r3, #1
 8008e98:	089b      	lsrpl	r3, r3, #2
 8008e9a:	2001      	movmi	r0, #1
 8008e9c:	600b      	strmi	r3, [r1, #0]
 8008e9e:	bf5c      	itt	pl
 8008ea0:	600b      	strpl	r3, [r1, #0]
 8008ea2:	2002      	movpl	r0, #2
 8008ea4:	4770      	bx	lr
 8008ea6:	b298      	uxth	r0, r3
 8008ea8:	b9a8      	cbnz	r0, 8008ed6 <__lo0bits+0x52>
 8008eaa:	0c1b      	lsrs	r3, r3, #16
 8008eac:	2010      	movs	r0, #16
 8008eae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eb2:	bf04      	itt	eq
 8008eb4:	0a1b      	lsreq	r3, r3, #8
 8008eb6:	3008      	addeq	r0, #8
 8008eb8:	071a      	lsls	r2, r3, #28
 8008eba:	bf04      	itt	eq
 8008ebc:	091b      	lsreq	r3, r3, #4
 8008ebe:	3004      	addeq	r0, #4
 8008ec0:	079a      	lsls	r2, r3, #30
 8008ec2:	bf04      	itt	eq
 8008ec4:	089b      	lsreq	r3, r3, #2
 8008ec6:	3002      	addeq	r0, #2
 8008ec8:	07da      	lsls	r2, r3, #31
 8008eca:	d402      	bmi.n	8008ed2 <__lo0bits+0x4e>
 8008ecc:	085b      	lsrs	r3, r3, #1
 8008ece:	d006      	beq.n	8008ede <__lo0bits+0x5a>
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	600b      	str	r3, [r1, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	e7e9      	b.n	8008eae <__lo0bits+0x2a>
 8008eda:	2000      	movs	r0, #0
 8008edc:	4770      	bx	lr
 8008ede:	2020      	movs	r0, #32
 8008ee0:	4770      	bx	lr

08008ee2 <__i2b>:
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	f7ff ff27 	bl	8008d3a <_Balloc>
 8008eec:	2201      	movs	r2, #1
 8008eee:	6144      	str	r4, [r0, #20]
 8008ef0:	6102      	str	r2, [r0, #16]
 8008ef2:	bd10      	pop	{r4, pc}

08008ef4 <__multiply>:
 8008ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	4614      	mov	r4, r2
 8008efa:	690a      	ldr	r2, [r1, #16]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	bfb8      	it	lt
 8008f02:	460b      	movlt	r3, r1
 8008f04:	4688      	mov	r8, r1
 8008f06:	bfbc      	itt	lt
 8008f08:	46a0      	movlt	r8, r4
 8008f0a:	461c      	movlt	r4, r3
 8008f0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f1c:	eb07 0609 	add.w	r6, r7, r9
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	bfb8      	it	lt
 8008f24:	3101      	addlt	r1, #1
 8008f26:	f7ff ff08 	bl	8008d3a <_Balloc>
 8008f2a:	f100 0514 	add.w	r5, r0, #20
 8008f2e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f32:	462b      	mov	r3, r5
 8008f34:	2200      	movs	r2, #0
 8008f36:	4573      	cmp	r3, lr
 8008f38:	d316      	bcc.n	8008f68 <__multiply+0x74>
 8008f3a:	f104 0214 	add.w	r2, r4, #20
 8008f3e:	f108 0114 	add.w	r1, r8, #20
 8008f42:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f46:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	9b00      	ldr	r3, [sp, #0]
 8008f4e:	9201      	str	r2, [sp, #4]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d80c      	bhi.n	8008f6e <__multiply+0x7a>
 8008f54:	2e00      	cmp	r6, #0
 8008f56:	dd03      	ble.n	8008f60 <__multiply+0x6c>
 8008f58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d05d      	beq.n	800901c <__multiply+0x128>
 8008f60:	6106      	str	r6, [r0, #16]
 8008f62:	b003      	add	sp, #12
 8008f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f68:	f843 2b04 	str.w	r2, [r3], #4
 8008f6c:	e7e3      	b.n	8008f36 <__multiply+0x42>
 8008f6e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008f72:	f1bb 0f00 	cmp.w	fp, #0
 8008f76:	d023      	beq.n	8008fc0 <__multiply+0xcc>
 8008f78:	4689      	mov	r9, r1
 8008f7a:	46ac      	mov	ip, r5
 8008f7c:	f04f 0800 	mov.w	r8, #0
 8008f80:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f84:	f8dc a000 	ldr.w	sl, [ip]
 8008f88:	b2a3      	uxth	r3, r4
 8008f8a:	fa1f fa8a 	uxth.w	sl, sl
 8008f8e:	fb0b a303 	mla	r3, fp, r3, sl
 8008f92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f96:	f8dc 4000 	ldr.w	r4, [ip]
 8008f9a:	4443      	add	r3, r8
 8008f9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008fa0:	fb0b 840a 	mla	r4, fp, sl, r8
 8008fa4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008fa8:	46e2      	mov	sl, ip
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fb0:	454f      	cmp	r7, r9
 8008fb2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008fb6:	f84a 3b04 	str.w	r3, [sl], #4
 8008fba:	d82b      	bhi.n	8009014 <__multiply+0x120>
 8008fbc:	f8cc 8004 	str.w	r8, [ip, #4]
 8008fc0:	9b01      	ldr	r3, [sp, #4]
 8008fc2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008fc6:	3204      	adds	r2, #4
 8008fc8:	f1ba 0f00 	cmp.w	sl, #0
 8008fcc:	d020      	beq.n	8009010 <__multiply+0x11c>
 8008fce:	682b      	ldr	r3, [r5, #0]
 8008fd0:	4689      	mov	r9, r1
 8008fd2:	46a8      	mov	r8, r5
 8008fd4:	f04f 0b00 	mov.w	fp, #0
 8008fd8:	f8b9 c000 	ldrh.w	ip, [r9]
 8008fdc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008fe0:	fb0a 440c 	mla	r4, sl, ip, r4
 8008fe4:	445c      	add	r4, fp
 8008fe6:	46c4      	mov	ip, r8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fee:	f84c 3b04 	str.w	r3, [ip], #4
 8008ff2:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ff6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ffa:	0c1b      	lsrs	r3, r3, #16
 8008ffc:	fb0a b303 	mla	r3, sl, r3, fp
 8009000:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009004:	454f      	cmp	r7, r9
 8009006:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800900a:	d805      	bhi.n	8009018 <__multiply+0x124>
 800900c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009010:	3504      	adds	r5, #4
 8009012:	e79b      	b.n	8008f4c <__multiply+0x58>
 8009014:	46d4      	mov	ip, sl
 8009016:	e7b3      	b.n	8008f80 <__multiply+0x8c>
 8009018:	46e0      	mov	r8, ip
 800901a:	e7dd      	b.n	8008fd8 <__multiply+0xe4>
 800901c:	3e01      	subs	r6, #1
 800901e:	e799      	b.n	8008f54 <__multiply+0x60>

08009020 <__pow5mult>:
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	4615      	mov	r5, r2
 8009026:	f012 0203 	ands.w	r2, r2, #3
 800902a:	4606      	mov	r6, r0
 800902c:	460f      	mov	r7, r1
 800902e:	d007      	beq.n	8009040 <__pow5mult+0x20>
 8009030:	3a01      	subs	r2, #1
 8009032:	4c21      	ldr	r4, [pc, #132]	; (80090b8 <__pow5mult+0x98>)
 8009034:	2300      	movs	r3, #0
 8009036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800903a:	f7ff fec9 	bl	8008dd0 <__multadd>
 800903e:	4607      	mov	r7, r0
 8009040:	10ad      	asrs	r5, r5, #2
 8009042:	d035      	beq.n	80090b0 <__pow5mult+0x90>
 8009044:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009046:	b93c      	cbnz	r4, 8009058 <__pow5mult+0x38>
 8009048:	2010      	movs	r0, #16
 800904a:	f7ff fe63 	bl	8008d14 <malloc>
 800904e:	6270      	str	r0, [r6, #36]	; 0x24
 8009050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009054:	6004      	str	r4, [r0, #0]
 8009056:	60c4      	str	r4, [r0, #12]
 8009058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800905c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009060:	b94c      	cbnz	r4, 8009076 <__pow5mult+0x56>
 8009062:	f240 2171 	movw	r1, #625	; 0x271
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ff3b 	bl	8008ee2 <__i2b>
 800906c:	2300      	movs	r3, #0
 800906e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009072:	4604      	mov	r4, r0
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	f04f 0800 	mov.w	r8, #0
 800907a:	07eb      	lsls	r3, r5, #31
 800907c:	d50a      	bpl.n	8009094 <__pow5mult+0x74>
 800907e:	4639      	mov	r1, r7
 8009080:	4622      	mov	r2, r4
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff ff36 	bl	8008ef4 <__multiply>
 8009088:	4639      	mov	r1, r7
 800908a:	4681      	mov	r9, r0
 800908c:	4630      	mov	r0, r6
 800908e:	f7ff fe88 	bl	8008da2 <_Bfree>
 8009092:	464f      	mov	r7, r9
 8009094:	106d      	asrs	r5, r5, #1
 8009096:	d00b      	beq.n	80090b0 <__pow5mult+0x90>
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	b938      	cbnz	r0, 80090ac <__pow5mult+0x8c>
 800909c:	4622      	mov	r2, r4
 800909e:	4621      	mov	r1, r4
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff ff27 	bl	8008ef4 <__multiply>
 80090a6:	6020      	str	r0, [r4, #0]
 80090a8:	f8c0 8000 	str.w	r8, [r0]
 80090ac:	4604      	mov	r4, r0
 80090ae:	e7e4      	b.n	800907a <__pow5mult+0x5a>
 80090b0:	4638      	mov	r0, r7
 80090b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b6:	bf00      	nop
 80090b8:	0800bb70 	.word	0x0800bb70

080090bc <__lshift>:
 80090bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c0:	460c      	mov	r4, r1
 80090c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6849      	ldr	r1, [r1, #4]
 80090ca:	eb0a 0903 	add.w	r9, sl, r3
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	4607      	mov	r7, r0
 80090d2:	4616      	mov	r6, r2
 80090d4:	f109 0501 	add.w	r5, r9, #1
 80090d8:	42ab      	cmp	r3, r5
 80090da:	db32      	blt.n	8009142 <__lshift+0x86>
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff fe2c 	bl	8008d3a <_Balloc>
 80090e2:	2300      	movs	r3, #0
 80090e4:	4680      	mov	r8, r0
 80090e6:	f100 0114 	add.w	r1, r0, #20
 80090ea:	461a      	mov	r2, r3
 80090ec:	4553      	cmp	r3, sl
 80090ee:	db2b      	blt.n	8009148 <__lshift+0x8c>
 80090f0:	6920      	ldr	r0, [r4, #16]
 80090f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090f6:	f104 0314 	add.w	r3, r4, #20
 80090fa:	f016 021f 	ands.w	r2, r6, #31
 80090fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009102:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009106:	d025      	beq.n	8009154 <__lshift+0x98>
 8009108:	f1c2 0e20 	rsb	lr, r2, #32
 800910c:	2000      	movs	r0, #0
 800910e:	681e      	ldr	r6, [r3, #0]
 8009110:	468a      	mov	sl, r1
 8009112:	4096      	lsls	r6, r2
 8009114:	4330      	orrs	r0, r6
 8009116:	f84a 0b04 	str.w	r0, [sl], #4
 800911a:	f853 0b04 	ldr.w	r0, [r3], #4
 800911e:	459c      	cmp	ip, r3
 8009120:	fa20 f00e 	lsr.w	r0, r0, lr
 8009124:	d814      	bhi.n	8009150 <__lshift+0x94>
 8009126:	6048      	str	r0, [r1, #4]
 8009128:	b108      	cbz	r0, 800912e <__lshift+0x72>
 800912a:	f109 0502 	add.w	r5, r9, #2
 800912e:	3d01      	subs	r5, #1
 8009130:	4638      	mov	r0, r7
 8009132:	f8c8 5010 	str.w	r5, [r8, #16]
 8009136:	4621      	mov	r1, r4
 8009138:	f7ff fe33 	bl	8008da2 <_Bfree>
 800913c:	4640      	mov	r0, r8
 800913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009142:	3101      	adds	r1, #1
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	e7c7      	b.n	80090d8 <__lshift+0x1c>
 8009148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800914c:	3301      	adds	r3, #1
 800914e:	e7cd      	b.n	80090ec <__lshift+0x30>
 8009150:	4651      	mov	r1, sl
 8009152:	e7dc      	b.n	800910e <__lshift+0x52>
 8009154:	3904      	subs	r1, #4
 8009156:	f853 2b04 	ldr.w	r2, [r3], #4
 800915a:	f841 2f04 	str.w	r2, [r1, #4]!
 800915e:	459c      	cmp	ip, r3
 8009160:	d8f9      	bhi.n	8009156 <__lshift+0x9a>
 8009162:	e7e4      	b.n	800912e <__lshift+0x72>

08009164 <__mcmp>:
 8009164:	6903      	ldr	r3, [r0, #16]
 8009166:	690a      	ldr	r2, [r1, #16]
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	b530      	push	{r4, r5, lr}
 800916c:	d10c      	bne.n	8009188 <__mcmp+0x24>
 800916e:	0092      	lsls	r2, r2, #2
 8009170:	3014      	adds	r0, #20
 8009172:	3114      	adds	r1, #20
 8009174:	1884      	adds	r4, r0, r2
 8009176:	4411      	add	r1, r2
 8009178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800917c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009180:	4295      	cmp	r5, r2
 8009182:	d003      	beq.n	800918c <__mcmp+0x28>
 8009184:	d305      	bcc.n	8009192 <__mcmp+0x2e>
 8009186:	2301      	movs	r3, #1
 8009188:	4618      	mov	r0, r3
 800918a:	bd30      	pop	{r4, r5, pc}
 800918c:	42a0      	cmp	r0, r4
 800918e:	d3f3      	bcc.n	8009178 <__mcmp+0x14>
 8009190:	e7fa      	b.n	8009188 <__mcmp+0x24>
 8009192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009196:	e7f7      	b.n	8009188 <__mcmp+0x24>

08009198 <__mdiff>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	460d      	mov	r5, r1
 800919e:	4607      	mov	r7, r0
 80091a0:	4611      	mov	r1, r2
 80091a2:	4628      	mov	r0, r5
 80091a4:	4614      	mov	r4, r2
 80091a6:	f7ff ffdd 	bl	8009164 <__mcmp>
 80091aa:	1e06      	subs	r6, r0, #0
 80091ac:	d108      	bne.n	80091c0 <__mdiff+0x28>
 80091ae:	4631      	mov	r1, r6
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff fdc2 	bl	8008d3a <_Balloc>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c0:	bfa4      	itt	ge
 80091c2:	4623      	movge	r3, r4
 80091c4:	462c      	movge	r4, r5
 80091c6:	4638      	mov	r0, r7
 80091c8:	6861      	ldr	r1, [r4, #4]
 80091ca:	bfa6      	itte	ge
 80091cc:	461d      	movge	r5, r3
 80091ce:	2600      	movge	r6, #0
 80091d0:	2601      	movlt	r6, #1
 80091d2:	f7ff fdb2 	bl	8008d3a <_Balloc>
 80091d6:	692b      	ldr	r3, [r5, #16]
 80091d8:	60c6      	str	r6, [r0, #12]
 80091da:	6926      	ldr	r6, [r4, #16]
 80091dc:	f105 0914 	add.w	r9, r5, #20
 80091e0:	f104 0214 	add.w	r2, r4, #20
 80091e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091ec:	f100 0514 	add.w	r5, r0, #20
 80091f0:	f04f 0e00 	mov.w	lr, #0
 80091f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80091f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80091fc:	fa1e f18a 	uxtah	r1, lr, sl
 8009200:	b2a3      	uxth	r3, r4
 8009202:	1ac9      	subs	r1, r1, r3
 8009204:	0c23      	lsrs	r3, r4, #16
 8009206:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800920a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800920e:	b289      	uxth	r1, r1
 8009210:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009214:	45c8      	cmp	r8, r9
 8009216:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800921a:	4694      	mov	ip, r2
 800921c:	f845 3b04 	str.w	r3, [r5], #4
 8009220:	d8e8      	bhi.n	80091f4 <__mdiff+0x5c>
 8009222:	45bc      	cmp	ip, r7
 8009224:	d304      	bcc.n	8009230 <__mdiff+0x98>
 8009226:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800922a:	b183      	cbz	r3, 800924e <__mdiff+0xb6>
 800922c:	6106      	str	r6, [r0, #16]
 800922e:	e7c5      	b.n	80091bc <__mdiff+0x24>
 8009230:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009234:	fa1e f381 	uxtah	r3, lr, r1
 8009238:	141a      	asrs	r2, r3, #16
 800923a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800923e:	b29b      	uxth	r3, r3
 8009240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009244:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009248:	f845 3b04 	str.w	r3, [r5], #4
 800924c:	e7e9      	b.n	8009222 <__mdiff+0x8a>
 800924e:	3e01      	subs	r6, #1
 8009250:	e7e9      	b.n	8009226 <__mdiff+0x8e>

08009252 <__d2b>:
 8009252:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009256:	460e      	mov	r6, r1
 8009258:	2101      	movs	r1, #1
 800925a:	ec59 8b10 	vmov	r8, r9, d0
 800925e:	4615      	mov	r5, r2
 8009260:	f7ff fd6b 	bl	8008d3a <_Balloc>
 8009264:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009268:	4607      	mov	r7, r0
 800926a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800926e:	bb34      	cbnz	r4, 80092be <__d2b+0x6c>
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	f1b8 0300 	subs.w	r3, r8, #0
 8009276:	d027      	beq.n	80092c8 <__d2b+0x76>
 8009278:	a802      	add	r0, sp, #8
 800927a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800927e:	f7ff fe01 	bl	8008e84 <__lo0bits>
 8009282:	9900      	ldr	r1, [sp, #0]
 8009284:	b1f0      	cbz	r0, 80092c4 <__d2b+0x72>
 8009286:	9a01      	ldr	r2, [sp, #4]
 8009288:	f1c0 0320 	rsb	r3, r0, #32
 800928c:	fa02 f303 	lsl.w	r3, r2, r3
 8009290:	430b      	orrs	r3, r1
 8009292:	40c2      	lsrs	r2, r0
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	9201      	str	r2, [sp, #4]
 8009298:	9b01      	ldr	r3, [sp, #4]
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2102      	movne	r1, #2
 80092a2:	2101      	moveq	r1, #1
 80092a4:	6139      	str	r1, [r7, #16]
 80092a6:	b1c4      	cbz	r4, 80092da <__d2b+0x88>
 80092a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80092ac:	4404      	add	r4, r0
 80092ae:	6034      	str	r4, [r6, #0]
 80092b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092b4:	6028      	str	r0, [r5, #0]
 80092b6:	4638      	mov	r0, r7
 80092b8:	b003      	add	sp, #12
 80092ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092c2:	e7d5      	b.n	8009270 <__d2b+0x1e>
 80092c4:	6179      	str	r1, [r7, #20]
 80092c6:	e7e7      	b.n	8009298 <__d2b+0x46>
 80092c8:	a801      	add	r0, sp, #4
 80092ca:	f7ff fddb 	bl	8008e84 <__lo0bits>
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	2101      	movs	r1, #1
 80092d4:	6139      	str	r1, [r7, #16]
 80092d6:	3020      	adds	r0, #32
 80092d8:	e7e5      	b.n	80092a6 <__d2b+0x54>
 80092da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80092de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092e2:	6030      	str	r0, [r6, #0]
 80092e4:	6918      	ldr	r0, [r3, #16]
 80092e6:	f7ff fdae 	bl	8008e46 <__hi0bits>
 80092ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80092ee:	e7e1      	b.n	80092b4 <__d2b+0x62>

080092f0 <_calloc_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	fb02 f401 	mul.w	r4, r2, r1
 80092f6:	4621      	mov	r1, r4
 80092f8:	f000 f808 	bl	800930c <_malloc_r>
 80092fc:	4605      	mov	r5, r0
 80092fe:	b118      	cbz	r0, 8009308 <_calloc_r+0x18>
 8009300:	4622      	mov	r2, r4
 8009302:	2100      	movs	r1, #0
 8009304:	f7fe fb60 	bl	80079c8 <memset>
 8009308:	4628      	mov	r0, r5
 800930a:	bd38      	pop	{r3, r4, r5, pc}

0800930c <_malloc_r>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	1ccd      	adds	r5, r1, #3
 8009310:	f025 0503 	bic.w	r5, r5, #3
 8009314:	3508      	adds	r5, #8
 8009316:	2d0c      	cmp	r5, #12
 8009318:	bf38      	it	cc
 800931a:	250c      	movcc	r5, #12
 800931c:	2d00      	cmp	r5, #0
 800931e:	4606      	mov	r6, r0
 8009320:	db01      	blt.n	8009326 <_malloc_r+0x1a>
 8009322:	42a9      	cmp	r1, r5
 8009324:	d903      	bls.n	800932e <_malloc_r+0x22>
 8009326:	230c      	movs	r3, #12
 8009328:	6033      	str	r3, [r6, #0]
 800932a:	2000      	movs	r0, #0
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	f000 f869 	bl	8009404 <__malloc_lock>
 8009332:	4a21      	ldr	r2, [pc, #132]	; (80093b8 <_malloc_r+0xac>)
 8009334:	6814      	ldr	r4, [r2, #0]
 8009336:	4621      	mov	r1, r4
 8009338:	b991      	cbnz	r1, 8009360 <_malloc_r+0x54>
 800933a:	4c20      	ldr	r4, [pc, #128]	; (80093bc <_malloc_r+0xb0>)
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	b91b      	cbnz	r3, 8009348 <_malloc_r+0x3c>
 8009340:	4630      	mov	r0, r6
 8009342:	f000 f83d 	bl	80093c0 <_sbrk_r>
 8009346:	6020      	str	r0, [r4, #0]
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f000 f838 	bl	80093c0 <_sbrk_r>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d124      	bne.n	800939e <_malloc_r+0x92>
 8009354:	230c      	movs	r3, #12
 8009356:	6033      	str	r3, [r6, #0]
 8009358:	4630      	mov	r0, r6
 800935a:	f000 f854 	bl	8009406 <__malloc_unlock>
 800935e:	e7e4      	b.n	800932a <_malloc_r+0x1e>
 8009360:	680b      	ldr	r3, [r1, #0]
 8009362:	1b5b      	subs	r3, r3, r5
 8009364:	d418      	bmi.n	8009398 <_malloc_r+0x8c>
 8009366:	2b0b      	cmp	r3, #11
 8009368:	d90f      	bls.n	800938a <_malloc_r+0x7e>
 800936a:	600b      	str	r3, [r1, #0]
 800936c:	50cd      	str	r5, [r1, r3]
 800936e:	18cc      	adds	r4, r1, r3
 8009370:	4630      	mov	r0, r6
 8009372:	f000 f848 	bl	8009406 <__malloc_unlock>
 8009376:	f104 000b 	add.w	r0, r4, #11
 800937a:	1d23      	adds	r3, r4, #4
 800937c:	f020 0007 	bic.w	r0, r0, #7
 8009380:	1ac3      	subs	r3, r0, r3
 8009382:	d0d3      	beq.n	800932c <_malloc_r+0x20>
 8009384:	425a      	negs	r2, r3
 8009386:	50e2      	str	r2, [r4, r3]
 8009388:	e7d0      	b.n	800932c <_malloc_r+0x20>
 800938a:	428c      	cmp	r4, r1
 800938c:	684b      	ldr	r3, [r1, #4]
 800938e:	bf16      	itet	ne
 8009390:	6063      	strne	r3, [r4, #4]
 8009392:	6013      	streq	r3, [r2, #0]
 8009394:	460c      	movne	r4, r1
 8009396:	e7eb      	b.n	8009370 <_malloc_r+0x64>
 8009398:	460c      	mov	r4, r1
 800939a:	6849      	ldr	r1, [r1, #4]
 800939c:	e7cc      	b.n	8009338 <_malloc_r+0x2c>
 800939e:	1cc4      	adds	r4, r0, #3
 80093a0:	f024 0403 	bic.w	r4, r4, #3
 80093a4:	42a0      	cmp	r0, r4
 80093a6:	d005      	beq.n	80093b4 <_malloc_r+0xa8>
 80093a8:	1a21      	subs	r1, r4, r0
 80093aa:	4630      	mov	r0, r6
 80093ac:	f000 f808 	bl	80093c0 <_sbrk_r>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d0cf      	beq.n	8009354 <_malloc_r+0x48>
 80093b4:	6025      	str	r5, [r4, #0]
 80093b6:	e7db      	b.n	8009370 <_malloc_r+0x64>
 80093b8:	200002ac 	.word	0x200002ac
 80093bc:	200002b0 	.word	0x200002b0

080093c0 <_sbrk_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4c06      	ldr	r4, [pc, #24]	; (80093dc <_sbrk_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4605      	mov	r5, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	f7f8 f930 	bl	8001630 <_sbrk>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_sbrk_r+0x1a>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	b103      	cbz	r3, 80093da <_sbrk_r+0x1a>
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000820 	.word	0x20000820

080093e0 <__ascii_mbtowc>:
 80093e0:	b082      	sub	sp, #8
 80093e2:	b901      	cbnz	r1, 80093e6 <__ascii_mbtowc+0x6>
 80093e4:	a901      	add	r1, sp, #4
 80093e6:	b142      	cbz	r2, 80093fa <__ascii_mbtowc+0x1a>
 80093e8:	b14b      	cbz	r3, 80093fe <__ascii_mbtowc+0x1e>
 80093ea:	7813      	ldrb	r3, [r2, #0]
 80093ec:	600b      	str	r3, [r1, #0]
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	1c10      	adds	r0, r2, #0
 80093f2:	bf18      	it	ne
 80093f4:	2001      	movne	r0, #1
 80093f6:	b002      	add	sp, #8
 80093f8:	4770      	bx	lr
 80093fa:	4610      	mov	r0, r2
 80093fc:	e7fb      	b.n	80093f6 <__ascii_mbtowc+0x16>
 80093fe:	f06f 0001 	mvn.w	r0, #1
 8009402:	e7f8      	b.n	80093f6 <__ascii_mbtowc+0x16>

08009404 <__malloc_lock>:
 8009404:	4770      	bx	lr

08009406 <__malloc_unlock>:
 8009406:	4770      	bx	lr

08009408 <__ascii_wctomb>:
 8009408:	b149      	cbz	r1, 800941e <__ascii_wctomb+0x16>
 800940a:	2aff      	cmp	r2, #255	; 0xff
 800940c:	bf85      	ittet	hi
 800940e:	238a      	movhi	r3, #138	; 0x8a
 8009410:	6003      	strhi	r3, [r0, #0]
 8009412:	700a      	strbls	r2, [r1, #0]
 8009414:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009418:	bf98      	it	ls
 800941a:	2001      	movls	r0, #1
 800941c:	4770      	bx	lr
 800941e:	4608      	mov	r0, r1
 8009420:	4770      	bx	lr
 8009422:	0000      	movs	r0, r0
 8009424:	0000      	movs	r0, r0
	...

08009428 <cos>:
 8009428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800942a:	ec51 0b10 	vmov	r0, r1, d0
 800942e:	4a1e      	ldr	r2, [pc, #120]	; (80094a8 <cos+0x80>)
 8009430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009434:	4293      	cmp	r3, r2
 8009436:	dc06      	bgt.n	8009446 <cos+0x1e>
 8009438:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80094a0 <cos+0x78>
 800943c:	f001 fae0 	bl	800aa00 <__kernel_cos>
 8009440:	ec51 0b10 	vmov	r0, r1, d0
 8009444:	e007      	b.n	8009456 <cos+0x2e>
 8009446:	4a19      	ldr	r2, [pc, #100]	; (80094ac <cos+0x84>)
 8009448:	4293      	cmp	r3, r2
 800944a:	dd09      	ble.n	8009460 <cos+0x38>
 800944c:	ee10 2a10 	vmov	r2, s0
 8009450:	460b      	mov	r3, r1
 8009452:	f7f6 fecd 	bl	80001f0 <__aeabi_dsub>
 8009456:	ec41 0b10 	vmov	d0, r0, r1
 800945a:	b005      	add	sp, #20
 800945c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009460:	4668      	mov	r0, sp
 8009462:	f001 f829 	bl	800a4b8 <__ieee754_rem_pio2>
 8009466:	f000 0003 	and.w	r0, r0, #3
 800946a:	2801      	cmp	r0, #1
 800946c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009470:	ed9d 0b00 	vldr	d0, [sp]
 8009474:	d007      	beq.n	8009486 <cos+0x5e>
 8009476:	2802      	cmp	r0, #2
 8009478:	d00e      	beq.n	8009498 <cos+0x70>
 800947a:	2800      	cmp	r0, #0
 800947c:	d0de      	beq.n	800943c <cos+0x14>
 800947e:	2001      	movs	r0, #1
 8009480:	f001 fec6 	bl	800b210 <__kernel_sin>
 8009484:	e7dc      	b.n	8009440 <cos+0x18>
 8009486:	f001 fec3 	bl	800b210 <__kernel_sin>
 800948a:	ec53 2b10 	vmov	r2, r3, d0
 800948e:	ee10 0a10 	vmov	r0, s0
 8009492:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009496:	e7de      	b.n	8009456 <cos+0x2e>
 8009498:	f001 fab2 	bl	800aa00 <__kernel_cos>
 800949c:	e7f5      	b.n	800948a <cos+0x62>
 800949e:	bf00      	nop
	...
 80094a8:	3fe921fb 	.word	0x3fe921fb
 80094ac:	7fefffff 	.word	0x7fefffff

080094b0 <sin>:
 80094b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094b2:	ec51 0b10 	vmov	r0, r1, d0
 80094b6:	4a20      	ldr	r2, [pc, #128]	; (8009538 <sin+0x88>)
 80094b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094bc:	4293      	cmp	r3, r2
 80094be:	dc07      	bgt.n	80094d0 <sin+0x20>
 80094c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009530 <sin+0x80>
 80094c4:	2000      	movs	r0, #0
 80094c6:	f001 fea3 	bl	800b210 <__kernel_sin>
 80094ca:	ec51 0b10 	vmov	r0, r1, d0
 80094ce:	e007      	b.n	80094e0 <sin+0x30>
 80094d0:	4a1a      	ldr	r2, [pc, #104]	; (800953c <sin+0x8c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	dd09      	ble.n	80094ea <sin+0x3a>
 80094d6:	ee10 2a10 	vmov	r2, s0
 80094da:	460b      	mov	r3, r1
 80094dc:	f7f6 fe88 	bl	80001f0 <__aeabi_dsub>
 80094e0:	ec41 0b10 	vmov	d0, r0, r1
 80094e4:	b005      	add	sp, #20
 80094e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80094ea:	4668      	mov	r0, sp
 80094ec:	f000 ffe4 	bl	800a4b8 <__ieee754_rem_pio2>
 80094f0:	f000 0003 	and.w	r0, r0, #3
 80094f4:	2801      	cmp	r0, #1
 80094f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094fa:	ed9d 0b00 	vldr	d0, [sp]
 80094fe:	d004      	beq.n	800950a <sin+0x5a>
 8009500:	2802      	cmp	r0, #2
 8009502:	d005      	beq.n	8009510 <sin+0x60>
 8009504:	b970      	cbnz	r0, 8009524 <sin+0x74>
 8009506:	2001      	movs	r0, #1
 8009508:	e7dd      	b.n	80094c6 <sin+0x16>
 800950a:	f001 fa79 	bl	800aa00 <__kernel_cos>
 800950e:	e7dc      	b.n	80094ca <sin+0x1a>
 8009510:	2001      	movs	r0, #1
 8009512:	f001 fe7d 	bl	800b210 <__kernel_sin>
 8009516:	ec53 2b10 	vmov	r2, r3, d0
 800951a:	ee10 0a10 	vmov	r0, s0
 800951e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009522:	e7dd      	b.n	80094e0 <sin+0x30>
 8009524:	f001 fa6c 	bl	800aa00 <__kernel_cos>
 8009528:	e7f5      	b.n	8009516 <sin+0x66>
 800952a:	bf00      	nop
 800952c:	f3af 8000 	nop.w
	...
 8009538:	3fe921fb 	.word	0x3fe921fb
 800953c:	7fefffff 	.word	0x7fefffff

08009540 <atan2>:
 8009540:	f000 b9ca 	b.w	80098d8 <__ieee754_atan2>

08009544 <pow>:
 8009544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	ed2d 8b04 	vpush	{d8-d9}
 800954c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009820 <pow+0x2dc>
 8009550:	b08d      	sub	sp, #52	; 0x34
 8009552:	ec57 6b10 	vmov	r6, r7, d0
 8009556:	ec55 4b11 	vmov	r4, r5, d1
 800955a:	f000 fa9d 	bl	8009a98 <__ieee754_pow>
 800955e:	f999 3000 	ldrsb.w	r3, [r9]
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	eeb0 8a40 	vmov.f32	s16, s0
 800956a:	eef0 8a60 	vmov.f32	s17, s1
 800956e:	46c8      	mov	r8, r9
 8009570:	d05f      	beq.n	8009632 <pow+0xee>
 8009572:	4622      	mov	r2, r4
 8009574:	462b      	mov	r3, r5
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f7 fa8b 	bl	8000a94 <__aeabi_dcmpun>
 800957e:	4683      	mov	fp, r0
 8009580:	2800      	cmp	r0, #0
 8009582:	d156      	bne.n	8009632 <pow+0xee>
 8009584:	4632      	mov	r2, r6
 8009586:	463b      	mov	r3, r7
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f7 fa82 	bl	8000a94 <__aeabi_dcmpun>
 8009590:	9001      	str	r0, [sp, #4]
 8009592:	b1e8      	cbz	r0, 80095d0 <pow+0x8c>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	f7f7 fa48 	bl	8000a30 <__aeabi_dcmpeq>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d046      	beq.n	8009632 <pow+0xee>
 80095a4:	2301      	movs	r3, #1
 80095a6:	9302      	str	r3, [sp, #8]
 80095a8:	4b96      	ldr	r3, [pc, #600]	; (8009804 <pow+0x2c0>)
 80095aa:	9303      	str	r3, [sp, #12]
 80095ac:	4b96      	ldr	r3, [pc, #600]	; (8009808 <pow+0x2c4>)
 80095ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80095b2:	2200      	movs	r2, #0
 80095b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095b8:	9b00      	ldr	r3, [sp, #0]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80095c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80095c4:	d033      	beq.n	800962e <pow+0xea>
 80095c6:	a802      	add	r0, sp, #8
 80095c8:	f002 f916 	bl	800b7f8 <matherr>
 80095cc:	bb48      	cbnz	r0, 8009622 <pow+0xde>
 80095ce:	e05d      	b.n	800968c <pow+0x148>
 80095d0:	f04f 0a00 	mov.w	sl, #0
 80095d4:	f04f 0b00 	mov.w	fp, #0
 80095d8:	4652      	mov	r2, sl
 80095da:	465b      	mov	r3, fp
 80095dc:	4630      	mov	r0, r6
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f7 fa26 	bl	8000a30 <__aeabi_dcmpeq>
 80095e4:	ec4b ab19 	vmov	d9, sl, fp
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d054      	beq.n	8009696 <pow+0x152>
 80095ec:	4652      	mov	r2, sl
 80095ee:	465b      	mov	r3, fp
 80095f0:	4620      	mov	r0, r4
 80095f2:	4629      	mov	r1, r5
 80095f4:	f7f7 fa1c 	bl	8000a30 <__aeabi_dcmpeq>
 80095f8:	4680      	mov	r8, r0
 80095fa:	b318      	cbz	r0, 8009644 <pow+0x100>
 80095fc:	2301      	movs	r3, #1
 80095fe:	9302      	str	r3, [sp, #8]
 8009600:	4b80      	ldr	r3, [pc, #512]	; (8009804 <pow+0x2c0>)
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	930a      	str	r3, [sp, #40]	; 0x28
 8009608:	9b00      	ldr	r3, [sp, #0]
 800960a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800960e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009612:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0d5      	beq.n	80095c6 <pow+0x82>
 800961a:	4b7b      	ldr	r3, [pc, #492]	; (8009808 <pow+0x2c4>)
 800961c:	2200      	movs	r2, #0
 800961e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009624:	b11b      	cbz	r3, 800962e <pow+0xea>
 8009626:	f7fe f9a5 	bl	8007974 <__errno>
 800962a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009632:	eeb0 0a48 	vmov.f32	s0, s16
 8009636:	eef0 0a68 	vmov.f32	s1, s17
 800963a:	b00d      	add	sp, #52	; 0x34
 800963c:	ecbd 8b04 	vpop	{d8-d9}
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009644:	ec45 4b10 	vmov	d0, r4, r5
 8009648:	f002 f847 	bl	800b6da <finite>
 800964c:	2800      	cmp	r0, #0
 800964e:	d0f0      	beq.n	8009632 <pow+0xee>
 8009650:	4652      	mov	r2, sl
 8009652:	465b      	mov	r3, fp
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f7 f9f4 	bl	8000a44 <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	d0e8      	beq.n	8009632 <pow+0xee>
 8009660:	2301      	movs	r3, #1
 8009662:	9302      	str	r3, [sp, #8]
 8009664:	4b67      	ldr	r3, [pc, #412]	; (8009804 <pow+0x2c0>)
 8009666:	9303      	str	r3, [sp, #12]
 8009668:	f999 3000 	ldrsb.w	r3, [r9]
 800966c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009670:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009674:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009678:	b913      	cbnz	r3, 8009680 <pow+0x13c>
 800967a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800967e:	e7a2      	b.n	80095c6 <pow+0x82>
 8009680:	4962      	ldr	r1, [pc, #392]	; (800980c <pow+0x2c8>)
 8009682:	2000      	movs	r0, #0
 8009684:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d19c      	bne.n	80095c6 <pow+0x82>
 800968c:	f7fe f972 	bl	8007974 <__errno>
 8009690:	2321      	movs	r3, #33	; 0x21
 8009692:	6003      	str	r3, [r0, #0]
 8009694:	e7c5      	b.n	8009622 <pow+0xde>
 8009696:	eeb0 0a48 	vmov.f32	s0, s16
 800969a:	eef0 0a68 	vmov.f32	s1, s17
 800969e:	f002 f81c 	bl	800b6da <finite>
 80096a2:	9000      	str	r0, [sp, #0]
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f040 8081 	bne.w	80097ac <pow+0x268>
 80096aa:	ec47 6b10 	vmov	d0, r6, r7
 80096ae:	f002 f814 	bl	800b6da <finite>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d07a      	beq.n	80097ac <pow+0x268>
 80096b6:	ec45 4b10 	vmov	d0, r4, r5
 80096ba:	f002 f80e 	bl	800b6da <finite>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d074      	beq.n	80097ac <pow+0x268>
 80096c2:	ec53 2b18 	vmov	r2, r3, d8
 80096c6:	ee18 0a10 	vmov	r0, s16
 80096ca:	4619      	mov	r1, r3
 80096cc:	f7f7 f9e2 	bl	8000a94 <__aeabi_dcmpun>
 80096d0:	f999 9000 	ldrsb.w	r9, [r9]
 80096d4:	4b4b      	ldr	r3, [pc, #300]	; (8009804 <pow+0x2c0>)
 80096d6:	b1b0      	cbz	r0, 8009706 <pow+0x1c2>
 80096d8:	2201      	movs	r2, #1
 80096da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	930a      	str	r3, [sp, #40]	; 0x28
 80096e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80096ea:	f1b9 0f00 	cmp.w	r9, #0
 80096ee:	d0c4      	beq.n	800967a <pow+0x136>
 80096f0:	4652      	mov	r2, sl
 80096f2:	465b      	mov	r3, fp
 80096f4:	4650      	mov	r0, sl
 80096f6:	4659      	mov	r1, fp
 80096f8:	f7f7 f85c 	bl	80007b4 <__aeabi_ddiv>
 80096fc:	f1b9 0f02 	cmp.w	r9, #2
 8009700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009704:	e7c1      	b.n	800968a <pow+0x146>
 8009706:	2203      	movs	r2, #3
 8009708:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800970c:	900a      	str	r0, [sp, #40]	; 0x28
 800970e:	4629      	mov	r1, r5
 8009710:	4620      	mov	r0, r4
 8009712:	2200      	movs	r2, #0
 8009714:	4b3e      	ldr	r3, [pc, #248]	; (8009810 <pow+0x2cc>)
 8009716:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800971a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800971e:	f7f6 ff1f 	bl	8000560 <__aeabi_dmul>
 8009722:	4604      	mov	r4, r0
 8009724:	460d      	mov	r5, r1
 8009726:	f1b9 0f00 	cmp.w	r9, #0
 800972a:	d124      	bne.n	8009776 <pow+0x232>
 800972c:	4b39      	ldr	r3, [pc, #228]	; (8009814 <pow+0x2d0>)
 800972e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009732:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009736:	4630      	mov	r0, r6
 8009738:	4652      	mov	r2, sl
 800973a:	465b      	mov	r3, fp
 800973c:	4639      	mov	r1, r7
 800973e:	f7f7 f981 	bl	8000a44 <__aeabi_dcmplt>
 8009742:	2800      	cmp	r0, #0
 8009744:	d056      	beq.n	80097f4 <pow+0x2b0>
 8009746:	ec45 4b10 	vmov	d0, r4, r5
 800974a:	f002 f861 	bl	800b810 <rint>
 800974e:	4622      	mov	r2, r4
 8009750:	462b      	mov	r3, r5
 8009752:	ec51 0b10 	vmov	r0, r1, d0
 8009756:	f7f7 f96b 	bl	8000a30 <__aeabi_dcmpeq>
 800975a:	b920      	cbnz	r0, 8009766 <pow+0x222>
 800975c:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <pow+0x2d4>)
 800975e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009762:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009766:	f998 3000 	ldrsb.w	r3, [r8]
 800976a:	2b02      	cmp	r3, #2
 800976c:	d142      	bne.n	80097f4 <pow+0x2b0>
 800976e:	f7fe f901 	bl	8007974 <__errno>
 8009772:	2322      	movs	r3, #34	; 0x22
 8009774:	e78d      	b.n	8009692 <pow+0x14e>
 8009776:	4b29      	ldr	r3, [pc, #164]	; (800981c <pow+0x2d8>)
 8009778:	2200      	movs	r2, #0
 800977a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800977e:	4630      	mov	r0, r6
 8009780:	4652      	mov	r2, sl
 8009782:	465b      	mov	r3, fp
 8009784:	4639      	mov	r1, r7
 8009786:	f7f7 f95d 	bl	8000a44 <__aeabi_dcmplt>
 800978a:	2800      	cmp	r0, #0
 800978c:	d0eb      	beq.n	8009766 <pow+0x222>
 800978e:	ec45 4b10 	vmov	d0, r4, r5
 8009792:	f002 f83d 	bl	800b810 <rint>
 8009796:	4622      	mov	r2, r4
 8009798:	462b      	mov	r3, r5
 800979a:	ec51 0b10 	vmov	r0, r1, d0
 800979e:	f7f7 f947 	bl	8000a30 <__aeabi_dcmpeq>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d1df      	bne.n	8009766 <pow+0x222>
 80097a6:	2200      	movs	r2, #0
 80097a8:	4b18      	ldr	r3, [pc, #96]	; (800980c <pow+0x2c8>)
 80097aa:	e7da      	b.n	8009762 <pow+0x21e>
 80097ac:	2200      	movs	r2, #0
 80097ae:	2300      	movs	r3, #0
 80097b0:	ec51 0b18 	vmov	r0, r1, d8
 80097b4:	f7f7 f93c 	bl	8000a30 <__aeabi_dcmpeq>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f43f af3a 	beq.w	8009632 <pow+0xee>
 80097be:	ec47 6b10 	vmov	d0, r6, r7
 80097c2:	f001 ff8a 	bl	800b6da <finite>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f43f af33 	beq.w	8009632 <pow+0xee>
 80097cc:	ec45 4b10 	vmov	d0, r4, r5
 80097d0:	f001 ff83 	bl	800b6da <finite>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f43f af2c 	beq.w	8009632 <pow+0xee>
 80097da:	2304      	movs	r3, #4
 80097dc:	9302      	str	r3, [sp, #8]
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <pow+0x2c0>)
 80097e0:	9303      	str	r3, [sp, #12]
 80097e2:	2300      	movs	r3, #0
 80097e4:	930a      	str	r3, [sp, #40]	; 0x28
 80097e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80097ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80097f2:	e7b8      	b.n	8009766 <pow+0x222>
 80097f4:	a802      	add	r0, sp, #8
 80097f6:	f001 ffff 	bl	800b7f8 <matherr>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	f47f af11 	bne.w	8009622 <pow+0xde>
 8009800:	e7b5      	b.n	800976e <pow+0x22a>
 8009802:	bf00      	nop
 8009804:	0800bc87 	.word	0x0800bc87
 8009808:	3ff00000 	.word	0x3ff00000
 800980c:	fff00000 	.word	0xfff00000
 8009810:	3fe00000 	.word	0x3fe00000
 8009814:	47efffff 	.word	0x47efffff
 8009818:	c7efffff 	.word	0xc7efffff
 800981c:	7ff00000 	.word	0x7ff00000
 8009820:	20000238 	.word	0x20000238

08009824 <sqrt>:
 8009824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009828:	ed2d 8b02 	vpush	{d8}
 800982c:	b08b      	sub	sp, #44	; 0x2c
 800982e:	ec55 4b10 	vmov	r4, r5, d0
 8009832:	f001 f833 	bl	800a89c <__ieee754_sqrt>
 8009836:	4b26      	ldr	r3, [pc, #152]	; (80098d0 <sqrt+0xac>)
 8009838:	eeb0 8a40 	vmov.f32	s16, s0
 800983c:	eef0 8a60 	vmov.f32	s17, s1
 8009840:	f993 6000 	ldrsb.w	r6, [r3]
 8009844:	1c73      	adds	r3, r6, #1
 8009846:	d02a      	beq.n	800989e <sqrt+0x7a>
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 f920 	bl	8000a94 <__aeabi_dcmpun>
 8009854:	4607      	mov	r7, r0
 8009856:	bb10      	cbnz	r0, 800989e <sqrt+0x7a>
 8009858:	f04f 0800 	mov.w	r8, #0
 800985c:	f04f 0900 	mov.w	r9, #0
 8009860:	4642      	mov	r2, r8
 8009862:	464b      	mov	r3, r9
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f7 f8ec 	bl	8000a44 <__aeabi_dcmplt>
 800986c:	b1b8      	cbz	r0, 800989e <sqrt+0x7a>
 800986e:	2301      	movs	r3, #1
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	4b18      	ldr	r3, [pc, #96]	; (80098d4 <sqrt+0xb0>)
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	9708      	str	r7, [sp, #32]
 8009878:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800987c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009880:	b9b6      	cbnz	r6, 80098b0 <sqrt+0x8c>
 8009882:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009886:	4668      	mov	r0, sp
 8009888:	f001 ffb6 	bl	800b7f8 <matherr>
 800988c:	b1d0      	cbz	r0, 80098c4 <sqrt+0xa0>
 800988e:	9b08      	ldr	r3, [sp, #32]
 8009890:	b11b      	cbz	r3, 800989a <sqrt+0x76>
 8009892:	f7fe f86f 	bl	8007974 <__errno>
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800989e:	eeb0 0a48 	vmov.f32	s0, s16
 80098a2:	eef0 0a68 	vmov.f32	s1, s17
 80098a6:	b00b      	add	sp, #44	; 0x2c
 80098a8:	ecbd 8b02 	vpop	{d8}
 80098ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	4649      	mov	r1, r9
 80098b8:	f7f6 ff7c 	bl	80007b4 <__aeabi_ddiv>
 80098bc:	2e02      	cmp	r6, #2
 80098be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098c2:	d1e0      	bne.n	8009886 <sqrt+0x62>
 80098c4:	f7fe f856 	bl	8007974 <__errno>
 80098c8:	2321      	movs	r3, #33	; 0x21
 80098ca:	6003      	str	r3, [r0, #0]
 80098cc:	e7df      	b.n	800988e <sqrt+0x6a>
 80098ce:	bf00      	nop
 80098d0:	20000238 	.word	0x20000238
 80098d4:	0800bc8b 	.word	0x0800bc8b

080098d8 <__ieee754_atan2>:
 80098d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098dc:	ec57 6b11 	vmov	r6, r7, d1
 80098e0:	4273      	negs	r3, r6
 80098e2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80098e6:	4333      	orrs	r3, r6
 80098e8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009a90 <__ieee754_atan2+0x1b8>
 80098ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80098f0:	4573      	cmp	r3, lr
 80098f2:	ec51 0b10 	vmov	r0, r1, d0
 80098f6:	ee11 8a10 	vmov	r8, s2
 80098fa:	d80a      	bhi.n	8009912 <__ieee754_atan2+0x3a>
 80098fc:	4244      	negs	r4, r0
 80098fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009902:	4304      	orrs	r4, r0
 8009904:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009908:	4574      	cmp	r4, lr
 800990a:	468c      	mov	ip, r1
 800990c:	ee10 9a10 	vmov	r9, s0
 8009910:	d907      	bls.n	8009922 <__ieee754_atan2+0x4a>
 8009912:	4632      	mov	r2, r6
 8009914:	463b      	mov	r3, r7
 8009916:	f7f6 fc6d 	bl	80001f4 <__adddf3>
 800991a:	ec41 0b10 	vmov	d0, r0, r1
 800991e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009922:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009926:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800992a:	4334      	orrs	r4, r6
 800992c:	d103      	bne.n	8009936 <__ieee754_atan2+0x5e>
 800992e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009932:	f001 bd29 	b.w	800b388 <atan>
 8009936:	17bc      	asrs	r4, r7, #30
 8009938:	f004 0402 	and.w	r4, r4, #2
 800993c:	ea53 0909 	orrs.w	r9, r3, r9
 8009940:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009944:	d107      	bne.n	8009956 <__ieee754_atan2+0x7e>
 8009946:	2c02      	cmp	r4, #2
 8009948:	d073      	beq.n	8009a32 <__ieee754_atan2+0x15a>
 800994a:	2c03      	cmp	r4, #3
 800994c:	d1e5      	bne.n	800991a <__ieee754_atan2+0x42>
 800994e:	a13e      	add	r1, pc, #248	; (adr r1, 8009a48 <__ieee754_atan2+0x170>)
 8009950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009954:	e7e1      	b.n	800991a <__ieee754_atan2+0x42>
 8009956:	ea52 0808 	orrs.w	r8, r2, r8
 800995a:	d106      	bne.n	800996a <__ieee754_atan2+0x92>
 800995c:	f1bc 0f00 	cmp.w	ip, #0
 8009960:	da6b      	bge.n	8009a3a <__ieee754_atan2+0x162>
 8009962:	a13b      	add	r1, pc, #236	; (adr r1, 8009a50 <__ieee754_atan2+0x178>)
 8009964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009968:	e7d7      	b.n	800991a <__ieee754_atan2+0x42>
 800996a:	4572      	cmp	r2, lr
 800996c:	d120      	bne.n	80099b0 <__ieee754_atan2+0xd8>
 800996e:	4293      	cmp	r3, r2
 8009970:	d111      	bne.n	8009996 <__ieee754_atan2+0xbe>
 8009972:	2c02      	cmp	r4, #2
 8009974:	d007      	beq.n	8009986 <__ieee754_atan2+0xae>
 8009976:	2c03      	cmp	r4, #3
 8009978:	d009      	beq.n	800998e <__ieee754_atan2+0xb6>
 800997a:	2c01      	cmp	r4, #1
 800997c:	d155      	bne.n	8009a2a <__ieee754_atan2+0x152>
 800997e:	a136      	add	r1, pc, #216	; (adr r1, 8009a58 <__ieee754_atan2+0x180>)
 8009980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009984:	e7c9      	b.n	800991a <__ieee754_atan2+0x42>
 8009986:	a136      	add	r1, pc, #216	; (adr r1, 8009a60 <__ieee754_atan2+0x188>)
 8009988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800998c:	e7c5      	b.n	800991a <__ieee754_atan2+0x42>
 800998e:	a136      	add	r1, pc, #216	; (adr r1, 8009a68 <__ieee754_atan2+0x190>)
 8009990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009994:	e7c1      	b.n	800991a <__ieee754_atan2+0x42>
 8009996:	2c02      	cmp	r4, #2
 8009998:	d04b      	beq.n	8009a32 <__ieee754_atan2+0x15a>
 800999a:	2c03      	cmp	r4, #3
 800999c:	d0d7      	beq.n	800994e <__ieee754_atan2+0x76>
 800999e:	2c01      	cmp	r4, #1
 80099a0:	f04f 0000 	mov.w	r0, #0
 80099a4:	d102      	bne.n	80099ac <__ieee754_atan2+0xd4>
 80099a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80099aa:	e7b6      	b.n	800991a <__ieee754_atan2+0x42>
 80099ac:	2100      	movs	r1, #0
 80099ae:	e7b4      	b.n	800991a <__ieee754_atan2+0x42>
 80099b0:	4573      	cmp	r3, lr
 80099b2:	d0d3      	beq.n	800995c <__ieee754_atan2+0x84>
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	151b      	asrs	r3, r3, #20
 80099b8:	2b3c      	cmp	r3, #60	; 0x3c
 80099ba:	dc1e      	bgt.n	80099fa <__ieee754_atan2+0x122>
 80099bc:	2f00      	cmp	r7, #0
 80099be:	da01      	bge.n	80099c4 <__ieee754_atan2+0xec>
 80099c0:	333c      	adds	r3, #60	; 0x3c
 80099c2:	db1e      	blt.n	8009a02 <__ieee754_atan2+0x12a>
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	f7f6 fef4 	bl	80007b4 <__aeabi_ddiv>
 80099cc:	ec41 0b10 	vmov	d0, r0, r1
 80099d0:	f001 fe7a 	bl	800b6c8 <fabs>
 80099d4:	f001 fcd8 	bl	800b388 <atan>
 80099d8:	ec51 0b10 	vmov	r0, r1, d0
 80099dc:	2c01      	cmp	r4, #1
 80099de:	d013      	beq.n	8009a08 <__ieee754_atan2+0x130>
 80099e0:	2c02      	cmp	r4, #2
 80099e2:	d015      	beq.n	8009a10 <__ieee754_atan2+0x138>
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	d098      	beq.n	800991a <__ieee754_atan2+0x42>
 80099e8:	a321      	add	r3, pc, #132	; (adr r3, 8009a70 <__ieee754_atan2+0x198>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fbff 	bl	80001f0 <__aeabi_dsub>
 80099f2:	a321      	add	r3, pc, #132	; (adr r3, 8009a78 <__ieee754_atan2+0x1a0>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	e014      	b.n	8009a24 <__ieee754_atan2+0x14c>
 80099fa:	a121      	add	r1, pc, #132	; (adr r1, 8009a80 <__ieee754_atan2+0x1a8>)
 80099fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a00:	e7ec      	b.n	80099dc <__ieee754_atan2+0x104>
 8009a02:	2000      	movs	r0, #0
 8009a04:	2100      	movs	r1, #0
 8009a06:	e7e9      	b.n	80099dc <__ieee754_atan2+0x104>
 8009a08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	e784      	b.n	800991a <__ieee754_atan2+0x42>
 8009a10:	a317      	add	r3, pc, #92	; (adr r3, 8009a70 <__ieee754_atan2+0x198>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fbeb 	bl	80001f0 <__aeabi_dsub>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	a116      	add	r1, pc, #88	; (adr r1, 8009a78 <__ieee754_atan2+0x1a0>)
 8009a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a24:	f7f6 fbe4 	bl	80001f0 <__aeabi_dsub>
 8009a28:	e777      	b.n	800991a <__ieee754_atan2+0x42>
 8009a2a:	a117      	add	r1, pc, #92	; (adr r1, 8009a88 <__ieee754_atan2+0x1b0>)
 8009a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a30:	e773      	b.n	800991a <__ieee754_atan2+0x42>
 8009a32:	a111      	add	r1, pc, #68	; (adr r1, 8009a78 <__ieee754_atan2+0x1a0>)
 8009a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a38:	e76f      	b.n	800991a <__ieee754_atan2+0x42>
 8009a3a:	a111      	add	r1, pc, #68	; (adr r1, 8009a80 <__ieee754_atan2+0x1a8>)
 8009a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a40:	e76b      	b.n	800991a <__ieee754_atan2+0x42>
 8009a42:	bf00      	nop
 8009a44:	f3af 8000 	nop.w
 8009a48:	54442d18 	.word	0x54442d18
 8009a4c:	c00921fb 	.word	0xc00921fb
 8009a50:	54442d18 	.word	0x54442d18
 8009a54:	bff921fb 	.word	0xbff921fb
 8009a58:	54442d18 	.word	0x54442d18
 8009a5c:	bfe921fb 	.word	0xbfe921fb
 8009a60:	7f3321d2 	.word	0x7f3321d2
 8009a64:	4002d97c 	.word	0x4002d97c
 8009a68:	7f3321d2 	.word	0x7f3321d2
 8009a6c:	c002d97c 	.word	0xc002d97c
 8009a70:	33145c07 	.word	0x33145c07
 8009a74:	3ca1a626 	.word	0x3ca1a626
 8009a78:	54442d18 	.word	0x54442d18
 8009a7c:	400921fb 	.word	0x400921fb
 8009a80:	54442d18 	.word	0x54442d18
 8009a84:	3ff921fb 	.word	0x3ff921fb
 8009a88:	54442d18 	.word	0x54442d18
 8009a8c:	3fe921fb 	.word	0x3fe921fb
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	00000000 	.word	0x00000000

08009a98 <__ieee754_pow>:
 8009a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	b091      	sub	sp, #68	; 0x44
 8009a9e:	ed8d 1b00 	vstr	d1, [sp]
 8009aa2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009aa6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009aaa:	ea58 0302 	orrs.w	r3, r8, r2
 8009aae:	ec57 6b10 	vmov	r6, r7, d0
 8009ab2:	f000 84be 	beq.w	800a432 <__ieee754_pow+0x99a>
 8009ab6:	4b7a      	ldr	r3, [pc, #488]	; (8009ca0 <__ieee754_pow+0x208>)
 8009ab8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009abc:	429c      	cmp	r4, r3
 8009abe:	463d      	mov	r5, r7
 8009ac0:	ee10 aa10 	vmov	sl, s0
 8009ac4:	dc09      	bgt.n	8009ada <__ieee754_pow+0x42>
 8009ac6:	d103      	bne.n	8009ad0 <__ieee754_pow+0x38>
 8009ac8:	b93e      	cbnz	r6, 8009ada <__ieee754_pow+0x42>
 8009aca:	45a0      	cmp	r8, r4
 8009acc:	dc0d      	bgt.n	8009aea <__ieee754_pow+0x52>
 8009ace:	e001      	b.n	8009ad4 <__ieee754_pow+0x3c>
 8009ad0:	4598      	cmp	r8, r3
 8009ad2:	dc02      	bgt.n	8009ada <__ieee754_pow+0x42>
 8009ad4:	4598      	cmp	r8, r3
 8009ad6:	d10e      	bne.n	8009af6 <__ieee754_pow+0x5e>
 8009ad8:	b16a      	cbz	r2, 8009af6 <__ieee754_pow+0x5e>
 8009ada:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ade:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ae2:	ea54 030a 	orrs.w	r3, r4, sl
 8009ae6:	f000 84a4 	beq.w	800a432 <__ieee754_pow+0x99a>
 8009aea:	486e      	ldr	r0, [pc, #440]	; (8009ca4 <__ieee754_pow+0x20c>)
 8009aec:	b011      	add	sp, #68	; 0x44
 8009aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af2:	f001 be85 	b.w	800b800 <nan>
 8009af6:	2d00      	cmp	r5, #0
 8009af8:	da53      	bge.n	8009ba2 <__ieee754_pow+0x10a>
 8009afa:	4b6b      	ldr	r3, [pc, #428]	; (8009ca8 <__ieee754_pow+0x210>)
 8009afc:	4598      	cmp	r8, r3
 8009afe:	dc4d      	bgt.n	8009b9c <__ieee754_pow+0x104>
 8009b00:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009b04:	4598      	cmp	r8, r3
 8009b06:	dd4c      	ble.n	8009ba2 <__ieee754_pow+0x10a>
 8009b08:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b10:	2b14      	cmp	r3, #20
 8009b12:	dd26      	ble.n	8009b62 <__ieee754_pow+0xca>
 8009b14:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009b18:	fa22 f103 	lsr.w	r1, r2, r3
 8009b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d13e      	bne.n	8009ba2 <__ieee754_pow+0x10a>
 8009b24:	f001 0101 	and.w	r1, r1, #1
 8009b28:	f1c1 0b02 	rsb	fp, r1, #2
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d15b      	bne.n	8009be8 <__ieee754_pow+0x150>
 8009b30:	4b5b      	ldr	r3, [pc, #364]	; (8009ca0 <__ieee754_pow+0x208>)
 8009b32:	4598      	cmp	r8, r3
 8009b34:	d124      	bne.n	8009b80 <__ieee754_pow+0xe8>
 8009b36:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009b3a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009b3e:	ea53 030a 	orrs.w	r3, r3, sl
 8009b42:	f000 8476 	beq.w	800a432 <__ieee754_pow+0x99a>
 8009b46:	4b59      	ldr	r3, [pc, #356]	; (8009cac <__ieee754_pow+0x214>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	dd2d      	ble.n	8009ba8 <__ieee754_pow+0x110>
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	f280 8473 	bge.w	800a43a <__ieee754_pow+0x9a2>
 8009b54:	2000      	movs	r0, #0
 8009b56:	2100      	movs	r1, #0
 8009b58:	ec41 0b10 	vmov	d0, r0, r1
 8009b5c:	b011      	add	sp, #68	; 0x44
 8009b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	d13e      	bne.n	8009be4 <__ieee754_pow+0x14c>
 8009b66:	f1c3 0314 	rsb	r3, r3, #20
 8009b6a:	fa48 f103 	asr.w	r1, r8, r3
 8009b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b72:	4543      	cmp	r3, r8
 8009b74:	f040 8469 	bne.w	800a44a <__ieee754_pow+0x9b2>
 8009b78:	f001 0101 	and.w	r1, r1, #1
 8009b7c:	f1c1 0b02 	rsb	fp, r1, #2
 8009b80:	4b4b      	ldr	r3, [pc, #300]	; (8009cb0 <__ieee754_pow+0x218>)
 8009b82:	4598      	cmp	r8, r3
 8009b84:	d118      	bne.n	8009bb8 <__ieee754_pow+0x120>
 8009b86:	f1b9 0f00 	cmp.w	r9, #0
 8009b8a:	f280 845a 	bge.w	800a442 <__ieee754_pow+0x9aa>
 8009b8e:	4948      	ldr	r1, [pc, #288]	; (8009cb0 <__ieee754_pow+0x218>)
 8009b90:	4632      	mov	r2, r6
 8009b92:	463b      	mov	r3, r7
 8009b94:	2000      	movs	r0, #0
 8009b96:	f7f6 fe0d 	bl	80007b4 <__aeabi_ddiv>
 8009b9a:	e7dd      	b.n	8009b58 <__ieee754_pow+0xc0>
 8009b9c:	f04f 0b02 	mov.w	fp, #2
 8009ba0:	e7c4      	b.n	8009b2c <__ieee754_pow+0x94>
 8009ba2:	f04f 0b00 	mov.w	fp, #0
 8009ba6:	e7c1      	b.n	8009b2c <__ieee754_pow+0x94>
 8009ba8:	f1b9 0f00 	cmp.w	r9, #0
 8009bac:	dad2      	bge.n	8009b54 <__ieee754_pow+0xbc>
 8009bae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009bb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bb6:	e7cf      	b.n	8009b58 <__ieee754_pow+0xc0>
 8009bb8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009bbc:	d106      	bne.n	8009bcc <__ieee754_pow+0x134>
 8009bbe:	4632      	mov	r2, r6
 8009bc0:	463b      	mov	r3, r7
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7f6 fccb 	bl	8000560 <__aeabi_dmul>
 8009bca:	e7c5      	b.n	8009b58 <__ieee754_pow+0xc0>
 8009bcc:	4b39      	ldr	r3, [pc, #228]	; (8009cb4 <__ieee754_pow+0x21c>)
 8009bce:	4599      	cmp	r9, r3
 8009bd0:	d10a      	bne.n	8009be8 <__ieee754_pow+0x150>
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	db08      	blt.n	8009be8 <__ieee754_pow+0x150>
 8009bd6:	ec47 6b10 	vmov	d0, r6, r7
 8009bda:	b011      	add	sp, #68	; 0x44
 8009bdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	f000 be5c 	b.w	800a89c <__ieee754_sqrt>
 8009be4:	f04f 0b00 	mov.w	fp, #0
 8009be8:	ec47 6b10 	vmov	d0, r6, r7
 8009bec:	f001 fd6c 	bl	800b6c8 <fabs>
 8009bf0:	ec51 0b10 	vmov	r0, r1, d0
 8009bf4:	f1ba 0f00 	cmp.w	sl, #0
 8009bf8:	d127      	bne.n	8009c4a <__ieee754_pow+0x1b2>
 8009bfa:	b124      	cbz	r4, 8009c06 <__ieee754_pow+0x16e>
 8009bfc:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <__ieee754_pow+0x218>)
 8009bfe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d121      	bne.n	8009c4a <__ieee754_pow+0x1b2>
 8009c06:	f1b9 0f00 	cmp.w	r9, #0
 8009c0a:	da05      	bge.n	8009c18 <__ieee754_pow+0x180>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	2000      	movs	r0, #0
 8009c12:	4927      	ldr	r1, [pc, #156]	; (8009cb0 <__ieee754_pow+0x218>)
 8009c14:	f7f6 fdce 	bl	80007b4 <__aeabi_ddiv>
 8009c18:	2d00      	cmp	r5, #0
 8009c1a:	da9d      	bge.n	8009b58 <__ieee754_pow+0xc0>
 8009c1c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c20:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c24:	ea54 030b 	orrs.w	r3, r4, fp
 8009c28:	d108      	bne.n	8009c3c <__ieee754_pow+0x1a4>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4610      	mov	r0, r2
 8009c30:	4619      	mov	r1, r3
 8009c32:	f7f6 fadd 	bl	80001f0 <__aeabi_dsub>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	e7ac      	b.n	8009b96 <__ieee754_pow+0xfe>
 8009c3c:	f1bb 0f01 	cmp.w	fp, #1
 8009c40:	d18a      	bne.n	8009b58 <__ieee754_pow+0xc0>
 8009c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c46:	4619      	mov	r1, r3
 8009c48:	e786      	b.n	8009b58 <__ieee754_pow+0xc0>
 8009c4a:	0fed      	lsrs	r5, r5, #31
 8009c4c:	1e6b      	subs	r3, r5, #1
 8009c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c50:	ea5b 0303 	orrs.w	r3, fp, r3
 8009c54:	d102      	bne.n	8009c5c <__ieee754_pow+0x1c4>
 8009c56:	4632      	mov	r2, r6
 8009c58:	463b      	mov	r3, r7
 8009c5a:	e7e8      	b.n	8009c2e <__ieee754_pow+0x196>
 8009c5c:	4b16      	ldr	r3, [pc, #88]	; (8009cb8 <__ieee754_pow+0x220>)
 8009c5e:	4598      	cmp	r8, r3
 8009c60:	f340 80fe 	ble.w	8009e60 <__ieee754_pow+0x3c8>
 8009c64:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009c68:	4598      	cmp	r8, r3
 8009c6a:	dd0a      	ble.n	8009c82 <__ieee754_pow+0x1ea>
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <__ieee754_pow+0x214>)
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	dc0d      	bgt.n	8009c8e <__ieee754_pow+0x1f6>
 8009c72:	f1b9 0f00 	cmp.w	r9, #0
 8009c76:	f6bf af6d 	bge.w	8009b54 <__ieee754_pow+0xbc>
 8009c7a:	a307      	add	r3, pc, #28	; (adr r3, 8009c98 <__ieee754_pow+0x200>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	e79f      	b.n	8009bc2 <__ieee754_pow+0x12a>
 8009c82:	4b0e      	ldr	r3, [pc, #56]	; (8009cbc <__ieee754_pow+0x224>)
 8009c84:	429c      	cmp	r4, r3
 8009c86:	ddf4      	ble.n	8009c72 <__ieee754_pow+0x1da>
 8009c88:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <__ieee754_pow+0x218>)
 8009c8a:	429c      	cmp	r4, r3
 8009c8c:	dd18      	ble.n	8009cc0 <__ieee754_pow+0x228>
 8009c8e:	f1b9 0f00 	cmp.w	r9, #0
 8009c92:	dcf2      	bgt.n	8009c7a <__ieee754_pow+0x1e2>
 8009c94:	e75e      	b.n	8009b54 <__ieee754_pow+0xbc>
 8009c96:	bf00      	nop
 8009c98:	8800759c 	.word	0x8800759c
 8009c9c:	7e37e43c 	.word	0x7e37e43c
 8009ca0:	7ff00000 	.word	0x7ff00000
 8009ca4:	0800bb85 	.word	0x0800bb85
 8009ca8:	433fffff 	.word	0x433fffff
 8009cac:	3fefffff 	.word	0x3fefffff
 8009cb0:	3ff00000 	.word	0x3ff00000
 8009cb4:	3fe00000 	.word	0x3fe00000
 8009cb8:	41e00000 	.word	0x41e00000
 8009cbc:	3feffffe 	.word	0x3feffffe
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4b63      	ldr	r3, [pc, #396]	; (8009e50 <__ieee754_pow+0x3b8>)
 8009cc4:	f7f6 fa94 	bl	80001f0 <__aeabi_dsub>
 8009cc8:	a355      	add	r3, pc, #340	; (adr r3, 8009e20 <__ieee754_pow+0x388>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	4604      	mov	r4, r0
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	f7f6 fc45 	bl	8000560 <__aeabi_dmul>
 8009cd6:	a354      	add	r3, pc, #336	; (adr r3, 8009e28 <__ieee754_pow+0x390>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fc3c 	bl	8000560 <__aeabi_dmul>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cee:	4b59      	ldr	r3, [pc, #356]	; (8009e54 <__ieee754_pow+0x3bc>)
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7f6 fc34 	bl	8000560 <__aeabi_dmul>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	a14c      	add	r1, pc, #304	; (adr r1, 8009e30 <__ieee754_pow+0x398>)
 8009cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d02:	f7f6 fa75 	bl	80001f0 <__aeabi_dsub>
 8009d06:	4622      	mov	r2, r4
 8009d08:	462b      	mov	r3, r5
 8009d0a:	f7f6 fc29 	bl	8000560 <__aeabi_dmul>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	2000      	movs	r0, #0
 8009d14:	4950      	ldr	r1, [pc, #320]	; (8009e58 <__ieee754_pow+0x3c0>)
 8009d16:	f7f6 fa6b 	bl	80001f0 <__aeabi_dsub>
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	4680      	mov	r8, r0
 8009d20:	4689      	mov	r9, r1
 8009d22:	4620      	mov	r0, r4
 8009d24:	4629      	mov	r1, r5
 8009d26:	f7f6 fc1b 	bl	8000560 <__aeabi_dmul>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	f7f6 fc15 	bl	8000560 <__aeabi_dmul>
 8009d36:	a340      	add	r3, pc, #256	; (adr r3, 8009e38 <__ieee754_pow+0x3a0>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f7f6 fc10 	bl	8000560 <__aeabi_dmul>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d48:	f7f6 fa52 	bl	80001f0 <__aeabi_dsub>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4604      	mov	r4, r0
 8009d52:	460d      	mov	r5, r1
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fa4c 	bl	80001f4 <__adddf3>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d62:	4632      	mov	r2, r6
 8009d64:	463b      	mov	r3, r7
 8009d66:	f7f6 fa43 	bl	80001f0 <__aeabi_dsub>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 fa3d 	bl	80001f0 <__aeabi_dsub>
 8009d76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d78:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460f      	mov	r7, r1
 8009d82:	f040 81eb 	bne.w	800a15c <__ieee754_pow+0x6c4>
 8009d86:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009e40 <__ieee754_pow+0x3a8>
 8009d8a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009d8e:	2400      	movs	r4, #0
 8009d90:	4622      	mov	r2, r4
 8009d92:	462b      	mov	r3, r5
 8009d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d9c:	f7f6 fa28 	bl	80001f0 <__aeabi_dsub>
 8009da0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009da4:	f7f6 fbdc 	bl	8000560 <__aeabi_dmul>
 8009da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dac:	4680      	mov	r8, r0
 8009dae:	4689      	mov	r9, r1
 8009db0:	4630      	mov	r0, r6
 8009db2:	4639      	mov	r1, r7
 8009db4:	f7f6 fbd4 	bl	8000560 <__aeabi_dmul>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7f6 fa18 	bl	80001f4 <__adddf3>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4689      	mov	r9, r1
 8009dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dd0:	f7f6 fbc6 	bl	8000560 <__aeabi_dmul>
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	4602      	mov	r2, r0
 8009ddc:	4649      	mov	r1, r9
 8009dde:	4640      	mov	r0, r8
 8009de0:	e9cd 4500 	strd	r4, r5, [sp]
 8009de4:	f7f6 fa06 	bl	80001f4 <__adddf3>
 8009de8:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <__ieee754_pow+0x3c4>)
 8009dea:	4299      	cmp	r1, r3
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	468b      	mov	fp, r1
 8009df2:	f340 82f7 	ble.w	800a3e4 <__ieee754_pow+0x94c>
 8009df6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009dfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009dfe:	4303      	orrs	r3, r0
 8009e00:	f000 81ea 	beq.w	800a1d8 <__ieee754_pow+0x740>
 8009e04:	a310      	add	r3, pc, #64	; (adr r3, 8009e48 <__ieee754_pow+0x3b0>)
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0e:	f7f6 fba7 	bl	8000560 <__aeabi_dmul>
 8009e12:	a30d      	add	r3, pc, #52	; (adr r3, 8009e48 <__ieee754_pow+0x3b0>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	e6d5      	b.n	8009bc6 <__ieee754_pow+0x12e>
 8009e1a:	bf00      	nop
 8009e1c:	f3af 8000 	nop.w
 8009e20:	60000000 	.word	0x60000000
 8009e24:	3ff71547 	.word	0x3ff71547
 8009e28:	f85ddf44 	.word	0xf85ddf44
 8009e2c:	3e54ae0b 	.word	0x3e54ae0b
 8009e30:	55555555 	.word	0x55555555
 8009e34:	3fd55555 	.word	0x3fd55555
 8009e38:	652b82fe 	.word	0x652b82fe
 8009e3c:	3ff71547 	.word	0x3ff71547
 8009e40:	00000000 	.word	0x00000000
 8009e44:	bff00000 	.word	0xbff00000
 8009e48:	8800759c 	.word	0x8800759c
 8009e4c:	7e37e43c 	.word	0x7e37e43c
 8009e50:	3ff00000 	.word	0x3ff00000
 8009e54:	3fd00000 	.word	0x3fd00000
 8009e58:	3fe00000 	.word	0x3fe00000
 8009e5c:	408fffff 	.word	0x408fffff
 8009e60:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009e64:	f04f 0200 	mov.w	r2, #0
 8009e68:	da05      	bge.n	8009e76 <__ieee754_pow+0x3de>
 8009e6a:	4bd3      	ldr	r3, [pc, #844]	; (800a1b8 <__ieee754_pow+0x720>)
 8009e6c:	f7f6 fb78 	bl	8000560 <__aeabi_dmul>
 8009e70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009e74:	460c      	mov	r4, r1
 8009e76:	1523      	asrs	r3, r4, #20
 8009e78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e7c:	4413      	add	r3, r2
 8009e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e80:	4bce      	ldr	r3, [pc, #824]	; (800a1bc <__ieee754_pow+0x724>)
 8009e82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e90:	dd08      	ble.n	8009ea4 <__ieee754_pow+0x40c>
 8009e92:	4bcb      	ldr	r3, [pc, #812]	; (800a1c0 <__ieee754_pow+0x728>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	f340 815e 	ble.w	800a156 <__ieee754_pow+0x6be>
 8009e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009ea4:	f04f 0a00 	mov.w	sl, #0
 8009ea8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009eac:	930c      	str	r3, [sp, #48]	; 0x30
 8009eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eb0:	4bc4      	ldr	r3, [pc, #784]	; (800a1c4 <__ieee754_pow+0x72c>)
 8009eb2:	4413      	add	r3, r2
 8009eb4:	ed93 7b00 	vldr	d7, [r3]
 8009eb8:	4629      	mov	r1, r5
 8009eba:	ec53 2b17 	vmov	r2, r3, d7
 8009ebe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ec2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ec6:	f7f6 f993 	bl	80001f0 <__aeabi_dsub>
 8009eca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ed6:	f7f6 f98d 	bl	80001f4 <__adddf3>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	2000      	movs	r0, #0
 8009ee0:	49b9      	ldr	r1, [pc, #740]	; (800a1c8 <__ieee754_pow+0x730>)
 8009ee2:	f7f6 fc67 	bl	80007b4 <__aeabi_ddiv>
 8009ee6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 fb35 	bl	8000560 <__aeabi_dmul>
 8009ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009efa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009efe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f02:	2300      	movs	r3, #0
 8009f04:	9302      	str	r3, [sp, #8]
 8009f06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f0a:	106d      	asrs	r5, r5, #1
 8009f0c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009f10:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009f14:	2200      	movs	r2, #0
 8009f16:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	4614      	mov	r4, r2
 8009f20:	461d      	mov	r5, r3
 8009f22:	f7f6 fb1d 	bl	8000560 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 f95f 	bl	80001f0 <__aeabi_dsub>
 8009f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7f6 f957 	bl	80001f0 <__aeabi_dsub>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f4a:	f7f6 f951 	bl	80001f0 <__aeabi_dsub>
 8009f4e:	4642      	mov	r2, r8
 8009f50:	464b      	mov	r3, r9
 8009f52:	f7f6 fb05 	bl	8000560 <__aeabi_dmul>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 f947 	bl	80001f0 <__aeabi_dsub>
 8009f62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009f66:	f7f6 fafb 	bl	8000560 <__aeabi_dmul>
 8009f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f72:	4610      	mov	r0, r2
 8009f74:	4619      	mov	r1, r3
 8009f76:	f7f6 faf3 	bl	8000560 <__aeabi_dmul>
 8009f7a:	a37b      	add	r3, pc, #492	; (adr r3, 800a168 <__ieee754_pow+0x6d0>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	4604      	mov	r4, r0
 8009f82:	460d      	mov	r5, r1
 8009f84:	f7f6 faec 	bl	8000560 <__aeabi_dmul>
 8009f88:	a379      	add	r3, pc, #484	; (adr r3, 800a170 <__ieee754_pow+0x6d8>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 f931 	bl	80001f4 <__adddf3>
 8009f92:	4622      	mov	r2, r4
 8009f94:	462b      	mov	r3, r5
 8009f96:	f7f6 fae3 	bl	8000560 <__aeabi_dmul>
 8009f9a:	a377      	add	r3, pc, #476	; (adr r3, 800a178 <__ieee754_pow+0x6e0>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f7f6 f928 	bl	80001f4 <__adddf3>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	f7f6 fada 	bl	8000560 <__aeabi_dmul>
 8009fac:	a374      	add	r3, pc, #464	; (adr r3, 800a180 <__ieee754_pow+0x6e8>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f7f6 f91f 	bl	80001f4 <__adddf3>
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	462b      	mov	r3, r5
 8009fba:	f7f6 fad1 	bl	8000560 <__aeabi_dmul>
 8009fbe:	a372      	add	r3, pc, #456	; (adr r3, 800a188 <__ieee754_pow+0x6f0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 f916 	bl	80001f4 <__adddf3>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	462b      	mov	r3, r5
 8009fcc:	f7f6 fac8 	bl	8000560 <__aeabi_dmul>
 8009fd0:	a36f      	add	r3, pc, #444	; (adr r3, 800a190 <__ieee754_pow+0x6f8>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	f7f6 f90d 	bl	80001f4 <__adddf3>
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 fabb 	bl	8000560 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 fab5 	bl	8000560 <__aeabi_dmul>
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a002:	f7f6 f8f7 	bl	80001f4 <__adddf3>
 800a006:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a00a:	f7f6 faa9 	bl	8000560 <__aeabi_dmul>
 800a00e:	4622      	mov	r2, r4
 800a010:	462b      	mov	r3, r5
 800a012:	f7f6 f8ef 	bl	80001f4 <__adddf3>
 800a016:	4642      	mov	r2, r8
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	464b      	mov	r3, r9
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fa9d 	bl	8000560 <__aeabi_dmul>
 800a026:	2200      	movs	r2, #0
 800a028:	4b68      	ldr	r3, [pc, #416]	; (800a1cc <__ieee754_pow+0x734>)
 800a02a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a02e:	f7f6 f8e1 	bl	80001f4 <__adddf3>
 800a032:	4632      	mov	r2, r6
 800a034:	463b      	mov	r3, r7
 800a036:	f7f6 f8dd 	bl	80001f4 <__adddf3>
 800a03a:	9802      	ldr	r0, [sp, #8]
 800a03c:	460d      	mov	r5, r1
 800a03e:	4604      	mov	r4, r0
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	f7f6 fa8a 	bl	8000560 <__aeabi_dmul>
 800a04c:	2200      	movs	r2, #0
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	4b5e      	ldr	r3, [pc, #376]	; (800a1cc <__ieee754_pow+0x734>)
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 f8ca 	bl	80001f0 <__aeabi_dsub>
 800a05c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a060:	f7f6 f8c6 	bl	80001f0 <__aeabi_dsub>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 f8c0 	bl	80001f0 <__aeabi_dsub>
 800a070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a074:	f7f6 fa74 	bl	8000560 <__aeabi_dmul>
 800a078:	4622      	mov	r2, r4
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	462b      	mov	r3, r5
 800a080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a084:	f7f6 fa6c 	bl	8000560 <__aeabi_dmul>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4630      	mov	r0, r6
 800a08e:	4639      	mov	r1, r7
 800a090:	f7f6 f8b0 	bl	80001f4 <__adddf3>
 800a094:	4606      	mov	r6, r0
 800a096:	460f      	mov	r7, r1
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4640      	mov	r0, r8
 800a09e:	4649      	mov	r1, r9
 800a0a0:	f7f6 f8a8 	bl	80001f4 <__adddf3>
 800a0a4:	9802      	ldr	r0, [sp, #8]
 800a0a6:	a33c      	add	r3, pc, #240	; (adr r3, 800a198 <__ieee754_pow+0x700>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	f7f6 fa56 	bl	8000560 <__aeabi_dmul>
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	4620      	mov	r0, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	f7f6 f896 	bl	80001f0 <__aeabi_dsub>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 f890 	bl	80001f0 <__aeabi_dsub>
 800a0d0:	a333      	add	r3, pc, #204	; (adr r3, 800a1a0 <__ieee754_pow+0x708>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7f6 fa43 	bl	8000560 <__aeabi_dmul>
 800a0da:	a333      	add	r3, pc, #204	; (adr r3, 800a1a8 <__ieee754_pow+0x710>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 fa3a 	bl	8000560 <__aeabi_dmul>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 f87e 	bl	80001f4 <__adddf3>
 800a0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0fa:	4b35      	ldr	r3, [pc, #212]	; (800a1d0 <__ieee754_pow+0x738>)
 800a0fc:	4413      	add	r3, r2
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f7f6 f877 	bl	80001f4 <__adddf3>
 800a106:	4604      	mov	r4, r0
 800a108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a10a:	460d      	mov	r5, r1
 800a10c:	f7f6 f9be 	bl	800048c <__aeabi_i2d>
 800a110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a112:	4b30      	ldr	r3, [pc, #192]	; (800a1d4 <__ieee754_pow+0x73c>)
 800a114:	4413      	add	r3, r2
 800a116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a11a:	4606      	mov	r6, r0
 800a11c:	460f      	mov	r7, r1
 800a11e:	4622      	mov	r2, r4
 800a120:	462b      	mov	r3, r5
 800a122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a126:	f7f6 f865 	bl	80001f4 <__adddf3>
 800a12a:	4642      	mov	r2, r8
 800a12c:	464b      	mov	r3, r9
 800a12e:	f7f6 f861 	bl	80001f4 <__adddf3>
 800a132:	4632      	mov	r2, r6
 800a134:	463b      	mov	r3, r7
 800a136:	f7f6 f85d 	bl	80001f4 <__adddf3>
 800a13a:	9802      	ldr	r0, [sp, #8]
 800a13c:	4632      	mov	r2, r6
 800a13e:	463b      	mov	r3, r7
 800a140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a144:	f7f6 f854 	bl	80001f0 <__aeabi_dsub>
 800a148:	4642      	mov	r2, r8
 800a14a:	464b      	mov	r3, r9
 800a14c:	f7f6 f850 	bl	80001f0 <__aeabi_dsub>
 800a150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a154:	e607      	b.n	8009d66 <__ieee754_pow+0x2ce>
 800a156:	f04f 0a01 	mov.w	sl, #1
 800a15a:	e6a5      	b.n	8009ea8 <__ieee754_pow+0x410>
 800a15c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a1b0 <__ieee754_pow+0x718>
 800a160:	e613      	b.n	8009d8a <__ieee754_pow+0x2f2>
 800a162:	bf00      	nop
 800a164:	f3af 8000 	nop.w
 800a168:	4a454eef 	.word	0x4a454eef
 800a16c:	3fca7e28 	.word	0x3fca7e28
 800a170:	93c9db65 	.word	0x93c9db65
 800a174:	3fcd864a 	.word	0x3fcd864a
 800a178:	a91d4101 	.word	0xa91d4101
 800a17c:	3fd17460 	.word	0x3fd17460
 800a180:	518f264d 	.word	0x518f264d
 800a184:	3fd55555 	.word	0x3fd55555
 800a188:	db6fabff 	.word	0xdb6fabff
 800a18c:	3fdb6db6 	.word	0x3fdb6db6
 800a190:	33333303 	.word	0x33333303
 800a194:	3fe33333 	.word	0x3fe33333
 800a198:	e0000000 	.word	0xe0000000
 800a19c:	3feec709 	.word	0x3feec709
 800a1a0:	dc3a03fd 	.word	0xdc3a03fd
 800a1a4:	3feec709 	.word	0x3feec709
 800a1a8:	145b01f5 	.word	0x145b01f5
 800a1ac:	be3e2fe0 	.word	0xbe3e2fe0
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	3ff00000 	.word	0x3ff00000
 800a1b8:	43400000 	.word	0x43400000
 800a1bc:	0003988e 	.word	0x0003988e
 800a1c0:	000bb679 	.word	0x000bb679
 800a1c4:	0800bc90 	.word	0x0800bc90
 800a1c8:	3ff00000 	.word	0x3ff00000
 800a1cc:	40080000 	.word	0x40080000
 800a1d0:	0800bcb0 	.word	0x0800bcb0
 800a1d4:	0800bca0 	.word	0x0800bca0
 800a1d8:	a3b4      	add	r3, pc, #720	; (adr r3, 800a4ac <__ieee754_pow+0xa14>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f6 f807 	bl	80001f4 <__adddf3>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f5 fffd 	bl	80001f0 <__aeabi_dsub>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fe:	f7f6 fc3f 	bl	8000a80 <__aeabi_dcmpgt>
 800a202:	2800      	cmp	r0, #0
 800a204:	f47f adfe 	bne.w	8009e04 <__ieee754_pow+0x36c>
 800a208:	4aa3      	ldr	r2, [pc, #652]	; (800a498 <__ieee754_pow+0xa00>)
 800a20a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a20e:	4293      	cmp	r3, r2
 800a210:	f340 810a 	ble.w	800a428 <__ieee754_pow+0x990>
 800a214:	151b      	asrs	r3, r3, #20
 800a216:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a21a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a21e:	fa4a f303 	asr.w	r3, sl, r3
 800a222:	445b      	add	r3, fp
 800a224:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a228:	4e9c      	ldr	r6, [pc, #624]	; (800a49c <__ieee754_pow+0xa04>)
 800a22a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a22e:	4116      	asrs	r6, r2
 800a230:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a234:	2000      	movs	r0, #0
 800a236:	ea23 0106 	bic.w	r1, r3, r6
 800a23a:	f1c2 0214 	rsb	r2, r2, #20
 800a23e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a242:	fa4a fa02 	asr.w	sl, sl, r2
 800a246:	f1bb 0f00 	cmp.w	fp, #0
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	bfb8      	it	lt
 800a254:	f1ca 0a00 	rsblt	sl, sl, #0
 800a258:	f7f5 ffca 	bl	80001f0 <__aeabi_dsub>
 800a25c:	e9cd 0100 	strd	r0, r1, [sp]
 800a260:	4642      	mov	r2, r8
 800a262:	464b      	mov	r3, r9
 800a264:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a268:	f7f5 ffc4 	bl	80001f4 <__adddf3>
 800a26c:	2000      	movs	r0, #0
 800a26e:	a378      	add	r3, pc, #480	; (adr r3, 800a450 <__ieee754_pow+0x9b8>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	f7f6 f972 	bl	8000560 <__aeabi_dmul>
 800a27c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a280:	4606      	mov	r6, r0
 800a282:	460f      	mov	r7, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7f5 ffb2 	bl	80001f0 <__aeabi_dsub>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f5 ffac 	bl	80001f0 <__aeabi_dsub>
 800a298:	a36f      	add	r3, pc, #444	; (adr r3, 800a458 <__ieee754_pow+0x9c0>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f6 f95f 	bl	8000560 <__aeabi_dmul>
 800a2a2:	a36f      	add	r3, pc, #444	; (adr r3, 800a460 <__ieee754_pow+0x9c8>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f7f6 f956 	bl	8000560 <__aeabi_dmul>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	f7f5 ff9a 	bl	80001f4 <__adddf3>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f5 ff92 	bl	80001f4 <__adddf3>
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	f7f5 ff8a 	bl	80001f0 <__aeabi_dsub>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	f7f5 ff84 	bl	80001f0 <__aeabi_dsub>
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460f      	mov	r7, r1
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	f7f6 f934 	bl	8000560 <__aeabi_dmul>
 800a2f8:	a35b      	add	r3, pc, #364	; (adr r3, 800a468 <__ieee754_pow+0x9d0>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	f7f6 f92d 	bl	8000560 <__aeabi_dmul>
 800a306:	a35a      	add	r3, pc, #360	; (adr r3, 800a470 <__ieee754_pow+0x9d8>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f5 ff70 	bl	80001f0 <__aeabi_dsub>
 800a310:	4622      	mov	r2, r4
 800a312:	462b      	mov	r3, r5
 800a314:	f7f6 f924 	bl	8000560 <__aeabi_dmul>
 800a318:	a357      	add	r3, pc, #348	; (adr r3, 800a478 <__ieee754_pow+0x9e0>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff69 	bl	80001f4 <__adddf3>
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	f7f6 f91b 	bl	8000560 <__aeabi_dmul>
 800a32a:	a355      	add	r3, pc, #340	; (adr r3, 800a480 <__ieee754_pow+0x9e8>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f5 ff5e 	bl	80001f0 <__aeabi_dsub>
 800a334:	4622      	mov	r2, r4
 800a336:	462b      	mov	r3, r5
 800a338:	f7f6 f912 	bl	8000560 <__aeabi_dmul>
 800a33c:	a352      	add	r3, pc, #328	; (adr r3, 800a488 <__ieee754_pow+0x9f0>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ff57 	bl	80001f4 <__adddf3>
 800a346:	4622      	mov	r2, r4
 800a348:	462b      	mov	r3, r5
 800a34a:	f7f6 f909 	bl	8000560 <__aeabi_dmul>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f5 ff4b 	bl	80001f0 <__aeabi_dsub>
 800a35a:	4604      	mov	r4, r0
 800a35c:	460d      	mov	r5, r1
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	f7f6 f8fb 	bl	8000560 <__aeabi_dmul>
 800a36a:	2200      	movs	r2, #0
 800a36c:	e9cd 0100 	strd	r0, r1, [sp]
 800a370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f5 ff3a 	bl	80001f0 <__aeabi_dsub>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a384:	f7f6 fa16 	bl	80007b4 <__aeabi_ddiv>
 800a388:	4632      	mov	r2, r6
 800a38a:	4604      	mov	r4, r0
 800a38c:	460d      	mov	r5, r1
 800a38e:	463b      	mov	r3, r7
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f6 f8e4 	bl	8000560 <__aeabi_dmul>
 800a398:	4632      	mov	r2, r6
 800a39a:	463b      	mov	r3, r7
 800a39c:	f7f5 ff2a 	bl	80001f4 <__adddf3>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f5 ff22 	bl	80001f0 <__aeabi_dsub>
 800a3ac:	4642      	mov	r2, r8
 800a3ae:	464b      	mov	r3, r9
 800a3b0:	f7f5 ff1e 	bl	80001f0 <__aeabi_dsub>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	4939      	ldr	r1, [pc, #228]	; (800a4a0 <__ieee754_pow+0xa08>)
 800a3bc:	f7f5 ff18 	bl	80001f0 <__aeabi_dsub>
 800a3c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a3c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	da2f      	bge.n	800a42e <__ieee754_pow+0x996>
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	ec43 2b10 	vmov	d0, r2, r3
 800a3d4:	f001 faa0 	bl	800b918 <scalbn>
 800a3d8:	ec51 0b10 	vmov	r0, r1, d0
 800a3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3e0:	f7ff bbf1 	b.w	8009bc6 <__ieee754_pow+0x12e>
 800a3e4:	4b2f      	ldr	r3, [pc, #188]	; (800a4a4 <__ieee754_pow+0xa0c>)
 800a3e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a3ea:	429e      	cmp	r6, r3
 800a3ec:	f77f af0c 	ble.w	800a208 <__ieee754_pow+0x770>
 800a3f0:	4b2d      	ldr	r3, [pc, #180]	; (800a4a8 <__ieee754_pow+0xa10>)
 800a3f2:	440b      	add	r3, r1
 800a3f4:	4303      	orrs	r3, r0
 800a3f6:	d00b      	beq.n	800a410 <__ieee754_pow+0x978>
 800a3f8:	a325      	add	r3, pc, #148	; (adr r3, 800a490 <__ieee754_pow+0x9f8>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a402:	f7f6 f8ad 	bl	8000560 <__aeabi_dmul>
 800a406:	a322      	add	r3, pc, #136	; (adr r3, 800a490 <__ieee754_pow+0x9f8>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f7ff bbdb 	b.w	8009bc6 <__ieee754_pow+0x12e>
 800a410:	4622      	mov	r2, r4
 800a412:	462b      	mov	r3, r5
 800a414:	f7f5 feec 	bl	80001f0 <__aeabi_dsub>
 800a418:	4642      	mov	r2, r8
 800a41a:	464b      	mov	r3, r9
 800a41c:	f7f6 fb26 	bl	8000a6c <__aeabi_dcmpge>
 800a420:	2800      	cmp	r0, #0
 800a422:	f43f aef1 	beq.w	800a208 <__ieee754_pow+0x770>
 800a426:	e7e7      	b.n	800a3f8 <__ieee754_pow+0x960>
 800a428:	f04f 0a00 	mov.w	sl, #0
 800a42c:	e718      	b.n	800a260 <__ieee754_pow+0x7c8>
 800a42e:	4621      	mov	r1, r4
 800a430:	e7d4      	b.n	800a3dc <__ieee754_pow+0x944>
 800a432:	2000      	movs	r0, #0
 800a434:	491a      	ldr	r1, [pc, #104]	; (800a4a0 <__ieee754_pow+0xa08>)
 800a436:	f7ff bb8f 	b.w	8009b58 <__ieee754_pow+0xc0>
 800a43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a43e:	f7ff bb8b 	b.w	8009b58 <__ieee754_pow+0xc0>
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7ff bb87 	b.w	8009b58 <__ieee754_pow+0xc0>
 800a44a:	4693      	mov	fp, r2
 800a44c:	f7ff bb98 	b.w	8009b80 <__ieee754_pow+0xe8>
 800a450:	00000000 	.word	0x00000000
 800a454:	3fe62e43 	.word	0x3fe62e43
 800a458:	fefa39ef 	.word	0xfefa39ef
 800a45c:	3fe62e42 	.word	0x3fe62e42
 800a460:	0ca86c39 	.word	0x0ca86c39
 800a464:	be205c61 	.word	0xbe205c61
 800a468:	72bea4d0 	.word	0x72bea4d0
 800a46c:	3e663769 	.word	0x3e663769
 800a470:	c5d26bf1 	.word	0xc5d26bf1
 800a474:	3ebbbd41 	.word	0x3ebbbd41
 800a478:	af25de2c 	.word	0xaf25de2c
 800a47c:	3f11566a 	.word	0x3f11566a
 800a480:	16bebd93 	.word	0x16bebd93
 800a484:	3f66c16c 	.word	0x3f66c16c
 800a488:	5555553e 	.word	0x5555553e
 800a48c:	3fc55555 	.word	0x3fc55555
 800a490:	c2f8f359 	.word	0xc2f8f359
 800a494:	01a56e1f 	.word	0x01a56e1f
 800a498:	3fe00000 	.word	0x3fe00000
 800a49c:	000fffff 	.word	0x000fffff
 800a4a0:	3ff00000 	.word	0x3ff00000
 800a4a4:	4090cbff 	.word	0x4090cbff
 800a4a8:	3f6f3400 	.word	0x3f6f3400
 800a4ac:	652b82fe 	.word	0x652b82fe
 800a4b0:	3c971547 	.word	0x3c971547
 800a4b4:	00000000 	.word	0x00000000

0800a4b8 <__ieee754_rem_pio2>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	ec57 6b10 	vmov	r6, r7, d0
 800a4c0:	4bc3      	ldr	r3, [pc, #780]	; (800a7d0 <__ieee754_rem_pio2+0x318>)
 800a4c2:	b08d      	sub	sp, #52	; 0x34
 800a4c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a4c8:	4598      	cmp	r8, r3
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	9704      	str	r7, [sp, #16]
 800a4ce:	dc07      	bgt.n	800a4e0 <__ieee754_rem_pio2+0x28>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	ed84 0b00 	vstr	d0, [r4]
 800a4d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a4dc:	2500      	movs	r5, #0
 800a4de:	e027      	b.n	800a530 <__ieee754_rem_pio2+0x78>
 800a4e0:	4bbc      	ldr	r3, [pc, #752]	; (800a7d4 <__ieee754_rem_pio2+0x31c>)
 800a4e2:	4598      	cmp	r8, r3
 800a4e4:	dc75      	bgt.n	800a5d2 <__ieee754_rem_pio2+0x11a>
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	4dbb      	ldr	r5, [pc, #748]	; (800a7d8 <__ieee754_rem_pio2+0x320>)
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	ee10 0a10 	vmov	r0, s0
 800a4f0:	a3a9      	add	r3, pc, #676	; (adr r3, 800a798 <__ieee754_rem_pio2+0x2e0>)
 800a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	dd36      	ble.n	800a568 <__ieee754_rem_pio2+0xb0>
 800a4fa:	f7f5 fe79 	bl	80001f0 <__aeabi_dsub>
 800a4fe:	45a8      	cmp	r8, r5
 800a500:	4606      	mov	r6, r0
 800a502:	460f      	mov	r7, r1
 800a504:	d018      	beq.n	800a538 <__ieee754_rem_pio2+0x80>
 800a506:	a3a6      	add	r3, pc, #664	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x2e8>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f7f5 fe70 	bl	80001f0 <__aeabi_dsub>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	e9c4 2300 	strd	r2, r3, [r4]
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f5 fe68 	bl	80001f0 <__aeabi_dsub>
 800a520:	a39f      	add	r3, pc, #636	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x2e8>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f5 fe63 	bl	80001f0 <__aeabi_dsub>
 800a52a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a52e:	2501      	movs	r5, #1
 800a530:	4628      	mov	r0, r5
 800a532:	b00d      	add	sp, #52	; 0x34
 800a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a538:	a39b      	add	r3, pc, #620	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x2f0>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 fe57 	bl	80001f0 <__aeabi_dsub>
 800a542:	a39b      	add	r3, pc, #620	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2f8>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	4606      	mov	r6, r0
 800a54a:	460f      	mov	r7, r1
 800a54c:	f7f5 fe50 	bl	80001f0 <__aeabi_dsub>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	e9c4 2300 	strd	r2, r3, [r4]
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 fe48 	bl	80001f0 <__aeabi_dsub>
 800a560:	a393      	add	r3, pc, #588	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2f8>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	e7de      	b.n	800a526 <__ieee754_rem_pio2+0x6e>
 800a568:	f7f5 fe44 	bl	80001f4 <__adddf3>
 800a56c:	45a8      	cmp	r8, r5
 800a56e:	4606      	mov	r6, r0
 800a570:	460f      	mov	r7, r1
 800a572:	d016      	beq.n	800a5a2 <__ieee754_rem_pio2+0xea>
 800a574:	a38a      	add	r3, pc, #552	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x2e8>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f7f5 fe3b 	bl	80001f4 <__adddf3>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	e9c4 2300 	strd	r2, r3, [r4]
 800a586:	4630      	mov	r0, r6
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f5 fe31 	bl	80001f0 <__aeabi_dsub>
 800a58e:	a384      	add	r3, pc, #528	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x2e8>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f5 fe2e 	bl	80001f4 <__adddf3>
 800a598:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5a0:	e7c6      	b.n	800a530 <__ieee754_rem_pio2+0x78>
 800a5a2:	a381      	add	r3, pc, #516	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x2f0>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f5 fe24 	bl	80001f4 <__adddf3>
 800a5ac:	a380      	add	r3, pc, #512	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2f8>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460f      	mov	r7, r1
 800a5b6:	f7f5 fe1d 	bl	80001f4 <__adddf3>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	e9c4 2300 	strd	r2, r3, [r4]
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	f7f5 fe13 	bl	80001f0 <__aeabi_dsub>
 800a5ca:	a379      	add	r3, pc, #484	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2f8>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	e7e0      	b.n	800a594 <__ieee754_rem_pio2+0xdc>
 800a5d2:	4b82      	ldr	r3, [pc, #520]	; (800a7dc <__ieee754_rem_pio2+0x324>)
 800a5d4:	4598      	cmp	r8, r3
 800a5d6:	f300 80d0 	bgt.w	800a77a <__ieee754_rem_pio2+0x2c2>
 800a5da:	f001 f875 	bl	800b6c8 <fabs>
 800a5de:	ec57 6b10 	vmov	r6, r7, d0
 800a5e2:	ee10 0a10 	vmov	r0, s0
 800a5e6:	a374      	add	r3, pc, #464	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x300>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7f5 ffb7 	bl	8000560 <__aeabi_dmul>
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	4b7a      	ldr	r3, [pc, #488]	; (800a7e0 <__ieee754_rem_pio2+0x328>)
 800a5f6:	f7f5 fdfd 	bl	80001f4 <__adddf3>
 800a5fa:	f7f6 fa61 	bl	8000ac0 <__aeabi_d2iz>
 800a5fe:	4605      	mov	r5, r0
 800a600:	f7f5 ff44 	bl	800048c <__aeabi_i2d>
 800a604:	a364      	add	r3, pc, #400	; (adr r3, 800a798 <__ieee754_rem_pio2+0x2e0>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a60e:	f7f5 ffa7 	bl	8000560 <__aeabi_dmul>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	f7f5 fde9 	bl	80001f0 <__aeabi_dsub>
 800a61e:	a360      	add	r3, pc, #384	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x2e8>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	4682      	mov	sl, r0
 800a626:	468b      	mov	fp, r1
 800a628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62c:	f7f5 ff98 	bl	8000560 <__aeabi_dmul>
 800a630:	2d1f      	cmp	r5, #31
 800a632:	4606      	mov	r6, r0
 800a634:	460f      	mov	r7, r1
 800a636:	dc0c      	bgt.n	800a652 <__ieee754_rem_pio2+0x19a>
 800a638:	1e6a      	subs	r2, r5, #1
 800a63a:	4b6a      	ldr	r3, [pc, #424]	; (800a7e4 <__ieee754_rem_pio2+0x32c>)
 800a63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a640:	4543      	cmp	r3, r8
 800a642:	d006      	beq.n	800a652 <__ieee754_rem_pio2+0x19a>
 800a644:	4632      	mov	r2, r6
 800a646:	463b      	mov	r3, r7
 800a648:	4650      	mov	r0, sl
 800a64a:	4659      	mov	r1, fp
 800a64c:	f7f5 fdd0 	bl	80001f0 <__aeabi_dsub>
 800a650:	e00e      	b.n	800a670 <__ieee754_rem_pio2+0x1b8>
 800a652:	4632      	mov	r2, r6
 800a654:	463b      	mov	r3, r7
 800a656:	4650      	mov	r0, sl
 800a658:	4659      	mov	r1, fp
 800a65a:	f7f5 fdc9 	bl	80001f0 <__aeabi_dsub>
 800a65e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	9a05      	ldr	r2, [sp, #20]
 800a666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	2b10      	cmp	r3, #16
 800a66e:	dc02      	bgt.n	800a676 <__ieee754_rem_pio2+0x1be>
 800a670:	e9c4 0100 	strd	r0, r1, [r4]
 800a674:	e039      	b.n	800a6ea <__ieee754_rem_pio2+0x232>
 800a676:	a34c      	add	r3, pc, #304	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x2f0>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a680:	f7f5 ff6e 	bl	8000560 <__aeabi_dmul>
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4650      	mov	r0, sl
 800a68e:	4659      	mov	r1, fp
 800a690:	f7f5 fdae 	bl	80001f0 <__aeabi_dsub>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4680      	mov	r8, r0
 800a69a:	4689      	mov	r9, r1
 800a69c:	4650      	mov	r0, sl
 800a69e:	4659      	mov	r1, fp
 800a6a0:	f7f5 fda6 	bl	80001f0 <__aeabi_dsub>
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	f7f5 fda2 	bl	80001f0 <__aeabi_dsub>
 800a6ac:	a340      	add	r3, pc, #256	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x2f8>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ba:	f7f5 ff51 	bl	8000560 <__aeabi_dmul>
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	f7f5 fd95 	bl	80001f0 <__aeabi_dsub>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f5 fd8d 	bl	80001f0 <__aeabi_dsub>
 800a6d6:	9a05      	ldr	r2, [sp, #20]
 800a6d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b31      	cmp	r3, #49	; 0x31
 800a6e0:	dc20      	bgt.n	800a724 <__ieee754_rem_pio2+0x26c>
 800a6e2:	e9c4 0100 	strd	r0, r1, [r4]
 800a6e6:	46c2      	mov	sl, r8
 800a6e8:	46cb      	mov	fp, r9
 800a6ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a6ee:	4650      	mov	r0, sl
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	4659      	mov	r1, fp
 800a6f6:	f7f5 fd7b 	bl	80001f0 <__aeabi_dsub>
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	f7f5 fd77 	bl	80001f0 <__aeabi_dsub>
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a70a:	f6bf af11 	bge.w	800a530 <__ieee754_rem_pio2+0x78>
 800a70e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a712:	6063      	str	r3, [r4, #4]
 800a714:	f8c4 8000 	str.w	r8, [r4]
 800a718:	60a0      	str	r0, [r4, #8]
 800a71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a71e:	60e3      	str	r3, [r4, #12]
 800a720:	426d      	negs	r5, r5
 800a722:	e705      	b.n	800a530 <__ieee754_rem_pio2+0x78>
 800a724:	a326      	add	r3, pc, #152	; (adr r3, 800a7c0 <__ieee754_rem_pio2+0x308>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a72e:	f7f5 ff17 	bl	8000560 <__aeabi_dmul>
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fd57 	bl	80001f0 <__aeabi_dsub>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4682      	mov	sl, r0
 800a748:	468b      	mov	fp, r1
 800a74a:	4640      	mov	r0, r8
 800a74c:	4649      	mov	r1, r9
 800a74e:	f7f5 fd4f 	bl	80001f0 <__aeabi_dsub>
 800a752:	4632      	mov	r2, r6
 800a754:	463b      	mov	r3, r7
 800a756:	f7f5 fd4b 	bl	80001f0 <__aeabi_dsub>
 800a75a:	a31b      	add	r3, pc, #108	; (adr r3, 800a7c8 <__ieee754_rem_pio2+0x310>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	4606      	mov	r6, r0
 800a762:	460f      	mov	r7, r1
 800a764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a768:	f7f5 fefa 	bl	8000560 <__aeabi_dmul>
 800a76c:	4632      	mov	r2, r6
 800a76e:	463b      	mov	r3, r7
 800a770:	f7f5 fd3e 	bl	80001f0 <__aeabi_dsub>
 800a774:	4606      	mov	r6, r0
 800a776:	460f      	mov	r7, r1
 800a778:	e764      	b.n	800a644 <__ieee754_rem_pio2+0x18c>
 800a77a:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <__ieee754_rem_pio2+0x330>)
 800a77c:	4598      	cmp	r8, r3
 800a77e:	dd35      	ble.n	800a7ec <__ieee754_rem_pio2+0x334>
 800a780:	ee10 2a10 	vmov	r2, s0
 800a784:	463b      	mov	r3, r7
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f5 fd31 	bl	80001f0 <__aeabi_dsub>
 800a78e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a792:	e9c4 0100 	strd	r0, r1, [r4]
 800a796:	e6a1      	b.n	800a4dc <__ieee754_rem_pio2+0x24>
 800a798:	54400000 	.word	0x54400000
 800a79c:	3ff921fb 	.word	0x3ff921fb
 800a7a0:	1a626331 	.word	0x1a626331
 800a7a4:	3dd0b461 	.word	0x3dd0b461
 800a7a8:	1a600000 	.word	0x1a600000
 800a7ac:	3dd0b461 	.word	0x3dd0b461
 800a7b0:	2e037073 	.word	0x2e037073
 800a7b4:	3ba3198a 	.word	0x3ba3198a
 800a7b8:	6dc9c883 	.word	0x6dc9c883
 800a7bc:	3fe45f30 	.word	0x3fe45f30
 800a7c0:	2e000000 	.word	0x2e000000
 800a7c4:	3ba3198a 	.word	0x3ba3198a
 800a7c8:	252049c1 	.word	0x252049c1
 800a7cc:	397b839a 	.word	0x397b839a
 800a7d0:	3fe921fb 	.word	0x3fe921fb
 800a7d4:	4002d97b 	.word	0x4002d97b
 800a7d8:	3ff921fb 	.word	0x3ff921fb
 800a7dc:	413921fb 	.word	0x413921fb
 800a7e0:	3fe00000 	.word	0x3fe00000
 800a7e4:	0800bcc0 	.word	0x0800bcc0
 800a7e8:	7fefffff 	.word	0x7fefffff
 800a7ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a7f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a7f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	f7f6 f960 	bl	8000ac0 <__aeabi_d2iz>
 800a800:	f7f5 fe44 	bl	800048c <__aeabi_i2d>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a810:	f7f5 fcee 	bl	80001f0 <__aeabi_dsub>
 800a814:	2200      	movs	r2, #0
 800a816:	4b1f      	ldr	r3, [pc, #124]	; (800a894 <__ieee754_rem_pio2+0x3dc>)
 800a818:	f7f5 fea2 	bl	8000560 <__aeabi_dmul>
 800a81c:	460f      	mov	r7, r1
 800a81e:	4606      	mov	r6, r0
 800a820:	f7f6 f94e 	bl	8000ac0 <__aeabi_d2iz>
 800a824:	f7f5 fe32 	bl	800048c <__aeabi_i2d>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a834:	f7f5 fcdc 	bl	80001f0 <__aeabi_dsub>
 800a838:	2200      	movs	r2, #0
 800a83a:	4b16      	ldr	r3, [pc, #88]	; (800a894 <__ieee754_rem_pio2+0x3dc>)
 800a83c:	f7f5 fe90 	bl	8000560 <__aeabi_dmul>
 800a840:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a844:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a848:	f04f 0803 	mov.w	r8, #3
 800a84c:	2600      	movs	r6, #0
 800a84e:	2700      	movs	r7, #0
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a858:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a85c:	f7f6 f8e8 	bl	8000a30 <__aeabi_dcmpeq>
 800a860:	b9b0      	cbnz	r0, 800a890 <__ieee754_rem_pio2+0x3d8>
 800a862:	4b0d      	ldr	r3, [pc, #52]	; (800a898 <__ieee754_rem_pio2+0x3e0>)
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	2302      	movs	r3, #2
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	462a      	mov	r2, r5
 800a86c:	4643      	mov	r3, r8
 800a86e:	4621      	mov	r1, r4
 800a870:	a806      	add	r0, sp, #24
 800a872:	f000 f98d 	bl	800ab90 <__kernel_rem_pio2>
 800a876:	9b04      	ldr	r3, [sp, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	4605      	mov	r5, r0
 800a87c:	f6bf ae58 	bge.w	800a530 <__ieee754_rem_pio2+0x78>
 800a880:	6863      	ldr	r3, [r4, #4]
 800a882:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a886:	6063      	str	r3, [r4, #4]
 800a888:	68e3      	ldr	r3, [r4, #12]
 800a88a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a88e:	e746      	b.n	800a71e <__ieee754_rem_pio2+0x266>
 800a890:	46d0      	mov	r8, sl
 800a892:	e7dd      	b.n	800a850 <__ieee754_rem_pio2+0x398>
 800a894:	41700000 	.word	0x41700000
 800a898:	0800bd40 	.word	0x0800bd40

0800a89c <__ieee754_sqrt>:
 800a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	4955      	ldr	r1, [pc, #340]	; (800a9f8 <__ieee754_sqrt+0x15c>)
 800a8a2:	ec55 4b10 	vmov	r4, r5, d0
 800a8a6:	43a9      	bics	r1, r5
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	462a      	mov	r2, r5
 800a8ac:	d112      	bne.n	800a8d4 <__ieee754_sqrt+0x38>
 800a8ae:	ee10 2a10 	vmov	r2, s0
 800a8b2:	ee10 0a10 	vmov	r0, s0
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	f7f5 fe52 	bl	8000560 <__aeabi_dmul>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f5 fc96 	bl	80001f4 <__adddf3>
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	ec45 4b10 	vmov	d0, r4, r5
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	ee10 0a10 	vmov	r0, s0
 800a8da:	4621      	mov	r1, r4
 800a8dc:	dc0f      	bgt.n	800a8fe <__ieee754_sqrt+0x62>
 800a8de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a8e2:	4330      	orrs	r0, r6
 800a8e4:	d0f2      	beq.n	800a8cc <__ieee754_sqrt+0x30>
 800a8e6:	b155      	cbz	r5, 800a8fe <__ieee754_sqrt+0x62>
 800a8e8:	ee10 2a10 	vmov	r2, s0
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	f7f5 fc7e 	bl	80001f0 <__aeabi_dsub>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	f7f5 ff5c 	bl	80007b4 <__aeabi_ddiv>
 800a8fc:	e7e4      	b.n	800a8c8 <__ieee754_sqrt+0x2c>
 800a8fe:	151b      	asrs	r3, r3, #20
 800a900:	d073      	beq.n	800a9ea <__ieee754_sqrt+0x14e>
 800a902:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a906:	07dd      	lsls	r5, r3, #31
 800a908:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a90c:	bf48      	it	mi
 800a90e:	0fc8      	lsrmi	r0, r1, #31
 800a910:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a914:	bf44      	itt	mi
 800a916:	0049      	lslmi	r1, r1, #1
 800a918:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a91c:	2500      	movs	r5, #0
 800a91e:	1058      	asrs	r0, r3, #1
 800a920:	0fcb      	lsrs	r3, r1, #31
 800a922:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a926:	0049      	lsls	r1, r1, #1
 800a928:	2316      	movs	r3, #22
 800a92a:	462c      	mov	r4, r5
 800a92c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a930:	19a7      	adds	r7, r4, r6
 800a932:	4297      	cmp	r7, r2
 800a934:	bfde      	ittt	le
 800a936:	19bc      	addle	r4, r7, r6
 800a938:	1bd2      	suble	r2, r2, r7
 800a93a:	19ad      	addle	r5, r5, r6
 800a93c:	0fcf      	lsrs	r7, r1, #31
 800a93e:	3b01      	subs	r3, #1
 800a940:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a944:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a948:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a94c:	d1f0      	bne.n	800a930 <__ieee754_sqrt+0x94>
 800a94e:	f04f 0c20 	mov.w	ip, #32
 800a952:	469e      	mov	lr, r3
 800a954:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a958:	42a2      	cmp	r2, r4
 800a95a:	eb06 070e 	add.w	r7, r6, lr
 800a95e:	dc02      	bgt.n	800a966 <__ieee754_sqrt+0xca>
 800a960:	d112      	bne.n	800a988 <__ieee754_sqrt+0xec>
 800a962:	428f      	cmp	r7, r1
 800a964:	d810      	bhi.n	800a988 <__ieee754_sqrt+0xec>
 800a966:	2f00      	cmp	r7, #0
 800a968:	eb07 0e06 	add.w	lr, r7, r6
 800a96c:	da42      	bge.n	800a9f4 <__ieee754_sqrt+0x158>
 800a96e:	f1be 0f00 	cmp.w	lr, #0
 800a972:	db3f      	blt.n	800a9f4 <__ieee754_sqrt+0x158>
 800a974:	f104 0801 	add.w	r8, r4, #1
 800a978:	1b12      	subs	r2, r2, r4
 800a97a:	428f      	cmp	r7, r1
 800a97c:	bf88      	it	hi
 800a97e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a982:	1bc9      	subs	r1, r1, r7
 800a984:	4433      	add	r3, r6
 800a986:	4644      	mov	r4, r8
 800a988:	0052      	lsls	r2, r2, #1
 800a98a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a98e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a992:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a996:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a99a:	d1dd      	bne.n	800a958 <__ieee754_sqrt+0xbc>
 800a99c:	430a      	orrs	r2, r1
 800a99e:	d006      	beq.n	800a9ae <__ieee754_sqrt+0x112>
 800a9a0:	1c5c      	adds	r4, r3, #1
 800a9a2:	bf13      	iteet	ne
 800a9a4:	3301      	addne	r3, #1
 800a9a6:	3501      	addeq	r5, #1
 800a9a8:	4663      	moveq	r3, ip
 800a9aa:	f023 0301 	bicne.w	r3, r3, #1
 800a9ae:	106a      	asrs	r2, r5, #1
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	07e9      	lsls	r1, r5, #31
 800a9b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a9b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a9bc:	bf48      	it	mi
 800a9be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a9c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a9c6:	461c      	mov	r4, r3
 800a9c8:	e780      	b.n	800a8cc <__ieee754_sqrt+0x30>
 800a9ca:	0aca      	lsrs	r2, r1, #11
 800a9cc:	3815      	subs	r0, #21
 800a9ce:	0549      	lsls	r1, r1, #21
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d0fa      	beq.n	800a9ca <__ieee754_sqrt+0x12e>
 800a9d4:	02d6      	lsls	r6, r2, #11
 800a9d6:	d50a      	bpl.n	800a9ee <__ieee754_sqrt+0x152>
 800a9d8:	f1c3 0420 	rsb	r4, r3, #32
 800a9dc:	fa21 f404 	lsr.w	r4, r1, r4
 800a9e0:	1e5d      	subs	r5, r3, #1
 800a9e2:	4099      	lsls	r1, r3
 800a9e4:	4322      	orrs	r2, r4
 800a9e6:	1b43      	subs	r3, r0, r5
 800a9e8:	e78b      	b.n	800a902 <__ieee754_sqrt+0x66>
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	e7f0      	b.n	800a9d0 <__ieee754_sqrt+0x134>
 800a9ee:	0052      	lsls	r2, r2, #1
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	e7ef      	b.n	800a9d4 <__ieee754_sqrt+0x138>
 800a9f4:	46a0      	mov	r8, r4
 800a9f6:	e7bf      	b.n	800a978 <__ieee754_sqrt+0xdc>
 800a9f8:	7ff00000 	.word	0x7ff00000
 800a9fc:	00000000 	.word	0x00000000

0800aa00 <__kernel_cos>:
 800aa00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	ec59 8b10 	vmov	r8, r9, d0
 800aa08:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800aa0c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800aa10:	ed2d 8b02 	vpush	{d8}
 800aa14:	eeb0 8a41 	vmov.f32	s16, s2
 800aa18:	eef0 8a61 	vmov.f32	s17, s3
 800aa1c:	da07      	bge.n	800aa2e <__kernel_cos+0x2e>
 800aa1e:	ee10 0a10 	vmov	r0, s0
 800aa22:	4649      	mov	r1, r9
 800aa24:	f7f6 f84c 	bl	8000ac0 <__aeabi_d2iz>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f000 8089 	beq.w	800ab40 <__kernel_cos+0x140>
 800aa2e:	4642      	mov	r2, r8
 800aa30:	464b      	mov	r3, r9
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	f7f5 fd93 	bl	8000560 <__aeabi_dmul>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	4b4e      	ldr	r3, [pc, #312]	; (800ab78 <__kernel_cos+0x178>)
 800aa3e:	4604      	mov	r4, r0
 800aa40:	460d      	mov	r5, r1
 800aa42:	f7f5 fd8d 	bl	8000560 <__aeabi_dmul>
 800aa46:	a340      	add	r3, pc, #256	; (adr r3, 800ab48 <__kernel_cos+0x148>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	468b      	mov	fp, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fd84 	bl	8000560 <__aeabi_dmul>
 800aa58:	a33d      	add	r3, pc, #244	; (adr r3, 800ab50 <__kernel_cos+0x150>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fbc9 	bl	80001f4 <__adddf3>
 800aa62:	4622      	mov	r2, r4
 800aa64:	462b      	mov	r3, r5
 800aa66:	f7f5 fd7b 	bl	8000560 <__aeabi_dmul>
 800aa6a:	a33b      	add	r3, pc, #236	; (adr r3, 800ab58 <__kernel_cos+0x158>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fbbe 	bl	80001f0 <__aeabi_dsub>
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f5 fd72 	bl	8000560 <__aeabi_dmul>
 800aa7c:	a338      	add	r3, pc, #224	; (adr r3, 800ab60 <__kernel_cos+0x160>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	f7f5 fbb7 	bl	80001f4 <__adddf3>
 800aa86:	4622      	mov	r2, r4
 800aa88:	462b      	mov	r3, r5
 800aa8a:	f7f5 fd69 	bl	8000560 <__aeabi_dmul>
 800aa8e:	a336      	add	r3, pc, #216	; (adr r3, 800ab68 <__kernel_cos+0x168>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fbac 	bl	80001f0 <__aeabi_dsub>
 800aa98:	4622      	mov	r2, r4
 800aa9a:	462b      	mov	r3, r5
 800aa9c:	f7f5 fd60 	bl	8000560 <__aeabi_dmul>
 800aaa0:	a333      	add	r3, pc, #204	; (adr r3, 800ab70 <__kernel_cos+0x170>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fba5 	bl	80001f4 <__adddf3>
 800aaaa:	4622      	mov	r2, r4
 800aaac:	462b      	mov	r3, r5
 800aaae:	f7f5 fd57 	bl	8000560 <__aeabi_dmul>
 800aab2:	4622      	mov	r2, r4
 800aab4:	462b      	mov	r3, r5
 800aab6:	f7f5 fd53 	bl	8000560 <__aeabi_dmul>
 800aaba:	ec53 2b18 	vmov	r2, r3, d8
 800aabe:	4604      	mov	r4, r0
 800aac0:	460d      	mov	r5, r1
 800aac2:	4640      	mov	r0, r8
 800aac4:	4649      	mov	r1, r9
 800aac6:	f7f5 fd4b 	bl	8000560 <__aeabi_dmul>
 800aaca:	460b      	mov	r3, r1
 800aacc:	4602      	mov	r2, r0
 800aace:	4629      	mov	r1, r5
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7f5 fb8d 	bl	80001f0 <__aeabi_dsub>
 800aad6:	4b29      	ldr	r3, [pc, #164]	; (800ab7c <__kernel_cos+0x17c>)
 800aad8:	429e      	cmp	r6, r3
 800aada:	4680      	mov	r8, r0
 800aadc:	4689      	mov	r9, r1
 800aade:	dc11      	bgt.n	800ab04 <__kernel_cos+0x104>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4650      	mov	r0, sl
 800aae6:	4659      	mov	r1, fp
 800aae8:	f7f5 fb82 	bl	80001f0 <__aeabi_dsub>
 800aaec:	460b      	mov	r3, r1
 800aaee:	4924      	ldr	r1, [pc, #144]	; (800ab80 <__kernel_cos+0x180>)
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	f7f5 fb7c 	bl	80001f0 <__aeabi_dsub>
 800aaf8:	ecbd 8b02 	vpop	{d8}
 800aafc:	ec41 0b10 	vmov	d0, r0, r1
 800ab00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab04:	4b1f      	ldr	r3, [pc, #124]	; (800ab84 <__kernel_cos+0x184>)
 800ab06:	491e      	ldr	r1, [pc, #120]	; (800ab80 <__kernel_cos+0x180>)
 800ab08:	429e      	cmp	r6, r3
 800ab0a:	bfcc      	ite	gt
 800ab0c:	4d1e      	ldrgt	r5, [pc, #120]	; (800ab88 <__kernel_cos+0x188>)
 800ab0e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ab12:	2400      	movs	r4, #0
 800ab14:	4622      	mov	r2, r4
 800ab16:	462b      	mov	r3, r5
 800ab18:	2000      	movs	r0, #0
 800ab1a:	f7f5 fb69 	bl	80001f0 <__aeabi_dsub>
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4606      	mov	r6, r0
 800ab22:	460f      	mov	r7, r1
 800ab24:	462b      	mov	r3, r5
 800ab26:	4650      	mov	r0, sl
 800ab28:	4659      	mov	r1, fp
 800ab2a:	f7f5 fb61 	bl	80001f0 <__aeabi_dsub>
 800ab2e:	4642      	mov	r2, r8
 800ab30:	464b      	mov	r3, r9
 800ab32:	f7f5 fb5d 	bl	80001f0 <__aeabi_dsub>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	e7d9      	b.n	800aaf4 <__kernel_cos+0xf4>
 800ab40:	2000      	movs	r0, #0
 800ab42:	490f      	ldr	r1, [pc, #60]	; (800ab80 <__kernel_cos+0x180>)
 800ab44:	e7d8      	b.n	800aaf8 <__kernel_cos+0xf8>
 800ab46:	bf00      	nop
 800ab48:	be8838d4 	.word	0xbe8838d4
 800ab4c:	bda8fae9 	.word	0xbda8fae9
 800ab50:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab54:	3e21ee9e 	.word	0x3e21ee9e
 800ab58:	809c52ad 	.word	0x809c52ad
 800ab5c:	3e927e4f 	.word	0x3e927e4f
 800ab60:	19cb1590 	.word	0x19cb1590
 800ab64:	3efa01a0 	.word	0x3efa01a0
 800ab68:	16c15177 	.word	0x16c15177
 800ab6c:	3f56c16c 	.word	0x3f56c16c
 800ab70:	5555554c 	.word	0x5555554c
 800ab74:	3fa55555 	.word	0x3fa55555
 800ab78:	3fe00000 	.word	0x3fe00000
 800ab7c:	3fd33332 	.word	0x3fd33332
 800ab80:	3ff00000 	.word	0x3ff00000
 800ab84:	3fe90000 	.word	0x3fe90000
 800ab88:	3fd20000 	.word	0x3fd20000
 800ab8c:	00000000 	.word	0x00000000

0800ab90 <__kernel_rem_pio2>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	ed2d 8b02 	vpush	{d8}
 800ab98:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ab9c:	1ed4      	subs	r4, r2, #3
 800ab9e:	9308      	str	r3, [sp, #32]
 800aba0:	9101      	str	r1, [sp, #4]
 800aba2:	4bc5      	ldr	r3, [pc, #788]	; (800aeb8 <__kernel_rem_pio2+0x328>)
 800aba4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800aba6:	9009      	str	r0, [sp, #36]	; 0x24
 800aba8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	2318      	movs	r3, #24
 800abb6:	fb94 f4f3 	sdiv	r4, r4, r3
 800abba:	f06f 0317 	mvn.w	r3, #23
 800abbe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800abc2:	fb04 3303 	mla	r3, r4, r3, r3
 800abc6:	eb03 0a02 	add.w	sl, r3, r2
 800abca:	9b04      	ldr	r3, [sp, #16]
 800abcc:	9a07      	ldr	r2, [sp, #28]
 800abce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800aea8 <__kernel_rem_pio2+0x318>
 800abd2:	eb03 0802 	add.w	r8, r3, r2
 800abd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800abd8:	1aa7      	subs	r7, r4, r2
 800abda:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800abde:	ae22      	add	r6, sp, #136	; 0x88
 800abe0:	2500      	movs	r5, #0
 800abe2:	4545      	cmp	r5, r8
 800abe4:	dd13      	ble.n	800ac0e <__kernel_rem_pio2+0x7e>
 800abe6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800aea8 <__kernel_rem_pio2+0x318>
 800abea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800abee:	2600      	movs	r6, #0
 800abf0:	9b04      	ldr	r3, [sp, #16]
 800abf2:	429e      	cmp	r6, r3
 800abf4:	dc32      	bgt.n	800ac5c <__kernel_rem_pio2+0xcc>
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	9302      	str	r3, [sp, #8]
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	199d      	adds	r5, r3, r6
 800abfe:	ab22      	add	r3, sp, #136	; 0x88
 800ac00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac04:	9306      	str	r3, [sp, #24]
 800ac06:	ec59 8b18 	vmov	r8, r9, d8
 800ac0a:	2700      	movs	r7, #0
 800ac0c:	e01f      	b.n	800ac4e <__kernel_rem_pio2+0xbe>
 800ac0e:	42ef      	cmn	r7, r5
 800ac10:	d407      	bmi.n	800ac22 <__kernel_rem_pio2+0x92>
 800ac12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac16:	f7f5 fc39 	bl	800048c <__aeabi_i2d>
 800ac1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac1e:	3501      	adds	r5, #1
 800ac20:	e7df      	b.n	800abe2 <__kernel_rem_pio2+0x52>
 800ac22:	ec51 0b18 	vmov	r0, r1, d8
 800ac26:	e7f8      	b.n	800ac1a <__kernel_rem_pio2+0x8a>
 800ac28:	9906      	ldr	r1, [sp, #24]
 800ac2a:	9d02      	ldr	r5, [sp, #8]
 800ac2c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ac30:	9106      	str	r1, [sp, #24]
 800ac32:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ac36:	9502      	str	r5, [sp, #8]
 800ac38:	f7f5 fc92 	bl	8000560 <__aeabi_dmul>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 fad6 	bl	80001f4 <__adddf3>
 800ac48:	3701      	adds	r7, #1
 800ac4a:	4680      	mov	r8, r0
 800ac4c:	4689      	mov	r9, r1
 800ac4e:	9b07      	ldr	r3, [sp, #28]
 800ac50:	429f      	cmp	r7, r3
 800ac52:	dde9      	ble.n	800ac28 <__kernel_rem_pio2+0x98>
 800ac54:	e8eb 8902 	strd	r8, r9, [fp], #8
 800ac58:	3601      	adds	r6, #1
 800ac5a:	e7c9      	b.n	800abf0 <__kernel_rem_pio2+0x60>
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	aa0e      	add	r2, sp, #56	; 0x38
 800ac60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac64:	930c      	str	r3, [sp, #48]	; 0x30
 800ac66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac6c:	9c04      	ldr	r4, [sp, #16]
 800ac6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac70:	ab9a      	add	r3, sp, #616	; 0x268
 800ac72:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ac76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ac7e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ac82:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ac86:	ab9a      	add	r3, sp, #616	; 0x268
 800ac88:	445b      	add	r3, fp
 800ac8a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ac8e:	2500      	movs	r5, #0
 800ac90:	1b63      	subs	r3, r4, r5
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dc78      	bgt.n	800ad88 <__kernel_rem_pio2+0x1f8>
 800ac96:	4650      	mov	r0, sl
 800ac98:	ec49 8b10 	vmov	d0, r8, r9
 800ac9c:	f000 fe3c 	bl	800b918 <scalbn>
 800aca0:	ec57 6b10 	vmov	r6, r7, d0
 800aca4:	2200      	movs	r2, #0
 800aca6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800acaa:	ee10 0a10 	vmov	r0, s0
 800acae:	4639      	mov	r1, r7
 800acb0:	f7f5 fc56 	bl	8000560 <__aeabi_dmul>
 800acb4:	ec41 0b10 	vmov	d0, r0, r1
 800acb8:	f000 fd1a 	bl	800b6f0 <floor>
 800acbc:	2200      	movs	r2, #0
 800acbe:	ec51 0b10 	vmov	r0, r1, d0
 800acc2:	4b7e      	ldr	r3, [pc, #504]	; (800aebc <__kernel_rem_pio2+0x32c>)
 800acc4:	f7f5 fc4c 	bl	8000560 <__aeabi_dmul>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 fa8e 	bl	80001f0 <__aeabi_dsub>
 800acd4:	460f      	mov	r7, r1
 800acd6:	4606      	mov	r6, r0
 800acd8:	f7f5 fef2 	bl	8000ac0 <__aeabi_d2iz>
 800acdc:	9006      	str	r0, [sp, #24]
 800acde:	f7f5 fbd5 	bl	800048c <__aeabi_i2d>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4630      	mov	r0, r6
 800ace8:	4639      	mov	r1, r7
 800acea:	f7f5 fa81 	bl	80001f0 <__aeabi_dsub>
 800acee:	f1ba 0f00 	cmp.w	sl, #0
 800acf2:	4606      	mov	r6, r0
 800acf4:	460f      	mov	r7, r1
 800acf6:	dd6c      	ble.n	800add2 <__kernel_rem_pio2+0x242>
 800acf8:	1e62      	subs	r2, r4, #1
 800acfa:	ab0e      	add	r3, sp, #56	; 0x38
 800acfc:	f1ca 0118 	rsb	r1, sl, #24
 800ad00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad04:	9d06      	ldr	r5, [sp, #24]
 800ad06:	fa40 f301 	asr.w	r3, r0, r1
 800ad0a:	441d      	add	r5, r3
 800ad0c:	408b      	lsls	r3, r1
 800ad0e:	1ac0      	subs	r0, r0, r3
 800ad10:	ab0e      	add	r3, sp, #56	; 0x38
 800ad12:	9506      	str	r5, [sp, #24]
 800ad14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad18:	f1ca 0317 	rsb	r3, sl, #23
 800ad1c:	fa40 f303 	asr.w	r3, r0, r3
 800ad20:	9302      	str	r3, [sp, #8]
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd62      	ble.n	800adee <__kernel_rem_pio2+0x25e>
 800ad28:	9b06      	ldr	r3, [sp, #24]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	9306      	str	r3, [sp, #24]
 800ad30:	4615      	mov	r5, r2
 800ad32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ad36:	4294      	cmp	r4, r2
 800ad38:	f300 8095 	bgt.w	800ae66 <__kernel_rem_pio2+0x2d6>
 800ad3c:	f1ba 0f00 	cmp.w	sl, #0
 800ad40:	dd07      	ble.n	800ad52 <__kernel_rem_pio2+0x1c2>
 800ad42:	f1ba 0f01 	cmp.w	sl, #1
 800ad46:	f000 80a2 	beq.w	800ae8e <__kernel_rem_pio2+0x2fe>
 800ad4a:	f1ba 0f02 	cmp.w	sl, #2
 800ad4e:	f000 80c1 	beq.w	800aed4 <__kernel_rem_pio2+0x344>
 800ad52:	9b02      	ldr	r3, [sp, #8]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d14a      	bne.n	800adee <__kernel_rem_pio2+0x25e>
 800ad58:	4632      	mov	r2, r6
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	4958      	ldr	r1, [pc, #352]	; (800aec0 <__kernel_rem_pio2+0x330>)
 800ad60:	f7f5 fa46 	bl	80001f0 <__aeabi_dsub>
 800ad64:	4606      	mov	r6, r0
 800ad66:	460f      	mov	r7, r1
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	d040      	beq.n	800adee <__kernel_rem_pio2+0x25e>
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aeb0 <__kernel_rem_pio2+0x320>
 800ad72:	f000 fdd1 	bl	800b918 <scalbn>
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	ec53 2b10 	vmov	r2, r3, d0
 800ad7e:	f7f5 fa37 	bl	80001f0 <__aeabi_dsub>
 800ad82:	4606      	mov	r6, r0
 800ad84:	460f      	mov	r7, r1
 800ad86:	e032      	b.n	800adee <__kernel_rem_pio2+0x25e>
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4b4e      	ldr	r3, [pc, #312]	; (800aec4 <__kernel_rem_pio2+0x334>)
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 fbe6 	bl	8000560 <__aeabi_dmul>
 800ad94:	f7f5 fe94 	bl	8000ac0 <__aeabi_d2iz>
 800ad98:	f7f5 fb78 	bl	800048c <__aeabi_i2d>
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4b4a      	ldr	r3, [pc, #296]	; (800aec8 <__kernel_rem_pio2+0x338>)
 800ada0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada4:	f7f5 fbdc 	bl	8000560 <__aeabi_dmul>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4640      	mov	r0, r8
 800adae:	4649      	mov	r1, r9
 800adb0:	f7f5 fa1e 	bl	80001f0 <__aeabi_dsub>
 800adb4:	f7f5 fe84 	bl	8000ac0 <__aeabi_d2iz>
 800adb8:	ab0e      	add	r3, sp, #56	; 0x38
 800adba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800adbe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800adc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc6:	f7f5 fa15 	bl	80001f4 <__adddf3>
 800adca:	3501      	adds	r5, #1
 800adcc:	4680      	mov	r8, r0
 800adce:	4689      	mov	r9, r1
 800add0:	e75e      	b.n	800ac90 <__kernel_rem_pio2+0x100>
 800add2:	d105      	bne.n	800ade0 <__kernel_rem_pio2+0x250>
 800add4:	1e63      	subs	r3, r4, #1
 800add6:	aa0e      	add	r2, sp, #56	; 0x38
 800add8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800addc:	15c3      	asrs	r3, r0, #23
 800adde:	e79f      	b.n	800ad20 <__kernel_rem_pio2+0x190>
 800ade0:	2200      	movs	r2, #0
 800ade2:	4b3a      	ldr	r3, [pc, #232]	; (800aecc <__kernel_rem_pio2+0x33c>)
 800ade4:	f7f5 fe42 	bl	8000a6c <__aeabi_dcmpge>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d139      	bne.n	800ae60 <__kernel_rem_pio2+0x2d0>
 800adec:	9002      	str	r0, [sp, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	2300      	movs	r3, #0
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fe1b 	bl	8000a30 <__aeabi_dcmpeq>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	f000 80c7 	beq.w	800af8e <__kernel_rem_pio2+0x3fe>
 800ae00:	1e65      	subs	r5, r4, #1
 800ae02:	462b      	mov	r3, r5
 800ae04:	2200      	movs	r2, #0
 800ae06:	9904      	ldr	r1, [sp, #16]
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	da6a      	bge.n	800aee2 <__kernel_rem_pio2+0x352>
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	f000 8088 	beq.w	800af22 <__kernel_rem_pio2+0x392>
 800ae12:	ab0e      	add	r3, sp, #56	; 0x38
 800ae14:	f1aa 0a18 	sub.w	sl, sl, #24
 800ae18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 80b4 	beq.w	800af8a <__kernel_rem_pio2+0x3fa>
 800ae22:	4650      	mov	r0, sl
 800ae24:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800aeb0 <__kernel_rem_pio2+0x320>
 800ae28:	f000 fd76 	bl	800b918 <scalbn>
 800ae2c:	00ec      	lsls	r4, r5, #3
 800ae2e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ae30:	191e      	adds	r6, r3, r4
 800ae32:	ec59 8b10 	vmov	r8, r9, d0
 800ae36:	f106 0a08 	add.w	sl, r6, #8
 800ae3a:	462f      	mov	r7, r5
 800ae3c:	2f00      	cmp	r7, #0
 800ae3e:	f280 80df 	bge.w	800b000 <__kernel_rem_pio2+0x470>
 800ae42:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800aea8 <__kernel_rem_pio2+0x318>
 800ae46:	f04f 0a00 	mov.w	sl, #0
 800ae4a:	eba5 030a 	sub.w	r3, r5, sl
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f2c0 810a 	blt.w	800b068 <__kernel_rem_pio2+0x4d8>
 800ae54:	f8df b078 	ldr.w	fp, [pc, #120]	; 800aed0 <__kernel_rem_pio2+0x340>
 800ae58:	ec59 8b18 	vmov	r8, r9, d8
 800ae5c:	2700      	movs	r7, #0
 800ae5e:	e0f5      	b.n	800b04c <__kernel_rem_pio2+0x4bc>
 800ae60:	2302      	movs	r3, #2
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	e760      	b.n	800ad28 <__kernel_rem_pio2+0x198>
 800ae66:	ab0e      	add	r3, sp, #56	; 0x38
 800ae68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6c:	b94d      	cbnz	r5, 800ae82 <__kernel_rem_pio2+0x2f2>
 800ae6e:	b12b      	cbz	r3, 800ae7c <__kernel_rem_pio2+0x2ec>
 800ae70:	a80e      	add	r0, sp, #56	; 0x38
 800ae72:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	3201      	adds	r2, #1
 800ae7e:	461d      	mov	r5, r3
 800ae80:	e759      	b.n	800ad36 <__kernel_rem_pio2+0x1a6>
 800ae82:	a80e      	add	r0, sp, #56	; 0x38
 800ae84:	1acb      	subs	r3, r1, r3
 800ae86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	e7f6      	b.n	800ae7c <__kernel_rem_pio2+0x2ec>
 800ae8e:	1e62      	subs	r2, r4, #1
 800ae90:	ab0e      	add	r3, sp, #56	; 0x38
 800ae92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae9a:	a90e      	add	r1, sp, #56	; 0x38
 800ae9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aea0:	e757      	b.n	800ad52 <__kernel_rem_pio2+0x1c2>
 800aea2:	bf00      	nop
 800aea4:	f3af 8000 	nop.w
	...
 800aeb4:	3ff00000 	.word	0x3ff00000
 800aeb8:	0800be88 	.word	0x0800be88
 800aebc:	40200000 	.word	0x40200000
 800aec0:	3ff00000 	.word	0x3ff00000
 800aec4:	3e700000 	.word	0x3e700000
 800aec8:	41700000 	.word	0x41700000
 800aecc:	3fe00000 	.word	0x3fe00000
 800aed0:	0800be48 	.word	0x0800be48
 800aed4:	1e62      	subs	r2, r4, #1
 800aed6:	ab0e      	add	r3, sp, #56	; 0x38
 800aed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aedc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aee0:	e7db      	b.n	800ae9a <__kernel_rem_pio2+0x30a>
 800aee2:	a90e      	add	r1, sp, #56	; 0x38
 800aee4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	430a      	orrs	r2, r1
 800aeec:	e78b      	b.n	800ae06 <__kernel_rem_pio2+0x276>
 800aeee:	3301      	adds	r3, #1
 800aef0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aef4:	2900      	cmp	r1, #0
 800aef6:	d0fa      	beq.n	800aeee <__kernel_rem_pio2+0x35e>
 800aef8:	9a08      	ldr	r2, [sp, #32]
 800aefa:	4422      	add	r2, r4
 800aefc:	00d2      	lsls	r2, r2, #3
 800aefe:	a922      	add	r1, sp, #136	; 0x88
 800af00:	18e3      	adds	r3, r4, r3
 800af02:	9206      	str	r2, [sp, #24]
 800af04:	440a      	add	r2, r1
 800af06:	9302      	str	r3, [sp, #8]
 800af08:	f10b 0108 	add.w	r1, fp, #8
 800af0c:	f102 0308 	add.w	r3, r2, #8
 800af10:	1c66      	adds	r6, r4, #1
 800af12:	910a      	str	r1, [sp, #40]	; 0x28
 800af14:	2500      	movs	r5, #0
 800af16:	930d      	str	r3, [sp, #52]	; 0x34
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	42b3      	cmp	r3, r6
 800af1c:	da04      	bge.n	800af28 <__kernel_rem_pio2+0x398>
 800af1e:	461c      	mov	r4, r3
 800af20:	e6a6      	b.n	800ac70 <__kernel_rem_pio2+0xe0>
 800af22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af24:	2301      	movs	r3, #1
 800af26:	e7e3      	b.n	800aef0 <__kernel_rem_pio2+0x360>
 800af28:	9b06      	ldr	r3, [sp, #24]
 800af2a:	18ef      	adds	r7, r5, r3
 800af2c:	ab22      	add	r3, sp, #136	; 0x88
 800af2e:	441f      	add	r7, r3
 800af30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800af36:	f7f5 faa9 	bl	800048c <__aeabi_i2d>
 800af3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3c:	461c      	mov	r4, r3
 800af3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af40:	e9c7 0100 	strd	r0, r1, [r7]
 800af44:	eb03 0b05 	add.w	fp, r3, r5
 800af48:	2700      	movs	r7, #0
 800af4a:	f04f 0800 	mov.w	r8, #0
 800af4e:	f04f 0900 	mov.w	r9, #0
 800af52:	9b07      	ldr	r3, [sp, #28]
 800af54:	429f      	cmp	r7, r3
 800af56:	dd08      	ble.n	800af6a <__kernel_rem_pio2+0x3da>
 800af58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5a:	aa72      	add	r2, sp, #456	; 0x1c8
 800af5c:	18eb      	adds	r3, r5, r3
 800af5e:	4413      	add	r3, r2
 800af60:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800af64:	3601      	adds	r6, #1
 800af66:	3508      	adds	r5, #8
 800af68:	e7d6      	b.n	800af18 <__kernel_rem_pio2+0x388>
 800af6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af72:	f7f5 faf5 	bl	8000560 <__aeabi_dmul>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4640      	mov	r0, r8
 800af7c:	4649      	mov	r1, r9
 800af7e:	f7f5 f939 	bl	80001f4 <__adddf3>
 800af82:	3701      	adds	r7, #1
 800af84:	4680      	mov	r8, r0
 800af86:	4689      	mov	r9, r1
 800af88:	e7e3      	b.n	800af52 <__kernel_rem_pio2+0x3c2>
 800af8a:	3d01      	subs	r5, #1
 800af8c:	e741      	b.n	800ae12 <__kernel_rem_pio2+0x282>
 800af8e:	f1ca 0000 	rsb	r0, sl, #0
 800af92:	ec47 6b10 	vmov	d0, r6, r7
 800af96:	f000 fcbf 	bl	800b918 <scalbn>
 800af9a:	ec57 6b10 	vmov	r6, r7, d0
 800af9e:	2200      	movs	r2, #0
 800afa0:	4b99      	ldr	r3, [pc, #612]	; (800b208 <__kernel_rem_pio2+0x678>)
 800afa2:	ee10 0a10 	vmov	r0, s0
 800afa6:	4639      	mov	r1, r7
 800afa8:	f7f5 fd60 	bl	8000a6c <__aeabi_dcmpge>
 800afac:	b1f8      	cbz	r0, 800afee <__kernel_rem_pio2+0x45e>
 800afae:	2200      	movs	r2, #0
 800afb0:	4b96      	ldr	r3, [pc, #600]	; (800b20c <__kernel_rem_pio2+0x67c>)
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 fad3 	bl	8000560 <__aeabi_dmul>
 800afba:	f7f5 fd81 	bl	8000ac0 <__aeabi_d2iz>
 800afbe:	4680      	mov	r8, r0
 800afc0:	f7f5 fa64 	bl	800048c <__aeabi_i2d>
 800afc4:	2200      	movs	r2, #0
 800afc6:	4b90      	ldr	r3, [pc, #576]	; (800b208 <__kernel_rem_pio2+0x678>)
 800afc8:	f7f5 faca 	bl	8000560 <__aeabi_dmul>
 800afcc:	460b      	mov	r3, r1
 800afce:	4602      	mov	r2, r0
 800afd0:	4639      	mov	r1, r7
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7f5 f90c 	bl	80001f0 <__aeabi_dsub>
 800afd8:	f7f5 fd72 	bl	8000ac0 <__aeabi_d2iz>
 800afdc:	1c65      	adds	r5, r4, #1
 800afde:	ab0e      	add	r3, sp, #56	; 0x38
 800afe0:	f10a 0a18 	add.w	sl, sl, #24
 800afe4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afe8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800afec:	e719      	b.n	800ae22 <__kernel_rem_pio2+0x292>
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fd65 	bl	8000ac0 <__aeabi_d2iz>
 800aff6:	ab0e      	add	r3, sp, #56	; 0x38
 800aff8:	4625      	mov	r5, r4
 800affa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800affe:	e710      	b.n	800ae22 <__kernel_rem_pio2+0x292>
 800b000:	ab0e      	add	r3, sp, #56	; 0x38
 800b002:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b006:	f7f5 fa41 	bl	800048c <__aeabi_i2d>
 800b00a:	4642      	mov	r2, r8
 800b00c:	464b      	mov	r3, r9
 800b00e:	f7f5 faa7 	bl	8000560 <__aeabi_dmul>
 800b012:	2200      	movs	r2, #0
 800b014:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b018:	4b7c      	ldr	r3, [pc, #496]	; (800b20c <__kernel_rem_pio2+0x67c>)
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 fa9f 	bl	8000560 <__aeabi_dmul>
 800b022:	3f01      	subs	r7, #1
 800b024:	4680      	mov	r8, r0
 800b026:	4689      	mov	r9, r1
 800b028:	e708      	b.n	800ae3c <__kernel_rem_pio2+0x2ac>
 800b02a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b036:	f7f5 fa93 	bl	8000560 <__aeabi_dmul>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4640      	mov	r0, r8
 800b040:	4649      	mov	r1, r9
 800b042:	f7f5 f8d7 	bl	80001f4 <__adddf3>
 800b046:	3701      	adds	r7, #1
 800b048:	4680      	mov	r8, r0
 800b04a:	4689      	mov	r9, r1
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	429f      	cmp	r7, r3
 800b050:	dc01      	bgt.n	800b056 <__kernel_rem_pio2+0x4c6>
 800b052:	45ba      	cmp	sl, r7
 800b054:	dae9      	bge.n	800b02a <__kernel_rem_pio2+0x49a>
 800b056:	ab4a      	add	r3, sp, #296	; 0x128
 800b058:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b05c:	e9c3 8900 	strd	r8, r9, [r3]
 800b060:	f10a 0a01 	add.w	sl, sl, #1
 800b064:	3e08      	subs	r6, #8
 800b066:	e6f0      	b.n	800ae4a <__kernel_rem_pio2+0x2ba>
 800b068:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d85b      	bhi.n	800b126 <__kernel_rem_pio2+0x596>
 800b06e:	e8df f003 	tbb	[pc, r3]
 800b072:	264a      	.short	0x264a
 800b074:	0226      	.short	0x0226
 800b076:	ab9a      	add	r3, sp, #616	; 0x268
 800b078:	441c      	add	r4, r3
 800b07a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b07e:	46a2      	mov	sl, r4
 800b080:	46ab      	mov	fp, r5
 800b082:	f1bb 0f00 	cmp.w	fp, #0
 800b086:	dc6c      	bgt.n	800b162 <__kernel_rem_pio2+0x5d2>
 800b088:	46a2      	mov	sl, r4
 800b08a:	46ab      	mov	fp, r5
 800b08c:	f1bb 0f01 	cmp.w	fp, #1
 800b090:	f300 8086 	bgt.w	800b1a0 <__kernel_rem_pio2+0x610>
 800b094:	2000      	movs	r0, #0
 800b096:	2100      	movs	r1, #0
 800b098:	2d01      	cmp	r5, #1
 800b09a:	f300 80a0 	bgt.w	800b1de <__kernel_rem_pio2+0x64e>
 800b09e:	9b02      	ldr	r3, [sp, #8]
 800b0a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b0a4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f040 809e 	bne.w	800b1ea <__kernel_rem_pio2+0x65a>
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	e9c3 7800 	strd	r7, r8, [r3]
 800b0b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b0b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0bc:	e033      	b.n	800b126 <__kernel_rem_pio2+0x596>
 800b0be:	3408      	adds	r4, #8
 800b0c0:	ab4a      	add	r3, sp, #296	; 0x128
 800b0c2:	441c      	add	r4, r3
 800b0c4:	462e      	mov	r6, r5
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	2e00      	cmp	r6, #0
 800b0cc:	da3a      	bge.n	800b144 <__kernel_rem_pio2+0x5b4>
 800b0ce:	9b02      	ldr	r3, [sp, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d03d      	beq.n	800b150 <__kernel_rem_pio2+0x5c0>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0da:	9c01      	ldr	r4, [sp, #4]
 800b0dc:	e9c4 2300 	strd	r2, r3, [r4]
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b0e8:	f7f5 f882 	bl	80001f0 <__aeabi_dsub>
 800b0ec:	ae4c      	add	r6, sp, #304	; 0x130
 800b0ee:	2401      	movs	r4, #1
 800b0f0:	42a5      	cmp	r5, r4
 800b0f2:	da30      	bge.n	800b156 <__kernel_rem_pio2+0x5c6>
 800b0f4:	9b02      	ldr	r3, [sp, #8]
 800b0f6:	b113      	cbz	r3, 800b0fe <__kernel_rem_pio2+0x56e>
 800b0f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b104:	e00f      	b.n	800b126 <__kernel_rem_pio2+0x596>
 800b106:	ab9a      	add	r3, sp, #616	; 0x268
 800b108:	441c      	add	r4, r3
 800b10a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b10e:	2000      	movs	r0, #0
 800b110:	2100      	movs	r1, #0
 800b112:	2d00      	cmp	r5, #0
 800b114:	da10      	bge.n	800b138 <__kernel_rem_pio2+0x5a8>
 800b116:	9b02      	ldr	r3, [sp, #8]
 800b118:	b113      	cbz	r3, 800b120 <__kernel_rem_pio2+0x590>
 800b11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b11e:	4619      	mov	r1, r3
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	e9c3 0100 	strd	r0, r1, [r3]
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	f003 0007 	and.w	r0, r3, #7
 800b12c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b130:	ecbd 8b02 	vpop	{d8}
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b13c:	f7f5 f85a 	bl	80001f4 <__adddf3>
 800b140:	3d01      	subs	r5, #1
 800b142:	e7e6      	b.n	800b112 <__kernel_rem_pio2+0x582>
 800b144:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b148:	f7f5 f854 	bl	80001f4 <__adddf3>
 800b14c:	3e01      	subs	r6, #1
 800b14e:	e7bc      	b.n	800b0ca <__kernel_rem_pio2+0x53a>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	e7c1      	b.n	800b0da <__kernel_rem_pio2+0x54a>
 800b156:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b15a:	f7f5 f84b 	bl	80001f4 <__adddf3>
 800b15e:	3401      	adds	r4, #1
 800b160:	e7c6      	b.n	800b0f0 <__kernel_rem_pio2+0x560>
 800b162:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b166:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b16a:	4640      	mov	r0, r8
 800b16c:	ec53 2b17 	vmov	r2, r3, d7
 800b170:	4649      	mov	r1, r9
 800b172:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b176:	f7f5 f83d 	bl	80001f4 <__adddf3>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	4640      	mov	r0, r8
 800b184:	4649      	mov	r1, r9
 800b186:	f7f5 f833 	bl	80001f0 <__aeabi_dsub>
 800b18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18e:	f7f5 f831 	bl	80001f4 <__adddf3>
 800b192:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b196:	e9ca 0100 	strd	r0, r1, [sl]
 800b19a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b19e:	e770      	b.n	800b082 <__kernel_rem_pio2+0x4f2>
 800b1a0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b1a4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	ec53 2b17 	vmov	r2, r3, d7
 800b1ae:	4639      	mov	r1, r7
 800b1b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b1b4:	f7f5 f81e 	bl	80001f4 <__adddf3>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4680      	mov	r8, r0
 800b1be:	4689      	mov	r9, r1
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	f7f5 f814 	bl	80001f0 <__aeabi_dsub>
 800b1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1cc:	f7f5 f812 	bl	80001f4 <__adddf3>
 800b1d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b1d4:	e9ca 0100 	strd	r0, r1, [sl]
 800b1d8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b1dc:	e756      	b.n	800b08c <__kernel_rem_pio2+0x4fc>
 800b1de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1e2:	f7f5 f807 	bl	80001f4 <__adddf3>
 800b1e6:	3d01      	subs	r5, #1
 800b1e8:	e756      	b.n	800b098 <__kernel_rem_pio2+0x508>
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	9a01      	ldr	r2, [sp, #4]
 800b1ee:	601f      	str	r7, [r3, #0]
 800b1f0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b1f4:	605c      	str	r4, [r3, #4]
 800b1f6:	609d      	str	r5, [r3, #8]
 800b1f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b1fc:	60d3      	str	r3, [r2, #12]
 800b1fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b202:	6110      	str	r0, [r2, #16]
 800b204:	6153      	str	r3, [r2, #20]
 800b206:	e78e      	b.n	800b126 <__kernel_rem_pio2+0x596>
 800b208:	41700000 	.word	0x41700000
 800b20c:	3e700000 	.word	0x3e700000

0800b210 <__kernel_sin>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ec55 4b10 	vmov	r4, r5, d0
 800b218:	b085      	sub	sp, #20
 800b21a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b21e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b222:	ed8d 1b00 	vstr	d1, [sp]
 800b226:	9002      	str	r0, [sp, #8]
 800b228:	da06      	bge.n	800b238 <__kernel_sin+0x28>
 800b22a:	ee10 0a10 	vmov	r0, s0
 800b22e:	4629      	mov	r1, r5
 800b230:	f7f5 fc46 	bl	8000ac0 <__aeabi_d2iz>
 800b234:	2800      	cmp	r0, #0
 800b236:	d051      	beq.n	800b2dc <__kernel_sin+0xcc>
 800b238:	4622      	mov	r2, r4
 800b23a:	462b      	mov	r3, r5
 800b23c:	4620      	mov	r0, r4
 800b23e:	4629      	mov	r1, r5
 800b240:	f7f5 f98e 	bl	8000560 <__aeabi_dmul>
 800b244:	4682      	mov	sl, r0
 800b246:	468b      	mov	fp, r1
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f986 	bl	8000560 <__aeabi_dmul>
 800b254:	a341      	add	r3, pc, #260	; (adr r3, 800b35c <__kernel_sin+0x14c>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	4680      	mov	r8, r0
 800b25c:	4689      	mov	r9, r1
 800b25e:	4650      	mov	r0, sl
 800b260:	4659      	mov	r1, fp
 800b262:	f7f5 f97d 	bl	8000560 <__aeabi_dmul>
 800b266:	a33f      	add	r3, pc, #252	; (adr r3, 800b364 <__kernel_sin+0x154>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f4 ffc0 	bl	80001f0 <__aeabi_dsub>
 800b270:	4652      	mov	r2, sl
 800b272:	465b      	mov	r3, fp
 800b274:	f7f5 f974 	bl	8000560 <__aeabi_dmul>
 800b278:	a33c      	add	r3, pc, #240	; (adr r3, 800b36c <__kernel_sin+0x15c>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f4 ffb9 	bl	80001f4 <__adddf3>
 800b282:	4652      	mov	r2, sl
 800b284:	465b      	mov	r3, fp
 800b286:	f7f5 f96b 	bl	8000560 <__aeabi_dmul>
 800b28a:	a33a      	add	r3, pc, #232	; (adr r3, 800b374 <__kernel_sin+0x164>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f4 ffae 	bl	80001f0 <__aeabi_dsub>
 800b294:	4652      	mov	r2, sl
 800b296:	465b      	mov	r3, fp
 800b298:	f7f5 f962 	bl	8000560 <__aeabi_dmul>
 800b29c:	a337      	add	r3, pc, #220	; (adr r3, 800b37c <__kernel_sin+0x16c>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f4 ffa7 	bl	80001f4 <__adddf3>
 800b2a6:	9b02      	ldr	r3, [sp, #8]
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	b9db      	cbnz	r3, 800b2e6 <__kernel_sin+0xd6>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	4659      	mov	r1, fp
 800b2b6:	f7f5 f953 	bl	8000560 <__aeabi_dmul>
 800b2ba:	a325      	add	r3, pc, #148	; (adr r3, 800b350 <__kernel_sin+0x140>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f7f4 ff96 	bl	80001f0 <__aeabi_dsub>
 800b2c4:	4642      	mov	r2, r8
 800b2c6:	464b      	mov	r3, r9
 800b2c8:	f7f5 f94a 	bl	8000560 <__aeabi_dmul>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	f7f4 ff8e 	bl	80001f4 <__adddf3>
 800b2d8:	4604      	mov	r4, r0
 800b2da:	460d      	mov	r5, r1
 800b2dc:	ec45 4b10 	vmov	d0, r4, r5
 800b2e0:	b005      	add	sp, #20
 800b2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <__kernel_sin+0x148>)
 800b2ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2ee:	f7f5 f937 	bl	8000560 <__aeabi_dmul>
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f8:	463b      	mov	r3, r7
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f5 f92f 	bl	8000560 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b30a:	f7f4 ff71 	bl	80001f0 <__aeabi_dsub>
 800b30e:	4652      	mov	r2, sl
 800b310:	465b      	mov	r3, fp
 800b312:	f7f5 f925 	bl	8000560 <__aeabi_dmul>
 800b316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b31a:	f7f4 ff69 	bl	80001f0 <__aeabi_dsub>
 800b31e:	a30c      	add	r3, pc, #48	; (adr r3, 800b350 <__kernel_sin+0x140>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	4606      	mov	r6, r0
 800b326:	460f      	mov	r7, r1
 800b328:	4640      	mov	r0, r8
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f5 f918 	bl	8000560 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4630      	mov	r0, r6
 800b336:	4639      	mov	r1, r7
 800b338:	f7f4 ff5c 	bl	80001f4 <__adddf3>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4620      	mov	r0, r4
 800b342:	4629      	mov	r1, r5
 800b344:	f7f4 ff54 	bl	80001f0 <__aeabi_dsub>
 800b348:	e7c6      	b.n	800b2d8 <__kernel_sin+0xc8>
 800b34a:	bf00      	nop
 800b34c:	f3af 8000 	nop.w
 800b350:	55555549 	.word	0x55555549
 800b354:	3fc55555 	.word	0x3fc55555
 800b358:	3fe00000 	.word	0x3fe00000
 800b35c:	5acfd57c 	.word	0x5acfd57c
 800b360:	3de5d93a 	.word	0x3de5d93a
 800b364:	8a2b9ceb 	.word	0x8a2b9ceb
 800b368:	3e5ae5e6 	.word	0x3e5ae5e6
 800b36c:	57b1fe7d 	.word	0x57b1fe7d
 800b370:	3ec71de3 	.word	0x3ec71de3
 800b374:	19c161d5 	.word	0x19c161d5
 800b378:	3f2a01a0 	.word	0x3f2a01a0
 800b37c:	1110f8a6 	.word	0x1110f8a6
 800b380:	3f811111 	.word	0x3f811111
 800b384:	00000000 	.word	0x00000000

0800b388 <atan>:
 800b388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	ec55 4b10 	vmov	r4, r5, d0
 800b390:	4bc3      	ldr	r3, [pc, #780]	; (800b6a0 <atan+0x318>)
 800b392:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b396:	429e      	cmp	r6, r3
 800b398:	46ab      	mov	fp, r5
 800b39a:	dd18      	ble.n	800b3ce <atan+0x46>
 800b39c:	4bc1      	ldr	r3, [pc, #772]	; (800b6a4 <atan+0x31c>)
 800b39e:	429e      	cmp	r6, r3
 800b3a0:	dc01      	bgt.n	800b3a6 <atan+0x1e>
 800b3a2:	d109      	bne.n	800b3b8 <atan+0x30>
 800b3a4:	b144      	cbz	r4, 800b3b8 <atan+0x30>
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f7f4 ff21 	bl	80001f4 <__adddf3>
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	460d      	mov	r5, r1
 800b3b6:	e006      	b.n	800b3c6 <atan+0x3e>
 800b3b8:	f1bb 0f00 	cmp.w	fp, #0
 800b3bc:	f340 8131 	ble.w	800b622 <atan+0x29a>
 800b3c0:	a59b      	add	r5, pc, #620	; (adr r5, 800b630 <atan+0x2a8>)
 800b3c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3c6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ce:	4bb6      	ldr	r3, [pc, #728]	; (800b6a8 <atan+0x320>)
 800b3d0:	429e      	cmp	r6, r3
 800b3d2:	dc14      	bgt.n	800b3fe <atan+0x76>
 800b3d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b3d8:	429e      	cmp	r6, r3
 800b3da:	dc0d      	bgt.n	800b3f8 <atan+0x70>
 800b3dc:	a396      	add	r3, pc, #600	; (adr r3, 800b638 <atan+0x2b0>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	ee10 0a10 	vmov	r0, s0
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f4 ff04 	bl	80001f4 <__adddf3>
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4baf      	ldr	r3, [pc, #700]	; (800b6ac <atan+0x324>)
 800b3f0:	f7f5 fb46 	bl	8000a80 <__aeabi_dcmpgt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d1e6      	bne.n	800b3c6 <atan+0x3e>
 800b3f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b3fc:	e02b      	b.n	800b456 <atan+0xce>
 800b3fe:	f000 f963 	bl	800b6c8 <fabs>
 800b402:	4bab      	ldr	r3, [pc, #684]	; (800b6b0 <atan+0x328>)
 800b404:	429e      	cmp	r6, r3
 800b406:	ec55 4b10 	vmov	r4, r5, d0
 800b40a:	f300 80bf 	bgt.w	800b58c <atan+0x204>
 800b40e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b412:	429e      	cmp	r6, r3
 800b414:	f300 80a0 	bgt.w	800b558 <atan+0x1d0>
 800b418:	ee10 2a10 	vmov	r2, s0
 800b41c:	ee10 0a10 	vmov	r0, s0
 800b420:	462b      	mov	r3, r5
 800b422:	4629      	mov	r1, r5
 800b424:	f7f4 fee6 	bl	80001f4 <__adddf3>
 800b428:	2200      	movs	r2, #0
 800b42a:	4ba0      	ldr	r3, [pc, #640]	; (800b6ac <atan+0x324>)
 800b42c:	f7f4 fee0 	bl	80001f0 <__aeabi_dsub>
 800b430:	2200      	movs	r2, #0
 800b432:	4606      	mov	r6, r0
 800b434:	460f      	mov	r7, r1
 800b436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b43a:	4620      	mov	r0, r4
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7f4 fed9 	bl	80001f4 <__adddf3>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f5 f9b3 	bl	80007b4 <__aeabi_ddiv>
 800b44e:	f04f 0a00 	mov.w	sl, #0
 800b452:	4604      	mov	r4, r0
 800b454:	460d      	mov	r5, r1
 800b456:	4622      	mov	r2, r4
 800b458:	462b      	mov	r3, r5
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	f7f5 f87f 	bl	8000560 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4680      	mov	r8, r0
 800b468:	4689      	mov	r9, r1
 800b46a:	f7f5 f879 	bl	8000560 <__aeabi_dmul>
 800b46e:	a374      	add	r3, pc, #464	; (adr r3, 800b640 <atan+0x2b8>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	f7f5 f872 	bl	8000560 <__aeabi_dmul>
 800b47c:	a372      	add	r3, pc, #456	; (adr r3, 800b648 <atan+0x2c0>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	f7f4 feb7 	bl	80001f4 <__adddf3>
 800b486:	4632      	mov	r2, r6
 800b488:	463b      	mov	r3, r7
 800b48a:	f7f5 f869 	bl	8000560 <__aeabi_dmul>
 800b48e:	a370      	add	r3, pc, #448	; (adr r3, 800b650 <atan+0x2c8>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	f7f4 feae 	bl	80001f4 <__adddf3>
 800b498:	4632      	mov	r2, r6
 800b49a:	463b      	mov	r3, r7
 800b49c:	f7f5 f860 	bl	8000560 <__aeabi_dmul>
 800b4a0:	a36d      	add	r3, pc, #436	; (adr r3, 800b658 <atan+0x2d0>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f7f4 fea5 	bl	80001f4 <__adddf3>
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	f7f5 f857 	bl	8000560 <__aeabi_dmul>
 800b4b2:	a36b      	add	r3, pc, #428	; (adr r3, 800b660 <atan+0x2d8>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f7f4 fe9c 	bl	80001f4 <__adddf3>
 800b4bc:	4632      	mov	r2, r6
 800b4be:	463b      	mov	r3, r7
 800b4c0:	f7f5 f84e 	bl	8000560 <__aeabi_dmul>
 800b4c4:	a368      	add	r3, pc, #416	; (adr r3, 800b668 <atan+0x2e0>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	f7f4 fe93 	bl	80001f4 <__adddf3>
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	f7f5 f845 	bl	8000560 <__aeabi_dmul>
 800b4d6:	a366      	add	r3, pc, #408	; (adr r3, 800b670 <atan+0x2e8>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	4680      	mov	r8, r0
 800b4de:	4689      	mov	r9, r1
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f5 f83c 	bl	8000560 <__aeabi_dmul>
 800b4e8:	a363      	add	r3, pc, #396	; (adr r3, 800b678 <atan+0x2f0>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f4 fe7f 	bl	80001f0 <__aeabi_dsub>
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	463b      	mov	r3, r7
 800b4f6:	f7f5 f833 	bl	8000560 <__aeabi_dmul>
 800b4fa:	a361      	add	r3, pc, #388	; (adr r3, 800b680 <atan+0x2f8>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f4 fe76 	bl	80001f0 <__aeabi_dsub>
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	f7f5 f82a 	bl	8000560 <__aeabi_dmul>
 800b50c:	a35e      	add	r3, pc, #376	; (adr r3, 800b688 <atan+0x300>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	f7f4 fe6d 	bl	80001f0 <__aeabi_dsub>
 800b516:	4632      	mov	r2, r6
 800b518:	463b      	mov	r3, r7
 800b51a:	f7f5 f821 	bl	8000560 <__aeabi_dmul>
 800b51e:	a35c      	add	r3, pc, #368	; (adr r3, 800b690 <atan+0x308>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 fe64 	bl	80001f0 <__aeabi_dsub>
 800b528:	4632      	mov	r2, r6
 800b52a:	463b      	mov	r3, r7
 800b52c:	f7f5 f818 	bl	8000560 <__aeabi_dmul>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4640      	mov	r0, r8
 800b536:	4649      	mov	r1, r9
 800b538:	f7f4 fe5c 	bl	80001f4 <__adddf3>
 800b53c:	4622      	mov	r2, r4
 800b53e:	462b      	mov	r3, r5
 800b540:	f7f5 f80e 	bl	8000560 <__aeabi_dmul>
 800b544:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	d14b      	bne.n	800b5e6 <atan+0x25e>
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 fe4d 	bl	80001f0 <__aeabi_dsub>
 800b556:	e72c      	b.n	800b3b2 <atan+0x2a>
 800b558:	ee10 0a10 	vmov	r0, s0
 800b55c:	2200      	movs	r2, #0
 800b55e:	4b53      	ldr	r3, [pc, #332]	; (800b6ac <atan+0x324>)
 800b560:	4629      	mov	r1, r5
 800b562:	f7f4 fe45 	bl	80001f0 <__aeabi_dsub>
 800b566:	2200      	movs	r2, #0
 800b568:	4606      	mov	r6, r0
 800b56a:	460f      	mov	r7, r1
 800b56c:	4b4f      	ldr	r3, [pc, #316]	; (800b6ac <atan+0x324>)
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 fe3f 	bl	80001f4 <__adddf3>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4630      	mov	r0, r6
 800b57c:	4639      	mov	r1, r7
 800b57e:	f7f5 f919 	bl	80007b4 <__aeabi_ddiv>
 800b582:	f04f 0a01 	mov.w	sl, #1
 800b586:	4604      	mov	r4, r0
 800b588:	460d      	mov	r5, r1
 800b58a:	e764      	b.n	800b456 <atan+0xce>
 800b58c:	4b49      	ldr	r3, [pc, #292]	; (800b6b4 <atan+0x32c>)
 800b58e:	429e      	cmp	r6, r3
 800b590:	dc1d      	bgt.n	800b5ce <atan+0x246>
 800b592:	ee10 0a10 	vmov	r0, s0
 800b596:	2200      	movs	r2, #0
 800b598:	4b47      	ldr	r3, [pc, #284]	; (800b6b8 <atan+0x330>)
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f4 fe28 	bl	80001f0 <__aeabi_dsub>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	4b44      	ldr	r3, [pc, #272]	; (800b6b8 <atan+0x330>)
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7f4 ffd8 	bl	8000560 <__aeabi_dmul>
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4b3e      	ldr	r3, [pc, #248]	; (800b6ac <atan+0x324>)
 800b5b4:	f7f4 fe1e 	bl	80001f4 <__adddf3>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4630      	mov	r0, r6
 800b5be:	4639      	mov	r1, r7
 800b5c0:	f7f5 f8f8 	bl	80007b4 <__aeabi_ddiv>
 800b5c4:	f04f 0a02 	mov.w	sl, #2
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	e743      	b.n	800b456 <atan+0xce>
 800b5ce:	462b      	mov	r3, r5
 800b5d0:	ee10 2a10 	vmov	r2, s0
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	4939      	ldr	r1, [pc, #228]	; (800b6bc <atan+0x334>)
 800b5d8:	f7f5 f8ec 	bl	80007b4 <__aeabi_ddiv>
 800b5dc:	f04f 0a03 	mov.w	sl, #3
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	460d      	mov	r5, r1
 800b5e4:	e737      	b.n	800b456 <atan+0xce>
 800b5e6:	4b36      	ldr	r3, [pc, #216]	; (800b6c0 <atan+0x338>)
 800b5e8:	4e36      	ldr	r6, [pc, #216]	; (800b6c4 <atan+0x33c>)
 800b5ea:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b5ee:	4456      	add	r6, sl
 800b5f0:	449a      	add	sl, r3
 800b5f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800b5f6:	f7f4 fdfb 	bl	80001f0 <__aeabi_dsub>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	f7f4 fdf7 	bl	80001f0 <__aeabi_dsub>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b60a:	f7f4 fdf1 	bl	80001f0 <__aeabi_dsub>
 800b60e:	f1bb 0f00 	cmp.w	fp, #0
 800b612:	4604      	mov	r4, r0
 800b614:	460d      	mov	r5, r1
 800b616:	f6bf aed6 	bge.w	800b3c6 <atan+0x3e>
 800b61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b61e:	461d      	mov	r5, r3
 800b620:	e6d1      	b.n	800b3c6 <atan+0x3e>
 800b622:	a51d      	add	r5, pc, #116	; (adr r5, 800b698 <atan+0x310>)
 800b624:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b628:	e6cd      	b.n	800b3c6 <atan+0x3e>
 800b62a:	bf00      	nop
 800b62c:	f3af 8000 	nop.w
 800b630:	54442d18 	.word	0x54442d18
 800b634:	3ff921fb 	.word	0x3ff921fb
 800b638:	8800759c 	.word	0x8800759c
 800b63c:	7e37e43c 	.word	0x7e37e43c
 800b640:	e322da11 	.word	0xe322da11
 800b644:	3f90ad3a 	.word	0x3f90ad3a
 800b648:	24760deb 	.word	0x24760deb
 800b64c:	3fa97b4b 	.word	0x3fa97b4b
 800b650:	a0d03d51 	.word	0xa0d03d51
 800b654:	3fb10d66 	.word	0x3fb10d66
 800b658:	c54c206e 	.word	0xc54c206e
 800b65c:	3fb745cd 	.word	0x3fb745cd
 800b660:	920083ff 	.word	0x920083ff
 800b664:	3fc24924 	.word	0x3fc24924
 800b668:	5555550d 	.word	0x5555550d
 800b66c:	3fd55555 	.word	0x3fd55555
 800b670:	2c6a6c2f 	.word	0x2c6a6c2f
 800b674:	bfa2b444 	.word	0xbfa2b444
 800b678:	52defd9a 	.word	0x52defd9a
 800b67c:	3fadde2d 	.word	0x3fadde2d
 800b680:	af749a6d 	.word	0xaf749a6d
 800b684:	3fb3b0f2 	.word	0x3fb3b0f2
 800b688:	fe231671 	.word	0xfe231671
 800b68c:	3fbc71c6 	.word	0x3fbc71c6
 800b690:	9998ebc4 	.word	0x9998ebc4
 800b694:	3fc99999 	.word	0x3fc99999
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	bff921fb 	.word	0xbff921fb
 800b6a0:	440fffff 	.word	0x440fffff
 800b6a4:	7ff00000 	.word	0x7ff00000
 800b6a8:	3fdbffff 	.word	0x3fdbffff
 800b6ac:	3ff00000 	.word	0x3ff00000
 800b6b0:	3ff2ffff 	.word	0x3ff2ffff
 800b6b4:	40037fff 	.word	0x40037fff
 800b6b8:	3ff80000 	.word	0x3ff80000
 800b6bc:	bff00000 	.word	0xbff00000
 800b6c0:	0800beb8 	.word	0x0800beb8
 800b6c4:	0800be98 	.word	0x0800be98

0800b6c8 <fabs>:
 800b6c8:	ec51 0b10 	vmov	r0, r1, d0
 800b6cc:	ee10 2a10 	vmov	r2, s0
 800b6d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6d4:	ec43 2b10 	vmov	d0, r2, r3
 800b6d8:	4770      	bx	lr

0800b6da <finite>:
 800b6da:	ee10 3a90 	vmov	r3, s1
 800b6de:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b6e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b6e6:	0fc0      	lsrs	r0, r0, #31
 800b6e8:	4770      	bx	lr
 800b6ea:	0000      	movs	r0, r0
 800b6ec:	0000      	movs	r0, r0
	...

0800b6f0 <floor>:
 800b6f0:	ec51 0b10 	vmov	r0, r1, d0
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b6fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b700:	2e13      	cmp	r6, #19
 800b702:	460c      	mov	r4, r1
 800b704:	ee10 5a10 	vmov	r5, s0
 800b708:	4680      	mov	r8, r0
 800b70a:	dc34      	bgt.n	800b776 <floor+0x86>
 800b70c:	2e00      	cmp	r6, #0
 800b70e:	da16      	bge.n	800b73e <floor+0x4e>
 800b710:	a335      	add	r3, pc, #212	; (adr r3, 800b7e8 <floor+0xf8>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f4 fd6d 	bl	80001f4 <__adddf3>
 800b71a:	2200      	movs	r2, #0
 800b71c:	2300      	movs	r3, #0
 800b71e:	f7f5 f9af 	bl	8000a80 <__aeabi_dcmpgt>
 800b722:	b148      	cbz	r0, 800b738 <floor+0x48>
 800b724:	2c00      	cmp	r4, #0
 800b726:	da59      	bge.n	800b7dc <floor+0xec>
 800b728:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b72c:	4a30      	ldr	r2, [pc, #192]	; (800b7f0 <floor+0x100>)
 800b72e:	432b      	orrs	r3, r5
 800b730:	2500      	movs	r5, #0
 800b732:	42ab      	cmp	r3, r5
 800b734:	bf18      	it	ne
 800b736:	4614      	movne	r4, r2
 800b738:	4621      	mov	r1, r4
 800b73a:	4628      	mov	r0, r5
 800b73c:	e025      	b.n	800b78a <floor+0x9a>
 800b73e:	4f2d      	ldr	r7, [pc, #180]	; (800b7f4 <floor+0x104>)
 800b740:	4137      	asrs	r7, r6
 800b742:	ea01 0307 	and.w	r3, r1, r7
 800b746:	4303      	orrs	r3, r0
 800b748:	d01f      	beq.n	800b78a <floor+0x9a>
 800b74a:	a327      	add	r3, pc, #156	; (adr r3, 800b7e8 <floor+0xf8>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fd50 	bl	80001f4 <__adddf3>
 800b754:	2200      	movs	r2, #0
 800b756:	2300      	movs	r3, #0
 800b758:	f7f5 f992 	bl	8000a80 <__aeabi_dcmpgt>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d0eb      	beq.n	800b738 <floor+0x48>
 800b760:	2c00      	cmp	r4, #0
 800b762:	bfbe      	ittt	lt
 800b764:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b768:	fa43 f606 	asrlt.w	r6, r3, r6
 800b76c:	19a4      	addlt	r4, r4, r6
 800b76e:	ea24 0407 	bic.w	r4, r4, r7
 800b772:	2500      	movs	r5, #0
 800b774:	e7e0      	b.n	800b738 <floor+0x48>
 800b776:	2e33      	cmp	r6, #51	; 0x33
 800b778:	dd0b      	ble.n	800b792 <floor+0xa2>
 800b77a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b77e:	d104      	bne.n	800b78a <floor+0x9a>
 800b780:	ee10 2a10 	vmov	r2, s0
 800b784:	460b      	mov	r3, r1
 800b786:	f7f4 fd35 	bl	80001f4 <__adddf3>
 800b78a:	ec41 0b10 	vmov	d0, r0, r1
 800b78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b792:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b79a:	fa23 f707 	lsr.w	r7, r3, r7
 800b79e:	4207      	tst	r7, r0
 800b7a0:	d0f3      	beq.n	800b78a <floor+0x9a>
 800b7a2:	a311      	add	r3, pc, #68	; (adr r3, 800b7e8 <floor+0xf8>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 fd24 	bl	80001f4 <__adddf3>
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f7f5 f966 	bl	8000a80 <__aeabi_dcmpgt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d0bf      	beq.n	800b738 <floor+0x48>
 800b7b8:	2c00      	cmp	r4, #0
 800b7ba:	da02      	bge.n	800b7c2 <floor+0xd2>
 800b7bc:	2e14      	cmp	r6, #20
 800b7be:	d103      	bne.n	800b7c8 <floor+0xd8>
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	ea25 0507 	bic.w	r5, r5, r7
 800b7c6:	e7b7      	b.n	800b738 <floor+0x48>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b7ce:	fa03 f606 	lsl.w	r6, r3, r6
 800b7d2:	4435      	add	r5, r6
 800b7d4:	4545      	cmp	r5, r8
 800b7d6:	bf38      	it	cc
 800b7d8:	18e4      	addcc	r4, r4, r3
 800b7da:	e7f2      	b.n	800b7c2 <floor+0xd2>
 800b7dc:	2500      	movs	r5, #0
 800b7de:	462c      	mov	r4, r5
 800b7e0:	e7aa      	b.n	800b738 <floor+0x48>
 800b7e2:	bf00      	nop
 800b7e4:	f3af 8000 	nop.w
 800b7e8:	8800759c 	.word	0x8800759c
 800b7ec:	7e37e43c 	.word	0x7e37e43c
 800b7f0:	bff00000 	.word	0xbff00000
 800b7f4:	000fffff 	.word	0x000fffff

0800b7f8 <matherr>:
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	4770      	bx	lr
 800b7fc:	0000      	movs	r0, r0
	...

0800b800 <nan>:
 800b800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b808 <nan+0x8>
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	00000000 	.word	0x00000000
 800b80c:	7ff80000 	.word	0x7ff80000

0800b810 <rint>:
 800b810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b812:	ec51 0b10 	vmov	r0, r1, d0
 800b816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b81a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b81e:	2e13      	cmp	r6, #19
 800b820:	460b      	mov	r3, r1
 800b822:	ee10 4a10 	vmov	r4, s0
 800b826:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b82a:	dc56      	bgt.n	800b8da <rint+0xca>
 800b82c:	2e00      	cmp	r6, #0
 800b82e:	da2b      	bge.n	800b888 <rint+0x78>
 800b830:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b834:	4302      	orrs	r2, r0
 800b836:	d023      	beq.n	800b880 <rint+0x70>
 800b838:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b83c:	4302      	orrs	r2, r0
 800b83e:	4254      	negs	r4, r2
 800b840:	4314      	orrs	r4, r2
 800b842:	0c4b      	lsrs	r3, r1, #17
 800b844:	0b24      	lsrs	r4, r4, #12
 800b846:	045b      	lsls	r3, r3, #17
 800b848:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b84c:	ea44 0103 	orr.w	r1, r4, r3
 800b850:	460b      	mov	r3, r1
 800b852:	492f      	ldr	r1, [pc, #188]	; (800b910 <rint+0x100>)
 800b854:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b858:	e9d1 6700 	ldrd	r6, r7, [r1]
 800b85c:	4602      	mov	r2, r0
 800b85e:	4639      	mov	r1, r7
 800b860:	4630      	mov	r0, r6
 800b862:	f7f4 fcc7 	bl	80001f4 <__adddf3>
 800b866:	e9cd 0100 	strd	r0, r1, [sp]
 800b86a:	463b      	mov	r3, r7
 800b86c:	4632      	mov	r2, r6
 800b86e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b872:	f7f4 fcbd 	bl	80001f0 <__aeabi_dsub>
 800b876:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b87a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b87e:	4639      	mov	r1, r7
 800b880:	ec41 0b10 	vmov	d0, r0, r1
 800b884:	b003      	add	sp, #12
 800b886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b888:	4a22      	ldr	r2, [pc, #136]	; (800b914 <rint+0x104>)
 800b88a:	4132      	asrs	r2, r6
 800b88c:	ea01 0702 	and.w	r7, r1, r2
 800b890:	4307      	orrs	r7, r0
 800b892:	d0f5      	beq.n	800b880 <rint+0x70>
 800b894:	0852      	lsrs	r2, r2, #1
 800b896:	4011      	ands	r1, r2
 800b898:	430c      	orrs	r4, r1
 800b89a:	d00b      	beq.n	800b8b4 <rint+0xa4>
 800b89c:	ea23 0202 	bic.w	r2, r3, r2
 800b8a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b8a4:	2e13      	cmp	r6, #19
 800b8a6:	fa43 f306 	asr.w	r3, r3, r6
 800b8aa:	bf0c      	ite	eq
 800b8ac:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b8b0:	2400      	movne	r4, #0
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	4916      	ldr	r1, [pc, #88]	; (800b910 <rint+0x100>)
 800b8b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7f4 fc96 	bl	80001f4 <__adddf3>
 800b8c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8d4:	f7f4 fc8c 	bl	80001f0 <__aeabi_dsub>
 800b8d8:	e7d2      	b.n	800b880 <rint+0x70>
 800b8da:	2e33      	cmp	r6, #51	; 0x33
 800b8dc:	dd07      	ble.n	800b8ee <rint+0xde>
 800b8de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b8e2:	d1cd      	bne.n	800b880 <rint+0x70>
 800b8e4:	ee10 2a10 	vmov	r2, s0
 800b8e8:	f7f4 fc84 	bl	80001f4 <__adddf3>
 800b8ec:	e7c8      	b.n	800b880 <rint+0x70>
 800b8ee:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800b8f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8f6:	40f2      	lsrs	r2, r6
 800b8f8:	4210      	tst	r0, r2
 800b8fa:	d0c1      	beq.n	800b880 <rint+0x70>
 800b8fc:	0852      	lsrs	r2, r2, #1
 800b8fe:	4210      	tst	r0, r2
 800b900:	bf1f      	itttt	ne
 800b902:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b906:	ea20 0202 	bicne.w	r2, r0, r2
 800b90a:	4134      	asrne	r4, r6
 800b90c:	4314      	orrne	r4, r2
 800b90e:	e7d1      	b.n	800b8b4 <rint+0xa4>
 800b910:	0800bed8 	.word	0x0800bed8
 800b914:	000fffff 	.word	0x000fffff

0800b918 <scalbn>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	ec55 4b10 	vmov	r4, r5, d0
 800b91e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b922:	4606      	mov	r6, r0
 800b924:	462b      	mov	r3, r5
 800b926:	b9aa      	cbnz	r2, 800b954 <scalbn+0x3c>
 800b928:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b92c:	4323      	orrs	r3, r4
 800b92e:	d03b      	beq.n	800b9a8 <scalbn+0x90>
 800b930:	4b31      	ldr	r3, [pc, #196]	; (800b9f8 <scalbn+0xe0>)
 800b932:	4629      	mov	r1, r5
 800b934:	2200      	movs	r2, #0
 800b936:	ee10 0a10 	vmov	r0, s0
 800b93a:	f7f4 fe11 	bl	8000560 <__aeabi_dmul>
 800b93e:	4b2f      	ldr	r3, [pc, #188]	; (800b9fc <scalbn+0xe4>)
 800b940:	429e      	cmp	r6, r3
 800b942:	4604      	mov	r4, r0
 800b944:	460d      	mov	r5, r1
 800b946:	da12      	bge.n	800b96e <scalbn+0x56>
 800b948:	a327      	add	r3, pc, #156	; (adr r3, 800b9e8 <scalbn+0xd0>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fe07 	bl	8000560 <__aeabi_dmul>
 800b952:	e009      	b.n	800b968 <scalbn+0x50>
 800b954:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b958:	428a      	cmp	r2, r1
 800b95a:	d10c      	bne.n	800b976 <scalbn+0x5e>
 800b95c:	ee10 2a10 	vmov	r2, s0
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f4 fc46 	bl	80001f4 <__adddf3>
 800b968:	4604      	mov	r4, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	e01c      	b.n	800b9a8 <scalbn+0x90>
 800b96e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b972:	460b      	mov	r3, r1
 800b974:	3a36      	subs	r2, #54	; 0x36
 800b976:	4432      	add	r2, r6
 800b978:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b97c:	428a      	cmp	r2, r1
 800b97e:	dd0b      	ble.n	800b998 <scalbn+0x80>
 800b980:	ec45 4b11 	vmov	d1, r4, r5
 800b984:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b9f0 <scalbn+0xd8>
 800b988:	f000 f83c 	bl	800ba04 <copysign>
 800b98c:	a318      	add	r3, pc, #96	; (adr r3, 800b9f0 <scalbn+0xd8>)
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	ec51 0b10 	vmov	r0, r1, d0
 800b996:	e7da      	b.n	800b94e <scalbn+0x36>
 800b998:	2a00      	cmp	r2, #0
 800b99a:	dd08      	ble.n	800b9ae <scalbn+0x96>
 800b99c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9a8:	ec45 4b10 	vmov	d0, r4, r5
 800b9ac:	bd70      	pop	{r4, r5, r6, pc}
 800b9ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b9b2:	da0d      	bge.n	800b9d0 <scalbn+0xb8>
 800b9b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b9b8:	429e      	cmp	r6, r3
 800b9ba:	ec45 4b11 	vmov	d1, r4, r5
 800b9be:	dce1      	bgt.n	800b984 <scalbn+0x6c>
 800b9c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b9e8 <scalbn+0xd0>
 800b9c4:	f000 f81e 	bl	800ba04 <copysign>
 800b9c8:	a307      	add	r3, pc, #28	; (adr r3, 800b9e8 <scalbn+0xd0>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	e7e0      	b.n	800b992 <scalbn+0x7a>
 800b9d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9d4:	3236      	adds	r2, #54	; 0x36
 800b9d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <scalbn+0xe8>)
 800b9e6:	e7b2      	b.n	800b94e <scalbn+0x36>
 800b9e8:	c2f8f359 	.word	0xc2f8f359
 800b9ec:	01a56e1f 	.word	0x01a56e1f
 800b9f0:	8800759c 	.word	0x8800759c
 800b9f4:	7e37e43c 	.word	0x7e37e43c
 800b9f8:	43500000 	.word	0x43500000
 800b9fc:	ffff3cb0 	.word	0xffff3cb0
 800ba00:	3c900000 	.word	0x3c900000

0800ba04 <copysign>:
 800ba04:	ec51 0b10 	vmov	r0, r1, d0
 800ba08:	ee11 0a90 	vmov	r0, s3
 800ba0c:	ee10 2a10 	vmov	r2, s0
 800ba10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ba14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ba18:	ea41 0300 	orr.w	r3, r1, r0
 800ba1c:	ec43 2b10 	vmov	d0, r2, r3
 800ba20:	4770      	bx	lr
	...

0800ba24 <_init>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	bf00      	nop
 800ba28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	469e      	mov	lr, r3
 800ba2e:	4770      	bx	lr

0800ba30 <_fini>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	bf00      	nop
 800ba34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba36:	bc08      	pop	{r3}
 800ba38:	469e      	mov	lr, r3
 800ba3a:	4770      	bx	lr
