
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f6c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08009108  08009108  00019108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009390  08009390  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009398  08009398  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080093a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000200  080095a0  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  080095a0  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014516  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c0c  00000000  00000000  00034746  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00037358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  00038338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b62  00000000  00000000  000391c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5ee  00000000  00000000  00051d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000934a8  00000000  00000000  00060318  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f37c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a58  00000000  00000000  000f383c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000200 	.word	0x20000200
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080090ec 	.word	0x080090ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000204 	.word	0x20000204
 80001d4:	080090ec 	.word	0x080090ec

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b972 	b.w	8000eac <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	4604      	mov	r4, r0
 8000be8:	4688      	mov	r8, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4615      	mov	r5, r2
 8000bf2:	d967      	bls.n	8000cc4 <__udivmoddi4+0xe4>
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	b14a      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfa:	f1c2 0720 	rsb	r7, r2, #32
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	fa20 f707 	lsr.w	r7, r0, r7
 8000c06:	4095      	lsls	r5, r2
 8000c08:	ea47 0803 	orr.w	r8, r7, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c18:	fa1f fc85 	uxth.w	ip, r5
 8000c1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c24:	fb07 f10c 	mul.w	r1, r7, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x60>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c32:	f080 811b 	bcs.w	8000e6c <__udivmoddi4+0x28c>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 8118 	bls.w	8000e6c <__udivmoddi4+0x28c>
 8000c3c:	3f02      	subs	r7, #2
 8000c3e:	442b      	add	r3, r5
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x290>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x290>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	442c      	add	r4, r5
 8000c6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c70:	eba4 040c 	sub.w	r4, r4, ip
 8000c74:	2700      	movs	r7, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa0>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xbe>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80eb 	beq.w	8000e66 <__udivmoddi4+0x286>
 8000c90:	2700      	movs	r7, #0
 8000c92:	e9c6 0100 	strd	r0, r1, [r6]
 8000c96:	4638      	mov	r0, r7
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f783 	clz	r7, r3
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d147      	bne.n	8000d36 <__udivmoddi4+0x156>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd0>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80fa 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa0>
 8000cbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xe8>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 808f 	bne.w	8000df0 <__udivmoddi4+0x210>
 8000cd2:	1b49      	subs	r1, r1, r5
 8000cd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd8:	fa1f f885 	uxth.w	r8, r5
 8000cdc:	2701      	movs	r7, #1
 8000cde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce2:	0c23      	lsrs	r3, r4, #16
 8000ce4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x122>
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000d02:	4684      	mov	ip, r0
 8000d04:	1a59      	subs	r1, r3, r1
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d14:	fb08 f800 	mul.w	r8, r8, r0
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x14c>
 8000d1c:	192c      	adds	r4, r5, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x14a>
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	f200 80b6 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 0408 	sub.w	r4, r4, r8
 8000d30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d34:	e79f      	b.n	8000c76 <__udivmoddi4+0x96>
 8000d36:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3a:	40bb      	lsls	r3, r7
 8000d3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d44:	fa01 f407 	lsl.w	r4, r1, r7
 8000d48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d54:	4325      	orrs	r5, r4
 8000d56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d60:	fa1f fa8e 	uxth.w	sl, lr
 8000d64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d68:	fb09 f40a 	mul.w	r4, r9, sl
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d72:	fa00 f107 	lsl.w	r1, r0, r7
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b0>
 8000d78:	eb1e 0303 	adds.w	r3, lr, r3
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d80:	f080 8087 	bcs.w	8000e92 <__udivmoddi4+0x2b2>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f240 8084 	bls.w	8000e92 <__udivmoddi4+0x2b2>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4473      	add	r3, lr
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	b2ad      	uxth	r5, r5
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3310 	mls	r3, r8, r0, r3
 8000d9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da4:	45a2      	cmp	sl, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1da>
 8000da8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db0:	d26b      	bcs.n	8000e8a <__udivmoddi4+0x2aa>
 8000db2:	45a2      	cmp	sl, r4
 8000db4:	d969      	bls.n	8000e8a <__udivmoddi4+0x2aa>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4474      	add	r4, lr
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	eba4 040a 	sub.w	r4, r4, sl
 8000dc6:	454c      	cmp	r4, r9
 8000dc8:	46c2      	mov	sl, r8
 8000dca:	464b      	mov	r3, r9
 8000dcc:	d354      	bcc.n	8000e78 <__udivmoddi4+0x298>
 8000dce:	d051      	beq.n	8000e74 <__udivmoddi4+0x294>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d069      	beq.n	8000ea8 <__udivmoddi4+0x2c8>
 8000dd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000ddc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de0:	40fd      	lsrs	r5, r7
 8000de2:	40fc      	lsrs	r4, r7
 8000de4:	ea4c 0505 	orr.w	r5, ip, r5
 8000de8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dec:	2700      	movs	r7, #0
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f703 	lsr.w	r7, r0, r3
 8000df8:	4095      	lsls	r5, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000e02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e06:	4338      	orrs	r0, r7
 8000e08:	0c01      	lsrs	r1, r0, #16
 8000e0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0e:	fa1f f885 	uxth.w	r8, r5
 8000e12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1a:	fb07 f308 	mul.w	r3, r7, r8
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x256>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e2c:	d22f      	bcs.n	8000e8e <__udivmoddi4+0x2ae>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d92d      	bls.n	8000e8e <__udivmoddi4+0x2ae>
 8000e32:	3f02      	subs	r7, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	b281      	uxth	r1, r0
 8000e3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb00 f308 	mul.w	r3, r0, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x27e>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e54:	d217      	bcs.n	8000e86 <__udivmoddi4+0x2a6>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d915      	bls.n	8000e86 <__udivmoddi4+0x2a6>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1ac9      	subs	r1, r1, r3
 8000e60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e64:	e73b      	b.n	8000cde <__udivmoddi4+0xfe>
 8000e66:	4637      	mov	r7, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e709      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	e6e7      	b.n	8000c40 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x8c>
 8000e74:	4541      	cmp	r1, r8
 8000e76:	d2ab      	bcs.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e80:	3801      	subs	r0, #1
 8000e82:	4613      	mov	r3, r2
 8000e84:	e7a4      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e86:	4660      	mov	r0, ip
 8000e88:	e7e9      	b.n	8000e5e <__udivmoddi4+0x27e>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	e795      	b.n	8000dba <__udivmoddi4+0x1da>
 8000e8e:	4667      	mov	r7, ip
 8000e90:	e7d1      	b.n	8000e36 <__udivmoddi4+0x256>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e77c      	b.n	8000d90 <__udivmoddi4+0x1b0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	442c      	add	r4, r5
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0x14c>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	442b      	add	r3, r5
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x124>
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xda>
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	e6e9      	b.n	8000c80 <__udivmoddi4+0xa0>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	200b      	movs	r0, #11
 8000ed8:	f001 ff67 	bl	8002daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000edc:	200b      	movs	r0, #11
 8000ede:	f001 ff80 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f001 ff5f 	bl	8002daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f001 ff78 	bl	8002de2 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a48      	ldr	r2, [pc, #288]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b46      	ldr	r3, [pc, #280]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_GPIO_Init+0x144>)
 8000fc4:	f002 fc3a 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fd0:	f002 fc34 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fdc:	f002 fc2e 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0x144>)
 8000ff8:	f002 fa9e 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin;
 8000ffc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_GPIO_Init+0x148>)
 8001016:	f002 fa8f 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 800101a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0x148>)
 8001034:	f002 fa80 	bl	8003538 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40020c00 	.word	0x40020c00

0800104c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x50>)
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <MX_I2C1_Init+0x54>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C1_Init+0x50>)
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x58>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_I2C1_Init+0x50>)
 800106a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2C1_Init+0x50>)
 800108a:	f002 fc0b 	bl	80038a4 <HAL_I2C_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001094:	f000 f9da 	bl	800144c <Error_Handler>
  }

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000022c 	.word	0x2000022c
 80010a0:	40005400 	.word	0x40005400
 80010a4:	00061a80 	.word	0x00061a80

080010a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a31      	ldr	r2, [pc, #196]	; (800118c <HAL_I2C_MspInit+0xe4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d15c      	bne.n	8001184 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IUM_SCL_Pin|IMU_SDA_Pin;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_I2C_MspInit+0xec>)
 8001104:	f002 fa18 	bl	8003538 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_I2C_MspInit+0xf4>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800112c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800115c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001160:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800116a:	f001 fe55 	bl	8002e18 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001174:	f000 f96a 	bl	800144c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	20000280 	.word	0x20000280
 800119c:	40026010 	.word	0x40026010

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f001 fc92 	bl	8002acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 f83e 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f7ff fea8 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b0:	f7ff fe7e 	bl	8000eb0 <MX_DMA_Init>
  MX_TIM1_Init();
 80011b4:	f000 fa2a 	bl	800160c <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b8:	f000 fad4 	bl	8001764 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011bc:	f000 fb26 	bl	800180c <MX_TIM4_Init>
  MX_TIM9_Init();
 80011c0:	f000 fbc6 	bl	8001950 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 fd36 	bl	8001c34 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80011c8:	f000 fb74 	bl	80018b4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff3e 	bl	800104c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	480e      	ldr	r0, [pc, #56]	; (800120c <main+0x6c>)
 80011d4:	f004 f800 	bl	80051d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011d8:	2104      	movs	r1, #4
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <main+0x6c>)
 80011dc:	f003 fffc 	bl	80051d8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <main+0x70>)
 80011e2:	f003 ffa0 	bl	8005126 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <main+0x74>)
 80011e8:	f003 ff9d 	bl	8005126 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011ec:	213c      	movs	r1, #60	; 0x3c
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <main+0x78>)
 80011f0:	f004 f8b6 	bl	8005360 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011f4:	213c      	movs	r1, #60	; 0x3c
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <main+0x7c>)
 80011f8:	f004 f8b2 	bl	8005360 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 7);
 80011fc:	2207      	movs	r2, #7
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <main+0x80>)
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <main+0x84>)
 8001202:	f005 f819 	bl	8006238 <HAL_UART_Receive_DMA>

  MPU6050_INIT();
 8001206:	f000 fdeb 	bl	8001de0 <MPU6050_INIT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800120a:	e7fe      	b.n	800120a <main+0x6a>
 800120c:	20000544 	.word	0x20000544
 8001210:	20000584 	.word	0x20000584
 8001214:	20000504 	.word	0x20000504
 8001218:	200004c4 	.word	0x200004c4
 800121c:	200005c4 	.word	0x200005c4
 8001220:	20000374 	.word	0x20000374
 8001224:	20000664 	.word	0x20000664

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 ff78 	bl	800712c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <SystemClock_Config+0xcc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <SystemClock_Config+0xd0>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001298:	2308      	movs	r3, #8
 800129a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800129c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 faac 	bl	800480c <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ba:	f000 f8c7 	bl	800144c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2102      	movs	r1, #2
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fd05 	bl	8004cec <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012e8:	f000 f8b0 	bl	800144c <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3750      	adds	r7, #80	; 0x50
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	b091      	sub	sp, #68	; 0x44
 8001300:	af06      	add	r7, sp, #24
 8001302:	6078      	str	r0, [r7, #4]
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d144      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x9e>
		testt[7] = HAL_GetTick() - testt[8];
 8001310:	f001 fc42 	bl	8002b98 <HAL_GetTick>
 8001314:	ee07 0a90 	vmov	s15, r0
 8001318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800131e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001328:	edc3 7a07 	vstr	s15, [r3, #28]
		testt[8] = HAL_GetTick();
 800132c:	f001 fc34 	bl	8002b98 <HAL_GetTick>
 8001330:	ee07 0a90 	vmov	s15, r0
 8001334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800133a:	edc3 7a08 	vstr	s15, [r3, #32]

		float *duty_cycles;

		Get_Velocity();
 800133e:	f001 f807 	bl	8002350 <Get_Velocity>

//		enc[0] = 12;
//		enc[1] = 10;

		duty_cycles = PID_Calculate(_velo, _motor_dir, &enc[0]);
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a3b      	ldr	r2, [pc, #236]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001348:	4619      	mov	r1, r3
 800134a:	483b      	ldr	r0, [pc, #236]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800134c:	f001 f870 	bl	8002430 <PID_Calculate>
 8001350:	6278      	str	r0, [r7, #36]	; 0x24
		Control_Motor(*(duty_cycles), *(duty_cycles+1), *(duty_cycles+2));
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	b218      	sxth	r0, r3
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3304      	adds	r3, #4
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	b219      	sxth	r1, r3
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	3308      	adds	r3, #8
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001380:	edc7 7a00 	vstr	s15, [r7]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	f000 ff73 	bl	8002274 <Control_Motor>

//		Control_Motor(*(duty_cycles), *(duty_cycles+1), *(duty_cycles+2));


/*		volatile float *data_Receive;*/
		HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 800138e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001392:	482a      	ldr	r0, [pc, #168]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001394:	f002 fa6b 	bl	800386e <HAL_GPIO_TogglePin>
// 		ss = sensor
		struct data_imu ss = ReadMPU();

		UartTransmit(enc[0], enc[1], ss, enc[3]);
	}
}
 8001398:	e042      	b.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x124>
	else if(htim->Instance==htim9.Instance){
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d13c      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x124>
		testt[5] = HAL_GetTick() - testt[6];
 80013a6:	f001 fbf7 	bl	8002b98 <HAL_GetTick>
 80013aa:	ee07 0a90 	vmov	s15, r0
 80013ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80013b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013be:	edc3 7a05 	vstr	s15, [r3, #20]
		testt[6] = HAL_GetTick();
 80013c2:	f001 fbe9 	bl	8002b98 <HAL_GetTick>
 80013c6:	ee07 0a90 	vmov	s15, r0
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013d0:	edc3 7a06 	vstr	s15, [r3, #24]
		state_uart=HAL_UART_GetState(&huart2);
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013d6:	f005 f8d7 	bl	8006588 <HAL_UART_GetState>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80013e0:	601a      	str	r2, [r3, #0]
		struct data_imu ss = ReadMPU();
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fdaa 	bl	8001f40 <ReadMPU>
		UartTransmit(enc[0], enc[1], ss, enc[3]);
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	b21e      	sxth	r6, r3
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	fa0f fc83 	sxth.w	ip, r3
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013fc:	88db      	ldrh	r3, [r3, #6]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	9305      	str	r3, [sp, #20]
 8001404:	466d      	mov	r5, sp
 8001406:	f107 0410 	add.w	r4, r7, #16
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	602b      	str	r3, [r5, #0]
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	cb0c      	ldmia	r3, {r2, r3}
 8001418:	4661      	mov	r1, ip
 800141a:	4630      	mov	r0, r6
 800141c:	f001 fafc 	bl	8002a18 <UartTransmit>
}
 8001420:	bf00      	nop
 8001422:	372c      	adds	r7, #44	; 0x2c
 8001424:	46bd      	mov	sp, r7
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	20000504 	.word	0x20000504
 800142c:	200002f8 	.word	0x200002f8
 8001430:	20000424 	.word	0x20000424
 8001434:	2000037c 	.word	0x2000037c
 8001438:	20000350 	.word	0x20000350
 800143c:	40020c00 	.word	0x40020c00
 8001440:	20000584 	.word	0x20000584
 8001444:	20000664 	.word	0x20000664
 8001448:	200002e0 	.word	0x200002e0

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f001 fb36 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA1_Stream0_IRQHandler+0x10>)
 800150e:	f001 fdab 	bl	8003068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000280 	.word	0x20000280

0800151c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Stream5_IRQHandler+0x10>)
 8001522:	f001 fda1 	bl	8003068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000604 	.word	0x20000604

08001530 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001536:	f003 ff4a 	bl	80053ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800153a:	4803      	ldr	r0, [pc, #12]	; (8001548 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800153c:	f003 ff47 	bl	80053ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000544 	.word	0x20000544
 8001548:	20000584 	.word	0x20000584

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART2_IRQHandler+0x10>)
 8001552:	f004 fef1 	bl	8006338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000664 	.word	0x20000664

08001560 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <TIM5_IRQHandler+0x10>)
 8001566:	f003 ff32 	bl	80053ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000504 	.word	0x20000504

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f005 fd98 	bl	80070d8 <__errno>
 80015a8:	4602      	mov	r2, r0
 80015aa:	230c      	movs	r3, #12
 80015ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	2000021c 	.word	0x2000021c
 80015dc:	200006b0 	.word	0x200006b0

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SystemInit+0x28>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <SystemInit+0x28>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SystemInit+0x28>)
 80015f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fa:	609a      	str	r2, [r3, #8]
#endif
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b096      	sub	sp, #88	; 0x58
 8001610:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2220      	movs	r2, #32
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fd71 	bl	800712c <memset>

  htim1.Instance = TIM1;
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <MX_TIM1_Init+0x150>)
 800164c:	4a44      	ldr	r2, [pc, #272]	; (8001760 <MX_TIM1_Init+0x154>)
 800164e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001650:	4b42      	ldr	r3, [pc, #264]	; (800175c <MX_TIM1_Init+0x150>)
 8001652:	2207      	movs	r2, #7
 8001654:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <MX_TIM1_Init+0x150>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 599;
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <MX_TIM1_Init+0x150>)
 800165e:	f240 2257 	movw	r2, #599	; 0x257
 8001662:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b3d      	ldr	r3, [pc, #244]	; (800175c <MX_TIM1_Init+0x150>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <MX_TIM1_Init+0x150>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <MX_TIM1_Init+0x150>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001676:	4839      	ldr	r0, [pc, #228]	; (800175c <MX_TIM1_Init+0x150>)
 8001678:	f003 fd2a 	bl	80050d0 <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001682:	f7ff fee3 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001690:	4619      	mov	r1, r3
 8001692:	4832      	ldr	r0, [pc, #200]	; (800175c <MX_TIM1_Init+0x150>)
 8001694:	f004 f86a 	bl	800576c <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800169e:	f7ff fed5 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016a2:	482e      	ldr	r0, [pc, #184]	; (800175c <MX_TIM1_Init+0x150>)
 80016a4:	f003 fd63 	bl	800516e <HAL_TIM_PWM_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016ae:	f7ff fecd 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016be:	4619      	mov	r1, r3
 80016c0:	4826      	ldr	r0, [pc, #152]	; (800175c <MX_TIM1_Init+0x150>)
 80016c2:	f004 fbff 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016cc:	f7ff febe 	bl	800144c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d0:	2360      	movs	r3, #96	; 0x60
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	4819      	ldr	r0, [pc, #100]	; (800175c <MX_TIM1_Init+0x150>)
 80016f6:	f003 ff73 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001700:	f7ff fea4 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	2204      	movs	r2, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_TIM1_Init+0x150>)
 800170e:	f003 ff67 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001718:	f7ff fe98 	bl	800144c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <MX_TIM1_Init+0x150>)
 8001740:	f004 fc2e 	bl	8005fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800174a:	f7ff fe7f 	bl	800144c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <MX_TIM1_Init+0x150>)
 8001750:	f000 fa36 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8001754:	bf00      	nop
 8001756:	3758      	adds	r7, #88	; 0x58
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000544 	.word	0x20000544
 8001760:	40010000 	.word	0x40010000

08001764 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2224      	movs	r2, #36	; 0x24
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f005 fcda 	bl	800712c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_TIM2_Init+0xa4>)
 8001782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_TIM2_Init+0xa4>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_TIM2_Init+0xa4>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_TIM2_Init+0xa4>)
 8001796:	f241 7270 	movw	r2, #6000	; 0x1770
 800179a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_TIM2_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017a8:	2303      	movs	r3, #3
 80017aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b0:	2301      	movs	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4619      	mov	r1, r3
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017d4:	f003 fd32 	bl	800523c <HAL_TIM_Encoder_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017de:	f7ff fe35 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017f0:	f004 fb68 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017fa:	f7ff fe27 	bl	800144c <Error_Handler>
  }

}
 80017fe:	bf00      	nop
 8001800:	3730      	adds	r7, #48	; 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200005c4 	.word	0x200005c4

0800180c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2224      	movs	r2, #36	; 0x24
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f005 fc86 	bl	800712c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_TIM4_Init+0xa0>)
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <MX_TIM4_Init+0xa4>)
 800182c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_TIM4_Init+0xa0>)
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <MX_TIM4_Init+0xa0>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_TIM4_Init+0xa0>)
 800183c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001840:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_TIM4_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_TIM4_Init+0xa0>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800184e:	2303      	movs	r3, #3
 8001850:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001866:	2301      	movs	r3, #1
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <MX_TIM4_Init+0xa0>)
 800187a:	f003 fcdf 	bl	800523c <HAL_TIM_Encoder_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001884:	f7ff fde2 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_TIM4_Init+0xa0>)
 8001896:	f004 fb15 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80018a0:	f7ff fdd4 	bl	800144c <Error_Handler>
  }

}
 80018a4:	bf00      	nop
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200004c4 	.word	0x200004c4
 80018b0:	40000800 	.word	0x40000800

080018b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MX_TIM5_Init+0x94>)
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <MX_TIM5_Init+0x98>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <MX_TIM5_Init+0x94>)
 80018d8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80018dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_TIM5_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_TIM5_Init+0x94>)
 80018e6:	2231      	movs	r2, #49	; 0x31
 80018e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_TIM5_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_TIM5_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <MX_TIM5_Init+0x94>)
 80018f8:	f003 fbea 	bl	80050d0 <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001902:	f7ff fda3 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_TIM5_Init+0x94>)
 8001914:	f003 ff2a 	bl	800576c <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800191e:	f7ff fd95 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	4619      	mov	r1, r3
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <MX_TIM5_Init+0x94>)
 8001930:	f004 fac8 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800193a:	f7ff fd87 	bl	800144c <Error_Handler>
  }

}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000504 	.word	0x20000504
 800194c:	40000c00 	.word	0x40000c00

08001950 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001964:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <MX_TIM9_Init+0x70>)
 8001966:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_TIM9_Init+0x6c>)
 800196a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800196e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <MX_TIM9_Init+0x6c>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_TIM9_Init+0x6c>)
 800198c:	f003 fba0 	bl	80050d0 <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001996:	f7ff fd59 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_TIM9_Init+0x6c>)
 80019a6:	f003 fee1 	bl	800576c <HAL_TIM_ConfigClockSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80019b0:	f7ff fd4c 	bl	800144c <Error_Handler>
  }

}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000584 	.word	0x20000584
 80019c0:	40014000 	.word	0x40014000

080019c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <HAL_TIM_Base_MspInit+0xb8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d116      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2018      	movs	r0, #24
 80019f8:	f001 f9d7 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019fc:	2018      	movs	r0, #24
 80019fe:	f001 f9f0 	bl	8002de2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001a02:	e036      	b.n	8001a72 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_TIM_Base_MspInit+0xc0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d116      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2032      	movs	r0, #50	; 0x32
 8001a30:	f001 f9bb 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a34:	2032      	movs	r0, #50	; 0x32
 8001a36:	f001 f9d4 	bl	8002de2 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e01a      	b.n	8001a72 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_TIM_Base_MspInit+0xc4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d115      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_Base_MspInit+0xbc>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2018      	movs	r0, #24
 8001a68:	f001 f99f 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a6c:	2018      	movs	r0, #24
 8001a6e:	f001 f9b8 	bl	8002de2 <HAL_NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40000c00 	.word	0x40000c00
 8001a88:	40014000 	.word	0x40014000

08001a8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d14a      	bne.n	8001b44 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a3e      	ldr	r2, [pc, #248]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 8001b02:	2320      	movs	r3, #32
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b12:	2301      	movs	r3, #1
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <HAL_TIM_Encoder_MspInit+0x128>)
 8001b1e:	f001 fd0b 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 8001b22:	2308      	movs	r3, #8
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b32:	2301      	movs	r3, #1
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	481e      	ldr	r0, [pc, #120]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001b3e:	f001 fcfb 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b42:	e030      	b.n	8001ba6 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b96:	2302      	movs	r3, #2
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001ba2:	f001 fcc9 	bl	8003538 <HAL_GPIO_Init>
}
 8001ba6:	bf00      	nop
 8001ba8:	3730      	adds	r7, #48	; 0x30
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_TIM_MspPostInit+0x68>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d11e      	bne.n	8001c20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_TIM_MspPostInit+0x6c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_TIM_MspPostInit+0x6c>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_TIM_MspPostInit+0x6c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8001bfe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_TIM_MspPostInit+0x70>)
 8001c1c:	f001 fc8c 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40021000 	.word	0x40021000

08001c34 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <MX_USART2_UART_Init+0x50>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f004 f9fe 	bl	800606c <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c76:	f7ff fbe9 	bl	800144c <Error_Handler>
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000664 	.word	0x20000664
 8001c84:	40004400 	.word	0x40004400

08001c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_UART_MspInit+0xf0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d162      	bne.n	8001d70 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_UART_MspInit+0xf4>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <HAL_UART_MspInit+0xf4>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_UART_MspInit+0xf4>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_UART_MspInit+0xf4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_UART_MspInit+0xf4>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_UART_MspInit+0xf4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4820      	ldr	r0, [pc, #128]	; (8001d80 <HAL_UART_MspInit+0xf8>)
 8001cfe:	f001 fc1b 	bl	8003538 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d04:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_UART_MspInit+0x100>)
 8001d06:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d44:	480f      	ldr	r0, [pc, #60]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d46:	f001 f867 	bl	8002e18 <HAL_DMA_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d50:	f7ff fb7c 	bl	800144c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_UART_MspInit+0xfc>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2026      	movs	r0, #38	; 0x26
 8001d66:	f001 f820 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d6a:	2026      	movs	r0, #38	; 0x26
 8001d6c:	f001 f839 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40004400 	.word	0x40004400
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	20000604 	.word	0x20000604
 8001d88:	40026088 	.word	0x40026088

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d92:	e003      	b.n	8001d9c <LoopCopyDataInit>

08001d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d9a:	3104      	adds	r1, #4

08001d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001da4:	d3f6      	bcc.n	8001d94 <CopyDataInit>
  ldr  r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001da8:	e002      	b.n	8001db0 <LoopFillZerobss>

08001daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dac:	f842 3b04 	str.w	r3, [r2], #4

08001db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001db4:	d3f9      	bcc.n	8001daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db6:	f7ff fc13 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f005 f993 	bl	80070e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff f9ef 	bl	80011a0 <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dc8:	080093a0 	.word	0x080093a0
  ldr  r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dd0:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8001dd4:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8001dd8:	200006ac 	.word	0x200006ac

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <MPU6050_INIT>:
#include "IMU_MPU6050.h"
#include "i2c.h"
#include "gpio.h"


void MPU6050_INIT(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af04      	add	r7, sp, #16

		// reset mpu6050
	TxBuffer[0] = 0x80;
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	226b      	movs	r2, #107	; 0x6b
 8001dfe:	21d0      	movs	r1, #208	; 0xd0
 8001e00:	484b      	ldr	r0, [pc, #300]	; (8001f30 <MPU6050_INIT+0x150>)
 8001e02:	f001 fe87 	bl	8003b14 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e06:	20c8      	movs	r0, #200	; 0xc8
 8001e08:	f000 fed2 	bl	8002bb0 <HAL_Delay>

	// tat sleep mode, tat cycle mode, temp_dis = 8MHZ
	TxBuffer[0] = 0x00;
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	226b      	movs	r2, #107	; 0x6b
 8001e24:	21d0      	movs	r1, #208	; 0xd0
 8001e26:	4842      	ldr	r0, [pc, #264]	; (8001f30 <MPU6050_INIT+0x150>)
 8001e28:	f001 fe74 	bl	8003b14 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e2c:	20c8      	movs	r0, #200	; 0xc8
 8001e2e:	f000 febf 	bl	8002bb0 <HAL_Delay>

	// disabled DLPF
	TxBuffer[0] = 0x06;
 8001e32:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e34:	2206      	movs	r2, #6
 8001e36:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_CONFIG, 1, TxBuffer, 1, 1000);
 8001e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	221a      	movs	r2, #26
 8001e4a:	21d0      	movs	r1, #208	; 0xd0
 8001e4c:	4838      	ldr	r0, [pc, #224]	; (8001f30 <MPU6050_INIT+0x150>)
 8001e4e:	f001 fe61 	bl	8003b14 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e52:	20c8      	movs	r0, #200	; 0xc8
 8001e54:	f000 feac 	bl	8002bb0 <HAL_Delay>

	// full scale range mode 3 +-2000do/s
	TxBuffer[0] = 0x18;
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e5a:	2218      	movs	r2, #24
 8001e5c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, TxBuffer, 1, 1000);
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2301      	movs	r3, #1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	221b      	movs	r2, #27
 8001e70:	21d0      	movs	r1, #208	; 0xd0
 8001e72:	482f      	ldr	r0, [pc, #188]	; (8001f30 <MPU6050_INIT+0x150>)
 8001e74:	f001 fe4e 	bl	8003b14 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e78:	20c8      	movs	r0, #200	; 0xc8
 8001e7a:	f000 fe99 	bl	8002bb0 <HAL_Delay>

	// full scale range mode 1 +-8g
	TxBuffer[0] = 0x10;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e80:	2210      	movs	r2, #16
 8001e82:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, TxBuffer, 1, 1000);
 8001e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	221c      	movs	r2, #28
 8001e96:	21d0      	movs	r1, #208	; 0xd0
 8001e98:	4825      	ldr	r0, [pc, #148]	; (8001f30 <MPU6050_INIT+0x150>)
 8001e9a:	f001 fe3b 	bl	8003b14 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e9e:	20c8      	movs	r0, #200	; 0xc8
 8001ea0:	f000 fe86 	bl	8002bb0 <HAL_Delay>

	// cho phep ngat INT
	TxBuffer[0] = 0x19;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001ea6:	2219      	movs	r2, #25
 8001ea8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_INT_ENABLE, 1, TxBuffer, 1, 1000);
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MPU6050_INIT+0x14c>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	2238      	movs	r2, #56	; 0x38
 8001ebc:	21d0      	movs	r1, #208	; 0xd0
 8001ebe:	481c      	ldr	r0, [pc, #112]	; (8001f30 <MPU6050_INIT+0x150>)
 8001ec0:	f001 fe28 	bl	8003b14 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001ec4:	20c8      	movs	r0, #200	; 0xc8
 8001ec6:	f000 fe73 	bl	8002bb0 <HAL_Delay>

	// test MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, RxBuffer, 1, 1000);
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MPU6050_INIT+0x154>)
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	2275      	movs	r2, #117	; 0x75
 8001edc:	21d0      	movs	r1, #208	; 0xd0
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <MPU6050_INIT+0x150>)
 8001ee0:	f001 ff12 	bl	8003d08 <HAL_I2C_Mem_Read>
	HAL_Delay(300);
 8001ee4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ee8:	f000 fe62 	bl	8002bb0 <HAL_Delay>
	if (RxBuffer[0] == 0x68)
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MPU6050_INIT+0x154>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b68      	cmp	r3, #104	; 0x68
 8001ef2:	d106      	bne.n	8001f02 <MPU6050_INIT+0x122>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001efa:	480f      	ldr	r0, [pc, #60]	; (8001f38 <MPU6050_INIT+0x158>)
 8001efc:	f001 fc9e 	bl	800383c <HAL_GPIO_WritePin>
		for(j=0;j<=11;j++){
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
			HAL_Delay(100);
		}
	}
}
 8001f00:	e010      	b.n	8001f24 <MPU6050_INIT+0x144>
		for(j=0;j<=11;j++){
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	e00a      	b.n	8001f1e <MPU6050_INIT+0x13e>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8001f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <MPU6050_INIT+0x158>)
 8001f0e:	f001 fcae 	bl	800386e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001f12:	2064      	movs	r0, #100	; 0x64
 8001f14:	f000 fe4c 	bl	8002bb0 <HAL_Delay>
		for(j=0;j<=11;j++){
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b0b      	cmp	r3, #11
 8001f22:	d9f1      	bls.n	8001f08 <MPU6050_INIT+0x128>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000448 	.word	0x20000448
 8001f30:	2000022c 	.word	0x2000022c
 8001f34:	20000428 	.word	0x20000428
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	00000000 	.word	0x00000000

08001f40 <ReadMPU>:
	};

 * GPIO: PB9 -> IMU_SDA
 * 		 PB8 -> IMU_SCL
*/
struct data_imu ReadMPU(){
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	struct data_imu mpu;
	int8_t i;
	int16_t DataBuffer16[7];
	IMU_READ_DMA();
 8001f48:	f000 f97e 	bl	8002248 <IMU_READ_DMA>

	for(i=0;i<7;i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f52:	e01e      	b.n	8001f92 <ReadMPU+0x52>
	{
		DataBuffer16[i] = (int16_t)(((uint16_t)DataBuffer[2*i]<<8) | DataBuffer[2*i + 1]);
 8001f54:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4ab1      	ldr	r2, [pc, #708]	; (8002220 <ReadMPU+0x2e0>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b219      	sxth	r1, r3
 8001f62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4aad      	ldr	r2, [pc, #692]	; (8002220 <ReadMPU+0x2e0>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f74:	430a      	orrs	r2, r1
 8001f76:	b212      	sxth	r2, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f7e:	440b      	add	r3, r1
 8001f80:	f823 2c30 	strh.w	r2, [r3, #-48]
	for(i=0;i<7;i++)
 8001f84:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	dddc      	ble.n	8001f54 <ReadMPU+0x14>
	}

	accel_x_temp = DataBuffer16[0];
 8001f9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f9e:	4ba1      	ldr	r3, [pc, #644]	; (8002224 <ReadMPU+0x2e4>)
 8001fa0:	801a      	strh	r2, [r3, #0]
	accel_y_temp = DataBuffer16[1];
 8001fa2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001fa6:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <ReadMPU+0x2e8>)
 8001fa8:	801a      	strh	r2, [r3, #0]
	accel_z_temp = DataBuffer16[2];
 8001faa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fae:	4b9f      	ldr	r3, [pc, #636]	; (800222c <ReadMPU+0x2ec>)
 8001fb0:	801a      	strh	r2, [r3, #0]


//	mpu.accel_x = roundf(((atan2((double)accel_y_temp,(double)accel_z_temp)+M_PI)*RA_TO_DEC*1000.0f));
	mpu.accel_x = roundf((float)((atan2((double)accel_y_temp,(double)accel_z_temp))*RA_TO_DEC)*1000);
 8001fb2:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <ReadMPU+0x2e8>)
 8001fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fa67 	bl	800048c <__aeabi_i2d>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	460d      	mov	r5, r1
 8001fc2:	4b9a      	ldr	r3, [pc, #616]	; (800222c <ReadMPU+0x2ec>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa5f 	bl	800048c <__aeabi_i2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ec43 2b11 	vmov	d1, r2, r3
 8001fd6:	ec45 4b10 	vmov	d0, r4, r5
 8001fda:	f006 fdf9 	bl	8008bd0 <atan2>
 8001fde:	ec51 0b10 	vmov	r0, r1, d0
 8001fe2:	a38d      	add	r3, pc, #564	; (adr r3, 8002218 <ReadMPU+0x2d8>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe faba 	bl	8000560 <__aeabi_dmul>
 8001fec:	4603      	mov	r3, r0
 8001fee:	460c      	mov	r4, r1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	f7fe fd8c 	bl	8000b10 <__aeabi_d2f>
 8001ff8:	ee07 0a10 	vmov	s14, r0
 8001ffc:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8002230 <ReadMPU+0x2f0>
 8002000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002004:	eeb0 0a67 	vmov.f32	s0, s15
 8002008:	f006 fdbc 	bl	8008b84 <roundf>
 800200c:	eef0 7a40 	vmov.f32	s15, s0
 8002010:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	mpu.accel_y = roundf((float)((atan2((double)accel_x_temp,(double)accel_z_temp))*RA_TO_DEC)*1000);
 8002014:	4b83      	ldr	r3, [pc, #524]	; (8002224 <ReadMPU+0x2e4>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa36 	bl	800048c <__aeabi_i2d>
 8002020:	4604      	mov	r4, r0
 8002022:	460d      	mov	r5, r1
 8002024:	4b81      	ldr	r3, [pc, #516]	; (800222c <ReadMPU+0x2ec>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa2e 	bl	800048c <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	ec43 2b11 	vmov	d1, r2, r3
 8002038:	ec45 4b10 	vmov	d0, r4, r5
 800203c:	f006 fdc8 	bl	8008bd0 <atan2>
 8002040:	ec51 0b10 	vmov	r0, r1, d0
 8002044:	a374      	add	r3, pc, #464	; (adr r3, 8002218 <ReadMPU+0x2d8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fa89 	bl	8000560 <__aeabi_dmul>
 800204e:	4603      	mov	r3, r0
 8002050:	460c      	mov	r4, r1
 8002052:	4618      	mov	r0, r3
 8002054:	4621      	mov	r1, r4
 8002056:	f7fe fd5b 	bl	8000b10 <__aeabi_d2f>
 800205a:	ee07 0a10 	vmov	s14, r0
 800205e:	eddf 7a74 	vldr	s15, [pc, #464]	; 8002230 <ReadMPU+0x2f0>
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	eeb0 0a67 	vmov.f32	s0, s15
 800206a:	f006 fd8b 	bl	8008b84 <roundf>
 800206e:	eef0 7a40 	vmov.f32	s15, s0
 8002072:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	mpu.accel_z = roundf((float)((atan2((double)accel_x_temp,(double)accel_y_temp))*RA_TO_DEC)*1000);
 8002076:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <ReadMPU+0x2e4>)
 8002078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa05 	bl	800048c <__aeabi_i2d>
 8002082:	4604      	mov	r4, r0
 8002084:	460d      	mov	r5, r1
 8002086:	4b68      	ldr	r3, [pc, #416]	; (8002228 <ReadMPU+0x2e8>)
 8002088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe f9fd 	bl	800048c <__aeabi_i2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	ec43 2b11 	vmov	d1, r2, r3
 800209a:	ec45 4b10 	vmov	d0, r4, r5
 800209e:	f006 fd97 	bl	8008bd0 <atan2>
 80020a2:	ec51 0b10 	vmov	r0, r1, d0
 80020a6:	a35c      	add	r3, pc, #368	; (adr r3, 8002218 <ReadMPU+0x2d8>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe fa58 	bl	8000560 <__aeabi_dmul>
 80020b0:	4603      	mov	r3, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	4618      	mov	r0, r3
 80020b6:	4621      	mov	r1, r4
 80020b8:	f7fe fd2a 	bl	8000b10 <__aeabi_d2f>
 80020bc:	ee07 0a10 	vmov	s14, r0
 80020c0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002230 <ReadMPU+0x2f0>
 80020c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	f006 fd5a 	bl	8008b84 <roundf>
 80020d0:	eef0 7a40 	vmov.f32	s15, s0
 80020d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
/*
	mpu.accel_x = atan((accel_y_temp)/sqrt(pow(accel_x_temp,2)+pow(accel_z_temp,2)))*RA_TO_DEC;
	mpu.accel_x = atan(gyroAngleX);
*/

	mpu.temp = (float)DataBuffer16[3];
 80020d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	edc7 7a06 	vstr	s15, [r7, #24]

	gyro_x_temp = DataBuffer16[4];
 80020e8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80020ec:	4b51      	ldr	r3, [pc, #324]	; (8002234 <ReadMPU+0x2f4>)
 80020ee:	801a      	strh	r2, [r3, #0]
	gyro_y_temp = DataBuffer16[5];
 80020f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <ReadMPU+0x2f8>)
 80020f6:	801a      	strh	r2, [r3, #0]
	gyro_z_temp = DataBuffer16[6];
 80020f8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <ReadMPU+0x2fc>)
 80020fe:	801a      	strh	r2, [r3, #0]

	mpu.gyro_x = roundf((float)gyro_x_temp*1000.0f/131.0F);
 8002100:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <ReadMPU+0x2f4>)
 8002102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002230 <ReadMPU+0x2f0>
 8002112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002116:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002240 <ReadMPU+0x300>
 800211a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800211e:	eeb0 0a66 	vmov.f32	s0, s13
 8002122:	f006 fd2f 	bl	8008b84 <roundf>
 8002126:	eef0 7a40 	vmov.f32	s15, s0
 800212a:	edc7 7a07 	vstr	s15, [r7, #28]
	mpu.gyro_y = roundf((float)gyro_y_temp*1000.0f/131.0F);
 800212e:	4b42      	ldr	r3, [pc, #264]	; (8002238 <ReadMPU+0x2f8>)
 8002130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002230 <ReadMPU+0x2f0>
 8002140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002144:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002240 <ReadMPU+0x300>
 8002148:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800214c:	eeb0 0a66 	vmov.f32	s0, s13
 8002150:	f006 fd18 	bl	8008b84 <roundf>
 8002154:	eef0 7a40 	vmov.f32	s15, s0
 8002158:	edc7 7a08 	vstr	s15, [r7, #32]
	mpu.gyro_z = roundf((float)gyro_z_temp*1000.0f/131.0F);
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <ReadMPU+0x2fc>)
 800215e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002230 <ReadMPU+0x2f0>
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002240 <ReadMPU+0x300>
 8002176:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800217a:	eeb0 0a66 	vmov.f32	s0, s13
 800217e:	f006 fd01 	bl	8008b84 <roundf>
 8002182:	eef0 7a40 	vmov.f32	s15, s0
 8002186:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	imu_test[0] = mpu.accel_x/1000.0f;
 800218a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800218e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002230 <ReadMPU+0x2f0>
 8002192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <ReadMPU+0x304>)
 8002198:	edc3 7a00 	vstr	s15, [r3]
	imu_test[1] = mpu.accel_y/1000.0f;
 800219c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80021a0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002230 <ReadMPU+0x2f0>
 80021a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <ReadMPU+0x304>)
 80021aa:	edc3 7a01 	vstr	s15, [r3, #4]
	imu_test[2] = mpu.accel_z/1000.0f;
 80021ae:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80021b2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002230 <ReadMPU+0x2f0>
 80021b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <ReadMPU+0x304>)
 80021bc:	edc3 7a02 	vstr	s15, [r3, #8]

	imu_test[3] = mpu.gyro_x/1000.0f;
 80021c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80021c4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002230 <ReadMPU+0x2f0>
 80021c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <ReadMPU+0x304>)
 80021ce:	edc3 7a03 	vstr	s15, [r3, #12]
	imu_test[4] = mpu.gyro_y/1000.0f;
 80021d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80021d6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002230 <ReadMPU+0x2f0>
 80021da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <ReadMPU+0x304>)
 80021e0:	edc3 7a04 	vstr	s15, [r3, #16]
	imu_test[5] = mpu.gyro_z/1000.0f;
 80021e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021e8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002230 <ReadMPU+0x2f0>
 80021ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <ReadMPU+0x304>)
 80021f2:	edc3 7a05 	vstr	s15, [r3, #20]

	return mpu;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	461d      	mov	r5, r3
 80021fa:	f107 0418 	add.w	r4, r7, #24
 80021fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002202:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002206:	e885 0007 	stmia.w	r5, {r0, r1, r2}

}
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	3738      	adds	r7, #56	; 0x38
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	20000000 	.word	0x20000000
 800221c:	404ca5dc 	.word	0x404ca5dc
 8002220:	200003d4 	.word	0x200003d4
 8002224:	200002ee 	.word	0x200002ee
 8002228:	200002ec 	.word	0x200002ec
 800222c:	2000043a 	.word	0x2000043a
 8002230:	447a0000 	.word	0x447a0000
 8002234:	20000458 	.word	0x20000458
 8002238:	20000438 	.word	0x20000438
 800223c:	2000040c 	.word	0x2000040c
 8002240:	43030000 	.word	0x43030000
 8002244:	2000045c 	.word	0x2000045c

08002248 <IMU_READ_DMA>:

/*
DataBuffer is output
uint8_t DataBuffer[14];
*/
void IMU_READ_DMA(){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, DataBuffer, 14, 1);
 800224e:	2301      	movs	r3, #1
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	230e      	movs	r3, #14
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <IMU_READ_DMA+0x24>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	223b      	movs	r2, #59	; 0x3b
 800225e:	21d0      	movs	r1, #208	; 0xd0
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <IMU_READ_DMA+0x28>)
 8002262:	f001 fd51 	bl	8003d08 <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, DataBuffer, 14);
//	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer[0], 14);
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200003d4 	.word	0x200003d4
 8002270:	2000022c 	.word	0x2000022c

08002274 <Control_Motor>:
 *		 x1: motor left
 *		 1: tien
 *		 0: lui
 *
*/
void Control_Motor(int16_t duty_r,int16_t duty_l, uint8_t dir_motor){
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	80fb      	strh	r3, [r7, #6]
 800227e:	460b      	mov	r3, r1
 8002280:	80bb      	strh	r3, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	70fb      	strb	r3, [r7, #3]
	mt_test[0] = duty_r;
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <Control_Motor+0xd0>)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	8013      	strh	r3, [r2, #0]
	mt_test[1] = duty_l;
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <Control_Motor+0xd0>)
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	8053      	strh	r3, [r2, #2]
	mt_test[2] = dir_motor;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	b21a      	sxth	r2, r3
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <Control_Motor+0xd0>)
 8002298:	809a      	strh	r2, [r3, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_r);
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <Control_Motor+0xd4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38
	if(dir_motor&1){
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <Control_Motor+0x5e>
		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 80022ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b2:	4826      	ldr	r0, [pc, #152]	; (800234c <Control_Motor+0xd8>)
 80022b4:	f001 fadb 	bl	800386e <HAL_GPIO_TogglePin>
//		tien
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022be:	4823      	ldr	r0, [pc, #140]	; (800234c <Control_Motor+0xd8>)
 80022c0:	f001 fabc 	bl	800383c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ca:	4820      	ldr	r0, [pc, #128]	; (800234c <Control_Motor+0xd8>)
 80022cc:	f001 fab6 	bl	800383c <HAL_GPIO_WritePin>
 80022d0:	e00b      	b.n	80022ea <Control_Motor+0x76>
	}
	else{
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d8:	481c      	ldr	r0, [pc, #112]	; (800234c <Control_Motor+0xd8>)
 80022da:	f001 faaf 	bl	800383c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e4:	4819      	ldr	r0, [pc, #100]	; (800234c <Control_Motor+0xd8>)
 80022e6:	f001 faa9 	bl	800383c <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_l);
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <Control_Motor+0xd4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022f2:	635a      	str	r2, [r3, #52]	; 0x34
	if(dir_motor&2){
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d011      	beq.n	8002322 <Control_Motor+0xae>
//		tien
		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 80022fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002302:	4812      	ldr	r0, [pc, #72]	; (800234c <Control_Motor+0xd8>)
 8002304:	f001 fab3 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <Control_Motor+0xd8>)
 8002310:	f001 fa94 	bl	800383c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_SET);
 8002314:	2201      	movs	r2, #1
 8002316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <Control_Motor+0xd8>)
 800231c:	f001 fa8e 	bl	800383c <HAL_GPIO_WritePin>
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_RESET);
	}

}
 8002320:	e00b      	b.n	800233a <Control_Motor+0xc6>
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <Control_Motor+0xd8>)
 800232a:	f001 fa87 	bl	800383c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <Control_Motor+0xd8>)
 8002336:	f001 fa81 	bl	800383c <HAL_GPIO_WritePin>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000043c 	.word	0x2000043c
 8002348:	20000544 	.word	0x20000544
 800234c:	40020c00 	.word	0x40020c00

08002350 <Get_Velocity>:
 * GPIO: PB7 -> ENC-L1
 * 		 PB6 -> ENC-L2
 * 		 PA5 -> ENC-R1
 * 		 PB3 -> ENC-R2
*/
volatile int16_t * Get_Velocity(){
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
	if (mt_onetime==1){
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <Get_Velocity+0xd4>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10b      	bne.n	8002376 <Get_Velocity+0x26>
		TIM4->CNT=5000;
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <Get_Velocity+0xd8>)
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT=5000;
 8002366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
		mt_onetime=0;
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <Get_Velocity+0xd4>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
	}
//	volatile float enc[2];
	enc[0]= (TIM2->CNT)-5000;
 8002376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	b29b      	uxth	r3, r3
 800237e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002382:	3b08      	subs	r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b21a      	sxth	r2, r3
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <Get_Velocity+0xdc>)
 800238a:	801a      	strh	r2, [r3, #0]
//	if ((TIM2->CNT)>=5000) enc[1]=-1;
//	else enc[1]=1;

	enc[1]= (TIM4->CNT)-5000;
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <Get_Velocity+0xd8>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	b29b      	uxth	r3, r3
 8002392:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002396:	3b08      	subs	r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b21a      	sxth	r2, r3
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <Get_Velocity+0xdc>)
 800239e:	805a      	strh	r2, [r3, #2]
//	if ((TIM4->CNT)>5000) enc[3]=1;
//	else enc[3]=-1;

	TIM4->CNT=5000;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <Get_Velocity+0xd8>)
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=5000;
 80023a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
	int i;
  	for (int i=0;i<2; i++){
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e02a      	b.n	800240e <Get_Velocity+0xbe>
		if (enc[i]>=0){
 80023b8:	4a1c      	ldr	r2, [pc, #112]	; (800242c <Get_Velocity+0xdc>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0c      	blt.n	80023e0 <Get_Velocity+0x90>
			enc[2]=enc[2]|(i+1);
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <Get_Velocity+0xdc>)
 80023c8:	889b      	ldrh	r3, [r3, #4]
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <Get_Velocity+0xdc>)
 80023dc:	809a      	strh	r2, [r3, #4]
 80023de:	e013      	b.n	8002408 <Get_Velocity+0xb8>
		}
		else if (enc[i]<0){
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <Get_Velocity+0xdc>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da0c      	bge.n	8002408 <Get_Velocity+0xb8>
			enc[2]=enc[2]&(2-i);
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <Get_Velocity+0xdc>)
 80023f0:	889b      	ldrh	r3, [r3, #4]
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f1c3 0302 	rsb	r3, r3, #2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b21b      	sxth	r3, r3
 8002400:	4013      	ands	r3, r2
 8002402:	b21a      	sxth	r2, r3
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <Get_Velocity+0xdc>)
 8002406:	809a      	strh	r2, [r3, #4]
  	for (int i=0;i<2; i++){
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	ddd1      	ble.n	80023b8 <Get_Velocity+0x68>
		}
  	}

	return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000001c 	.word	0x2000001c
 8002428:	40000800 	.word	0x40000800
 800242c:	2000037c 	.word	0x2000037c

08002430 <PID_Calculate>:
 * PID_in is array 2 value (target L, target R)
 * PID_current is array 2 value (velo L, velo R)
 * return *PID_out is velo of 2 motors Left and Right

*/
float * PID_Calculate(float *_PID_in, int PID_dir, volatile int16_t *_PID_current){
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	}
//	dir_=3;
	PID_out[2]=(float)dir_;
*/

  	for (int i=0;i<2; i++){
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e19e      	b.n	8002780 <PID_Calculate+0x350>

  		if (!(PID_dir&(i+1))) PID_in[i]=*(_PID_in+i)*(-1);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <PID_Calculate+0x3c>
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eef1 7a67 	vneg.f32	s15, s15
 800245e:	4a9b      	ldr	r2, [pc, #620]	; (80026cc <PID_Calculate+0x29c>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	edc3 7a00 	vstr	s15, [r3]
 800246a:	e009      	b.n	8002480 <PID_Calculate+0x50>
  		else 				 PID_in[i]=*(_PID_in+i);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4995      	ldr	r1, [pc, #596]	; (80026cc <PID_Calculate+0x29c>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	601a      	str	r2, [r3, #0]

  		PID_Test[i+2]=PID_in[i];
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3302      	adds	r3, #2
 8002484:	4991      	ldr	r1, [pc, #580]	; (80026cc <PID_Calculate+0x29c>)
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	440a      	add	r2, r1
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4990      	ldr	r1, [pc, #576]	; (80026d0 <PID_Calculate+0x2a0>)
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	601a      	str	r2, [r3, #0]

  		PID_in[i]*=updateVel;
 8002496:	4a8d      	ldr	r2, [pc, #564]	; (80026cc <PID_Calculate+0x29c>)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80026d4 <PID_Calculate+0x2a4>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	4a88      	ldr	r2, [pc, #544]	; (80026cc <PID_Calculate+0x29c>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	edc3 7a00 	vstr	s15, [r3]

  		PID_current[i] = *(_PID_current+i);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	4a83      	ldr	r2, [pc, #524]	; (80026d8 <PID_Calculate+0x2a8>)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	edc3 7a00 	vstr	s15, [r3]


//		PID_Test[i] = PID_current[i];
//		PID_Test[i+2]=PID_in[i];

		E0[i] = (PID_in[i]-PID_current[i]);
 80024d6:	4a7d      	ldr	r2, [pc, #500]	; (80026cc <PID_Calculate+0x29c>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	ed93 7a00 	vldr	s14, [r3]
 80024e2:	4a7d      	ldr	r2, [pc, #500]	; (80026d8 <PID_Calculate+0x2a8>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f2:	4a7a      	ldr	r2, [pc, #488]	; (80026dc <PID_Calculate+0x2ac>)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	edc3 7a00 	vstr	s15, [r3]

		A0[i] = PID_Kp[i] + PID_Ki[i]/400.0F + PID_Kd[i]*200.0F;
 80024fe:	4a78      	ldr	r2, [pc, #480]	; (80026e0 <PID_Calculate+0x2b0>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	4a76      	ldr	r2, [pc, #472]	; (80026e4 <PID_Calculate+0x2b4>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	edd3 6a00 	vldr	s13, [r3]
 8002516:	ed9f 6a74 	vldr	s12, [pc, #464]	; 80026e8 <PID_Calculate+0x2b8>
 800251a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800251e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <PID_Calculate+0x2bc>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	eddf 6a69 	vldr	s13, [pc, #420]	; 80026d4 <PID_Calculate+0x2a4>
 8002532:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	4a6d      	ldr	r2, [pc, #436]	; (80026f0 <PID_Calculate+0x2c0>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	edc3 7a00 	vstr	s15, [r3]
		A1[i] = -PID_Kp[i] + PID_Ki[i]/400.0F - 400.0F*PID_Kd[i];
 8002546:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <PID_Calculate+0x2b4>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eddf 6a65 	vldr	s13, [pc, #404]	; 80026e8 <PID_Calculate+0x2b8>
 8002556:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800255a:	4a61      	ldr	r2, [pc, #388]	; (80026e0 <PID_Calculate+0x2b0>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800256a:	4a60      	ldr	r2, [pc, #384]	; (80026ec <PID_Calculate+0x2bc>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80026e8 <PID_Calculate+0x2b8>
 800257a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <PID_Calculate+0x2c4>)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	edc3 7a00 	vstr	s15, [r3]
		A2[i] = PID_Kd[i]*200.0F;
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <PID_Calculate+0x2bc>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80026d4 <PID_Calculate+0x2a4>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <PID_Calculate+0x2c8>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	edc3 7a00 	vstr	s15, [r3]
		PID_out[i] += A0[i]*E0[i] + A1[i]*E1[i] + A2[i]*E2[i];
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <PID_Calculate+0x2cc>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	ed93 7a00 	vldr	s14, [r3]
 80025ba:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <PID_Calculate+0x2c0>)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	edd3 6a00 	vldr	s13, [r3]
 80025c6:	4a45      	ldr	r2, [pc, #276]	; (80026dc <PID_Calculate+0x2ac>)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025d6:	4a47      	ldr	r2, [pc, #284]	; (80026f4 <PID_Calculate+0x2c4>)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	ed93 6a00 	vldr	s12, [r3]
 80025e2:	4a47      	ldr	r2, [pc, #284]	; (8002700 <PID_Calculate+0x2d0>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025f6:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <PID_Calculate+0x2c8>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	ed93 6a00 	vldr	s12, [r3]
 8002602:	4a40      	ldr	r2, [pc, #256]	; (8002704 <PID_Calculate+0x2d4>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	4a38      	ldr	r2, [pc, #224]	; (80026fc <PID_Calculate+0x2cc>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	edc3 7a00 	vstr	s15, [r3]

		E2[i] = E1[i];
 8002626:	4a36      	ldr	r2, [pc, #216]	; (8002700 <PID_Calculate+0x2d0>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4934      	ldr	r1, [pc, #208]	; (8002704 <PID_Calculate+0x2d4>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	601a      	str	r2, [r3, #0]
		E1[i] = E0[i];
 800263a:	4a28      	ldr	r2, [pc, #160]	; (80026dc <PID_Calculate+0x2ac>)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	492e      	ldr	r1, [pc, #184]	; (8002700 <PID_Calculate+0x2d0>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	601a      	str	r2, [r3, #0]

//		PID_Test[i+6]=PID_out[i];

		if (PID_out[i]>PID_out_max){
 800264e:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <PID_Calculate+0x2cc>)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <PID_Calculate+0x2d8>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	dd07      	ble.n	800267a <PID_Calculate+0x24a>
			PID_out[i]=PID_out_max;
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <PID_Calculate+0x2d8>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4923      	ldr	r1, [pc, #140]	; (80026fc <PID_Calculate+0x2cc>)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e014      	b.n	80026a4 <PID_Calculate+0x274>
		}
		else if (PID_out[i]<PID_out_min){
 800267a:	4a20      	ldr	r2, [pc, #128]	; (80026fc <PID_Calculate+0x2cc>)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <PID_Calculate+0x2dc>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d506      	bpl.n	80026a4 <PID_Calculate+0x274>
			PID_out[i]=PID_out_min;
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <PID_Calculate+0x2dc>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4918      	ldr	r1, [pc, #96]	; (80026fc <PID_Calculate+0x2cc>)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	601a      	str	r2, [r3, #0]
		}

		if (PID_out[i]>=0){
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <PID_Calculate+0x2cc>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	db2c      	blt.n	8002714 <PID_Calculate+0x2e4>
			dir_=dir_|(i+1);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <PID_Calculate+0x2e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <PID_Calculate+0x2e0>)
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e037      	b.n	800273a <PID_Calculate+0x30a>
 80026ca:	bf00      	nop
 80026cc:	2000047c 	.word	0x2000047c
 80026d0:	20000328 	.word	0x20000328
 80026d4:	43480000 	.word	0x43480000
 80026d8:	200004ac 	.word	0x200004ac
 80026dc:	20000320 	.word	0x20000320
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000008 	.word	0x20000008
 80026e8:	43c80000 	.word	0x43c80000
 80026ec:	20000010 	.word	0x20000010
 80026f0:	20000358 	.word	0x20000358
 80026f4:	200004bc 	.word	0x200004bc
 80026f8:	20000430 	.word	0x20000430
 80026fc:	200003bc 	.word	0x200003bc
 8002700:	20000414 	.word	0x20000414
 8002704:	20000384 	.word	0x20000384
 8002708:	20000020 	.word	0x20000020
 800270c:	20000024 	.word	0x20000024
 8002710:	20000220 	.word	0x20000220
		}
		else if (PID_out[i]<0)
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <PID_Calculate+0x378>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	d507      	bpl.n	800273a <PID_Calculate+0x30a>
			dir_=dir_&(2-i);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f1c3 0202 	rsb	r2, r3, #2
 8002730:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <PID_Calculate+0x37c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4013      	ands	r3, r2
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <PID_Calculate+0x37c>)
 8002738:	6013      	str	r3, [r2, #0]


		PID_out_[i]=fabs(PID_out[i]);
 800273a:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <PID_Calculate+0x378>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef0 7ae7 	vabs.f32	s15, s15
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <PID_Calculate+0x380>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	edc3 7a00 	vstr	s15, [r3]
		if (PID_in[i]==0){
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <PID_Calculate+0x384>)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d106      	bne.n	800277a <PID_Calculate+0x34a>
			PID_out[i]=0;
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <PID_Calculate+0x378>)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
  	for (int i=0;i<2; i++){
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b01      	cmp	r3, #1
 8002784:	f77f ae5d 	ble.w	8002442 <PID_Calculate+0x12>
		}
	}
  	PID_out_[2]=(float)dir_;
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <PID_Calculate+0x37c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <PID_Calculate+0x380>)
 8002796:	edc3 7a02 	vstr	s15, [r3, #8]


//	PID_Test[5] += PID_out[0];
	return PID_out_;
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <PID_Calculate+0x380>)
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	200003bc 	.word	0x200003bc
 80027ac:	20000220 	.word	0x20000220
 80027b0:	200003c8 	.word	0x200003c8
 80027b4:	2000047c 	.word	0x2000047c

080027b8 <Dec2Bytes>:
		van toc trai: 2 byte
		van toc phai: 2 byte
		chieu: 1 byte
		data: 1 byte
*/
void Dec2Bytes(int16_t encA, int16_t encB, struct data_imu ss, uint8_t motor_dir){
 80027b8:	b082      	sub	sp, #8
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	f107 0c10 	add.w	ip, r7, #16
 80027c4:	e88c 000c 	stmia.w	ip, {r2, r3}
 80027c8:	4603      	mov	r3, r0
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	460b      	mov	r3, r1
 80027ce:	80bb      	strh	r3, [r7, #4]

	dataTransmit[0] = 0x7F;
 80027d0:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <Dec2Bytes+0x1d0>)
 80027d2:	227f      	movs	r2, #127	; 0x7f
 80027d4:	701a      	strb	r2, [r3, #0]

	dataTransmit[1]=(int)((((int16_t)encA)|0x00FF)>>8); // 8 bit H
 80027d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027da:	121b      	asrs	r3, r3, #8
 80027dc:	b21b      	sxth	r3, r3
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b69      	ldr	r3, [pc, #420]	; (8002988 <Dec2Bytes+0x1d0>)
 80027e2:	705a      	strb	r2, [r3, #1]
	dataTransmit[2]=(int)((((int16_t)encA)|0xFF00)); 	      // 8 bit L
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b67      	ldr	r3, [pc, #412]	; (8002988 <Dec2Bytes+0x1d0>)
 80027ea:	709a      	strb	r2, [r3, #2]

	dataTransmit[3]=(int)((((int16_t)encB)|0x00FF)>>8); // 8 bit H
 80027ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027f0:	121b      	asrs	r3, r3, #8
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b64      	ldr	r3, [pc, #400]	; (8002988 <Dec2Bytes+0x1d0>)
 80027f8:	70da      	strb	r2, [r3, #3]
	dataTransmit[4]=(int)((((int16_t)encB)|0xFF00)); 	      // 8 bit L
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <Dec2Bytes+0x1d0>)
 8002800:	711a      	strb	r2, [r3, #4]

	dataTransmit[5]=(int)((((int32_t)ss.accel_x)|0xFF00FFFF)>>16); // 8 bit H
 8002802:	edd7 7a08 	vldr	s15, [r7, #32]
 8002806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280a:	ee17 3a90 	vmov	r3, s15
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <Dec2Bytes+0x1d0>)
 8002814:	715a      	strb	r2, [r3, #5]
	dataTransmit[6]=(int)((((int32_t)ss.accel_x)|0xFFFF00FF)>>8); 	      // 8 bit M
 8002816:	edd7 7a08 	vldr	s15, [r7, #32]
 800281a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281e:	ee17 3a90 	vmov	r3, s15
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b58      	ldr	r3, [pc, #352]	; (8002988 <Dec2Bytes+0x1d0>)
 8002828:	719a      	strb	r2, [r3, #6]
	dataTransmit[7]=(int)((((int32_t)ss.accel_x)|0xFFFFFF00));		// 8 bit L
 800282a:	edd7 7a08 	vldr	s15, [r7, #32]
 800282e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002832:	edc7 7a00 	vstr	s15, [r7]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b53      	ldr	r3, [pc, #332]	; (8002988 <Dec2Bytes+0x1d0>)
 800283c:	71da      	strb	r2, [r3, #7]

	dataTransmit[8]=(int)((((int32_t)ss.accel_y)|0xFF00FFFF)>>16); // 8 bit H
 800283e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002846:	ee17 3a90 	vmov	r3, s15
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b4e      	ldr	r3, [pc, #312]	; (8002988 <Dec2Bytes+0x1d0>)
 8002850:	721a      	strb	r2, [r3, #8]
	dataTransmit[9]=(int)((((int32_t)ss.accel_y)|0xFFFF00FF)>>8); 	      // 8 bit M
 8002852:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800285a:	ee17 3a90 	vmov	r3, s15
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <Dec2Bytes+0x1d0>)
 8002864:	725a      	strb	r2, [r3, #9]
	dataTransmit[10]=(int)((((int32_t)ss.accel_y)|0xFFFFFF00));		// 8 bit L
 8002866:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800286a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286e:	edc7 7a00 	vstr	s15, [r7]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b44      	ldr	r3, [pc, #272]	; (8002988 <Dec2Bytes+0x1d0>)
 8002878:	729a      	strb	r2, [r3, #10]

	dataTransmit[11]=(int)((((int32_t)ss.accel_z)|0xFF00FFFF)>>16); // 8 bit H
 800287a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800287e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002882:	ee17 3a90 	vmov	r3, s15
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <Dec2Bytes+0x1d0>)
 800288c:	72da      	strb	r2, [r3, #11]
	dataTransmit[12]=(int)((((int32_t)ss.accel_z)|0xFFFF00FF)>>8); 	      // 8 bit M
 800288e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002896:	ee17 3a90 	vmov	r3, s15
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <Dec2Bytes+0x1d0>)
 80028a0:	731a      	strb	r2, [r3, #12]
	dataTransmit[13]=(int)((((int32_t)ss.accel_z)|0xFFFFFF00));		// 8 bit L
 80028a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	edc7 7a00 	vstr	s15, [r7]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b35      	ldr	r3, [pc, #212]	; (8002988 <Dec2Bytes+0x1d0>)
 80028b4:	735a      	strb	r2, [r3, #13]

	dataTransmit[14]=(int)((((int32_t)ss.gyro_x)|0xFF00FFFF)>>16); // 8 bit H
 80028b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028be:	ee17 3a90 	vmov	r3, s15
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <Dec2Bytes+0x1d0>)
 80028c8:	739a      	strb	r2, [r3, #14]
	dataTransmit[15]=(int)((((int32_t)ss.gyro_x)|0xFFFF00FF)>>8); 	      // 8 bit M
 80028ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d2:	ee17 3a90 	vmov	r3, s15
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <Dec2Bytes+0x1d0>)
 80028dc:	73da      	strb	r2, [r3, #15]
	dataTransmit[16]=(int)((((int32_t)ss.gyro_x)|0xFFFFFF00));		// 8 bit L
 80028de:	edd7 7a05 	vldr	s15, [r7, #20]
 80028e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e6:	edc7 7a00 	vstr	s15, [r7]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <Dec2Bytes+0x1d0>)
 80028f0:	741a      	strb	r2, [r3, #16]

	dataTransmit[17]=(int)((((int32_t)ss.gyro_y)|0xFF00FFFF)>>16); // 8 bit H
 80028f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80028f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fa:	ee17 3a90 	vmov	r3, s15
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <Dec2Bytes+0x1d0>)
 8002904:	745a      	strb	r2, [r3, #17]
	dataTransmit[18]=(int)((((int32_t)ss.gyro_y)|0xFFFF00FF)>>8); 	      // 8 bit M
 8002906:	edd7 7a06 	vldr	s15, [r7, #24]
 800290a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <Dec2Bytes+0x1d0>)
 8002918:	749a      	strb	r2, [r3, #18]
	dataTransmit[19]=(int)((((int32_t)ss.gyro_y)|0xFFFFFF00));		// 8 bit L
 800291a:	edd7 7a06 	vldr	s15, [r7, #24]
 800291e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002922:	edc7 7a00 	vstr	s15, [r7]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <Dec2Bytes+0x1d0>)
 800292c:	74da      	strb	r2, [r3, #19]

	dataTransmit[20]=(int)((((int32_t)ss.gyro_z)|0xFF00FFFF)>>16); // 8 bit H
 800292e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002936:	ee17 3a90 	vmov	r3, s15
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <Dec2Bytes+0x1d0>)
 8002940:	751a      	strb	r2, [r3, #20]
	dataTransmit[21]=(int)((((int32_t)ss.gyro_z)|0xFFFF00FF)>>8); 	      // 8 bit M
 8002942:	edd7 7a07 	vldr	s15, [r7, #28]
 8002946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294a:	ee17 3a90 	vmov	r3, s15
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <Dec2Bytes+0x1d0>)
 8002954:	755a      	strb	r2, [r3, #21]
	dataTransmit[22]=(int)((((int32_t)ss.gyro_z)|0xFFFFFF00));		// 8 bit L
 8002956:	edd7 7a07 	vldr	s15, [r7, #28]
 800295a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295e:	edc7 7a00 	vstr	s15, [r7]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <Dec2Bytes+0x1d0>)
 8002968:	759a      	strb	r2, [r3, #22]

	dataTransmit[23] = (int)motor_dir;
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <Dec2Bytes+0x1d0>)
 800296c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002970:	75d3      	strb	r3, [r2, #23]
	dataTransmit[24] = 0x1B; // new line (in python using 'serial.readline(-1)' to read data)
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <Dec2Bytes+0x1d0>)
 8002974:	221b      	movs	r2, #27
 8002976:	761a      	strb	r2, [r3, #24]
	uint8_t i;
	for (i=0; i<23; i++){
		dataTransmit[i] = i;
	}
*/
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	b002      	add	sp, #8
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000490 	.word	0x20000490

0800298c <Byte2Dec>:
 * velo[0]: left
 * velo[1]: right
 *

*/
void Byte2Dec(){
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	_velo[0] = (float)receivebuffer[0] + (float)(((int16_t)receivebuffer[1]<<8)|(int16_t)receivebuffer[2])/10000.0F;
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <Byte2Dec+0x7c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <Byte2Dec+0x7c>)
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <Byte2Dec+0x7c>)
 80029a4:	7892      	ldrb	r2, [r2, #2]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029b0:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8002a0c <Byte2Dec+0x80>
 80029b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <Byte2Dec+0x84>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
	_velo[1] = (float)receivebuffer[3] + (float)(((int16_t)receivebuffer[4]<<8)|(int16_t)receivebuffer[5])/10000.0F;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <Byte2Dec+0x7c>)
 80029c4:	78db      	ldrb	r3, [r3, #3]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <Byte2Dec+0x7c>)
 80029d0:	791b      	ldrb	r3, [r3, #4]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <Byte2Dec+0x7c>)
 80029d6:	7952      	ldrb	r2, [r2, #5]
 80029d8:	4313      	orrs	r3, r2
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029e2:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002a0c <Byte2Dec+0x80>
 80029e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <Byte2Dec+0x84>)
 80029f0:	edc3 7a01 	vstr	s15, [r3, #4]
	_motor_dir = receivebuffer[6];
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <Byte2Dec+0x7c>)
 80029f6:	799b      	ldrb	r3, [r3, #6]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <Byte2Dec+0x88>)
 80029fc:	601a      	str	r2, [r3, #0]

//	_motor_dir = 2;
//	_velo[0] = 0.04;
//	_velo[1] = 0.00;
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	20000374 	.word	0x20000374
 8002a0c:	461c4000 	.word	0x461c4000
 8002a10:	20000350 	.word	0x20000350
 8002a14:	20000424 	.word	0x20000424

08002a18 <UartTransmit>:
/*
 * Transmit from STM to RP3
 * GPIO: PA2 -> TX
 * 		 PA3 -> RX
*/
void UartTransmit(int16_t encA, int16_t encB, struct data_imu ss, uint8_t motor_dir){
 8002a18:	b082      	sub	sp, #8
 8002a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1c:	b089      	sub	sp, #36	; 0x24
 8002a1e:	af06      	add	r7, sp, #24
 8002a20:	f107 0420 	add.w	r4, r7, #32
 8002a24:	e884 000c 	stmia.w	r4, {r2, r3}
 8002a28:	4603      	mov	r3, r0
 8002a2a:	80fb      	strh	r3, [r7, #6]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	80bb      	strh	r3, [r7, #4]
	uart_test[0] = encA;
 8002a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <UartTransmit+0xa8>)
 8002a3e:	edc3 7a00 	vstr	s15, [r3]
	uart_test[1] = encB;
 8002a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <UartTransmit+0xa8>)
 8002a50:	edc3 7a01 	vstr	s15, [r3, #4]
	uart_test[2] = ss.accel_x;
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <UartTransmit+0xa8>)
 8002a58:	6093      	str	r3, [r2, #8]
	uart_test[3] = ss.accel_y;
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <UartTransmit+0xa8>)
 8002a5e:	60d3      	str	r3, [r2, #12]
	uart_test[4] = ss.accel_z;
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <UartTransmit+0xa8>)
 8002a64:	6113      	str	r3, [r2, #16]
	uart_test[5] = ss.gyro_x;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <UartTransmit+0xa8>)
 8002a6a:	6153      	str	r3, [r2, #20]
	uart_test[6] = ss.gyro_y;
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <UartTransmit+0xa8>)
 8002a70:	6193      	str	r3, [r2, #24]
	uart_test[7] = ss.gyro_z;
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <UartTransmit+0xa8>)
 8002a76:	61d3      	str	r3, [r2, #28]

	Dec2Bytes(encA, encB, ss, motor_dir);
 8002a78:	f9b7 c004 	ldrsh.w	ip, [r7, #4]
 8002a7c:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8002a80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a84:	9305      	str	r3, [sp, #20]
 8002a86:	466d      	mov	r5, sp
 8002a88:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	cb0c      	ldmia	r3, {r2, r3}
 8002a9a:	4661      	mov	r1, ip
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	f7ff fe8b 	bl	80027b8 <Dec2Bytes>
	HAL_UART_Transmit(&huart2, &dataTransmit[0], sizeof(dataTransmit), 1);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	2219      	movs	r2, #25
 8002aa6:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <UartTransmit+0xac>)
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <UartTransmit+0xb0>)
 8002aaa:	f003 fb2c 	bl	8006106 <HAL_UART_Transmit>
	Byte2Dec();
 8002aae:	f7ff ff6d 	bl	800298c <Byte2Dec>

}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002abc:	b002      	add	sp, #8
 8002abe:	4770      	bx	lr
 8002ac0:	20000394 	.word	0x20000394
 8002ac4:	20000490 	.word	0x20000490
 8002ac8:	20000664 	.word	0x20000664

08002acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_Init+0x40>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_Init+0x40>)
 8002ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_Init+0x40>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f000 f94d 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f000 f808 	bl	8002b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b00:	f7fe fcac 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00

08002b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x54>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x58>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f965 	bl	8002dfe <HAL_SYSTICK_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00e      	b.n	8002b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d80a      	bhi.n	8002b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b4c:	f000 f92d 	bl	8002daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b50:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <HAL_InitTick+0x5c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000018 	.word	0x20000018
 8002b68:	2000002c 	.word	0x2000002c
 8002b6c:	20000028 	.word	0x20000028

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000002c 	.word	0x2000002c
 8002b94:	200006a4 	.word	0x200006a4

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200006a4 	.word	0x200006a4

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_Delay+0x40>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	2000002c 	.word	0x2000002c

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	; (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d60:	d301      	bcc.n	8002d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00f      	b.n	8002d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <SysTick_Config+0x40>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d74:	f7ff ff8e 	bl	8002c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <SysTick_Config+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <SysTick_Config+0x40>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff29 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dbc:	f7ff ff3e 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6978      	ldr	r0, [r7, #20]
 8002dc8:	f7ff ff8e 	bl	8002ce8 <NVIC_EncodePriority>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff5d 	bl	8002c94 <__NVIC_SetPriority>
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff31 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffa2 	bl	8002d50 <SysTick_Config>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff feb8 	bl	8002b98 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e099      	b.n	8002f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e54:	e00f      	b.n	8002e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e56:	f7ff fe9f 	bl	8002b98 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d908      	bls.n	8002e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e078      	b.n	8002f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e8      	bne.n	8002e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_DMA_Init+0x158>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d107      	bne.n	8002ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d117      	bne.n	8002f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fa91 	bl	8003444 <DMA_CheckFifoParam>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f36:	2301      	movs	r3, #1
 8002f38:	e016      	b.n	8002f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa48 	bl	80033d8 <DMA_CalcBaseAndBitshift>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	223f      	movs	r2, #63	; 0x3f
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	f010803f 	.word	0xf010803f

08002f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_DMA_Start_IT+0x26>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e040      	b.n	800301c <HAL_DMA_Start_IT+0xa8>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12f      	bne.n	800300e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f9da 	bl	800337c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	223f      	movs	r2, #63	; 0x3f
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0216 	orr.w	r2, r2, #22
 8002fe2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0208 	orr.w	r2, r2, #8
 8002ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e005      	b.n	800301a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003016:	2302      	movs	r3, #2
 8003018:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d004      	beq.n	8003042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e00c      	b.n	800305c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2205      	movs	r2, #5
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003074:	4b92      	ldr	r3, [pc, #584]	; (80032c0 <HAL_DMA_IRQHandler+0x258>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a92      	ldr	r2, [pc, #584]	; (80032c4 <HAL_DMA_IRQHandler+0x25c>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a9b      	lsrs	r3, r3, #10
 8003080:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	2208      	movs	r2, #8
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01a      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0204 	bic.w	r2, r2, #4
 80030ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2208      	movs	r2, #8
 80030c2:	409a      	lsls	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	2201      	movs	r2, #1
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2201      	movs	r2, #1
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f043 0202 	orr.w	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	2204      	movs	r2, #4
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	2204      	movs	r2, #4
 800312e:	409a      	lsls	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	2210      	movs	r2, #16
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d043      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d03c      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	2210      	movs	r2, #16
 8003164:	409a      	lsls	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d018      	beq.n	80031aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d024      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
 8003196:	e01f      	b.n	80031d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
 80031a8:	e016      	b.n	80031d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0208 	bic.w	r2, r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2220      	movs	r2, #32
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 808e 	beq.w	8003306 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8086 	beq.w	8003306 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2220      	movs	r2, #32
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b05      	cmp	r3, #5
 8003210:	d136      	bne.n	8003280 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0216 	bic.w	r2, r2, #22
 8003220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003230:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_DMA_IRQHandler+0x1da>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0208 	bic.w	r2, r2, #8
 8003250:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	223f      	movs	r2, #63	; 0x3f
 8003258:	409a      	lsls	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	2b00      	cmp	r3, #0
 8003274:	d07d      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
        }
        return;
 800327e:	e078      	b.n	8003372 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01c      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d108      	bne.n	80032ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d030      	beq.n	8003306 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
 80032ac:	e02b      	b.n	8003306 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d027      	beq.n	8003306 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
 80032be:	e022      	b.n	8003306 <HAL_DMA_IRQHandler+0x29e>
 80032c0:	20000018 	.word	0x20000018
 80032c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0210 	bic.w	r2, r2, #16
 80032e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	2b00      	cmp	r3, #0
 800330c:	d032      	beq.n	8003374 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d022      	beq.n	8003360 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2205      	movs	r2, #5
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d307      	bcc.n	800334e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f2      	bne.n	8003332 <HAL_DMA_IRQHandler+0x2ca>
 800334c:	e000      	b.n	8003350 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800334e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e000      	b.n	8003374 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003372:	bf00      	nop
    }
  }
}
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop

0800337c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003398:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d108      	bne.n	80033bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ba:	e007      	b.n	80033cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	3b10      	subs	r3, #16
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <DMA_CalcBaseAndBitshift+0x64>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033f2:	4a13      	ldr	r2, [pc, #76]	; (8003440 <DMA_CalcBaseAndBitshift+0x68>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d909      	bls.n	800341a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	1d1a      	adds	r2, r3, #4
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	659a      	str	r2, [r3, #88]	; 0x58
 8003418:	e007      	b.n	800342a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	aaaaaaab 	.word	0xaaaaaaab
 8003440:	08009120 	.word	0x08009120

08003444 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11f      	bne.n	800349e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d855      	bhi.n	8003510 <DMA_CheckFifoParam+0xcc>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <DMA_CheckFifoParam+0x28>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	0800348f 	.word	0x0800348f
 8003474:	0800347d 	.word	0x0800347d
 8003478:	08003511 	.word	0x08003511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d045      	beq.n	8003514 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348c:	e042      	b.n	8003514 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003496:	d13f      	bne.n	8003518 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800349c:	e03c      	b.n	8003518 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a6:	d121      	bne.n	80034ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d836      	bhi.n	800351c <DMA_CheckFifoParam+0xd8>
 80034ae:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <DMA_CheckFifoParam+0x70>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	080034cb 	.word	0x080034cb
 80034bc:	080034c5 	.word	0x080034c5
 80034c0:	080034dd 	.word	0x080034dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      break;
 80034c8:	e02f      	b.n	800352a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d024      	beq.n	8003520 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034da:	e021      	b.n	8003520 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034e4:	d11e      	bne.n	8003524 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034ea:	e01b      	b.n	8003524 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <DMA_CheckFifoParam+0xb4>
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d003      	beq.n	80034fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034f6:	e018      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e015      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      break;
 800350e:	e00b      	b.n	8003528 <DMA_CheckFifoParam+0xe4>
      break;
 8003510:	bf00      	nop
 8003512:	e00a      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      break;
 8003514:	bf00      	nop
 8003516:	e008      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      break;
 8003518:	bf00      	nop
 800351a:	e006      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      break;
 800351c:	bf00      	nop
 800351e:	e004      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      break;
 8003520:	bf00      	nop
 8003522:	e002      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      break;   
 8003524:	bf00      	nop
 8003526:	e000      	b.n	800352a <DMA_CheckFifoParam+0xe6>
      break;
 8003528:	bf00      	nop
    }
  } 
  
  return status; 
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e159      	b.n	8003808 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003554:	2201      	movs	r2, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	f040 8148 	bne.w	8003802 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d00b      	beq.n	8003592 <HAL_GPIO_Init+0x5a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003586:	2b11      	cmp	r3, #17
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b12      	cmp	r3, #18
 8003590:	d130      	bne.n	80035f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2203      	movs	r2, #3
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 0201 	and.w	r2, r3, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0xfc>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b12      	cmp	r3, #18
 8003632:	d123      	bne.n	800367c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	220f      	movs	r2, #15
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	69b9      	ldr	r1, [r7, #24]
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a2 	beq.w	8003802 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a55      	ldr	r2, [pc, #340]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_GPIO_Init+0x2e4>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036da:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a48      	ldr	r2, [pc, #288]	; (8003824 <HAL_GPIO_Init+0x2ec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_GPIO_Init+0x202>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a47      	ldr	r2, [pc, #284]	; (8003828 <HAL_GPIO_Init+0x2f0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x1fe>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a46      	ldr	r2, [pc, #280]	; (800382c <HAL_GPIO_Init+0x2f4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a45      	ldr	r2, [pc, #276]	; (8003830 <HAL_GPIO_Init+0x2f8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x1f6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a44      	ldr	r2, [pc, #272]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x1f2>
 8003726:	2304      	movs	r3, #4
 8003728:	e008      	b.n	800373c <HAL_GPIO_Init+0x204>
 800372a:	2307      	movs	r3, #7
 800372c:	e006      	b.n	800373c <HAL_GPIO_Init+0x204>
 800372e:	2303      	movs	r3, #3
 8003730:	e004      	b.n	800373c <HAL_GPIO_Init+0x204>
 8003732:	2302      	movs	r3, #2
 8003734:	e002      	b.n	800373c <HAL_GPIO_Init+0x204>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_GPIO_Init+0x204>
 800373a:	2300      	movs	r3, #0
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f002 0203 	and.w	r2, r2, #3
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	4093      	lsls	r3, r2
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800374c:	4934      	ldr	r1, [pc, #208]	; (8003820 <HAL_GPIO_Init+0x2e8>)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	3302      	adds	r3, #2
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <HAL_GPIO_Init+0x300>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800377e:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a8:	4a23      	ldr	r2, [pc, #140]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d2:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d8:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_GPIO_Init+0x300>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	f67f aea2 	bls.w	8003554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003810:	bf00      	nop
 8003812:	3724      	adds	r7, #36	; 0x24
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40023800 	.word	0x40023800
 8003820:	40013800 	.word	0x40013800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000
 8003838:	40013c00 	.word	0x40013c00

0800383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
 8003848:	4613      	mov	r3, r2
 800384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800384c:	787b      	ldrb	r3, [r7, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003858:	e003      	b.n	8003862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	041a      	lsls	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	619a      	str	r2, [r3, #24]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	401a      	ands	r2, r3
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	429a      	cmp	r2, r3
 8003886:	d104      	bne.n	8003892 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	041a      	lsls	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003890:	e002      	b.n	8003898 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e11f      	b.n	8003af6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fbec 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003908:	f001 fbba 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a7b      	ldr	r2, [pc, #492]	; (8003b00 <HAL_I2C_Init+0x25c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d807      	bhi.n	8003928 <HAL_I2C_Init+0x84>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a7a      	ldr	r2, [pc, #488]	; (8003b04 <HAL_I2C_Init+0x260>)
 800391c:	4293      	cmp	r3, r2
 800391e:	bf94      	ite	ls
 8003920:	2301      	movls	r3, #1
 8003922:	2300      	movhi	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e006      	b.n	8003936 <HAL_I2C_Init+0x92>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a77      	ldr	r2, [pc, #476]	; (8003b08 <HAL_I2C_Init+0x264>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0db      	b.n	8003af6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a72      	ldr	r2, [pc, #456]	; (8003b0c <HAL_I2C_Init+0x268>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a64      	ldr	r2, [pc, #400]	; (8003b00 <HAL_I2C_Init+0x25c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d802      	bhi.n	8003978 <HAL_I2C_Init+0xd4>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3301      	adds	r3, #1
 8003976:	e009      	b.n	800398c <HAL_I2C_Init+0xe8>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	4a63      	ldr	r2, [pc, #396]	; (8003b10 <HAL_I2C_Init+0x26c>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	3301      	adds	r3, #1
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800399e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4956      	ldr	r1, [pc, #344]	; (8003b00 <HAL_I2C_Init+0x25c>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d80d      	bhi.n	80039c8 <HAL_I2C_Init+0x124>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e59      	subs	r1, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	bf38      	it	cc
 80039c4:	2304      	movcc	r3, #4
 80039c6:	e04f      	b.n	8003a68 <HAL_I2C_Init+0x1c4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d111      	bne.n	80039f4 <HAL_I2C_Init+0x150>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e012      	b.n	8003a1a <HAL_I2C_Init+0x176>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1e58      	subs	r0, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	0099      	lsls	r1, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Init+0x17e>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e022      	b.n	8003a68 <HAL_I2C_Init+0x1c4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10e      	bne.n	8003a48 <HAL_I2C_Init+0x1a4>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1e58      	subs	r0, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	440b      	add	r3, r1
 8003a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a46:	e00f      	b.n	8003a68 <HAL_I2C_Init+0x1c4>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1e58      	subs	r0, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	0099      	lsls	r1, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	6809      	ldr	r1, [r1, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6911      	ldr	r1, [r2, #16]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68d2      	ldr	r2, [r2, #12]
 8003aa2:	4311      	orrs	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	000186a0 	.word	0x000186a0
 8003b04:	001e847f 	.word	0x001e847f
 8003b08:	003d08ff 	.word	0x003d08ff
 8003b0c:	431bde83 	.word	0x431bde83
 8003b10:	10624dd3 	.word	0x10624dd3

08003b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2e:	f7ff f833 	bl	8002b98 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	f040 80d9 	bne.w	8003cf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2319      	movs	r3, #25
 8003b48:	2201      	movs	r2, #1
 8003b4a:	496d      	ldr	r1, [pc, #436]	; (8003d00 <HAL_I2C_Mem_Write+0x1ec>)
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fc7f 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Mem_Write+0x56>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0c5      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d007      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2221      	movs	r2, #33	; 0x21
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	; 0x40
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a4d      	ldr	r2, [pc, #308]	; (8003d04 <HAL_I2C_Mem_Write+0x1f0>)
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bd2:	88f8      	ldrh	r0, [r7, #6]
 8003bd4:	893a      	ldrh	r2, [r7, #8]
 8003bd6:	8979      	ldrh	r1, [r7, #10]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4603      	mov	r3, r0
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fab6 	bl	8004154 <I2C_RequestMemoryWrite>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d052      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e081      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fd00 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06b      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d11b      	bne.n	8003c94 <HAL_I2C_Mem_Write+0x180>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1aa      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fcec 	bl	800467e <I2C_WaitOnBTFFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d107      	bne.n	8003cc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e016      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	00100002 	.word	0x00100002
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	; 0x30
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d22:	f7fe ff39 	bl	8002b98 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	f040 8208 	bne.w	8004146 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2319      	movs	r3, #25
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	497b      	ldr	r1, [pc, #492]	; (8003f2c <HAL_I2C_Mem_Read+0x224>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fb85 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e1fb      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Mem_Read+0x56>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e1f4      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d007      	beq.n	8003d84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2222      	movs	r2, #34	; 0x22
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a5b      	ldr	r2, [pc, #364]	; (8003f30 <HAL_I2C_Mem_Read+0x228>)
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc6:	88f8      	ldrh	r0, [r7, #6]
 8003dc8:	893a      	ldrh	r2, [r7, #8]
 8003dca:	8979      	ldrh	r1, [r7, #10]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa52 	bl	8004280 <I2C_RequestMemoryRead>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e1b0      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d113      	bne.n	8003e16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e184      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d11b      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e164      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d11b      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	e144      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003eac:	e138      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	f200 80f1 	bhi.w	800409a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d123      	bne.n	8003f08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fc1b 	bl	8004700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e139      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f06:	e10b      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d14e      	bne.n	8003fae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2200      	movs	r2, #0
 8003f18:	4906      	ldr	r1, [pc, #24]	; (8003f34 <HAL_I2C_Mem_Read+0x22c>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa98 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e10e      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
 8003f2a:	bf00      	nop
 8003f2c:	00100002 	.word	0x00100002
 8003f30:	ffff0000 	.word	0xffff0000
 8003f34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fac:	e0b8      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4966      	ldr	r1, [pc, #408]	; (8004150 <HAL_I2C_Mem_Read+0x448>)
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fa49 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0bf      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2200      	movs	r2, #0
 8004012:	494f      	ldr	r1, [pc, #316]	; (8004150 <HAL_I2C_Mem_Read+0x448>)
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fa1b 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e091      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004098:	e042      	b.n	8004120 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fb2e 	bl	8004700 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e04c      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d118      	bne.n	8004120 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f aec2 	bne.w	8003eae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	00010004 	.word	0x00010004

08004154 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	817b      	strh	r3, [r7, #10]
 8004166:	460b      	mov	r3, r1
 8004168:	813b      	strh	r3, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	2200      	movs	r2, #0
 8004186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f960 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a4:	d103      	bne.n	80041ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e05f      	b.n	8004272 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b2:	897b      	ldrh	r3, [r7, #10]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	492d      	ldr	r1, [pc, #180]	; (800427c <I2C_RequestMemoryWrite+0x128>)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f998 	bl	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04c      	b.n	8004272 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fa02 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d107      	bne.n	8004216 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e02b      	b.n	8004272 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	e021      	b.n	8004270 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f9dc 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e005      	b.n	8004272 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004266:	893b      	ldrh	r3, [r7, #8]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	00010002 	.word	0x00010002

08004280 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	460b      	mov	r3, r1
 8004294:	813b      	strh	r3, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f8c2 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d103      	bne.n	80042ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e0aa      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ee:	897b      	ldrh	r3, [r7, #10]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	6a3a      	ldr	r2, [r7, #32]
 8004302:	4952      	ldr	r1, [pc, #328]	; (800444c <I2C_RequestMemoryRead+0x1cc>)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f8fa 	bl	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e097      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f964 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e076      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d105      	bne.n	8004368 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800435c:	893b      	ldrh	r3, [r7, #8]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	611a      	str	r2, [r3, #16]
 8004366:	e021      	b.n	80043ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004368:	893b      	ldrh	r3, [r7, #8]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	b29b      	uxth	r3, r3
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f93e 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e050      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a2:	893b      	ldrh	r3, [r7, #8]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	6a39      	ldr	r1, [r7, #32]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f923 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d107      	bne.n	80043d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e035      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f82b 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440e:	d103      	bne.n	8004418 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e013      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800441c:	897b      	ldrh	r3, [r7, #10]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	4906      	ldr	r1, [pc, #24]	; (800444c <I2C_RequestMemoryRead+0x1cc>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f863 	bl	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	00010002 	.word	0x00010002

08004450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004460:	e025      	b.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004468:	d021      	beq.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fe fb95 	bl	8002b98 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d116      	bne.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e023      	b.n	80044f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d10d      	bne.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	43da      	mvns	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4013      	ands	r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf0c      	ite	eq
 80044ca:	2301      	moveq	r3, #1
 80044cc:	2300      	movne	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	e00c      	b.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4013      	ands	r3, r2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d0b6      	beq.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800450c:	e051      	b.n	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d123      	bne.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004536:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e046      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456c:	d021      	beq.n	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fe fb13 	bl	8002b98 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e020      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10c      	bne.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	43da      	mvns	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf14      	ite	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	2300      	moveq	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e00b      	b.n	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	43da      	mvns	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d18d      	bne.n	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004608:	e02d      	b.n	8004666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f8ce 	bl	80047ac <I2C_IsAcknowledgeFailed>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e02d      	b.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004620:	d021      	beq.n	8004666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fe fab9 	bl	8002b98 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d116      	bne.n	8004666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e007      	b.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d1ca      	bne.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800468a:	e02d      	b.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f88d 	bl	80047ac <I2C_IsAcknowledgeFailed>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e02d      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a2:	d021      	beq.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fe fa78 	bl	8002b98 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e007      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d1ca      	bne.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800470c:	e042      	b.n	8004794 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b10      	cmp	r3, #16
 800471a:	d119      	bne.n	8004750 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0210 	mvn.w	r2, #16
 8004724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e029      	b.n	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004750:	f7fe fa22 	bl	8002b98 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e007      	b.n	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d1b5      	bne.n	800470e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d11b      	bne.n	80047fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f043 0204 	orr.w	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e25b      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d075      	beq.n	8004916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800482a:	4ba3      	ldr	r3, [pc, #652]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b04      	cmp	r3, #4
 8004834:	d00c      	beq.n	8004850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004836:	4ba0      	ldr	r3, [pc, #640]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483e:	2b08      	cmp	r3, #8
 8004840:	d112      	bne.n	8004868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004842:	4b9d      	ldr	r3, [pc, #628]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484e:	d10b      	bne.n	8004868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	4b99      	ldr	r3, [pc, #612]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05b      	beq.n	8004914 <HAL_RCC_OscConfig+0x108>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d157      	bne.n	8004914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e236      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004870:	d106      	bne.n	8004880 <HAL_RCC_OscConfig+0x74>
 8004872:	4b91      	ldr	r3, [pc, #580]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a90      	ldr	r2, [pc, #576]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xb0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x98>
 800488a:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a8a      	ldr	r2, [pc, #552]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b88      	ldr	r3, [pc, #544]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a87      	ldr	r2, [pc, #540]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xb0>
 80048a4:	4b84      	ldr	r3, [pc, #528]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a83      	ldr	r2, [pc, #524]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b81      	ldr	r3, [pc, #516]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a80      	ldr	r2, [pc, #512]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fe f968 	bl	8002b98 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fe f964 	bl	8002b98 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1fb      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xc0>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fe f954 	bl	8002b98 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fe f950 	bl	8002b98 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1e7      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b6c      	ldr	r3, [pc, #432]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0xe8>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492e:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	4b5c      	ldr	r3, [pc, #368]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x152>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1bb      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4952      	ldr	r1, [pc, #328]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	e03a      	b.n	80049ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800497c:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <HAL_RCC_OscConfig+0x2b0>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004982:	f7fe f909 	bl	8002b98 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800498a:	f7fe f905 	bl	8002b98 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e19c      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a8:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4940      	ldr	r1, [pc, #256]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <HAL_RCC_OscConfig+0x2b0>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fe f8e8 	bl	8002b98 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fe f8e4 	bl	8002b98 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e17b      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d030      	beq.n	8004a58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fe:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <HAL_RCC_OscConfig+0x2b4>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fe f8c8 	bl	8002b98 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fe f8c4 	bl	8002b98 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e15b      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x200>
 8004a2a:	e015      	b.n	8004a58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_RCC_OscConfig+0x2b4>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fe f8b1 	bl	8002b98 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3a:	f7fe f8ad 	bl	8002b98 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e144      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a0 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a0e      	ldr	r2, [pc, #56]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCC_OscConfig+0x2b8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d121      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <HAL_RCC_OscConfig+0x2b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a07      	ldr	r2, [pc, #28]	; (8004ac4 <HAL_RCC_OscConfig+0x2b8>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aae:	f7fe f873 	bl	8002b98 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab4:	e011      	b.n	8004ada <HAL_RCC_OscConfig+0x2ce>
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	42470000 	.word	0x42470000
 8004ac0:	42470e80 	.word	0x42470e80
 8004ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac8:	f7fe f866 	bl	8002b98 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0fd      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	4b81      	ldr	r3, [pc, #516]	; (8004ce0 <HAL_RCC_OscConfig+0x4d4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d106      	bne.n	8004afc <HAL_RCC_OscConfig+0x2f0>
 8004aee:	4b7d      	ldr	r3, [pc, #500]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	4a7c      	ldr	r2, [pc, #496]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6713      	str	r3, [r2, #112]	; 0x70
 8004afa:	e01c      	b.n	8004b36 <HAL_RCC_OscConfig+0x32a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b05      	cmp	r3, #5
 8004b02:	d10c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x312>
 8004b04:	4b77      	ldr	r3, [pc, #476]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	4a76      	ldr	r2, [pc, #472]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b0a:	f043 0304 	orr.w	r3, r3, #4
 8004b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b10:	4b74      	ldr	r3, [pc, #464]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	4a73      	ldr	r2, [pc, #460]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1c:	e00b      	b.n	8004b36 <HAL_RCC_OscConfig+0x32a>
 8004b1e:	4b71      	ldr	r3, [pc, #452]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a70      	ldr	r2, [pc, #448]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	4b6e      	ldr	r3, [pc, #440]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4a6d      	ldr	r2, [pc, #436]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b30:	f023 0304 	bic.w	r3, r3, #4
 8004b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d015      	beq.n	8004b6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fe f82b 	bl	8002b98 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe f827 	bl	8002b98 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0bc      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	4b61      	ldr	r3, [pc, #388]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ee      	beq.n	8004b46 <HAL_RCC_OscConfig+0x33a>
 8004b68:	e014      	b.n	8004b94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe f815 	bl	8002b98 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fe f811 	bl	8002b98 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e0a6      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b88:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ee      	bne.n	8004b72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d105      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9a:	4b52      	ldr	r3, [pc, #328]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a51      	ldr	r2, [pc, #324]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8092 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d05c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d141      	bne.n	8004c48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCC_OscConfig+0x4dc>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fd ffe5 	bl	8002b98 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fd ffe1 	bl	8002b98 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e078      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be4:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	019b      	lsls	r3, r3, #6
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	4933      	ldr	r1, [pc, #204]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_RCC_OscConfig+0x4dc>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd ffba 	bl	8002b98 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fd ffb6 	bl	8002b98 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e04d      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x41c>
 8004c46:	e045      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <HAL_RCC_OscConfig+0x4dc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fd ffa3 	bl	8002b98 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c56:	f7fd ff9f 	bl	8002b98 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e036      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x44a>
 8004c74:	e02e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e029      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_RCC_OscConfig+0x4d8>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d11c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d115      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	42470060 	.word	0x42470060

08004cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0cc      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b68      	ldr	r3, [pc, #416]	; (8004ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d90c      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b65      	ldr	r3, [pc, #404]	; (8004ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b63      	ldr	r3, [pc, #396]	; (8004ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0b8      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d020      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d40:	4b59      	ldr	r3, [pc, #356]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d58:	4b53      	ldr	r3, [pc, #332]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4a52      	ldr	r2, [pc, #328]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	494d      	ldr	r1, [pc, #308]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d044      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d107      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8a:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d119      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e07f      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d003      	beq.n	8004daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004daa:	4b3f      	ldr	r3, [pc, #252]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e06f      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e067      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dca:	4b37      	ldr	r3, [pc, #220]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4934      	ldr	r1, [pc, #208]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ddc:	f7fd fedc 	bl	8002b98 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de4:	f7fd fed8 	bl	8002b98 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e04f      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 020c 	and.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1eb      	bne.n	8004de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d20c      	bcs.n	8004e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e032      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4916      	ldr	r1, [pc, #88]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	490e      	ldr	r1, [pc, #56]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e72:	f000 f821 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8004e76:	4601      	mov	r1, r0
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e84:	5cd3      	ldrb	r3, [r2, r3]
 8004e86:	fa21 f303 	lsr.w	r3, r1, r3
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e8e:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fe3c 	bl	8002b10 <HAL_InitTick>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40023c00 	.word	0x40023c00
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	08009108 	.word	0x08009108
 8004eb0:	20000018 	.word	0x20000018
 8004eb4:	20000028 	.word	0x20000028

08004eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d007      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x32>
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d008      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x38>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f040 80b4 	bne.w	800504c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee4:	4b5e      	ldr	r3, [pc, #376]	; (8005060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ee6:	60bb      	str	r3, [r7, #8]
       break;
 8004ee8:	e0b3      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eea:	4b5e      	ldr	r3, [pc, #376]	; (8005064 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004eec:	60bb      	str	r3, [r7, #8]
      break;
 8004eee:	e0b0      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ef0:	4b5a      	ldr	r3, [pc, #360]	; (800505c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004efa:	4b58      	ldr	r3, [pc, #352]	; (800505c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d04a      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b55      	ldr	r3, [pc, #340]	; (800505c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	f04f 0400 	mov.w	r4, #0
 8004f10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	ea03 0501 	and.w	r5, r3, r1
 8004f1c:	ea04 0602 	and.w	r6, r4, r2
 8004f20:	4629      	mov	r1, r5
 8004f22:	4632      	mov	r2, r6
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	f04f 0400 	mov.w	r4, #0
 8004f2c:	0154      	lsls	r4, r2, #5
 8004f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f32:	014b      	lsls	r3, r1, #5
 8004f34:	4619      	mov	r1, r3
 8004f36:	4622      	mov	r2, r4
 8004f38:	1b49      	subs	r1, r1, r5
 8004f3a:	eb62 0206 	sbc.w	r2, r2, r6
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	f04f 0400 	mov.w	r4, #0
 8004f46:	0194      	lsls	r4, r2, #6
 8004f48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f4c:	018b      	lsls	r3, r1, #6
 8004f4e:	1a5b      	subs	r3, r3, r1
 8004f50:	eb64 0402 	sbc.w	r4, r4, r2
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	00e2      	lsls	r2, r4, #3
 8004f5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f62:	00d9      	lsls	r1, r3, #3
 8004f64:	460b      	mov	r3, r1
 8004f66:	4614      	mov	r4, r2
 8004f68:	195b      	adds	r3, r3, r5
 8004f6a:	eb44 0406 	adc.w	r4, r4, r6
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	0262      	lsls	r2, r4, #9
 8004f78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f7c:	0259      	lsls	r1, r3, #9
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	4621      	mov	r1, r4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f04f 0400 	mov.w	r4, #0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	f7fb fe0e 	bl	8000bb0 <__aeabi_uldivmod>
 8004f94:	4603      	mov	r3, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e049      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	; (800505c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	099b      	lsrs	r3, r3, #6
 8004fa2:	f04f 0400 	mov.w	r4, #0
 8004fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	ea03 0501 	and.w	r5, r3, r1
 8004fb2:	ea04 0602 	and.w	r6, r4, r2
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4632      	mov	r2, r6
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	f04f 0400 	mov.w	r4, #0
 8004fc2:	0154      	lsls	r4, r2, #5
 8004fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fc8:	014b      	lsls	r3, r1, #5
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4622      	mov	r2, r4
 8004fce:	1b49      	subs	r1, r1, r5
 8004fd0:	eb62 0206 	sbc.w	r2, r2, r6
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	f04f 0400 	mov.w	r4, #0
 8004fdc:	0194      	lsls	r4, r2, #6
 8004fde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fe2:	018b      	lsls	r3, r1, #6
 8004fe4:	1a5b      	subs	r3, r3, r1
 8004fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	00e2      	lsls	r2, r4, #3
 8004ff4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ff8:	00d9      	lsls	r1, r3, #3
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	195b      	adds	r3, r3, r5
 8005000:	eb44 0406 	adc.w	r4, r4, r6
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	02a2      	lsls	r2, r4, #10
 800500e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005012:	0299      	lsls	r1, r3, #10
 8005014:	460b      	mov	r3, r1
 8005016:	4614      	mov	r4, r2
 8005018:	4618      	mov	r0, r3
 800501a:	4621      	mov	r1, r4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f04f 0400 	mov.w	r4, #0
 8005022:	461a      	mov	r2, r3
 8005024:	4623      	mov	r3, r4
 8005026:	f7fb fdc3 	bl	8000bb0 <__aeabi_uldivmod>
 800502a:	4603      	mov	r3, r0
 800502c:	460c      	mov	r4, r1
 800502e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	3301      	adds	r3, #1
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	60bb      	str	r3, [r7, #8]
      break;
 800504a:	e002      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800504e:	60bb      	str	r3, [r7, #8]
      break;
 8005050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005052:	68bb      	ldr	r3, [r7, #8]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200

08005068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000018 	.word	0x20000018

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4601      	mov	r1, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4a03      	ldr	r2, [pc, #12]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	08009118 	.word	0x08009118

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff ffdc 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 80050b0:	4601      	mov	r1, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4a03      	ldr	r2, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	08009118 	.word	0x08009118

080050d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e01d      	b.n	800511e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fc64 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 fc0c 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b06      	cmp	r3, #6
 800514e:	d007      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e01d      	b.n	80051bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f815 	bl	80051c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f000 fbbd 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fe44 	bl	8005e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a10      	ldr	r2, [pc, #64]	; (8005238 <HAL_TIM_PWM_Start+0x60>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d107      	bne.n	800520a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b06      	cmp	r3, #6
 800521a:	d007      	beq.n	800522c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000

0800523c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e083      	b.n	8005358 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fc fc11 	bl	8001a8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f000 fb4b 	bl	800592c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	4313      	orrs	r3, r2
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052dc:	f023 030c 	bic.w	r3, r3, #12
 80052e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	4313      	orrs	r3, r2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	011a      	lsls	r2, r3, #4
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	031b      	lsls	r3, r3, #12
 800530c:	4313      	orrs	r3, r2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	4313      	orrs	r3, r2
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_TIM_Encoder_Start+0x16>
 8005370:	2b04      	cmp	r3, #4
 8005372:	d008      	beq.n	8005386 <HAL_TIM_Encoder_Start+0x26>
 8005374:	e00f      	b.n	8005396 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fd7a 	bl	8005e78 <TIM_CCxChannelCmd>
      break;
 8005384:	e016      	b.n	80053b4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	2104      	movs	r1, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fd72 	bl	8005e78 <TIM_CCxChannelCmd>
      break;
 8005394:	e00e      	b.n	80053b4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fd6a 	bl	8005e78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	2104      	movs	r1, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fd63 	bl	8005e78 <TIM_CCxChannelCmd>
      break;
 80053b2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d122      	bne.n	800542a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d11b      	bne.n	800542a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0202 	mvn.w	r2, #2
 80053fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa6c 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005416:	e005      	b.n	8005424 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa5e 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa6f 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d122      	bne.n	800547e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d11b      	bne.n	800547e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0204 	mvn.w	r2, #4
 800544e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fa42 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 800546a:	e005      	b.n	8005478 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa34 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa45 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b08      	cmp	r3, #8
 800548a:	d122      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d11b      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0208 	mvn.w	r2, #8
 80054a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2204      	movs	r2, #4
 80054a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fa18 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80054be:	e005      	b.n	80054cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa0a 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa1b 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d122      	bne.n	8005526 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d11b      	bne.n	8005526 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f06f 0210 	mvn.w	r2, #16
 80054f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2208      	movs	r2, #8
 80054fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9ee 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005512:	e005      	b.n	8005520 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9e0 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9f1 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10e      	bne.n	8005552 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f06f 0201 	mvn.w	r2, #1
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fb fed5 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555c:	2b80      	cmp	r3, #128	; 0x80
 800555e:	d10e      	bne.n	800557e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fd6d 	bl	8006058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b40      	cmp	r3, #64	; 0x40
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9b6 	bl	8005916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d10e      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0220 	mvn.w	r2, #32
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fd37 	bl	8006044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0b4      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x184>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b0c      	cmp	r3, #12
 800560e:	f200 809f 	bhi.w	8005750 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800564d 	.word	0x0800564d
 800561c:	08005751 	.word	0x08005751
 8005620:	08005751 	.word	0x08005751
 8005624:	08005751 	.word	0x08005751
 8005628:	0800568d 	.word	0x0800568d
 800562c:	08005751 	.word	0x08005751
 8005630:	08005751 	.word	0x08005751
 8005634:	08005751 	.word	0x08005751
 8005638:	080056cf 	.word	0x080056cf
 800563c:	08005751 	.word	0x08005751
 8005640:	08005751 	.word	0x08005751
 8005644:	08005751 	.word	0x08005751
 8005648:	0800570f 	.word	0x0800570f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f9ea 	bl	8005a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0208 	orr.w	r2, r2, #8
 8005666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0204 	bic.w	r2, r2, #4
 8005676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	619a      	str	r2, [r3, #24]
      break;
 800568a:	e062      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fa30 	bl	8005af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	021a      	lsls	r2, r3, #8
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	619a      	str	r2, [r3, #24]
      break;
 80056cc:	e041      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fa7b 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0208 	orr.w	r2, r2, #8
 80056e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0204 	bic.w	r2, r2, #4
 80056f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69d9      	ldr	r1, [r3, #28]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	61da      	str	r2, [r3, #28]
      break;
 800570c:	e021      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fac5 	bl	8005ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69d9      	ldr	r1, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	021a      	lsls	r2, r3, #8
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	61da      	str	r2, [r3, #28]
      break;
 800574e:	e000      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005750:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIM_ConfigClockSource+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e0a6      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x166>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d067      	beq.n	800588c <HAL_TIM_ConfigClockSource+0x120>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d80b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x6c>
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d073      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x140>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d802      	bhi.n	80057ce <HAL_TIM_ConfigClockSource+0x62>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d06f      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057cc:	e078      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d06c      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x140>
 80057d2:	2b30      	cmp	r3, #48	; 0x30
 80057d4:	d06a      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057d6:	e073      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057d8:	2b70      	cmp	r3, #112	; 0x70
 80057da:	d00d      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x8c>
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d804      	bhi.n	80057ea <HAL_TIM_ConfigClockSource+0x7e>
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d033      	beq.n	800584c <HAL_TIM_ConfigClockSource+0xe0>
 80057e4:	2b60      	cmp	r3, #96	; 0x60
 80057e6:	d041      	beq.n	800586c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80057e8:	e06a      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d066      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x152>
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d017      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057f6:	e063      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 fb16 	bl	8005e38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800581a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]
      break;
 8005824:	e04c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6899      	ldr	r1, [r3, #8]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f000 faff 	bl	8005e38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005848:	609a      	str	r2, [r3, #8]
      break;
 800584a:	e039      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	461a      	mov	r2, r3
 800585a:	f000 fa73 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2150      	movs	r1, #80	; 0x50
 8005864:	4618      	mov	r0, r3
 8005866:	f000 facc 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 800586a:	e029      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	461a      	mov	r2, r3
 800587a:	f000 fa92 	bl	8005da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2160      	movs	r1, #96	; 0x60
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fabc 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 800588a:	e019      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6859      	ldr	r1, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	461a      	mov	r2, r3
 800589a:	f000 fa53 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2140      	movs	r1, #64	; 0x40
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 faac 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 80058aa:	e009      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 faa3 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a34      	ldr	r2, [pc, #208]	; (8005a10 <TIM_Base_SetConfig+0xe4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0x38>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0x38>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a31      	ldr	r2, [pc, #196]	; (8005a14 <TIM_Base_SetConfig+0xe8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0x38>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a30      	ldr	r2, [pc, #192]	; (8005a18 <TIM_Base_SetConfig+0xec>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0x38>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <TIM_Base_SetConfig+0xf0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d108      	bne.n	8005976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a25      	ldr	r2, [pc, #148]	; (8005a10 <TIM_Base_SetConfig+0xe4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01b      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d017      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <TIM_Base_SetConfig+0xe8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <TIM_Base_SetConfig+0xec>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00f      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a20      	ldr	r2, [pc, #128]	; (8005a1c <TIM_Base_SetConfig+0xf0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00b      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <TIM_Base_SetConfig+0xf4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <TIM_Base_SetConfig+0xf8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <TIM_Base_SetConfig+0xfc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d108      	bne.n	80059c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <TIM_Base_SetConfig+0xe4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	615a      	str	r2, [r3, #20]
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f023 0201 	bic.w	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 0302 	bic.w	r3, r3, #2
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <TIM_OC1_SetConfig+0xc8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10c      	bne.n	8005aa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <TIM_OC1_SetConfig+0xc8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40010000 	.word	0x40010000

08005af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0210 	bic.w	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0320 	bic.w	r3, r3, #32
 8005b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	; (8005bcc <TIM_OC2_SetConfig+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10d      	bne.n	8005b74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <TIM_OC2_SetConfig+0xd4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d113      	bne.n	8005ba4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <TIM_OC3_SetConfig+0xd0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10d      	bne.n	8005c4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <TIM_OC3_SetConfig+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d113      	bne.n	8005c7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40010000 	.word	0x40010000

08005ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	031b      	lsls	r3, r3, #12
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <TIM_OC4_SetConfig+0x9c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f023 0201 	bic.w	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 030a 	bic.w	r3, r3, #10
 8005d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0210 	bic.w	r2, r3, #16
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f043 0307 	orr.w	r3, r3, #7
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	021a      	lsls	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e050      	b.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f28:	d013      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a13      	ldr	r2, [pc, #76]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d10c      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40014000 	.word	0x40014000

08005fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e03d      	b.n	8006038 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e03f      	b.n	80060fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fb fdf8 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	; 0x24
 800609c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fc95 	bl	80069e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b088      	sub	sp, #32
 800610a:	af02      	add	r7, sp, #8
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b20      	cmp	r3, #32
 8006124:	f040 8083 	bne.w	800622e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Transmit+0x2e>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e07b      	b.n	8006230 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UART_Transmit+0x40>
 8006142:	2302      	movs	r3, #2
 8006144:	e074      	b.n	8006230 <HAL_UART_Transmit+0x12a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2221      	movs	r2, #33	; 0x21
 8006158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800615c:	f7fc fd1c 	bl	8002b98 <HAL_GetTick>
 8006160:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	88fa      	ldrh	r2, [r7, #6]
 800616c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006176:	e042      	b.n	80061fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618e:	d122      	bne.n	80061d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2200      	movs	r2, #0
 8006198:	2180      	movs	r1, #128	; 0x80
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fa9e 	bl	80066dc <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e042      	b.n	8006230 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	3302      	adds	r3, #2
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	e017      	b.n	80061fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	e013      	b.n	80061fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fa7b 	bl	80066dc <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e01f      	b.n	8006230 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	60ba      	str	r2, [r7, #8]
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1b7      	bne.n	8006178 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa62 	bl	80066dc <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e000      	b.n	8006230 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
  }
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b20      	cmp	r3, #32
 8006250:	d166      	bne.n	8006320 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_UART_Receive_DMA+0x26>
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e05f      	b.n	8006322 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UART_Receive_DMA+0x38>
 800626c:	2302      	movs	r3, #2
 800626e:	e058      	b.n	8006322 <HAL_UART_Receive_DMA+0xea>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2222      	movs	r2, #34	; 0x22
 800628e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	4a25      	ldr	r2, [pc, #148]	; (800632c <HAL_UART_Receive_DMA+0xf4>)
 8006298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <HAL_UART_Receive_DMA+0xf8>)
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	4a23      	ldr	r2, [pc, #140]	; (8006334 <HAL_UART_Receive_DMA+0xfc>)
 80062a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	2200      	movs	r2, #0
 80062b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	f7fc fe53 	bl	8002f74 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695a      	ldr	r2, [r3, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	080065c5 	.word	0x080065c5
 8006330:	0800662d 	.word	0x0800662d
 8006334:	08006649 	.word	0x08006649

08006338 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_UART_IRQHandler+0x52>
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 faaa 	bl	80068dc <UART_Receive_IT>
      return;
 8006388:	e0d1      	b.n	800652e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80b0 	beq.w	80064f2 <HAL_UART_IRQHandler+0x1ba>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_UART_IRQHandler+0x70>
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80a5 	beq.w	80064f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_UART_IRQHandler+0x90>
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_UART_IRQHandler+0xb0>
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e0:	f043 0202 	orr.w	r2, r3, #2
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_UART_IRQHandler+0xd0>
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00f      	beq.n	8006432 <HAL_UART_IRQHandler+0xfa>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_UART_IRQHandler+0xee>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642a:	f043 0208 	orr.w	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d078      	beq.n	800652c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <HAL_UART_IRQHandler+0x11c>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa44 	bl	80068dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <HAL_UART_IRQHandler+0x144>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d031      	beq.n	80064e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f98d 	bl	800679c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d123      	bne.n	80064d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d013      	beq.n	80064d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	4a21      	ldr	r2, [pc, #132]	; (8006534 <HAL_UART_IRQHandler+0x1fc>)
 80064ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fc fdb5 	bl	8003024 <HAL_DMA_Abort_IT>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d016      	beq.n	80064ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064ca:	4610      	mov	r0, r2
 80064cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ce:	e00e      	b.n	80064ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f84f 	bl	8006574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d6:	e00a      	b.n	80064ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f84b 	bl	8006574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064de:	e006      	b.n	80064ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f847 	bl	8006574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80064ec:	e01e      	b.n	800652c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ee:	bf00      	nop
    return;
 80064f0:	e01c      	b.n	800652c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <HAL_UART_IRQHandler+0x1d6>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f97a 	bl	8006800 <UART_Transmit_IT>
    return;
 800650c:	e00f      	b.n	800652e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <HAL_UART_IRQHandler+0x1f6>
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9c2 	bl	80068ac <UART_EndTransmit_IT>
    return;
 8006528:	bf00      	nop
 800652a:	e000      	b.n	800652e <HAL_UART_IRQHandler+0x1f6>
    return;
 800652c:	bf00      	nop
  }
}
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	080067d9 	.word	0x080067d9

08006538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	2300      	movs	r3, #0
 8006596:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b2db      	uxtb	r3, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11e      	bne.n	800661e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065f4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695a      	ldr	r2, [r3, #20]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006614:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff ff94 	bl	800654c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff ff90 	bl	8006560 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b21      	cmp	r3, #33	; 0x21
 800667a:	d108      	bne.n	800668e <UART_DMAError+0x46>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006688:	68b8      	ldr	r0, [r7, #8]
 800668a:	f000 f871 	bl	8006770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b22      	cmp	r3, #34	; 0x22
 80066ae:	d108      	bne.n	80066c2 <UART_DMAError+0x7a>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f000 f86d 	bl	800679c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	f043 0210 	orr.w	r2, r3, #16
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ce:	68b8      	ldr	r0, [r7, #8]
 80066d0:	f7ff ff50 	bl	8006574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ec:	e02c      	b.n	8006748 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f4:	d028      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <UART_WaitOnFlagUntilTimeout+0x30>
 80066fc:	f7fc fa4c 	bl	8002b98 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	429a      	cmp	r2, r3
 800670a:	d21d      	bcs.n	8006748 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800671a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e00f      	b.n	8006768 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4013      	ands	r3, r2
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	bf0c      	ite	eq
 8006758:	2301      	moveq	r3, #1
 800675a:	2300      	movne	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	429a      	cmp	r2, r3
 8006764:	d0c3      	beq.n	80066ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006786:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff febe 	bl	8006574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b21      	cmp	r3, #33	; 0x21
 8006812:	d144      	bne.n	800689e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d11a      	bne.n	8006854 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006832:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]
 8006846:	e00e      	b.n	8006866 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]
 8006852:	e008      	b.n	8006866 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6211      	str	r1, [r2, #32]
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4619      	mov	r1, r3
 8006874:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10f      	bne.n	800689a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006888:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006898:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fe33 	bl	8006538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b22      	cmp	r3, #34	; 0x22
 80068ee:	d171      	bne.n	80069d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f8:	d123      	bne.n	8006942 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10e      	bne.n	8006926 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	1c9a      	adds	r2, r3, #2
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	; 0x28
 8006924:	e029      	b.n	800697a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	b29b      	uxth	r3, r3
 800692e:	b2db      	uxtb	r3, r3
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	629a      	str	r2, [r3, #40]	; 0x28
 8006940:	e01b      	b.n	800697a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6858      	ldr	r0, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6291      	str	r1, [r2, #40]	; 0x28
 800695a:	b2c2      	uxtb	r2, r0
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e00c      	b.n	800697a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	1c58      	adds	r0, r3, #1
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	6288      	str	r0, [r1, #40]	; 0x28
 8006972:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29b      	uxth	r3, r3
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4619      	mov	r1, r3
 8006988:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800698a:	2b00      	cmp	r3, #0
 800698c:	d120      	bne.n	80069d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0220 	bic.w	r2, r2, #32
 800699c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0201 	bic.w	r2, r2, #1
 80069bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fdc0 	bl	800654c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e002      	b.n	80069d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a22:	f023 030c 	bic.w	r3, r3, #12
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4e:	f040 818b 	bne.w	8006d68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4ac1      	ldr	r2, [pc, #772]	; (8006d5c <UART_SetConfig+0x37c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d005      	beq.n	8006a68 <UART_SetConfig+0x88>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4abf      	ldr	r2, [pc, #764]	; (8006d60 <UART_SetConfig+0x380>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	f040 80bd 	bne.w	8006be2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a68:	f7fe fb1e 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8006a6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	461d      	mov	r5, r3
 8006a72:	f04f 0600 	mov.w	r6, #0
 8006a76:	46a8      	mov	r8, r5
 8006a78:	46b1      	mov	r9, r6
 8006a7a:	eb18 0308 	adds.w	r3, r8, r8
 8006a7e:	eb49 0409 	adc.w	r4, r9, r9
 8006a82:	4698      	mov	r8, r3
 8006a84:	46a1      	mov	r9, r4
 8006a86:	eb18 0805 	adds.w	r8, r8, r5
 8006a8a:	eb49 0906 	adc.w	r9, r9, r6
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006aa2:	4688      	mov	r8, r1
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	eb18 0005 	adds.w	r0, r8, r5
 8006aaa:	eb49 0106 	adc.w	r1, r9, r6
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	f04f 0600 	mov.w	r6, #0
 8006ab8:	196b      	adds	r3, r5, r5
 8006aba:	eb46 0406 	adc.w	r4, r6, r6
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	f7fa f875 	bl	8000bb0 <__aeabi_uldivmod>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	461a      	mov	r2, r3
 8006acc:	4ba5      	ldr	r3, [pc, #660]	; (8006d64 <UART_SetConfig+0x384>)
 8006ace:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	461d      	mov	r5, r3
 8006adc:	f04f 0600 	mov.w	r6, #0
 8006ae0:	46a9      	mov	r9, r5
 8006ae2:	46b2      	mov	sl, r6
 8006ae4:	eb19 0309 	adds.w	r3, r9, r9
 8006ae8:	eb4a 040a 	adc.w	r4, sl, sl
 8006aec:	4699      	mov	r9, r3
 8006aee:	46a2      	mov	sl, r4
 8006af0:	eb19 0905 	adds.w	r9, r9, r5
 8006af4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006af8:	f04f 0100 	mov.w	r1, #0
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	4692      	mov	sl, r2
 8006b10:	eb19 0005 	adds.w	r0, r9, r5
 8006b14:	eb4a 0106 	adc.w	r1, sl, r6
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	f04f 0600 	mov.w	r6, #0
 8006b22:	196b      	adds	r3, r5, r5
 8006b24:	eb46 0406 	adc.w	r4, r6, r6
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	f7fa f840 	bl	8000bb0 <__aeabi_uldivmod>
 8006b30:	4603      	mov	r3, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b8b      	ldr	r3, [pc, #556]	; (8006d64 <UART_SetConfig+0x384>)
 8006b38:	fba3 1302 	umull	r1, r3, r3, r2
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	2164      	movs	r1, #100	; 0x64
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	3332      	adds	r3, #50	; 0x32
 8006b4a:	4a86      	ldr	r2, [pc, #536]	; (8006d64 <UART_SetConfig+0x384>)
 8006b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b58:	4498      	add	r8, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	f04f 0600 	mov.w	r6, #0
 8006b62:	46a9      	mov	r9, r5
 8006b64:	46b2      	mov	sl, r6
 8006b66:	eb19 0309 	adds.w	r3, r9, r9
 8006b6a:	eb4a 040a 	adc.w	r4, sl, sl
 8006b6e:	4699      	mov	r9, r3
 8006b70:	46a2      	mov	sl, r4
 8006b72:	eb19 0905 	adds.w	r9, r9, r5
 8006b76:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b8e:	4689      	mov	r9, r1
 8006b90:	4692      	mov	sl, r2
 8006b92:	eb19 0005 	adds.w	r0, r9, r5
 8006b96:	eb4a 0106 	adc.w	r1, sl, r6
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	f04f 0600 	mov.w	r6, #0
 8006ba4:	196b      	adds	r3, r5, r5
 8006ba6:	eb46 0406 	adc.w	r4, r6, r6
 8006baa:	461a      	mov	r2, r3
 8006bac:	4623      	mov	r3, r4
 8006bae:	f7f9 ffff 	bl	8000bb0 <__aeabi_uldivmod>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4b6a      	ldr	r3, [pc, #424]	; (8006d64 <UART_SetConfig+0x384>)
 8006bba:	fba3 1302 	umull	r1, r3, r3, r2
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	2164      	movs	r1, #100	; 0x64
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	3332      	adds	r3, #50	; 0x32
 8006bcc:	4a65      	ldr	r2, [pc, #404]	; (8006d64 <UART_SetConfig+0x384>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	f003 0207 	and.w	r2, r3, #7
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4442      	add	r2, r8
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	e26f      	b.n	80070c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fe fa4d 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8006be6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	461d      	mov	r5, r3
 8006bec:	f04f 0600 	mov.w	r6, #0
 8006bf0:	46a8      	mov	r8, r5
 8006bf2:	46b1      	mov	r9, r6
 8006bf4:	eb18 0308 	adds.w	r3, r8, r8
 8006bf8:	eb49 0409 	adc.w	r4, r9, r9
 8006bfc:	4698      	mov	r8, r3
 8006bfe:	46a1      	mov	r9, r4
 8006c00:	eb18 0805 	adds.w	r8, r8, r5
 8006c04:	eb49 0906 	adc.w	r9, r9, r6
 8006c08:	f04f 0100 	mov.w	r1, #0
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c1c:	4688      	mov	r8, r1
 8006c1e:	4691      	mov	r9, r2
 8006c20:	eb18 0005 	adds.w	r0, r8, r5
 8006c24:	eb49 0106 	adc.w	r1, r9, r6
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	461d      	mov	r5, r3
 8006c2e:	f04f 0600 	mov.w	r6, #0
 8006c32:	196b      	adds	r3, r5, r5
 8006c34:	eb46 0406 	adc.w	r4, r6, r6
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	f7f9 ffb8 	bl	8000bb0 <__aeabi_uldivmod>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	461a      	mov	r2, r3
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <UART_SetConfig+0x384>)
 8006c48:	fba3 2302 	umull	r2, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	461d      	mov	r5, r3
 8006c56:	f04f 0600 	mov.w	r6, #0
 8006c5a:	46a9      	mov	r9, r5
 8006c5c:	46b2      	mov	sl, r6
 8006c5e:	eb19 0309 	adds.w	r3, r9, r9
 8006c62:	eb4a 040a 	adc.w	r4, sl, sl
 8006c66:	4699      	mov	r9, r3
 8006c68:	46a2      	mov	sl, r4
 8006c6a:	eb19 0905 	adds.w	r9, r9, r5
 8006c6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c72:	f04f 0100 	mov.w	r1, #0
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c86:	4689      	mov	r9, r1
 8006c88:	4692      	mov	sl, r2
 8006c8a:	eb19 0005 	adds.w	r0, r9, r5
 8006c8e:	eb4a 0106 	adc.w	r1, sl, r6
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	461d      	mov	r5, r3
 8006c98:	f04f 0600 	mov.w	r6, #0
 8006c9c:	196b      	adds	r3, r5, r5
 8006c9e:	eb46 0406 	adc.w	r4, r6, r6
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	f7f9 ff83 	bl	8000bb0 <__aeabi_uldivmod>
 8006caa:	4603      	mov	r3, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b2c      	ldr	r3, [pc, #176]	; (8006d64 <UART_SetConfig+0x384>)
 8006cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	2164      	movs	r1, #100	; 0x64
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	3332      	adds	r3, #50	; 0x32
 8006cc4:	4a27      	ldr	r2, [pc, #156]	; (8006d64 <UART_SetConfig+0x384>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cd2:	4498      	add	r8, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f04f 0600 	mov.w	r6, #0
 8006cdc:	46a9      	mov	r9, r5
 8006cde:	46b2      	mov	sl, r6
 8006ce0:	eb19 0309 	adds.w	r3, r9, r9
 8006ce4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ce8:	4699      	mov	r9, r3
 8006cea:	46a2      	mov	sl, r4
 8006cec:	eb19 0905 	adds.w	r9, r9, r5
 8006cf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d08:	4689      	mov	r9, r1
 8006d0a:	4692      	mov	sl, r2
 8006d0c:	eb19 0005 	adds.w	r0, r9, r5
 8006d10:	eb4a 0106 	adc.w	r1, sl, r6
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	461d      	mov	r5, r3
 8006d1a:	f04f 0600 	mov.w	r6, #0
 8006d1e:	196b      	adds	r3, r5, r5
 8006d20:	eb46 0406 	adc.w	r4, r6, r6
 8006d24:	461a      	mov	r2, r3
 8006d26:	4623      	mov	r3, r4
 8006d28:	f7f9 ff42 	bl	8000bb0 <__aeabi_uldivmod>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	461a      	mov	r2, r3
 8006d32:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <UART_SetConfig+0x384>)
 8006d34:	fba3 1302 	umull	r1, r3, r3, r2
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	2164      	movs	r1, #100	; 0x64
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	3332      	adds	r3, #50	; 0x32
 8006d46:	4a07      	ldr	r2, [pc, #28]	; (8006d64 <UART_SetConfig+0x384>)
 8006d48:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	f003 0207 	and.w	r2, r3, #7
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4442      	add	r2, r8
 8006d58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006d5a:	e1b2      	b.n	80070c2 <UART_SetConfig+0x6e2>
 8006d5c:	40011000 	.word	0x40011000
 8006d60:	40011400 	.word	0x40011400
 8006d64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4ad7      	ldr	r2, [pc, #860]	; (80070cc <UART_SetConfig+0x6ec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d005      	beq.n	8006d7e <UART_SetConfig+0x39e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4ad6      	ldr	r2, [pc, #856]	; (80070d0 <UART_SetConfig+0x6f0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	f040 80d1 	bne.w	8006f20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d7e:	f7fe f993 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8006d82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	469a      	mov	sl, r3
 8006d88:	f04f 0b00 	mov.w	fp, #0
 8006d8c:	46d0      	mov	r8, sl
 8006d8e:	46d9      	mov	r9, fp
 8006d90:	eb18 0308 	adds.w	r3, r8, r8
 8006d94:	eb49 0409 	adc.w	r4, r9, r9
 8006d98:	4698      	mov	r8, r3
 8006d9a:	46a1      	mov	r9, r4
 8006d9c:	eb18 080a 	adds.w	r8, r8, sl
 8006da0:	eb49 090b 	adc.w	r9, r9, fp
 8006da4:	f04f 0100 	mov.w	r1, #0
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006db0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006db4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006db8:	4688      	mov	r8, r1
 8006dba:	4691      	mov	r9, r2
 8006dbc:	eb1a 0508 	adds.w	r5, sl, r8
 8006dc0:	eb4b 0609 	adc.w	r6, fp, r9
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	f04f 0400 	mov.w	r4, #0
 8006dd6:	0094      	lsls	r4, r2, #2
 8006dd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ddc:	008b      	lsls	r3, r1, #2
 8006dde:	461a      	mov	r2, r3
 8006de0:	4623      	mov	r3, r4
 8006de2:	4628      	mov	r0, r5
 8006de4:	4631      	mov	r1, r6
 8006de6:	f7f9 fee3 	bl	8000bb0 <__aeabi_uldivmod>
 8006dea:	4603      	mov	r3, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	461a      	mov	r2, r3
 8006df0:	4bb8      	ldr	r3, [pc, #736]	; (80070d4 <UART_SetConfig+0x6f4>)
 8006df2:	fba3 2302 	umull	r2, r3, r3, r2
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	469b      	mov	fp, r3
 8006e00:	f04f 0c00 	mov.w	ip, #0
 8006e04:	46d9      	mov	r9, fp
 8006e06:	46e2      	mov	sl, ip
 8006e08:	eb19 0309 	adds.w	r3, r9, r9
 8006e0c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e10:	4699      	mov	r9, r3
 8006e12:	46a2      	mov	sl, r4
 8006e14:	eb19 090b 	adds.w	r9, r9, fp
 8006e18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e1c:	f04f 0100 	mov.w	r1, #0
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e30:	4689      	mov	r9, r1
 8006e32:	4692      	mov	sl, r2
 8006e34:	eb1b 0509 	adds.w	r5, fp, r9
 8006e38:	eb4c 060a 	adc.w	r6, ip, sl
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4619      	mov	r1, r3
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	f04f 0400 	mov.w	r4, #0
 8006e4e:	0094      	lsls	r4, r2, #2
 8006e50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e54:	008b      	lsls	r3, r1, #2
 8006e56:	461a      	mov	r2, r3
 8006e58:	4623      	mov	r3, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	f7f9 fea7 	bl	8000bb0 <__aeabi_uldivmod>
 8006e62:	4603      	mov	r3, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	461a      	mov	r2, r3
 8006e68:	4b9a      	ldr	r3, [pc, #616]	; (80070d4 <UART_SetConfig+0x6f4>)
 8006e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2164      	movs	r1, #100	; 0x64
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	3332      	adds	r3, #50	; 0x32
 8006e7c:	4a95      	ldr	r2, [pc, #596]	; (80070d4 <UART_SetConfig+0x6f4>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e88:	4498      	add	r8, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	469b      	mov	fp, r3
 8006e8e:	f04f 0c00 	mov.w	ip, #0
 8006e92:	46d9      	mov	r9, fp
 8006e94:	46e2      	mov	sl, ip
 8006e96:	eb19 0309 	adds.w	r3, r9, r9
 8006e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8006e9e:	4699      	mov	r9, r3
 8006ea0:	46a2      	mov	sl, r4
 8006ea2:	eb19 090b 	adds.w	r9, r9, fp
 8006ea6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006eaa:	f04f 0100 	mov.w	r1, #0
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ebe:	4689      	mov	r9, r1
 8006ec0:	4692      	mov	sl, r2
 8006ec2:	eb1b 0509 	adds.w	r5, fp, r9
 8006ec6:	eb4c 060a 	adc.w	r6, ip, sl
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	0094      	lsls	r4, r2, #2
 8006ede:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ee2:	008b      	lsls	r3, r1, #2
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	4631      	mov	r1, r6
 8006eec:	f7f9 fe60 	bl	8000bb0 <__aeabi_uldivmod>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b77      	ldr	r3, [pc, #476]	; (80070d4 <UART_SetConfig+0x6f4>)
 8006ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	2164      	movs	r1, #100	; 0x64
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	3332      	adds	r3, #50	; 0x32
 8006f0a:	4a72      	ldr	r2, [pc, #456]	; (80070d4 <UART_SetConfig+0x6f4>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	f003 020f 	and.w	r2, r3, #15
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4442      	add	r2, r8
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	e0d0      	b.n	80070c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f20:	f7fe f8ae 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8006f24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	469a      	mov	sl, r3
 8006f2a:	f04f 0b00 	mov.w	fp, #0
 8006f2e:	46d0      	mov	r8, sl
 8006f30:	46d9      	mov	r9, fp
 8006f32:	eb18 0308 	adds.w	r3, r8, r8
 8006f36:	eb49 0409 	adc.w	r4, r9, r9
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	46a1      	mov	r9, r4
 8006f3e:	eb18 080a 	adds.w	r8, r8, sl
 8006f42:	eb49 090b 	adc.w	r9, r9, fp
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f5a:	4688      	mov	r8, r1
 8006f5c:	4691      	mov	r9, r2
 8006f5e:	eb1a 0508 	adds.w	r5, sl, r8
 8006f62:	eb4b 0609 	adc.w	r6, fp, r9
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	f04f 0400 	mov.w	r4, #0
 8006f78:	0094      	lsls	r4, r2, #2
 8006f7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f7e:	008b      	lsls	r3, r1, #2
 8006f80:	461a      	mov	r2, r3
 8006f82:	4623      	mov	r3, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	4631      	mov	r1, r6
 8006f88:	f7f9 fe12 	bl	8000bb0 <__aeabi_uldivmod>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	461a      	mov	r2, r3
 8006f92:	4b50      	ldr	r3, [pc, #320]	; (80070d4 <UART_SetConfig+0x6f4>)
 8006f94:	fba3 2302 	umull	r2, r3, r3, r2
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	469b      	mov	fp, r3
 8006fa2:	f04f 0c00 	mov.w	ip, #0
 8006fa6:	46d9      	mov	r9, fp
 8006fa8:	46e2      	mov	sl, ip
 8006faa:	eb19 0309 	adds.w	r3, r9, r9
 8006fae:	eb4a 040a 	adc.w	r4, sl, sl
 8006fb2:	4699      	mov	r9, r3
 8006fb4:	46a2      	mov	sl, r4
 8006fb6:	eb19 090b 	adds.w	r9, r9, fp
 8006fba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fbe:	f04f 0100 	mov.w	r1, #0
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fd2:	4689      	mov	r9, r1
 8006fd4:	4692      	mov	sl, r2
 8006fd6:	eb1b 0509 	adds.w	r5, fp, r9
 8006fda:	eb4c 060a 	adc.w	r6, ip, sl
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	f04f 0400 	mov.w	r4, #0
 8006ff0:	0094      	lsls	r4, r2, #2
 8006ff2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ff6:	008b      	lsls	r3, r1, #2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	4631      	mov	r1, r6
 8007000:	f7f9 fdd6 	bl	8000bb0 <__aeabi_uldivmod>
 8007004:	4603      	mov	r3, r0
 8007006:	460c      	mov	r4, r1
 8007008:	461a      	mov	r2, r3
 800700a:	4b32      	ldr	r3, [pc, #200]	; (80070d4 <UART_SetConfig+0x6f4>)
 800700c:	fba3 1302 	umull	r1, r3, r3, r2
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	2164      	movs	r1, #100	; 0x64
 8007014:	fb01 f303 	mul.w	r3, r1, r3
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	3332      	adds	r3, #50	; 0x32
 800701e:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <UART_SetConfig+0x6f4>)
 8007020:	fba2 2303 	umull	r2, r3, r2, r3
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702a:	4498      	add	r8, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	469b      	mov	fp, r3
 8007030:	f04f 0c00 	mov.w	ip, #0
 8007034:	46d9      	mov	r9, fp
 8007036:	46e2      	mov	sl, ip
 8007038:	eb19 0309 	adds.w	r3, r9, r9
 800703c:	eb4a 040a 	adc.w	r4, sl, sl
 8007040:	4699      	mov	r9, r3
 8007042:	46a2      	mov	sl, r4
 8007044:	eb19 090b 	adds.w	r9, r9, fp
 8007048:	eb4a 0a0c 	adc.w	sl, sl, ip
 800704c:	f04f 0100 	mov.w	r1, #0
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800705c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007060:	4689      	mov	r9, r1
 8007062:	4692      	mov	sl, r2
 8007064:	eb1b 0509 	adds.w	r5, fp, r9
 8007068:	eb4c 060a 	adc.w	r6, ip, sl
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	4619      	mov	r1, r3
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	f04f 0400 	mov.w	r4, #0
 800707e:	0094      	lsls	r4, r2, #2
 8007080:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007084:	008b      	lsls	r3, r1, #2
 8007086:	461a      	mov	r2, r3
 8007088:	4623      	mov	r3, r4
 800708a:	4628      	mov	r0, r5
 800708c:	4631      	mov	r1, r6
 800708e:	f7f9 fd8f 	bl	8000bb0 <__aeabi_uldivmod>
 8007092:	4603      	mov	r3, r0
 8007094:	460c      	mov	r4, r1
 8007096:	461a      	mov	r2, r3
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <UART_SetConfig+0x6f4>)
 800709a:	fba3 1302 	umull	r1, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2164      	movs	r1, #100	; 0x64
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <UART_SetConfig+0x6f4>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4442      	add	r2, r8
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	e7ff      	b.n	80070c2 <UART_SetConfig+0x6e2>
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	40011000 	.word	0x40011000
 80070d0:	40011400 	.word	0x40011400
 80070d4:	51eb851f 	.word	0x51eb851f

080070d8 <__errno>:
 80070d8:	4b01      	ldr	r3, [pc, #4]	; (80070e0 <__errno+0x8>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000030 	.word	0x20000030

080070e4 <__libc_init_array>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4e0d      	ldr	r6, [pc, #52]	; (800711c <__libc_init_array+0x38>)
 80070e8:	4c0d      	ldr	r4, [pc, #52]	; (8007120 <__libc_init_array+0x3c>)
 80070ea:	1ba4      	subs	r4, r4, r6
 80070ec:	10a4      	asrs	r4, r4, #2
 80070ee:	2500      	movs	r5, #0
 80070f0:	42a5      	cmp	r5, r4
 80070f2:	d109      	bne.n	8007108 <__libc_init_array+0x24>
 80070f4:	4e0b      	ldr	r6, [pc, #44]	; (8007124 <__libc_init_array+0x40>)
 80070f6:	4c0c      	ldr	r4, [pc, #48]	; (8007128 <__libc_init_array+0x44>)
 80070f8:	f001 fff8 	bl	80090ec <_init>
 80070fc:	1ba4      	subs	r4, r4, r6
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	2500      	movs	r5, #0
 8007102:	42a5      	cmp	r5, r4
 8007104:	d105      	bne.n	8007112 <__libc_init_array+0x2e>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800710c:	4798      	blx	r3
 800710e:	3501      	adds	r5, #1
 8007110:	e7ee      	b.n	80070f0 <__libc_init_array+0xc>
 8007112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007116:	4798      	blx	r3
 8007118:	3501      	adds	r5, #1
 800711a:	e7f2      	b.n	8007102 <__libc_init_array+0x1e>
 800711c:	08009398 	.word	0x08009398
 8007120:	08009398 	.word	0x08009398
 8007124:	08009398 	.word	0x08009398
 8007128:	0800939c 	.word	0x0800939c

0800712c <memset>:
 800712c:	4402      	add	r2, r0
 800712e:	4603      	mov	r3, r0
 8007130:	4293      	cmp	r3, r2
 8007132:	d100      	bne.n	8007136 <memset+0xa>
 8007134:	4770      	bx	lr
 8007136:	f803 1b01 	strb.w	r1, [r3], #1
 800713a:	e7f9      	b.n	8007130 <memset+0x4>

0800713c <__cvt>:
 800713c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	ec55 4b10 	vmov	r4, r5, d0
 8007144:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007146:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800714a:	2d00      	cmp	r5, #0
 800714c:	460e      	mov	r6, r1
 800714e:	4691      	mov	r9, r2
 8007150:	4619      	mov	r1, r3
 8007152:	bfb8      	it	lt
 8007154:	4622      	movlt	r2, r4
 8007156:	462b      	mov	r3, r5
 8007158:	f027 0720 	bic.w	r7, r7, #32
 800715c:	bfbb      	ittet	lt
 800715e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007162:	461d      	movlt	r5, r3
 8007164:	2300      	movge	r3, #0
 8007166:	232d      	movlt	r3, #45	; 0x2d
 8007168:	bfb8      	it	lt
 800716a:	4614      	movlt	r4, r2
 800716c:	2f46      	cmp	r7, #70	; 0x46
 800716e:	700b      	strb	r3, [r1, #0]
 8007170:	d004      	beq.n	800717c <__cvt+0x40>
 8007172:	2f45      	cmp	r7, #69	; 0x45
 8007174:	d100      	bne.n	8007178 <__cvt+0x3c>
 8007176:	3601      	adds	r6, #1
 8007178:	2102      	movs	r1, #2
 800717a:	e000      	b.n	800717e <__cvt+0x42>
 800717c:	2103      	movs	r1, #3
 800717e:	ab03      	add	r3, sp, #12
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	ab02      	add	r3, sp, #8
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4632      	mov	r2, r6
 8007188:	4653      	mov	r3, sl
 800718a:	ec45 4b10 	vmov	d0, r4, r5
 800718e:	f000 fbab 	bl	80078e8 <_dtoa_r>
 8007192:	2f47      	cmp	r7, #71	; 0x47
 8007194:	4680      	mov	r8, r0
 8007196:	d102      	bne.n	800719e <__cvt+0x62>
 8007198:	f019 0f01 	tst.w	r9, #1
 800719c:	d026      	beq.n	80071ec <__cvt+0xb0>
 800719e:	2f46      	cmp	r7, #70	; 0x46
 80071a0:	eb08 0906 	add.w	r9, r8, r6
 80071a4:	d111      	bne.n	80071ca <__cvt+0x8e>
 80071a6:	f898 3000 	ldrb.w	r3, [r8]
 80071aa:	2b30      	cmp	r3, #48	; 0x30
 80071ac:	d10a      	bne.n	80071c4 <__cvt+0x88>
 80071ae:	2200      	movs	r2, #0
 80071b0:	2300      	movs	r3, #0
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 fc3b 	bl	8000a30 <__aeabi_dcmpeq>
 80071ba:	b918      	cbnz	r0, 80071c4 <__cvt+0x88>
 80071bc:	f1c6 0601 	rsb	r6, r6, #1
 80071c0:	f8ca 6000 	str.w	r6, [sl]
 80071c4:	f8da 3000 	ldr.w	r3, [sl]
 80071c8:	4499      	add	r9, r3
 80071ca:	2200      	movs	r2, #0
 80071cc:	2300      	movs	r3, #0
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 fc2d 	bl	8000a30 <__aeabi_dcmpeq>
 80071d6:	b938      	cbnz	r0, 80071e8 <__cvt+0xac>
 80071d8:	2230      	movs	r2, #48	; 0x30
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	454b      	cmp	r3, r9
 80071de:	d205      	bcs.n	80071ec <__cvt+0xb0>
 80071e0:	1c59      	adds	r1, r3, #1
 80071e2:	9103      	str	r1, [sp, #12]
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	e7f8      	b.n	80071da <__cvt+0x9e>
 80071e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071f0:	eba3 0308 	sub.w	r3, r3, r8
 80071f4:	4640      	mov	r0, r8
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	b004      	add	sp, #16
 80071fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071fe <__exponent>:
 80071fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007200:	2900      	cmp	r1, #0
 8007202:	4604      	mov	r4, r0
 8007204:	bfba      	itte	lt
 8007206:	4249      	neglt	r1, r1
 8007208:	232d      	movlt	r3, #45	; 0x2d
 800720a:	232b      	movge	r3, #43	; 0x2b
 800720c:	2909      	cmp	r1, #9
 800720e:	f804 2b02 	strb.w	r2, [r4], #2
 8007212:	7043      	strb	r3, [r0, #1]
 8007214:	dd20      	ble.n	8007258 <__exponent+0x5a>
 8007216:	f10d 0307 	add.w	r3, sp, #7
 800721a:	461f      	mov	r7, r3
 800721c:	260a      	movs	r6, #10
 800721e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007222:	fb06 1115 	mls	r1, r6, r5, r1
 8007226:	3130      	adds	r1, #48	; 0x30
 8007228:	2d09      	cmp	r5, #9
 800722a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800722e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007232:	4629      	mov	r1, r5
 8007234:	dc09      	bgt.n	800724a <__exponent+0x4c>
 8007236:	3130      	adds	r1, #48	; 0x30
 8007238:	3b02      	subs	r3, #2
 800723a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800723e:	42bb      	cmp	r3, r7
 8007240:	4622      	mov	r2, r4
 8007242:	d304      	bcc.n	800724e <__exponent+0x50>
 8007244:	1a10      	subs	r0, r2, r0
 8007246:	b003      	add	sp, #12
 8007248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724a:	4613      	mov	r3, r2
 800724c:	e7e7      	b.n	800721e <__exponent+0x20>
 800724e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007252:	f804 2b01 	strb.w	r2, [r4], #1
 8007256:	e7f2      	b.n	800723e <__exponent+0x40>
 8007258:	2330      	movs	r3, #48	; 0x30
 800725a:	4419      	add	r1, r3
 800725c:	7083      	strb	r3, [r0, #2]
 800725e:	1d02      	adds	r2, r0, #4
 8007260:	70c1      	strb	r1, [r0, #3]
 8007262:	e7ef      	b.n	8007244 <__exponent+0x46>

08007264 <_printf_float>:
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	b08d      	sub	sp, #52	; 0x34
 800726a:	460c      	mov	r4, r1
 800726c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007270:	4616      	mov	r6, r2
 8007272:	461f      	mov	r7, r3
 8007274:	4605      	mov	r5, r0
 8007276:	f001 f8ef 	bl	8008458 <_localeconv_r>
 800727a:	6803      	ldr	r3, [r0, #0]
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	4618      	mov	r0, r3
 8007280:	f7f8 ffaa 	bl	80001d8 <strlen>
 8007284:	2300      	movs	r3, #0
 8007286:	930a      	str	r3, [sp, #40]	; 0x28
 8007288:	f8d8 3000 	ldr.w	r3, [r8]
 800728c:	9005      	str	r0, [sp, #20]
 800728e:	3307      	adds	r3, #7
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	f103 0208 	add.w	r2, r3, #8
 8007298:	f894 a018 	ldrb.w	sl, [r4, #24]
 800729c:	f8d4 b000 	ldr.w	fp, [r4]
 80072a0:	f8c8 2000 	str.w	r2, [r8]
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072be:	4ba7      	ldr	r3, [pc, #668]	; (800755c <_printf_float+0x2f8>)
 80072c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072c4:	f7f9 fbe6 	bl	8000a94 <__aeabi_dcmpun>
 80072c8:	bb70      	cbnz	r0, 8007328 <_printf_float+0xc4>
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ce:	4ba3      	ldr	r3, [pc, #652]	; (800755c <_printf_float+0x2f8>)
 80072d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072d4:	f7f9 fbc0 	bl	8000a58 <__aeabi_dcmple>
 80072d8:	bb30      	cbnz	r0, 8007328 <_printf_float+0xc4>
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	4640      	mov	r0, r8
 80072e0:	4649      	mov	r1, r9
 80072e2:	f7f9 fbaf 	bl	8000a44 <__aeabi_dcmplt>
 80072e6:	b110      	cbz	r0, 80072ee <_printf_float+0x8a>
 80072e8:	232d      	movs	r3, #45	; 0x2d
 80072ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ee:	4a9c      	ldr	r2, [pc, #624]	; (8007560 <_printf_float+0x2fc>)
 80072f0:	4b9c      	ldr	r3, [pc, #624]	; (8007564 <_printf_float+0x300>)
 80072f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072f6:	bf8c      	ite	hi
 80072f8:	4690      	movhi	r8, r2
 80072fa:	4698      	movls	r8, r3
 80072fc:	2303      	movs	r3, #3
 80072fe:	f02b 0204 	bic.w	r2, fp, #4
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	f04f 0900 	mov.w	r9, #0
 800730a:	9700      	str	r7, [sp, #0]
 800730c:	4633      	mov	r3, r6
 800730e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f9e6 	bl	80076e4 <_printf_common>
 8007318:	3001      	adds	r0, #1
 800731a:	f040 808d 	bne.w	8007438 <_printf_float+0x1d4>
 800731e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007322:	b00d      	add	sp, #52	; 0x34
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	4640      	mov	r0, r8
 800732e:	4649      	mov	r1, r9
 8007330:	f7f9 fbb0 	bl	8000a94 <__aeabi_dcmpun>
 8007334:	b110      	cbz	r0, 800733c <_printf_float+0xd8>
 8007336:	4a8c      	ldr	r2, [pc, #560]	; (8007568 <_printf_float+0x304>)
 8007338:	4b8c      	ldr	r3, [pc, #560]	; (800756c <_printf_float+0x308>)
 800733a:	e7da      	b.n	80072f2 <_printf_float+0x8e>
 800733c:	6861      	ldr	r1, [r4, #4]
 800733e:	1c4b      	adds	r3, r1, #1
 8007340:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007344:	a80a      	add	r0, sp, #40	; 0x28
 8007346:	d13e      	bne.n	80073c6 <_printf_float+0x162>
 8007348:	2306      	movs	r3, #6
 800734a:	6063      	str	r3, [r4, #4]
 800734c:	2300      	movs	r3, #0
 800734e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007352:	ab09      	add	r3, sp, #36	; 0x24
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	ec49 8b10 	vmov	d0, r8, r9
 800735a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	f8cd a004 	str.w	sl, [sp, #4]
 8007364:	6861      	ldr	r1, [r4, #4]
 8007366:	4628      	mov	r0, r5
 8007368:	f7ff fee8 	bl	800713c <__cvt>
 800736c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007370:	2b47      	cmp	r3, #71	; 0x47
 8007372:	4680      	mov	r8, r0
 8007374:	d109      	bne.n	800738a <_printf_float+0x126>
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	1cd8      	adds	r0, r3, #3
 800737a:	db02      	blt.n	8007382 <_printf_float+0x11e>
 800737c:	6862      	ldr	r2, [r4, #4]
 800737e:	4293      	cmp	r3, r2
 8007380:	dd47      	ble.n	8007412 <_printf_float+0x1ae>
 8007382:	f1aa 0a02 	sub.w	sl, sl, #2
 8007386:	fa5f fa8a 	uxtb.w	sl, sl
 800738a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800738e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007390:	d824      	bhi.n	80073dc <_printf_float+0x178>
 8007392:	3901      	subs	r1, #1
 8007394:	4652      	mov	r2, sl
 8007396:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800739a:	9109      	str	r1, [sp, #36]	; 0x24
 800739c:	f7ff ff2f 	bl	80071fe <__exponent>
 80073a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a2:	1813      	adds	r3, r2, r0
 80073a4:	2a01      	cmp	r2, #1
 80073a6:	4681      	mov	r9, r0
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	dc02      	bgt.n	80073b2 <_printf_float+0x14e>
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	07d1      	lsls	r1, r2, #31
 80073b0:	d501      	bpl.n	80073b6 <_printf_float+0x152>
 80073b2:	3301      	adds	r3, #1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0a5      	beq.n	800730a <_printf_float+0xa6>
 80073be:	232d      	movs	r3, #45	; 0x2d
 80073c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c4:	e7a1      	b.n	800730a <_printf_float+0xa6>
 80073c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80073ca:	f000 8177 	beq.w	80076bc <_printf_float+0x458>
 80073ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073d2:	d1bb      	bne.n	800734c <_printf_float+0xe8>
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d1b9      	bne.n	800734c <_printf_float+0xe8>
 80073d8:	2301      	movs	r3, #1
 80073da:	e7b6      	b.n	800734a <_printf_float+0xe6>
 80073dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80073e0:	d119      	bne.n	8007416 <_printf_float+0x1b2>
 80073e2:	2900      	cmp	r1, #0
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	dd0c      	ble.n	8007402 <_printf_float+0x19e>
 80073e8:	6121      	str	r1, [r4, #16]
 80073ea:	b913      	cbnz	r3, 80073f2 <_printf_float+0x18e>
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	07d2      	lsls	r2, r2, #31
 80073f0:	d502      	bpl.n	80073f8 <_printf_float+0x194>
 80073f2:	3301      	adds	r3, #1
 80073f4:	440b      	add	r3, r1
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80073fc:	f04f 0900 	mov.w	r9, #0
 8007400:	e7d9      	b.n	80073b6 <_printf_float+0x152>
 8007402:	b913      	cbnz	r3, 800740a <_printf_float+0x1a6>
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	07d0      	lsls	r0, r2, #31
 8007408:	d501      	bpl.n	800740e <_printf_float+0x1aa>
 800740a:	3302      	adds	r3, #2
 800740c:	e7f3      	b.n	80073f6 <_printf_float+0x192>
 800740e:	2301      	movs	r3, #1
 8007410:	e7f1      	b.n	80073f6 <_printf_float+0x192>
 8007412:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007416:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800741a:	4293      	cmp	r3, r2
 800741c:	db05      	blt.n	800742a <_printf_float+0x1c6>
 800741e:	6822      	ldr	r2, [r4, #0]
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	07d1      	lsls	r1, r2, #31
 8007424:	d5e8      	bpl.n	80073f8 <_printf_float+0x194>
 8007426:	3301      	adds	r3, #1
 8007428:	e7e5      	b.n	80073f6 <_printf_float+0x192>
 800742a:	2b00      	cmp	r3, #0
 800742c:	bfd4      	ite	le
 800742e:	f1c3 0302 	rsble	r3, r3, #2
 8007432:	2301      	movgt	r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	e7de      	b.n	80073f6 <_printf_float+0x192>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	055a      	lsls	r2, r3, #21
 800743c:	d407      	bmi.n	800744e <_printf_float+0x1ea>
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	4642      	mov	r2, r8
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	d12b      	bne.n	80074a4 <_printf_float+0x240>
 800744c:	e767      	b.n	800731e <_printf_float+0xba>
 800744e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007452:	f240 80dc 	bls.w	800760e <_printf_float+0x3aa>
 8007456:	2200      	movs	r2, #0
 8007458:	2300      	movs	r3, #0
 800745a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800745e:	f7f9 fae7 	bl	8000a30 <__aeabi_dcmpeq>
 8007462:	2800      	cmp	r0, #0
 8007464:	d033      	beq.n	80074ce <_printf_float+0x26a>
 8007466:	2301      	movs	r3, #1
 8007468:	4a41      	ldr	r2, [pc, #260]	; (8007570 <_printf_float+0x30c>)
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f af54 	beq.w	800731e <_printf_float+0xba>
 8007476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747a:	429a      	cmp	r2, r3
 800747c:	db02      	blt.n	8007484 <_printf_float+0x220>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	07d8      	lsls	r0, r3, #31
 8007482:	d50f      	bpl.n	80074a4 <_printf_float+0x240>
 8007484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f af45 	beq.w	800731e <_printf_float+0xba>
 8007494:	f04f 0800 	mov.w	r8, #0
 8007498:	f104 091a 	add.w	r9, r4, #26
 800749c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749e:	3b01      	subs	r3, #1
 80074a0:	4543      	cmp	r3, r8
 80074a2:	dc09      	bgt.n	80074b8 <_printf_float+0x254>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	079b      	lsls	r3, r3, #30
 80074a8:	f100 8103 	bmi.w	80076b2 <_printf_float+0x44e>
 80074ac:	68e0      	ldr	r0, [r4, #12]
 80074ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b0:	4298      	cmp	r0, r3
 80074b2:	bfb8      	it	lt
 80074b4:	4618      	movlt	r0, r3
 80074b6:	e734      	b.n	8007322 <_printf_float+0xbe>
 80074b8:	2301      	movs	r3, #1
 80074ba:	464a      	mov	r2, r9
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	47b8      	blx	r7
 80074c2:	3001      	adds	r0, #1
 80074c4:	f43f af2b 	beq.w	800731e <_printf_float+0xba>
 80074c8:	f108 0801 	add.w	r8, r8, #1
 80074cc:	e7e6      	b.n	800749c <_printf_float+0x238>
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc2b      	bgt.n	800752c <_printf_float+0x2c8>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <_printf_float+0x30c>)
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f af1d 	beq.w	800731e <_printf_float+0xba>
 80074e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e6:	b923      	cbnz	r3, 80074f2 <_printf_float+0x28e>
 80074e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ea:	b913      	cbnz	r3, 80074f2 <_printf_float+0x28e>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	07d9      	lsls	r1, r3, #31
 80074f0:	d5d8      	bpl.n	80074a4 <_printf_float+0x240>
 80074f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f af0e 	beq.w	800731e <_printf_float+0xba>
 8007502:	f04f 0900 	mov.w	r9, #0
 8007506:	f104 0a1a 	add.w	sl, r4, #26
 800750a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750c:	425b      	negs	r3, r3
 800750e:	454b      	cmp	r3, r9
 8007510:	dc01      	bgt.n	8007516 <_printf_float+0x2b2>
 8007512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007514:	e794      	b.n	8007440 <_printf_float+0x1dc>
 8007516:	2301      	movs	r3, #1
 8007518:	4652      	mov	r2, sl
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	47b8      	blx	r7
 8007520:	3001      	adds	r0, #1
 8007522:	f43f aefc 	beq.w	800731e <_printf_float+0xba>
 8007526:	f109 0901 	add.w	r9, r9, #1
 800752a:	e7ee      	b.n	800750a <_printf_float+0x2a6>
 800752c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800752e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007530:	429a      	cmp	r2, r3
 8007532:	bfa8      	it	ge
 8007534:	461a      	movge	r2, r3
 8007536:	2a00      	cmp	r2, #0
 8007538:	4691      	mov	r9, r2
 800753a:	dd07      	ble.n	800754c <_printf_float+0x2e8>
 800753c:	4613      	mov	r3, r2
 800753e:	4631      	mov	r1, r6
 8007540:	4642      	mov	r2, r8
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f aee9 	beq.w	800731e <_printf_float+0xba>
 800754c:	f104 031a 	add.w	r3, r4, #26
 8007550:	f04f 0b00 	mov.w	fp, #0
 8007554:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007558:	9306      	str	r3, [sp, #24]
 800755a:	e015      	b.n	8007588 <_printf_float+0x324>
 800755c:	7fefffff 	.word	0x7fefffff
 8007560:	0800912c 	.word	0x0800912c
 8007564:	08009128 	.word	0x08009128
 8007568:	08009134 	.word	0x08009134
 800756c:	08009130 	.word	0x08009130
 8007570:	08009138 	.word	0x08009138
 8007574:	2301      	movs	r3, #1
 8007576:	9a06      	ldr	r2, [sp, #24]
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f aecd 	beq.w	800731e <_printf_float+0xba>
 8007584:	f10b 0b01 	add.w	fp, fp, #1
 8007588:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800758c:	ebaa 0309 	sub.w	r3, sl, r9
 8007590:	455b      	cmp	r3, fp
 8007592:	dcef      	bgt.n	8007574 <_printf_float+0x310>
 8007594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007598:	429a      	cmp	r2, r3
 800759a:	44d0      	add	r8, sl
 800759c:	db15      	blt.n	80075ca <_printf_float+0x366>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	07da      	lsls	r2, r3, #31
 80075a2:	d412      	bmi.n	80075ca <_printf_float+0x366>
 80075a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075a8:	eba3 020a 	sub.w	r2, r3, sl
 80075ac:	eba3 0a01 	sub.w	sl, r3, r1
 80075b0:	4592      	cmp	sl, r2
 80075b2:	bfa8      	it	ge
 80075b4:	4692      	movge	sl, r2
 80075b6:	f1ba 0f00 	cmp.w	sl, #0
 80075ba:	dc0e      	bgt.n	80075da <_printf_float+0x376>
 80075bc:	f04f 0800 	mov.w	r8, #0
 80075c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c4:	f104 091a 	add.w	r9, r4, #26
 80075c8:	e019      	b.n	80075fe <_printf_float+0x39a>
 80075ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	d1e5      	bne.n	80075a4 <_printf_float+0x340>
 80075d8:	e6a1      	b.n	800731e <_printf_float+0xba>
 80075da:	4653      	mov	r3, sl
 80075dc:	4642      	mov	r2, r8
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	d1e9      	bne.n	80075bc <_printf_float+0x358>
 80075e8:	e699      	b.n	800731e <_printf_float+0xba>
 80075ea:	2301      	movs	r3, #1
 80075ec:	464a      	mov	r2, r9
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	f43f ae92 	beq.w	800731e <_printf_float+0xba>
 80075fa:	f108 0801 	add.w	r8, r8, #1
 80075fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	eba3 030a 	sub.w	r3, r3, sl
 8007608:	4543      	cmp	r3, r8
 800760a:	dcee      	bgt.n	80075ea <_printf_float+0x386>
 800760c:	e74a      	b.n	80074a4 <_printf_float+0x240>
 800760e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007610:	2a01      	cmp	r2, #1
 8007612:	dc01      	bgt.n	8007618 <_printf_float+0x3b4>
 8007614:	07db      	lsls	r3, r3, #31
 8007616:	d53a      	bpl.n	800768e <_printf_float+0x42a>
 8007618:	2301      	movs	r3, #1
 800761a:	4642      	mov	r2, r8
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f ae7b 	beq.w	800731e <_printf_float+0xba>
 8007628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f108 0801 	add.w	r8, r8, #1
 8007638:	f43f ae71 	beq.w	800731e <_printf_float+0xba>
 800763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763e:	2200      	movs	r2, #0
 8007640:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007648:	2300      	movs	r3, #0
 800764a:	f7f9 f9f1 	bl	8000a30 <__aeabi_dcmpeq>
 800764e:	b9c8      	cbnz	r0, 8007684 <_printf_float+0x420>
 8007650:	4653      	mov	r3, sl
 8007652:	4642      	mov	r2, r8
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	d10e      	bne.n	800767c <_printf_float+0x418>
 800765e:	e65e      	b.n	800731e <_printf_float+0xba>
 8007660:	2301      	movs	r3, #1
 8007662:	4652      	mov	r2, sl
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f ae57 	beq.w	800731e <_printf_float+0xba>
 8007670:	f108 0801 	add.w	r8, r8, #1
 8007674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007676:	3b01      	subs	r3, #1
 8007678:	4543      	cmp	r3, r8
 800767a:	dcf1      	bgt.n	8007660 <_printf_float+0x3fc>
 800767c:	464b      	mov	r3, r9
 800767e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007682:	e6de      	b.n	8007442 <_printf_float+0x1de>
 8007684:	f04f 0800 	mov.w	r8, #0
 8007688:	f104 0a1a 	add.w	sl, r4, #26
 800768c:	e7f2      	b.n	8007674 <_printf_float+0x410>
 800768e:	2301      	movs	r3, #1
 8007690:	e7df      	b.n	8007652 <_printf_float+0x3ee>
 8007692:	2301      	movs	r3, #1
 8007694:	464a      	mov	r2, r9
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	f43f ae3e 	beq.w	800731e <_printf_float+0xba>
 80076a2:	f108 0801 	add.w	r8, r8, #1
 80076a6:	68e3      	ldr	r3, [r4, #12]
 80076a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	4543      	cmp	r3, r8
 80076ae:	dcf0      	bgt.n	8007692 <_printf_float+0x42e>
 80076b0:	e6fc      	b.n	80074ac <_printf_float+0x248>
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	f104 0919 	add.w	r9, r4, #25
 80076ba:	e7f4      	b.n	80076a6 <_printf_float+0x442>
 80076bc:	2900      	cmp	r1, #0
 80076be:	f43f ae8b 	beq.w	80073d8 <_printf_float+0x174>
 80076c2:	2300      	movs	r3, #0
 80076c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80076c8:	ab09      	add	r3, sp, #36	; 0x24
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	ec49 8b10 	vmov	d0, r8, r9
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	f8cd a004 	str.w	sl, [sp, #4]
 80076d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076da:	4628      	mov	r0, r5
 80076dc:	f7ff fd2e 	bl	800713c <__cvt>
 80076e0:	4680      	mov	r8, r0
 80076e2:	e648      	b.n	8007376 <_printf_float+0x112>

080076e4 <_printf_common>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	4691      	mov	r9, r2
 80076ea:	461f      	mov	r7, r3
 80076ec:	688a      	ldr	r2, [r1, #8]
 80076ee:	690b      	ldr	r3, [r1, #16]
 80076f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bfb8      	it	lt
 80076f8:	4613      	movlt	r3, r2
 80076fa:	f8c9 3000 	str.w	r3, [r9]
 80076fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007702:	4606      	mov	r6, r0
 8007704:	460c      	mov	r4, r1
 8007706:	b112      	cbz	r2, 800770e <_printf_common+0x2a>
 8007708:	3301      	adds	r3, #1
 800770a:	f8c9 3000 	str.w	r3, [r9]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007718:	3302      	addmi	r3, #2
 800771a:	f8c9 3000 	strmi.w	r3, [r9]
 800771e:	6825      	ldr	r5, [r4, #0]
 8007720:	f015 0506 	ands.w	r5, r5, #6
 8007724:	d107      	bne.n	8007736 <_printf_common+0x52>
 8007726:	f104 0a19 	add.w	sl, r4, #25
 800772a:	68e3      	ldr	r3, [r4, #12]
 800772c:	f8d9 2000 	ldr.w	r2, [r9]
 8007730:	1a9b      	subs	r3, r3, r2
 8007732:	42ab      	cmp	r3, r5
 8007734:	dc28      	bgt.n	8007788 <_printf_common+0xa4>
 8007736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	3300      	adds	r3, #0
 800773e:	bf18      	it	ne
 8007740:	2301      	movne	r3, #1
 8007742:	0692      	lsls	r2, r2, #26
 8007744:	d42d      	bmi.n	80077a2 <_printf_common+0xbe>
 8007746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800774a:	4639      	mov	r1, r7
 800774c:	4630      	mov	r0, r6
 800774e:	47c0      	blx	r8
 8007750:	3001      	adds	r0, #1
 8007752:	d020      	beq.n	8007796 <_printf_common+0xb2>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	68e5      	ldr	r5, [r4, #12]
 8007758:	f8d9 2000 	ldr.w	r2, [r9]
 800775c:	f003 0306 	and.w	r3, r3, #6
 8007760:	2b04      	cmp	r3, #4
 8007762:	bf08      	it	eq
 8007764:	1aad      	subeq	r5, r5, r2
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	6922      	ldr	r2, [r4, #16]
 800776a:	bf0c      	ite	eq
 800776c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007770:	2500      	movne	r5, #0
 8007772:	4293      	cmp	r3, r2
 8007774:	bfc4      	itt	gt
 8007776:	1a9b      	subgt	r3, r3, r2
 8007778:	18ed      	addgt	r5, r5, r3
 800777a:	f04f 0900 	mov.w	r9, #0
 800777e:	341a      	adds	r4, #26
 8007780:	454d      	cmp	r5, r9
 8007782:	d11a      	bne.n	80077ba <_printf_common+0xd6>
 8007784:	2000      	movs	r0, #0
 8007786:	e008      	b.n	800779a <_printf_common+0xb6>
 8007788:	2301      	movs	r3, #1
 800778a:	4652      	mov	r2, sl
 800778c:	4639      	mov	r1, r7
 800778e:	4630      	mov	r0, r6
 8007790:	47c0      	blx	r8
 8007792:	3001      	adds	r0, #1
 8007794:	d103      	bne.n	800779e <_printf_common+0xba>
 8007796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	3501      	adds	r5, #1
 80077a0:	e7c3      	b.n	800772a <_printf_common+0x46>
 80077a2:	18e1      	adds	r1, r4, r3
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	2030      	movs	r0, #48	; 0x30
 80077a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ac:	4422      	add	r2, r4
 80077ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077b6:	3302      	adds	r3, #2
 80077b8:	e7c5      	b.n	8007746 <_printf_common+0x62>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4622      	mov	r2, r4
 80077be:	4639      	mov	r1, r7
 80077c0:	4630      	mov	r0, r6
 80077c2:	47c0      	blx	r8
 80077c4:	3001      	adds	r0, #1
 80077c6:	d0e6      	beq.n	8007796 <_printf_common+0xb2>
 80077c8:	f109 0901 	add.w	r9, r9, #1
 80077cc:	e7d8      	b.n	8007780 <_printf_common+0x9c>

080077ce <quorem>:
 80077ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d2:	6903      	ldr	r3, [r0, #16]
 80077d4:	690c      	ldr	r4, [r1, #16]
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	4680      	mov	r8, r0
 80077da:	f2c0 8082 	blt.w	80078e2 <quorem+0x114>
 80077de:	3c01      	subs	r4, #1
 80077e0:	f101 0714 	add.w	r7, r1, #20
 80077e4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80077e8:	f100 0614 	add.w	r6, r0, #20
 80077ec:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80077f0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80077f4:	eb06 030c 	add.w	r3, r6, ip
 80077f8:	3501      	adds	r5, #1
 80077fa:	eb07 090c 	add.w	r9, r7, ip
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	fbb0 f5f5 	udiv	r5, r0, r5
 8007804:	b395      	cbz	r5, 800786c <quorem+0x9e>
 8007806:	f04f 0a00 	mov.w	sl, #0
 800780a:	4638      	mov	r0, r7
 800780c:	46b6      	mov	lr, r6
 800780e:	46d3      	mov	fp, sl
 8007810:	f850 2b04 	ldr.w	r2, [r0], #4
 8007814:	b293      	uxth	r3, r2
 8007816:	fb05 a303 	mla	r3, r5, r3, sl
 800781a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800781e:	b29b      	uxth	r3, r3
 8007820:	ebab 0303 	sub.w	r3, fp, r3
 8007824:	0c12      	lsrs	r2, r2, #16
 8007826:	f8de b000 	ldr.w	fp, [lr]
 800782a:	fb05 a202 	mla	r2, r5, r2, sl
 800782e:	fa13 f38b 	uxtah	r3, r3, fp
 8007832:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007836:	fa1f fb82 	uxth.w	fp, r2
 800783a:	f8de 2000 	ldr.w	r2, [lr]
 800783e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007842:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007846:	b29b      	uxth	r3, r3
 8007848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800784c:	4581      	cmp	r9, r0
 800784e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007852:	f84e 3b04 	str.w	r3, [lr], #4
 8007856:	d2db      	bcs.n	8007810 <quorem+0x42>
 8007858:	f856 300c 	ldr.w	r3, [r6, ip]
 800785c:	b933      	cbnz	r3, 800786c <quorem+0x9e>
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	3b04      	subs	r3, #4
 8007862:	429e      	cmp	r6, r3
 8007864:	461a      	mov	r2, r3
 8007866:	d330      	bcc.n	80078ca <quorem+0xfc>
 8007868:	f8c8 4010 	str.w	r4, [r8, #16]
 800786c:	4640      	mov	r0, r8
 800786e:	f001 f829 	bl	80088c4 <__mcmp>
 8007872:	2800      	cmp	r0, #0
 8007874:	db25      	blt.n	80078c2 <quorem+0xf4>
 8007876:	3501      	adds	r5, #1
 8007878:	4630      	mov	r0, r6
 800787a:	f04f 0c00 	mov.w	ip, #0
 800787e:	f857 2b04 	ldr.w	r2, [r7], #4
 8007882:	f8d0 e000 	ldr.w	lr, [r0]
 8007886:	b293      	uxth	r3, r2
 8007888:	ebac 0303 	sub.w	r3, ip, r3
 800788c:	0c12      	lsrs	r2, r2, #16
 800788e:	fa13 f38e 	uxtah	r3, r3, lr
 8007892:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007896:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078a0:	45b9      	cmp	r9, r7
 80078a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078a6:	f840 3b04 	str.w	r3, [r0], #4
 80078aa:	d2e8      	bcs.n	800787e <quorem+0xb0>
 80078ac:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80078b0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80078b4:	b92a      	cbnz	r2, 80078c2 <quorem+0xf4>
 80078b6:	3b04      	subs	r3, #4
 80078b8:	429e      	cmp	r6, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	d30b      	bcc.n	80078d6 <quorem+0x108>
 80078be:	f8c8 4010 	str.w	r4, [r8, #16]
 80078c2:	4628      	mov	r0, r5
 80078c4:	b003      	add	sp, #12
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	3b04      	subs	r3, #4
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d1ca      	bne.n	8007868 <quorem+0x9a>
 80078d2:	3c01      	subs	r4, #1
 80078d4:	e7c5      	b.n	8007862 <quorem+0x94>
 80078d6:	6812      	ldr	r2, [r2, #0]
 80078d8:	3b04      	subs	r3, #4
 80078da:	2a00      	cmp	r2, #0
 80078dc:	d1ef      	bne.n	80078be <quorem+0xf0>
 80078de:	3c01      	subs	r4, #1
 80078e0:	e7ea      	b.n	80078b8 <quorem+0xea>
 80078e2:	2000      	movs	r0, #0
 80078e4:	e7ee      	b.n	80078c4 <quorem+0xf6>
	...

080078e8 <_dtoa_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	ec57 6b10 	vmov	r6, r7, d0
 80078f0:	b097      	sub	sp, #92	; 0x5c
 80078f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078f4:	9106      	str	r1, [sp, #24]
 80078f6:	4604      	mov	r4, r0
 80078f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80078fa:	9312      	str	r3, [sp, #72]	; 0x48
 80078fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007900:	e9cd 6700 	strd	r6, r7, [sp]
 8007904:	b93d      	cbnz	r5, 8007916 <_dtoa_r+0x2e>
 8007906:	2010      	movs	r0, #16
 8007908:	f000 fdb4 	bl	8008474 <malloc>
 800790c:	6260      	str	r0, [r4, #36]	; 0x24
 800790e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007912:	6005      	str	r5, [r0, #0]
 8007914:	60c5      	str	r5, [r0, #12]
 8007916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	b151      	cbz	r1, 8007932 <_dtoa_r+0x4a>
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	604a      	str	r2, [r1, #4]
 8007920:	2301      	movs	r3, #1
 8007922:	4093      	lsls	r3, r2
 8007924:	608b      	str	r3, [r1, #8]
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fdeb 	bl	8008502 <_Bfree>
 800792c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	1e3b      	subs	r3, r7, #0
 8007934:	bfbb      	ittet	lt
 8007936:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800793a:	9301      	strlt	r3, [sp, #4]
 800793c:	2300      	movge	r3, #0
 800793e:	2201      	movlt	r2, #1
 8007940:	bfac      	ite	ge
 8007942:	f8c8 3000 	strge.w	r3, [r8]
 8007946:	f8c8 2000 	strlt.w	r2, [r8]
 800794a:	4baf      	ldr	r3, [pc, #700]	; (8007c08 <_dtoa_r+0x320>)
 800794c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007950:	ea33 0308 	bics.w	r3, r3, r8
 8007954:	d114      	bne.n	8007980 <_dtoa_r+0x98>
 8007956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007958:	f242 730f 	movw	r3, #9999	; 0x270f
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	9b00      	ldr	r3, [sp, #0]
 8007960:	b923      	cbnz	r3, 800796c <_dtoa_r+0x84>
 8007962:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007966:	2800      	cmp	r0, #0
 8007968:	f000 8542 	beq.w	80083f0 <_dtoa_r+0xb08>
 800796c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800796e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007c1c <_dtoa_r+0x334>
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 8544 	beq.w	8008400 <_dtoa_r+0xb18>
 8007978:	f10b 0303 	add.w	r3, fp, #3
 800797c:	f000 bd3e 	b.w	80083fc <_dtoa_r+0xb14>
 8007980:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f850 	bl	8000a30 <__aeabi_dcmpeq>
 8007990:	4681      	mov	r9, r0
 8007992:	b168      	cbz	r0, 80079b0 <_dtoa_r+0xc8>
 8007994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007996:	2301      	movs	r3, #1
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8524 	beq.w	80083ea <_dtoa_r+0xb02>
 80079a2:	4b9a      	ldr	r3, [pc, #616]	; (8007c0c <_dtoa_r+0x324>)
 80079a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079a6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	f000 bd28 	b.w	8008400 <_dtoa_r+0xb18>
 80079b0:	aa14      	add	r2, sp, #80	; 0x50
 80079b2:	a915      	add	r1, sp, #84	; 0x54
 80079b4:	ec47 6b10 	vmov	d0, r6, r7
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 fffa 	bl	80089b2 <__d2b>
 80079be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80079c2:	9004      	str	r0, [sp, #16]
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	d07c      	beq.n	8007ac2 <_dtoa_r+0x1da>
 80079c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80079d0:	46b2      	mov	sl, r6
 80079d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80079d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80079de:	2200      	movs	r2, #0
 80079e0:	4b8b      	ldr	r3, [pc, #556]	; (8007c10 <_dtoa_r+0x328>)
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	f7f8 fc03 	bl	80001f0 <__aeabi_dsub>
 80079ea:	a381      	add	r3, pc, #516	; (adr r3, 8007bf0 <_dtoa_r+0x308>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fdb6 	bl	8000560 <__aeabi_dmul>
 80079f4:	a380      	add	r3, pc, #512	; (adr r3, 8007bf8 <_dtoa_r+0x310>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fbfb 	bl	80001f4 <__adddf3>
 80079fe:	4606      	mov	r6, r0
 8007a00:	4628      	mov	r0, r5
 8007a02:	460f      	mov	r7, r1
 8007a04:	f7f8 fd42 	bl	800048c <__aeabi_i2d>
 8007a08:	a37d      	add	r3, pc, #500	; (adr r3, 8007c00 <_dtoa_r+0x318>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f8 fda7 	bl	8000560 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4630      	mov	r0, r6
 8007a18:	4639      	mov	r1, r7
 8007a1a:	f7f8 fbeb 	bl	80001f4 <__adddf3>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	460f      	mov	r7, r1
 8007a22:	f7f9 f84d 	bl	8000ac0 <__aeabi_d2iz>
 8007a26:	2200      	movs	r2, #0
 8007a28:	4682      	mov	sl, r0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f7f9 f808 	bl	8000a44 <__aeabi_dcmplt>
 8007a34:	b148      	cbz	r0, 8007a4a <_dtoa_r+0x162>
 8007a36:	4650      	mov	r0, sl
 8007a38:	f7f8 fd28 	bl	800048c <__aeabi_i2d>
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	f7f8 fff6 	bl	8000a30 <__aeabi_dcmpeq>
 8007a44:	b908      	cbnz	r0, 8007a4a <_dtoa_r+0x162>
 8007a46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a4a:	f1ba 0f16 	cmp.w	sl, #22
 8007a4e:	d859      	bhi.n	8007b04 <_dtoa_r+0x21c>
 8007a50:	4970      	ldr	r1, [pc, #448]	; (8007c14 <_dtoa_r+0x32c>)
 8007a52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a5e:	f7f9 f80f 	bl	8000a80 <__aeabi_dcmpgt>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d050      	beq.n	8007b08 <_dtoa_r+0x220>
 8007a66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a70:	1b5d      	subs	r5, r3, r5
 8007a72:	f1b5 0801 	subs.w	r8, r5, #1
 8007a76:	bf49      	itett	mi
 8007a78:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a7c:	2300      	movpl	r3, #0
 8007a7e:	9305      	strmi	r3, [sp, #20]
 8007a80:	f04f 0800 	movmi.w	r8, #0
 8007a84:	bf58      	it	pl
 8007a86:	9305      	strpl	r3, [sp, #20]
 8007a88:	f1ba 0f00 	cmp.w	sl, #0
 8007a8c:	db3e      	blt.n	8007b0c <_dtoa_r+0x224>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	44d0      	add	r8, sl
 8007a92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007a96:	9307      	str	r3, [sp, #28]
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	2b09      	cmp	r3, #9
 8007a9c:	f200 8090 	bhi.w	8007bc0 <_dtoa_r+0x2d8>
 8007aa0:	2b05      	cmp	r3, #5
 8007aa2:	bfc4      	itt	gt
 8007aa4:	3b04      	subgt	r3, #4
 8007aa6:	9306      	strgt	r3, [sp, #24]
 8007aa8:	9b06      	ldr	r3, [sp, #24]
 8007aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8007aae:	bfcc      	ite	gt
 8007ab0:	2500      	movgt	r5, #0
 8007ab2:	2501      	movle	r5, #1
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	f200 808f 	bhi.w	8007bd8 <_dtoa_r+0x2f0>
 8007aba:	e8df f003 	tbb	[pc, r3]
 8007abe:	7f7d      	.short	0x7f7d
 8007ac0:	7131      	.short	0x7131
 8007ac2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007ac6:	441d      	add	r5, r3
 8007ac8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007acc:	2820      	cmp	r0, #32
 8007ace:	dd13      	ble.n	8007af8 <_dtoa_r+0x210>
 8007ad0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	fa08 f800 	lsl.w	r8, r8, r0
 8007ada:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007ade:	fa23 f000 	lsr.w	r0, r3, r0
 8007ae2:	ea48 0000 	orr.w	r0, r8, r0
 8007ae6:	f7f8 fcc1 	bl	800046c <__aeabi_ui2d>
 8007aea:	2301      	movs	r3, #1
 8007aec:	4682      	mov	sl, r0
 8007aee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007af2:	3d01      	subs	r5, #1
 8007af4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007af6:	e772      	b.n	80079de <_dtoa_r+0xf6>
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	f1c0 0020 	rsb	r0, r0, #32
 8007afe:	fa03 f000 	lsl.w	r0, r3, r0
 8007b02:	e7f0      	b.n	8007ae6 <_dtoa_r+0x1fe>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e7b1      	b.n	8007a6c <_dtoa_r+0x184>
 8007b08:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b0a:	e7b0      	b.n	8007a6e <_dtoa_r+0x186>
 8007b0c:	9b05      	ldr	r3, [sp, #20]
 8007b0e:	eba3 030a 	sub.w	r3, r3, sl
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	f1ca 0300 	rsb	r3, sl, #0
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b1e:	e7bb      	b.n	8007a98 <_dtoa_r+0x1b0>
 8007b20:	2301      	movs	r3, #1
 8007b22:	930a      	str	r3, [sp, #40]	; 0x28
 8007b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd59      	ble.n	8007bde <_dtoa_r+0x2f6>
 8007b2a:	9302      	str	r3, [sp, #8]
 8007b2c:	4699      	mov	r9, r3
 8007b2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b30:	2200      	movs	r2, #0
 8007b32:	6072      	str	r2, [r6, #4]
 8007b34:	2204      	movs	r2, #4
 8007b36:	f102 0014 	add.w	r0, r2, #20
 8007b3a:	4298      	cmp	r0, r3
 8007b3c:	6871      	ldr	r1, [r6, #4]
 8007b3e:	d953      	bls.n	8007be8 <_dtoa_r+0x300>
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 fcaa 	bl	800849a <_Balloc>
 8007b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b48:	6030      	str	r0, [r6, #0]
 8007b4a:	f1b9 0f0e 	cmp.w	r9, #14
 8007b4e:	f8d3 b000 	ldr.w	fp, [r3]
 8007b52:	f200 80e6 	bhi.w	8007d22 <_dtoa_r+0x43a>
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	f000 80e3 	beq.w	8007d22 <_dtoa_r+0x43a>
 8007b5c:	ed9d 7b00 	vldr	d7, [sp]
 8007b60:	f1ba 0f00 	cmp.w	sl, #0
 8007b64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007b68:	dd74      	ble.n	8007c54 <_dtoa_r+0x36c>
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <_dtoa_r+0x32c>)
 8007b6c:	f00a 030f 	and.w	r3, sl, #15
 8007b70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b74:	ed93 7b00 	vldr	d7, [r3]
 8007b78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007b7c:	06f0      	lsls	r0, r6, #27
 8007b7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007b82:	d565      	bpl.n	8007c50 <_dtoa_r+0x368>
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <_dtoa_r+0x330>)
 8007b86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b8e:	f7f8 fe11 	bl	80007b4 <__aeabi_ddiv>
 8007b92:	e9cd 0100 	strd	r0, r1, [sp]
 8007b96:	f006 060f 	and.w	r6, r6, #15
 8007b9a:	2503      	movs	r5, #3
 8007b9c:	4f1e      	ldr	r7, [pc, #120]	; (8007c18 <_dtoa_r+0x330>)
 8007b9e:	e04c      	b.n	8007c3a <_dtoa_r+0x352>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba6:	4453      	add	r3, sl
 8007ba8:	f103 0901 	add.w	r9, r3, #1
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	464b      	mov	r3, r9
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	bfb8      	it	lt
 8007bb4:	2301      	movlt	r3, #1
 8007bb6:	e7ba      	b.n	8007b2e <_dtoa_r+0x246>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e7b2      	b.n	8007b22 <_dtoa_r+0x23a>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e7f0      	b.n	8007ba2 <_dtoa_r+0x2ba>
 8007bc0:	2501      	movs	r5, #1
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9306      	str	r3, [sp, #24]
 8007bc6:	950a      	str	r5, [sp, #40]	; 0x28
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bcc:	9302      	str	r3, [sp, #8]
 8007bce:	4699      	mov	r9, r3
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2312      	movs	r3, #18
 8007bd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8007bd6:	e7aa      	b.n	8007b2e <_dtoa_r+0x246>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	930a      	str	r3, [sp, #40]	; 0x28
 8007bdc:	e7f4      	b.n	8007bc8 <_dtoa_r+0x2e0>
 8007bde:	2301      	movs	r3, #1
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	4699      	mov	r9, r3
 8007be4:	461a      	mov	r2, r3
 8007be6:	e7f5      	b.n	8007bd4 <_dtoa_r+0x2ec>
 8007be8:	3101      	adds	r1, #1
 8007bea:	6071      	str	r1, [r6, #4]
 8007bec:	0052      	lsls	r2, r2, #1
 8007bee:	e7a2      	b.n	8007b36 <_dtoa_r+0x24e>
 8007bf0:	636f4361 	.word	0x636f4361
 8007bf4:	3fd287a7 	.word	0x3fd287a7
 8007bf8:	8b60c8b3 	.word	0x8b60c8b3
 8007bfc:	3fc68a28 	.word	0x3fc68a28
 8007c00:	509f79fb 	.word	0x509f79fb
 8007c04:	3fd34413 	.word	0x3fd34413
 8007c08:	7ff00000 	.word	0x7ff00000
 8007c0c:	08009139 	.word	0x08009139
 8007c10:	3ff80000 	.word	0x3ff80000
 8007c14:	08009170 	.word	0x08009170
 8007c18:	08009148 	.word	0x08009148
 8007c1c:	08009143 	.word	0x08009143
 8007c20:	07f1      	lsls	r1, r6, #31
 8007c22:	d508      	bpl.n	8007c36 <_dtoa_r+0x34e>
 8007c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2c:	f7f8 fc98 	bl	8000560 <__aeabi_dmul>
 8007c30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c34:	3501      	adds	r5, #1
 8007c36:	1076      	asrs	r6, r6, #1
 8007c38:	3708      	adds	r7, #8
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	d1f0      	bne.n	8007c20 <_dtoa_r+0x338>
 8007c3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c46:	f7f8 fdb5 	bl	80007b4 <__aeabi_ddiv>
 8007c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c4e:	e01a      	b.n	8007c86 <_dtoa_r+0x39e>
 8007c50:	2502      	movs	r5, #2
 8007c52:	e7a3      	b.n	8007b9c <_dtoa_r+0x2b4>
 8007c54:	f000 80a0 	beq.w	8007d98 <_dtoa_r+0x4b0>
 8007c58:	f1ca 0600 	rsb	r6, sl, #0
 8007c5c:	4b9f      	ldr	r3, [pc, #636]	; (8007edc <_dtoa_r+0x5f4>)
 8007c5e:	4fa0      	ldr	r7, [pc, #640]	; (8007ee0 <_dtoa_r+0x5f8>)
 8007c60:	f006 020f 	and.w	r2, r6, #15
 8007c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c70:	f7f8 fc76 	bl	8000560 <__aeabi_dmul>
 8007c74:	e9cd 0100 	strd	r0, r1, [sp]
 8007c78:	1136      	asrs	r6, r6, #4
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2502      	movs	r5, #2
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	d17f      	bne.n	8007d82 <_dtoa_r+0x49a>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e1      	bne.n	8007c4a <_dtoa_r+0x362>
 8007c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8087 	beq.w	8007d9c <_dtoa_r+0x4b4>
 8007c8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b93      	ldr	r3, [pc, #588]	; (8007ee4 <_dtoa_r+0x5fc>)
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 fed3 	bl	8000a44 <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d07c      	beq.n	8007d9c <_dtoa_r+0x4b4>
 8007ca2:	f1b9 0f00 	cmp.w	r9, #0
 8007ca6:	d079      	beq.n	8007d9c <_dtoa_r+0x4b4>
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dd35      	ble.n	8007d1a <_dtoa_r+0x432>
 8007cae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007cb2:	9308      	str	r3, [sp, #32]
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4b8b      	ldr	r3, [pc, #556]	; (8007ee8 <_dtoa_r+0x600>)
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7f8 fc50 	bl	8000560 <__aeabi_dmul>
 8007cc0:	e9cd 0100 	strd	r0, r1, [sp]
 8007cc4:	9f02      	ldr	r7, [sp, #8]
 8007cc6:	3501      	adds	r5, #1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f7f8 fbdf 	bl	800048c <__aeabi_i2d>
 8007cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cd2:	f7f8 fc45 	bl	8000560 <__aeabi_dmul>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4b84      	ldr	r3, [pc, #528]	; (8007eec <_dtoa_r+0x604>)
 8007cda:	f7f8 fa8b 	bl	80001f4 <__adddf3>
 8007cde:	4605      	mov	r5, r0
 8007ce0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007ce4:	2f00      	cmp	r7, #0
 8007ce6:	d15d      	bne.n	8007da4 <_dtoa_r+0x4bc>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4b81      	ldr	r3, [pc, #516]	; (8007ef0 <_dtoa_r+0x608>)
 8007cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cf0:	f7f8 fa7e 	bl	80001f0 <__aeabi_dsub>
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	4633      	mov	r3, r6
 8007cf8:	e9cd 0100 	strd	r0, r1, [sp]
 8007cfc:	f7f8 fec0 	bl	8000a80 <__aeabi_dcmpgt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f040 8288 	bne.w	8008216 <_dtoa_r+0x92e>
 8007d06:	462a      	mov	r2, r5
 8007d08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d10:	f7f8 fe98 	bl	8000a44 <__aeabi_dcmplt>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f040 827c 	bne.w	8008212 <_dtoa_r+0x92a>
 8007d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8007d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f2c0 8150 	blt.w	8007fca <_dtoa_r+0x6e2>
 8007d2a:	f1ba 0f0e 	cmp.w	sl, #14
 8007d2e:	f300 814c 	bgt.w	8007fca <_dtoa_r+0x6e2>
 8007d32:	4b6a      	ldr	r3, [pc, #424]	; (8007edc <_dtoa_r+0x5f4>)
 8007d34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d38:	ed93 7b00 	vldr	d7, [r3]
 8007d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d44:	f280 80d8 	bge.w	8007ef8 <_dtoa_r+0x610>
 8007d48:	f1b9 0f00 	cmp.w	r9, #0
 8007d4c:	f300 80d4 	bgt.w	8007ef8 <_dtoa_r+0x610>
 8007d50:	f040 825e 	bne.w	8008210 <_dtoa_r+0x928>
 8007d54:	2200      	movs	r2, #0
 8007d56:	4b66      	ldr	r3, [pc, #408]	; (8007ef0 <_dtoa_r+0x608>)
 8007d58:	ec51 0b17 	vmov	r0, r1, d7
 8007d5c:	f7f8 fc00 	bl	8000560 <__aeabi_dmul>
 8007d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d64:	f7f8 fe82 	bl	8000a6c <__aeabi_dcmpge>
 8007d68:	464f      	mov	r7, r9
 8007d6a:	464e      	mov	r6, r9
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f040 8234 	bne.w	80081da <_dtoa_r+0x8f2>
 8007d72:	2331      	movs	r3, #49	; 0x31
 8007d74:	f10b 0501 	add.w	r5, fp, #1
 8007d78:	f88b 3000 	strb.w	r3, [fp]
 8007d7c:	f10a 0a01 	add.w	sl, sl, #1
 8007d80:	e22f      	b.n	80081e2 <_dtoa_r+0x8fa>
 8007d82:	07f2      	lsls	r2, r6, #31
 8007d84:	d505      	bpl.n	8007d92 <_dtoa_r+0x4aa>
 8007d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8a:	f7f8 fbe9 	bl	8000560 <__aeabi_dmul>
 8007d8e:	3501      	adds	r5, #1
 8007d90:	2301      	movs	r3, #1
 8007d92:	1076      	asrs	r6, r6, #1
 8007d94:	3708      	adds	r7, #8
 8007d96:	e772      	b.n	8007c7e <_dtoa_r+0x396>
 8007d98:	2502      	movs	r5, #2
 8007d9a:	e774      	b.n	8007c86 <_dtoa_r+0x39e>
 8007d9c:	f8cd a020 	str.w	sl, [sp, #32]
 8007da0:	464f      	mov	r7, r9
 8007da2:	e791      	b.n	8007cc8 <_dtoa_r+0x3e0>
 8007da4:	4b4d      	ldr	r3, [pc, #308]	; (8007edc <_dtoa_r+0x5f4>)
 8007da6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007daa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d047      	beq.n	8007e44 <_dtoa_r+0x55c>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	2000      	movs	r0, #0
 8007dba:	494e      	ldr	r1, [pc, #312]	; (8007ef4 <_dtoa_r+0x60c>)
 8007dbc:	f7f8 fcfa 	bl	80007b4 <__aeabi_ddiv>
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4633      	mov	r3, r6
 8007dc4:	f7f8 fa14 	bl	80001f0 <__aeabi_dsub>
 8007dc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007dcc:	465d      	mov	r5, fp
 8007dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dd2:	f7f8 fe75 	bl	8000ac0 <__aeabi_d2iz>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	f7f8 fb58 	bl	800048c <__aeabi_i2d>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007de4:	f7f8 fa04 	bl	80001f0 <__aeabi_dsub>
 8007de8:	3630      	adds	r6, #48	; 0x30
 8007dea:	f805 6b01 	strb.w	r6, [r5], #1
 8007dee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007df2:	e9cd 0100 	strd	r0, r1, [sp]
 8007df6:	f7f8 fe25 	bl	8000a44 <__aeabi_dcmplt>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d163      	bne.n	8007ec6 <_dtoa_r+0x5de>
 8007dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e02:	2000      	movs	r0, #0
 8007e04:	4937      	ldr	r1, [pc, #220]	; (8007ee4 <_dtoa_r+0x5fc>)
 8007e06:	f7f8 f9f3 	bl	80001f0 <__aeabi_dsub>
 8007e0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e0e:	f7f8 fe19 	bl	8000a44 <__aeabi_dcmplt>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f040 80b7 	bne.w	8007f86 <_dtoa_r+0x69e>
 8007e18:	eba5 030b 	sub.w	r3, r5, fp
 8007e1c:	429f      	cmp	r7, r3
 8007e1e:	f77f af7c 	ble.w	8007d1a <_dtoa_r+0x432>
 8007e22:	2200      	movs	r2, #0
 8007e24:	4b30      	ldr	r3, [pc, #192]	; (8007ee8 <_dtoa_r+0x600>)
 8007e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e2a:	f7f8 fb99 	bl	8000560 <__aeabi_dmul>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e34:	4b2c      	ldr	r3, [pc, #176]	; (8007ee8 <_dtoa_r+0x600>)
 8007e36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e3a:	f7f8 fb91 	bl	8000560 <__aeabi_dmul>
 8007e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8007e42:	e7c4      	b.n	8007dce <_dtoa_r+0x4e6>
 8007e44:	462a      	mov	r2, r5
 8007e46:	4633      	mov	r3, r6
 8007e48:	f7f8 fb8a 	bl	8000560 <__aeabi_dmul>
 8007e4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e50:	eb0b 0507 	add.w	r5, fp, r7
 8007e54:	465e      	mov	r6, fp
 8007e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e5a:	f7f8 fe31 	bl	8000ac0 <__aeabi_d2iz>
 8007e5e:	4607      	mov	r7, r0
 8007e60:	f7f8 fb14 	bl	800048c <__aeabi_i2d>
 8007e64:	3730      	adds	r7, #48	; 0x30
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e6e:	f7f8 f9bf 	bl	80001f0 <__aeabi_dsub>
 8007e72:	f806 7b01 	strb.w	r7, [r6], #1
 8007e76:	42ae      	cmp	r6, r5
 8007e78:	e9cd 0100 	strd	r0, r1, [sp]
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	d126      	bne.n	8007ed0 <_dtoa_r+0x5e8>
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <_dtoa_r+0x60c>)
 8007e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e88:	f7f8 f9b4 	bl	80001f4 <__adddf3>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e94:	f7f8 fdf4 	bl	8000a80 <__aeabi_dcmpgt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d174      	bne.n	8007f86 <_dtoa_r+0x69e>
 8007e9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4914      	ldr	r1, [pc, #80]	; (8007ef4 <_dtoa_r+0x60c>)
 8007ea4:	f7f8 f9a4 	bl	80001f0 <__aeabi_dsub>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eb0:	f7f8 fdc8 	bl	8000a44 <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f43f af30 	beq.w	8007d1a <_dtoa_r+0x432>
 8007eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ebe:	2b30      	cmp	r3, #48	; 0x30
 8007ec0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007ec4:	d002      	beq.n	8007ecc <_dtoa_r+0x5e4>
 8007ec6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007eca:	e04a      	b.n	8007f62 <_dtoa_r+0x67a>
 8007ecc:	4615      	mov	r5, r2
 8007ece:	e7f4      	b.n	8007eba <_dtoa_r+0x5d2>
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <_dtoa_r+0x600>)
 8007ed2:	f7f8 fb45 	bl	8000560 <__aeabi_dmul>
 8007ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8007eda:	e7bc      	b.n	8007e56 <_dtoa_r+0x56e>
 8007edc:	08009170 	.word	0x08009170
 8007ee0:	08009148 	.word	0x08009148
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	40240000 	.word	0x40240000
 8007eec:	401c0000 	.word	0x401c0000
 8007ef0:	40140000 	.word	0x40140000
 8007ef4:	3fe00000 	.word	0x3fe00000
 8007ef8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007efc:	465d      	mov	r5, fp
 8007efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f02:	4630      	mov	r0, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	f7f8 fc55 	bl	80007b4 <__aeabi_ddiv>
 8007f0a:	f7f8 fdd9 	bl	8000ac0 <__aeabi_d2iz>
 8007f0e:	4680      	mov	r8, r0
 8007f10:	f7f8 fabc 	bl	800048c <__aeabi_i2d>
 8007f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f18:	f7f8 fb22 	bl	8000560 <__aeabi_dmul>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007f28:	f7f8 f962 	bl	80001f0 <__aeabi_dsub>
 8007f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f30:	eba5 060b 	sub.w	r6, r5, fp
 8007f34:	45b1      	cmp	r9, r6
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	d139      	bne.n	8007fb0 <_dtoa_r+0x6c8>
 8007f3c:	f7f8 f95a 	bl	80001f4 <__adddf3>
 8007f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	f7f8 fd9a 	bl	8000a80 <__aeabi_dcmpgt>
 8007f4c:	b9c8      	cbnz	r0, 8007f82 <_dtoa_r+0x69a>
 8007f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f52:	4630      	mov	r0, r6
 8007f54:	4639      	mov	r1, r7
 8007f56:	f7f8 fd6b 	bl	8000a30 <__aeabi_dcmpeq>
 8007f5a:	b110      	cbz	r0, 8007f62 <_dtoa_r+0x67a>
 8007f5c:	f018 0f01 	tst.w	r8, #1
 8007f60:	d10f      	bne.n	8007f82 <_dtoa_r+0x69a>
 8007f62:	9904      	ldr	r1, [sp, #16]
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 facc 	bl	8008502 <_Bfree>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f6e:	702b      	strb	r3, [r5, #0]
 8007f70:	f10a 0301 	add.w	r3, sl, #1
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8241 	beq.w	8008400 <_dtoa_r+0xb18>
 8007f7e:	601d      	str	r5, [r3, #0]
 8007f80:	e23e      	b.n	8008400 <_dtoa_r+0xb18>
 8007f82:	f8cd a020 	str.w	sl, [sp, #32]
 8007f86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f8a:	2a39      	cmp	r2, #57	; 0x39
 8007f8c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007f90:	d108      	bne.n	8007fa4 <_dtoa_r+0x6bc>
 8007f92:	459b      	cmp	fp, r3
 8007f94:	d10a      	bne.n	8007fac <_dtoa_r+0x6c4>
 8007f96:	9b08      	ldr	r3, [sp, #32]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	9308      	str	r3, [sp, #32]
 8007f9c:	2330      	movs	r3, #48	; 0x30
 8007f9e:	f88b 3000 	strb.w	r3, [fp]
 8007fa2:	465b      	mov	r3, fp
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	3201      	adds	r2, #1
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	e78c      	b.n	8007ec6 <_dtoa_r+0x5de>
 8007fac:	461d      	mov	r5, r3
 8007fae:	e7ea      	b.n	8007f86 <_dtoa_r+0x69e>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4b9b      	ldr	r3, [pc, #620]	; (8008220 <_dtoa_r+0x938>)
 8007fb4:	f7f8 fad4 	bl	8000560 <__aeabi_dmul>
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	f7f8 fd36 	bl	8000a30 <__aeabi_dcmpeq>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d09a      	beq.n	8007efe <_dtoa_r+0x616>
 8007fc8:	e7cb      	b.n	8007f62 <_dtoa_r+0x67a>
 8007fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	f000 808b 	beq.w	80080e8 <_dtoa_r+0x800>
 8007fd2:	9a06      	ldr	r2, [sp, #24]
 8007fd4:	2a01      	cmp	r2, #1
 8007fd6:	dc6e      	bgt.n	80080b6 <_dtoa_r+0x7ce>
 8007fd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d067      	beq.n	80080ae <_dtoa_r+0x7c6>
 8007fde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fe2:	9f07      	ldr	r7, [sp, #28]
 8007fe4:	9d05      	ldr	r5, [sp, #20]
 8007fe6:	9a05      	ldr	r2, [sp, #20]
 8007fe8:	2101      	movs	r1, #1
 8007fea:	441a      	add	r2, r3
 8007fec:	4620      	mov	r0, r4
 8007fee:	9205      	str	r2, [sp, #20]
 8007ff0:	4498      	add	r8, r3
 8007ff2:	f000 fb26 	bl	8008642 <__i2b>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	dd0c      	ble.n	8008016 <_dtoa_r+0x72e>
 8007ffc:	f1b8 0f00 	cmp.w	r8, #0
 8008000:	dd09      	ble.n	8008016 <_dtoa_r+0x72e>
 8008002:	4545      	cmp	r5, r8
 8008004:	9a05      	ldr	r2, [sp, #20]
 8008006:	462b      	mov	r3, r5
 8008008:	bfa8      	it	ge
 800800a:	4643      	movge	r3, r8
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	9205      	str	r2, [sp, #20]
 8008010:	1aed      	subs	r5, r5, r3
 8008012:	eba8 0803 	sub.w	r8, r8, r3
 8008016:	9b07      	ldr	r3, [sp, #28]
 8008018:	b1eb      	cbz	r3, 8008056 <_dtoa_r+0x76e>
 800801a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801c:	2b00      	cmp	r3, #0
 800801e:	d067      	beq.n	80080f0 <_dtoa_r+0x808>
 8008020:	b18f      	cbz	r7, 8008046 <_dtoa_r+0x75e>
 8008022:	4631      	mov	r1, r6
 8008024:	463a      	mov	r2, r7
 8008026:	4620      	mov	r0, r4
 8008028:	f000 fbaa 	bl	8008780 <__pow5mult>
 800802c:	9a04      	ldr	r2, [sp, #16]
 800802e:	4601      	mov	r1, r0
 8008030:	4606      	mov	r6, r0
 8008032:	4620      	mov	r0, r4
 8008034:	f000 fb0e 	bl	8008654 <__multiply>
 8008038:	9904      	ldr	r1, [sp, #16]
 800803a:	9008      	str	r0, [sp, #32]
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fa60 	bl	8008502 <_Bfree>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	9b07      	ldr	r3, [sp, #28]
 8008048:	1bda      	subs	r2, r3, r7
 800804a:	d004      	beq.n	8008056 <_dtoa_r+0x76e>
 800804c:	9904      	ldr	r1, [sp, #16]
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fb96 	bl	8008780 <__pow5mult>
 8008054:	9004      	str	r0, [sp, #16]
 8008056:	2101      	movs	r1, #1
 8008058:	4620      	mov	r0, r4
 800805a:	f000 faf2 	bl	8008642 <__i2b>
 800805e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008060:	4607      	mov	r7, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 81d0 	beq.w	8008408 <_dtoa_r+0xb20>
 8008068:	461a      	mov	r2, r3
 800806a:	4601      	mov	r1, r0
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fb87 	bl	8008780 <__pow5mult>
 8008072:	9b06      	ldr	r3, [sp, #24]
 8008074:	2b01      	cmp	r3, #1
 8008076:	4607      	mov	r7, r0
 8008078:	dc40      	bgt.n	80080fc <_dtoa_r+0x814>
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d139      	bne.n	80080f4 <_dtoa_r+0x80c>
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008086:	2b00      	cmp	r3, #0
 8008088:	d136      	bne.n	80080f8 <_dtoa_r+0x810>
 800808a:	9b01      	ldr	r3, [sp, #4]
 800808c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008090:	0d1b      	lsrs	r3, r3, #20
 8008092:	051b      	lsls	r3, r3, #20
 8008094:	b12b      	cbz	r3, 80080a2 <_dtoa_r+0x7ba>
 8008096:	9b05      	ldr	r3, [sp, #20]
 8008098:	3301      	adds	r3, #1
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	f108 0801 	add.w	r8, r8, #1
 80080a0:	2301      	movs	r3, #1
 80080a2:	9307      	str	r3, [sp, #28]
 80080a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d12a      	bne.n	8008100 <_dtoa_r+0x818>
 80080aa:	2001      	movs	r0, #1
 80080ac:	e030      	b.n	8008110 <_dtoa_r+0x828>
 80080ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080b4:	e795      	b.n	8007fe2 <_dtoa_r+0x6fa>
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80080bc:	42bb      	cmp	r3, r7
 80080be:	bfbf      	itttt	lt
 80080c0:	9b07      	ldrlt	r3, [sp, #28]
 80080c2:	9707      	strlt	r7, [sp, #28]
 80080c4:	1afa      	sublt	r2, r7, r3
 80080c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80080c8:	bfbb      	ittet	lt
 80080ca:	189b      	addlt	r3, r3, r2
 80080cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80080ce:	1bdf      	subge	r7, r3, r7
 80080d0:	2700      	movlt	r7, #0
 80080d2:	f1b9 0f00 	cmp.w	r9, #0
 80080d6:	bfb5      	itete	lt
 80080d8:	9b05      	ldrlt	r3, [sp, #20]
 80080da:	9d05      	ldrge	r5, [sp, #20]
 80080dc:	eba3 0509 	sublt.w	r5, r3, r9
 80080e0:	464b      	movge	r3, r9
 80080e2:	bfb8      	it	lt
 80080e4:	2300      	movlt	r3, #0
 80080e6:	e77e      	b.n	8007fe6 <_dtoa_r+0x6fe>
 80080e8:	9f07      	ldr	r7, [sp, #28]
 80080ea:	9d05      	ldr	r5, [sp, #20]
 80080ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80080ee:	e783      	b.n	8007ff8 <_dtoa_r+0x710>
 80080f0:	9a07      	ldr	r2, [sp, #28]
 80080f2:	e7ab      	b.n	800804c <_dtoa_r+0x764>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e7d4      	b.n	80080a2 <_dtoa_r+0x7ba>
 80080f8:	9b00      	ldr	r3, [sp, #0]
 80080fa:	e7d2      	b.n	80080a2 <_dtoa_r+0x7ba>
 80080fc:	2300      	movs	r3, #0
 80080fe:	9307      	str	r3, [sp, #28]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008106:	6918      	ldr	r0, [r3, #16]
 8008108:	f000 fa4d 	bl	80085a6 <__hi0bits>
 800810c:	f1c0 0020 	rsb	r0, r0, #32
 8008110:	4440      	add	r0, r8
 8008112:	f010 001f 	ands.w	r0, r0, #31
 8008116:	d047      	beq.n	80081a8 <_dtoa_r+0x8c0>
 8008118:	f1c0 0320 	rsb	r3, r0, #32
 800811c:	2b04      	cmp	r3, #4
 800811e:	dd3b      	ble.n	8008198 <_dtoa_r+0x8b0>
 8008120:	9b05      	ldr	r3, [sp, #20]
 8008122:	f1c0 001c 	rsb	r0, r0, #28
 8008126:	4403      	add	r3, r0
 8008128:	9305      	str	r3, [sp, #20]
 800812a:	4405      	add	r5, r0
 800812c:	4480      	add	r8, r0
 800812e:	9b05      	ldr	r3, [sp, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	dd05      	ble.n	8008140 <_dtoa_r+0x858>
 8008134:	461a      	mov	r2, r3
 8008136:	9904      	ldr	r1, [sp, #16]
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fb6f 	bl	800881c <__lshift>
 800813e:	9004      	str	r0, [sp, #16]
 8008140:	f1b8 0f00 	cmp.w	r8, #0
 8008144:	dd05      	ble.n	8008152 <_dtoa_r+0x86a>
 8008146:	4639      	mov	r1, r7
 8008148:	4642      	mov	r2, r8
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fb66 	bl	800881c <__lshift>
 8008150:	4607      	mov	r7, r0
 8008152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008154:	b353      	cbz	r3, 80081ac <_dtoa_r+0x8c4>
 8008156:	4639      	mov	r1, r7
 8008158:	9804      	ldr	r0, [sp, #16]
 800815a:	f000 fbb3 	bl	80088c4 <__mcmp>
 800815e:	2800      	cmp	r0, #0
 8008160:	da24      	bge.n	80081ac <_dtoa_r+0x8c4>
 8008162:	2300      	movs	r3, #0
 8008164:	220a      	movs	r2, #10
 8008166:	9904      	ldr	r1, [sp, #16]
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f9e1 	bl	8008530 <__multadd>
 800816e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008170:	9004      	str	r0, [sp, #16]
 8008172:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 814d 	beq.w	8008416 <_dtoa_r+0xb2e>
 800817c:	2300      	movs	r3, #0
 800817e:	4631      	mov	r1, r6
 8008180:	220a      	movs	r2, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f9d4 	bl	8008530 <__multadd>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	4606      	mov	r6, r0
 800818e:	dc4f      	bgt.n	8008230 <_dtoa_r+0x948>
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	2b02      	cmp	r3, #2
 8008194:	dd4c      	ble.n	8008230 <_dtoa_r+0x948>
 8008196:	e011      	b.n	80081bc <_dtoa_r+0x8d4>
 8008198:	d0c9      	beq.n	800812e <_dtoa_r+0x846>
 800819a:	9a05      	ldr	r2, [sp, #20]
 800819c:	331c      	adds	r3, #28
 800819e:	441a      	add	r2, r3
 80081a0:	9205      	str	r2, [sp, #20]
 80081a2:	441d      	add	r5, r3
 80081a4:	4498      	add	r8, r3
 80081a6:	e7c2      	b.n	800812e <_dtoa_r+0x846>
 80081a8:	4603      	mov	r3, r0
 80081aa:	e7f6      	b.n	800819a <_dtoa_r+0x8b2>
 80081ac:	f1b9 0f00 	cmp.w	r9, #0
 80081b0:	dc38      	bgt.n	8008224 <_dtoa_r+0x93c>
 80081b2:	9b06      	ldr	r3, [sp, #24]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	dd35      	ble.n	8008224 <_dtoa_r+0x93c>
 80081b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	b963      	cbnz	r3, 80081da <_dtoa_r+0x8f2>
 80081c0:	4639      	mov	r1, r7
 80081c2:	2205      	movs	r2, #5
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 f9b3 	bl	8008530 <__multadd>
 80081ca:	4601      	mov	r1, r0
 80081cc:	4607      	mov	r7, r0
 80081ce:	9804      	ldr	r0, [sp, #16]
 80081d0:	f000 fb78 	bl	80088c4 <__mcmp>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f73f adcc 	bgt.w	8007d72 <_dtoa_r+0x48a>
 80081da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081dc:	465d      	mov	r5, fp
 80081de:	ea6f 0a03 	mvn.w	sl, r3
 80081e2:	f04f 0900 	mov.w	r9, #0
 80081e6:	4639      	mov	r1, r7
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 f98a 	bl	8008502 <_Bfree>
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	f43f aeb7 	beq.w	8007f62 <_dtoa_r+0x67a>
 80081f4:	f1b9 0f00 	cmp.w	r9, #0
 80081f8:	d005      	beq.n	8008206 <_dtoa_r+0x91e>
 80081fa:	45b1      	cmp	r9, r6
 80081fc:	d003      	beq.n	8008206 <_dtoa_r+0x91e>
 80081fe:	4649      	mov	r1, r9
 8008200:	4620      	mov	r0, r4
 8008202:	f000 f97e 	bl	8008502 <_Bfree>
 8008206:	4631      	mov	r1, r6
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f97a 	bl	8008502 <_Bfree>
 800820e:	e6a8      	b.n	8007f62 <_dtoa_r+0x67a>
 8008210:	2700      	movs	r7, #0
 8008212:	463e      	mov	r6, r7
 8008214:	e7e1      	b.n	80081da <_dtoa_r+0x8f2>
 8008216:	f8dd a020 	ldr.w	sl, [sp, #32]
 800821a:	463e      	mov	r6, r7
 800821c:	e5a9      	b.n	8007d72 <_dtoa_r+0x48a>
 800821e:	bf00      	nop
 8008220:	40240000 	.word	0x40240000
 8008224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008226:	f8cd 9008 	str.w	r9, [sp, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 80fa 	beq.w	8008424 <_dtoa_r+0xb3c>
 8008230:	2d00      	cmp	r5, #0
 8008232:	dd05      	ble.n	8008240 <_dtoa_r+0x958>
 8008234:	4631      	mov	r1, r6
 8008236:	462a      	mov	r2, r5
 8008238:	4620      	mov	r0, r4
 800823a:	f000 faef 	bl	800881c <__lshift>
 800823e:	4606      	mov	r6, r0
 8008240:	9b07      	ldr	r3, [sp, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d04c      	beq.n	80082e0 <_dtoa_r+0x9f8>
 8008246:	6871      	ldr	r1, [r6, #4]
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f926 	bl	800849a <_Balloc>
 800824e:	6932      	ldr	r2, [r6, #16]
 8008250:	3202      	adds	r2, #2
 8008252:	4605      	mov	r5, r0
 8008254:	0092      	lsls	r2, r2, #2
 8008256:	f106 010c 	add.w	r1, r6, #12
 800825a:	300c      	adds	r0, #12
 800825c:	f000 f912 	bl	8008484 <memcpy>
 8008260:	2201      	movs	r2, #1
 8008262:	4629      	mov	r1, r5
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fad9 	bl	800881c <__lshift>
 800826a:	9b00      	ldr	r3, [sp, #0]
 800826c:	f8cd b014 	str.w	fp, [sp, #20]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	46b1      	mov	r9, r6
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	4606      	mov	r6, r0
 800827a:	4639      	mov	r1, r7
 800827c:	9804      	ldr	r0, [sp, #16]
 800827e:	f7ff faa6 	bl	80077ce <quorem>
 8008282:	4649      	mov	r1, r9
 8008284:	4605      	mov	r5, r0
 8008286:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800828a:	9804      	ldr	r0, [sp, #16]
 800828c:	f000 fb1a 	bl	80088c4 <__mcmp>
 8008290:	4632      	mov	r2, r6
 8008292:	9000      	str	r0, [sp, #0]
 8008294:	4639      	mov	r1, r7
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fb2e 	bl	80088f8 <__mdiff>
 800829c:	68c3      	ldr	r3, [r0, #12]
 800829e:	4602      	mov	r2, r0
 80082a0:	bb03      	cbnz	r3, 80082e4 <_dtoa_r+0x9fc>
 80082a2:	4601      	mov	r1, r0
 80082a4:	9008      	str	r0, [sp, #32]
 80082a6:	9804      	ldr	r0, [sp, #16]
 80082a8:	f000 fb0c 	bl	80088c4 <__mcmp>
 80082ac:	9a08      	ldr	r2, [sp, #32]
 80082ae:	4603      	mov	r3, r0
 80082b0:	4611      	mov	r1, r2
 80082b2:	4620      	mov	r0, r4
 80082b4:	9308      	str	r3, [sp, #32]
 80082b6:	f000 f924 	bl	8008502 <_Bfree>
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	b9a3      	cbnz	r3, 80082e8 <_dtoa_r+0xa00>
 80082be:	9a06      	ldr	r2, [sp, #24]
 80082c0:	b992      	cbnz	r2, 80082e8 <_dtoa_r+0xa00>
 80082c2:	9a07      	ldr	r2, [sp, #28]
 80082c4:	b982      	cbnz	r2, 80082e8 <_dtoa_r+0xa00>
 80082c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80082ca:	d029      	beq.n	8008320 <_dtoa_r+0xa38>
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dd01      	ble.n	80082d6 <_dtoa_r+0x9ee>
 80082d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80082d6:	9b05      	ldr	r3, [sp, #20]
 80082d8:	1c5d      	adds	r5, r3, #1
 80082da:	f883 8000 	strb.w	r8, [r3]
 80082de:	e782      	b.n	80081e6 <_dtoa_r+0x8fe>
 80082e0:	4630      	mov	r0, r6
 80082e2:	e7c2      	b.n	800826a <_dtoa_r+0x982>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7e3      	b.n	80082b0 <_dtoa_r+0x9c8>
 80082e8:	9a00      	ldr	r2, [sp, #0]
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	db04      	blt.n	80082f8 <_dtoa_r+0xa10>
 80082ee:	d125      	bne.n	800833c <_dtoa_r+0xa54>
 80082f0:	9a06      	ldr	r2, [sp, #24]
 80082f2:	bb1a      	cbnz	r2, 800833c <_dtoa_r+0xa54>
 80082f4:	9a07      	ldr	r2, [sp, #28]
 80082f6:	bb0a      	cbnz	r2, 800833c <_dtoa_r+0xa54>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	ddec      	ble.n	80082d6 <_dtoa_r+0x9ee>
 80082fc:	2201      	movs	r2, #1
 80082fe:	9904      	ldr	r1, [sp, #16]
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fa8b 	bl	800881c <__lshift>
 8008306:	4639      	mov	r1, r7
 8008308:	9004      	str	r0, [sp, #16]
 800830a:	f000 fadb 	bl	80088c4 <__mcmp>
 800830e:	2800      	cmp	r0, #0
 8008310:	dc03      	bgt.n	800831a <_dtoa_r+0xa32>
 8008312:	d1e0      	bne.n	80082d6 <_dtoa_r+0x9ee>
 8008314:	f018 0f01 	tst.w	r8, #1
 8008318:	d0dd      	beq.n	80082d6 <_dtoa_r+0x9ee>
 800831a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800831e:	d1d8      	bne.n	80082d2 <_dtoa_r+0x9ea>
 8008320:	9b05      	ldr	r3, [sp, #20]
 8008322:	9a05      	ldr	r2, [sp, #20]
 8008324:	1c5d      	adds	r5, r3, #1
 8008326:	2339      	movs	r3, #57	; 0x39
 8008328:	7013      	strb	r3, [r2, #0]
 800832a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800832e:	2b39      	cmp	r3, #57	; 0x39
 8008330:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008334:	d04f      	beq.n	80083d6 <_dtoa_r+0xaee>
 8008336:	3301      	adds	r3, #1
 8008338:	7013      	strb	r3, [r2, #0]
 800833a:	e754      	b.n	80081e6 <_dtoa_r+0x8fe>
 800833c:	9a05      	ldr	r2, [sp, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f102 0501 	add.w	r5, r2, #1
 8008344:	dd06      	ble.n	8008354 <_dtoa_r+0xa6c>
 8008346:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800834a:	d0e9      	beq.n	8008320 <_dtoa_r+0xa38>
 800834c:	f108 0801 	add.w	r8, r8, #1
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	e7c2      	b.n	80082da <_dtoa_r+0x9f2>
 8008354:	9a02      	ldr	r2, [sp, #8]
 8008356:	f805 8c01 	strb.w	r8, [r5, #-1]
 800835a:	eba5 030b 	sub.w	r3, r5, fp
 800835e:	4293      	cmp	r3, r2
 8008360:	d021      	beq.n	80083a6 <_dtoa_r+0xabe>
 8008362:	2300      	movs	r3, #0
 8008364:	220a      	movs	r2, #10
 8008366:	9904      	ldr	r1, [sp, #16]
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f8e1 	bl	8008530 <__multadd>
 800836e:	45b1      	cmp	r9, r6
 8008370:	9004      	str	r0, [sp, #16]
 8008372:	f04f 0300 	mov.w	r3, #0
 8008376:	f04f 020a 	mov.w	r2, #10
 800837a:	4649      	mov	r1, r9
 800837c:	4620      	mov	r0, r4
 800837e:	d105      	bne.n	800838c <_dtoa_r+0xaa4>
 8008380:	f000 f8d6 	bl	8008530 <__multadd>
 8008384:	4681      	mov	r9, r0
 8008386:	4606      	mov	r6, r0
 8008388:	9505      	str	r5, [sp, #20]
 800838a:	e776      	b.n	800827a <_dtoa_r+0x992>
 800838c:	f000 f8d0 	bl	8008530 <__multadd>
 8008390:	4631      	mov	r1, r6
 8008392:	4681      	mov	r9, r0
 8008394:	2300      	movs	r3, #0
 8008396:	220a      	movs	r2, #10
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f8c9 	bl	8008530 <__multadd>
 800839e:	4606      	mov	r6, r0
 80083a0:	e7f2      	b.n	8008388 <_dtoa_r+0xaa0>
 80083a2:	f04f 0900 	mov.w	r9, #0
 80083a6:	2201      	movs	r2, #1
 80083a8:	9904      	ldr	r1, [sp, #16]
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fa36 	bl	800881c <__lshift>
 80083b0:	4639      	mov	r1, r7
 80083b2:	9004      	str	r0, [sp, #16]
 80083b4:	f000 fa86 	bl	80088c4 <__mcmp>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	dcb6      	bgt.n	800832a <_dtoa_r+0xa42>
 80083bc:	d102      	bne.n	80083c4 <_dtoa_r+0xadc>
 80083be:	f018 0f01 	tst.w	r8, #1
 80083c2:	d1b2      	bne.n	800832a <_dtoa_r+0xa42>
 80083c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083c8:	2b30      	cmp	r3, #48	; 0x30
 80083ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80083ce:	f47f af0a 	bne.w	80081e6 <_dtoa_r+0x8fe>
 80083d2:	4615      	mov	r5, r2
 80083d4:	e7f6      	b.n	80083c4 <_dtoa_r+0xadc>
 80083d6:	4593      	cmp	fp, r2
 80083d8:	d105      	bne.n	80083e6 <_dtoa_r+0xafe>
 80083da:	2331      	movs	r3, #49	; 0x31
 80083dc:	f10a 0a01 	add.w	sl, sl, #1
 80083e0:	f88b 3000 	strb.w	r3, [fp]
 80083e4:	e6ff      	b.n	80081e6 <_dtoa_r+0x8fe>
 80083e6:	4615      	mov	r5, r2
 80083e8:	e79f      	b.n	800832a <_dtoa_r+0xa42>
 80083ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008450 <_dtoa_r+0xb68>
 80083ee:	e007      	b.n	8008400 <_dtoa_r+0xb18>
 80083f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008454 <_dtoa_r+0xb6c>
 80083f6:	b11b      	cbz	r3, 8008400 <_dtoa_r+0xb18>
 80083f8:	f10b 0308 	add.w	r3, fp, #8
 80083fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	4658      	mov	r0, fp
 8008402:	b017      	add	sp, #92	; 0x5c
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	9b06      	ldr	r3, [sp, #24]
 800840a:	2b01      	cmp	r3, #1
 800840c:	f77f ae35 	ble.w	800807a <_dtoa_r+0x792>
 8008410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008412:	9307      	str	r3, [sp, #28]
 8008414:	e649      	b.n	80080aa <_dtoa_r+0x7c2>
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc03      	bgt.n	8008424 <_dtoa_r+0xb3c>
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	2b02      	cmp	r3, #2
 8008420:	f73f aecc 	bgt.w	80081bc <_dtoa_r+0x8d4>
 8008424:	465d      	mov	r5, fp
 8008426:	4639      	mov	r1, r7
 8008428:	9804      	ldr	r0, [sp, #16]
 800842a:	f7ff f9d0 	bl	80077ce <quorem>
 800842e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008432:	f805 8b01 	strb.w	r8, [r5], #1
 8008436:	9a02      	ldr	r2, [sp, #8]
 8008438:	eba5 030b 	sub.w	r3, r5, fp
 800843c:	429a      	cmp	r2, r3
 800843e:	ddb0      	ble.n	80083a2 <_dtoa_r+0xaba>
 8008440:	2300      	movs	r3, #0
 8008442:	220a      	movs	r2, #10
 8008444:	9904      	ldr	r1, [sp, #16]
 8008446:	4620      	mov	r0, r4
 8008448:	f000 f872 	bl	8008530 <__multadd>
 800844c:	9004      	str	r0, [sp, #16]
 800844e:	e7ea      	b.n	8008426 <_dtoa_r+0xb3e>
 8008450:	08009138 	.word	0x08009138
 8008454:	0800913a 	.word	0x0800913a

08008458 <_localeconv_r>:
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <_localeconv_r+0x14>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6a18      	ldr	r0, [r3, #32]
 800845e:	4b04      	ldr	r3, [pc, #16]	; (8008470 <_localeconv_r+0x18>)
 8008460:	2800      	cmp	r0, #0
 8008462:	bf08      	it	eq
 8008464:	4618      	moveq	r0, r3
 8008466:	30f0      	adds	r0, #240	; 0xf0
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000030 	.word	0x20000030
 8008470:	20000094 	.word	0x20000094

08008474 <malloc>:
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <malloc+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f000 baf7 	b.w	8008a6c <_malloc_r>
 800847e:	bf00      	nop
 8008480:	20000030 	.word	0x20000030

08008484 <memcpy>:
 8008484:	b510      	push	{r4, lr}
 8008486:	1e43      	subs	r3, r0, #1
 8008488:	440a      	add	r2, r1
 800848a:	4291      	cmp	r1, r2
 800848c:	d100      	bne.n	8008490 <memcpy+0xc>
 800848e:	bd10      	pop	{r4, pc}
 8008490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008498:	e7f7      	b.n	800848a <memcpy+0x6>

0800849a <_Balloc>:
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800849e:	4604      	mov	r4, r0
 80084a0:	460e      	mov	r6, r1
 80084a2:	b93d      	cbnz	r5, 80084b4 <_Balloc+0x1a>
 80084a4:	2010      	movs	r0, #16
 80084a6:	f7ff ffe5 	bl	8008474 <malloc>
 80084aa:	6260      	str	r0, [r4, #36]	; 0x24
 80084ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084b0:	6005      	str	r5, [r0, #0]
 80084b2:	60c5      	str	r5, [r0, #12]
 80084b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084b6:	68eb      	ldr	r3, [r5, #12]
 80084b8:	b183      	cbz	r3, 80084dc <_Balloc+0x42>
 80084ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80084c2:	b9b8      	cbnz	r0, 80084f4 <_Balloc+0x5a>
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f506 	lsl.w	r5, r1, r6
 80084ca:	1d6a      	adds	r2, r5, #5
 80084cc:	0092      	lsls	r2, r2, #2
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fabe 	bl	8008a50 <_calloc_r>
 80084d4:	b160      	cbz	r0, 80084f0 <_Balloc+0x56>
 80084d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084da:	e00e      	b.n	80084fa <_Balloc+0x60>
 80084dc:	2221      	movs	r2, #33	; 0x21
 80084de:	2104      	movs	r1, #4
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fab5 	bl	8008a50 <_calloc_r>
 80084e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e8:	60e8      	str	r0, [r5, #12]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e4      	bne.n	80084ba <_Balloc+0x20>
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	6802      	ldr	r2, [r0, #0]
 80084f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80084fa:	2300      	movs	r3, #0
 80084fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008500:	e7f7      	b.n	80084f2 <_Balloc+0x58>

08008502 <_Bfree>:
 8008502:	b570      	push	{r4, r5, r6, lr}
 8008504:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008506:	4606      	mov	r6, r0
 8008508:	460d      	mov	r5, r1
 800850a:	b93c      	cbnz	r4, 800851c <_Bfree+0x1a>
 800850c:	2010      	movs	r0, #16
 800850e:	f7ff ffb1 	bl	8008474 <malloc>
 8008512:	6270      	str	r0, [r6, #36]	; 0x24
 8008514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008518:	6004      	str	r4, [r0, #0]
 800851a:	60c4      	str	r4, [r0, #12]
 800851c:	b13d      	cbz	r5, 800852e <_Bfree+0x2c>
 800851e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008520:	686a      	ldr	r2, [r5, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008528:	6029      	str	r1, [r5, #0]
 800852a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800852e:	bd70      	pop	{r4, r5, r6, pc}

08008530 <__multadd>:
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	690d      	ldr	r5, [r1, #16]
 8008536:	461f      	mov	r7, r3
 8008538:	4606      	mov	r6, r0
 800853a:	460c      	mov	r4, r1
 800853c:	f101 0c14 	add.w	ip, r1, #20
 8008540:	2300      	movs	r3, #0
 8008542:	f8dc 0000 	ldr.w	r0, [ip]
 8008546:	b281      	uxth	r1, r0
 8008548:	fb02 7101 	mla	r1, r2, r1, r7
 800854c:	0c0f      	lsrs	r7, r1, #16
 800854e:	0c00      	lsrs	r0, r0, #16
 8008550:	fb02 7000 	mla	r0, r2, r0, r7
 8008554:	b289      	uxth	r1, r1
 8008556:	3301      	adds	r3, #1
 8008558:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800855c:	429d      	cmp	r5, r3
 800855e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008562:	f84c 1b04 	str.w	r1, [ip], #4
 8008566:	dcec      	bgt.n	8008542 <__multadd+0x12>
 8008568:	b1d7      	cbz	r7, 80085a0 <__multadd+0x70>
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	42ab      	cmp	r3, r5
 800856e:	dc12      	bgt.n	8008596 <__multadd+0x66>
 8008570:	6861      	ldr	r1, [r4, #4]
 8008572:	4630      	mov	r0, r6
 8008574:	3101      	adds	r1, #1
 8008576:	f7ff ff90 	bl	800849a <_Balloc>
 800857a:	6922      	ldr	r2, [r4, #16]
 800857c:	3202      	adds	r2, #2
 800857e:	f104 010c 	add.w	r1, r4, #12
 8008582:	4680      	mov	r8, r0
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	300c      	adds	r0, #12
 8008588:	f7ff ff7c 	bl	8008484 <memcpy>
 800858c:	4621      	mov	r1, r4
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ffb7 	bl	8008502 <_Bfree>
 8008594:	4644      	mov	r4, r8
 8008596:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800859a:	3501      	adds	r5, #1
 800859c:	615f      	str	r7, [r3, #20]
 800859e:	6125      	str	r5, [r4, #16]
 80085a0:	4620      	mov	r0, r4
 80085a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085a6 <__hi0bits>:
 80085a6:	0c02      	lsrs	r2, r0, #16
 80085a8:	0412      	lsls	r2, r2, #16
 80085aa:	4603      	mov	r3, r0
 80085ac:	b9b2      	cbnz	r2, 80085dc <__hi0bits+0x36>
 80085ae:	0403      	lsls	r3, r0, #16
 80085b0:	2010      	movs	r0, #16
 80085b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085b6:	bf04      	itt	eq
 80085b8:	021b      	lsleq	r3, r3, #8
 80085ba:	3008      	addeq	r0, #8
 80085bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085c0:	bf04      	itt	eq
 80085c2:	011b      	lsleq	r3, r3, #4
 80085c4:	3004      	addeq	r0, #4
 80085c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085ca:	bf04      	itt	eq
 80085cc:	009b      	lsleq	r3, r3, #2
 80085ce:	3002      	addeq	r0, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	db06      	blt.n	80085e2 <__hi0bits+0x3c>
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	d503      	bpl.n	80085e0 <__hi0bits+0x3a>
 80085d8:	3001      	adds	r0, #1
 80085da:	4770      	bx	lr
 80085dc:	2000      	movs	r0, #0
 80085de:	e7e8      	b.n	80085b2 <__hi0bits+0xc>
 80085e0:	2020      	movs	r0, #32
 80085e2:	4770      	bx	lr

080085e4 <__lo0bits>:
 80085e4:	6803      	ldr	r3, [r0, #0]
 80085e6:	f013 0207 	ands.w	r2, r3, #7
 80085ea:	4601      	mov	r1, r0
 80085ec:	d00b      	beq.n	8008606 <__lo0bits+0x22>
 80085ee:	07da      	lsls	r2, r3, #31
 80085f0:	d423      	bmi.n	800863a <__lo0bits+0x56>
 80085f2:	0798      	lsls	r0, r3, #30
 80085f4:	bf49      	itett	mi
 80085f6:	085b      	lsrmi	r3, r3, #1
 80085f8:	089b      	lsrpl	r3, r3, #2
 80085fa:	2001      	movmi	r0, #1
 80085fc:	600b      	strmi	r3, [r1, #0]
 80085fe:	bf5c      	itt	pl
 8008600:	600b      	strpl	r3, [r1, #0]
 8008602:	2002      	movpl	r0, #2
 8008604:	4770      	bx	lr
 8008606:	b298      	uxth	r0, r3
 8008608:	b9a8      	cbnz	r0, 8008636 <__lo0bits+0x52>
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	2010      	movs	r0, #16
 800860e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008612:	bf04      	itt	eq
 8008614:	0a1b      	lsreq	r3, r3, #8
 8008616:	3008      	addeq	r0, #8
 8008618:	071a      	lsls	r2, r3, #28
 800861a:	bf04      	itt	eq
 800861c:	091b      	lsreq	r3, r3, #4
 800861e:	3004      	addeq	r0, #4
 8008620:	079a      	lsls	r2, r3, #30
 8008622:	bf04      	itt	eq
 8008624:	089b      	lsreq	r3, r3, #2
 8008626:	3002      	addeq	r0, #2
 8008628:	07da      	lsls	r2, r3, #31
 800862a:	d402      	bmi.n	8008632 <__lo0bits+0x4e>
 800862c:	085b      	lsrs	r3, r3, #1
 800862e:	d006      	beq.n	800863e <__lo0bits+0x5a>
 8008630:	3001      	adds	r0, #1
 8008632:	600b      	str	r3, [r1, #0]
 8008634:	4770      	bx	lr
 8008636:	4610      	mov	r0, r2
 8008638:	e7e9      	b.n	800860e <__lo0bits+0x2a>
 800863a:	2000      	movs	r0, #0
 800863c:	4770      	bx	lr
 800863e:	2020      	movs	r0, #32
 8008640:	4770      	bx	lr

08008642 <__i2b>:
 8008642:	b510      	push	{r4, lr}
 8008644:	460c      	mov	r4, r1
 8008646:	2101      	movs	r1, #1
 8008648:	f7ff ff27 	bl	800849a <_Balloc>
 800864c:	2201      	movs	r2, #1
 800864e:	6144      	str	r4, [r0, #20]
 8008650:	6102      	str	r2, [r0, #16]
 8008652:	bd10      	pop	{r4, pc}

08008654 <__multiply>:
 8008654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	4614      	mov	r4, r2
 800865a:	690a      	ldr	r2, [r1, #16]
 800865c:	6923      	ldr	r3, [r4, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	bfb8      	it	lt
 8008662:	460b      	movlt	r3, r1
 8008664:	4688      	mov	r8, r1
 8008666:	bfbc      	itt	lt
 8008668:	46a0      	movlt	r8, r4
 800866a:	461c      	movlt	r4, r3
 800866c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008670:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008674:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800867c:	eb07 0609 	add.w	r6, r7, r9
 8008680:	42b3      	cmp	r3, r6
 8008682:	bfb8      	it	lt
 8008684:	3101      	addlt	r1, #1
 8008686:	f7ff ff08 	bl	800849a <_Balloc>
 800868a:	f100 0514 	add.w	r5, r0, #20
 800868e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008692:	462b      	mov	r3, r5
 8008694:	2200      	movs	r2, #0
 8008696:	4573      	cmp	r3, lr
 8008698:	d316      	bcc.n	80086c8 <__multiply+0x74>
 800869a:	f104 0214 	add.w	r2, r4, #20
 800869e:	f108 0114 	add.w	r1, r8, #20
 80086a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80086a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	9b00      	ldr	r3, [sp, #0]
 80086ae:	9201      	str	r2, [sp, #4]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d80c      	bhi.n	80086ce <__multiply+0x7a>
 80086b4:	2e00      	cmp	r6, #0
 80086b6:	dd03      	ble.n	80086c0 <__multiply+0x6c>
 80086b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d05d      	beq.n	800877c <__multiply+0x128>
 80086c0:	6106      	str	r6, [r0, #16]
 80086c2:	b003      	add	sp, #12
 80086c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c8:	f843 2b04 	str.w	r2, [r3], #4
 80086cc:	e7e3      	b.n	8008696 <__multiply+0x42>
 80086ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80086d2:	f1bb 0f00 	cmp.w	fp, #0
 80086d6:	d023      	beq.n	8008720 <__multiply+0xcc>
 80086d8:	4689      	mov	r9, r1
 80086da:	46ac      	mov	ip, r5
 80086dc:	f04f 0800 	mov.w	r8, #0
 80086e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80086e4:	f8dc a000 	ldr.w	sl, [ip]
 80086e8:	b2a3      	uxth	r3, r4
 80086ea:	fa1f fa8a 	uxth.w	sl, sl
 80086ee:	fb0b a303 	mla	r3, fp, r3, sl
 80086f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086f6:	f8dc 4000 	ldr.w	r4, [ip]
 80086fa:	4443      	add	r3, r8
 80086fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008700:	fb0b 840a 	mla	r4, fp, sl, r8
 8008704:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008708:	46e2      	mov	sl, ip
 800870a:	b29b      	uxth	r3, r3
 800870c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008710:	454f      	cmp	r7, r9
 8008712:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008716:	f84a 3b04 	str.w	r3, [sl], #4
 800871a:	d82b      	bhi.n	8008774 <__multiply+0x120>
 800871c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008726:	3204      	adds	r2, #4
 8008728:	f1ba 0f00 	cmp.w	sl, #0
 800872c:	d020      	beq.n	8008770 <__multiply+0x11c>
 800872e:	682b      	ldr	r3, [r5, #0]
 8008730:	4689      	mov	r9, r1
 8008732:	46a8      	mov	r8, r5
 8008734:	f04f 0b00 	mov.w	fp, #0
 8008738:	f8b9 c000 	ldrh.w	ip, [r9]
 800873c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008740:	fb0a 440c 	mla	r4, sl, ip, r4
 8008744:	445c      	add	r4, fp
 8008746:	46c4      	mov	ip, r8
 8008748:	b29b      	uxth	r3, r3
 800874a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800874e:	f84c 3b04 	str.w	r3, [ip], #4
 8008752:	f859 3b04 	ldr.w	r3, [r9], #4
 8008756:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800875a:	0c1b      	lsrs	r3, r3, #16
 800875c:	fb0a b303 	mla	r3, sl, r3, fp
 8008760:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008764:	454f      	cmp	r7, r9
 8008766:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800876a:	d805      	bhi.n	8008778 <__multiply+0x124>
 800876c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008770:	3504      	adds	r5, #4
 8008772:	e79b      	b.n	80086ac <__multiply+0x58>
 8008774:	46d4      	mov	ip, sl
 8008776:	e7b3      	b.n	80086e0 <__multiply+0x8c>
 8008778:	46e0      	mov	r8, ip
 800877a:	e7dd      	b.n	8008738 <__multiply+0xe4>
 800877c:	3e01      	subs	r6, #1
 800877e:	e799      	b.n	80086b4 <__multiply+0x60>

08008780 <__pow5mult>:
 8008780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008784:	4615      	mov	r5, r2
 8008786:	f012 0203 	ands.w	r2, r2, #3
 800878a:	4606      	mov	r6, r0
 800878c:	460f      	mov	r7, r1
 800878e:	d007      	beq.n	80087a0 <__pow5mult+0x20>
 8008790:	3a01      	subs	r2, #1
 8008792:	4c21      	ldr	r4, [pc, #132]	; (8008818 <__pow5mult+0x98>)
 8008794:	2300      	movs	r3, #0
 8008796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800879a:	f7ff fec9 	bl	8008530 <__multadd>
 800879e:	4607      	mov	r7, r0
 80087a0:	10ad      	asrs	r5, r5, #2
 80087a2:	d035      	beq.n	8008810 <__pow5mult+0x90>
 80087a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087a6:	b93c      	cbnz	r4, 80087b8 <__pow5mult+0x38>
 80087a8:	2010      	movs	r0, #16
 80087aa:	f7ff fe63 	bl	8008474 <malloc>
 80087ae:	6270      	str	r0, [r6, #36]	; 0x24
 80087b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087b4:	6004      	str	r4, [r0, #0]
 80087b6:	60c4      	str	r4, [r0, #12]
 80087b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087c0:	b94c      	cbnz	r4, 80087d6 <__pow5mult+0x56>
 80087c2:	f240 2171 	movw	r1, #625	; 0x271
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff ff3b 	bl	8008642 <__i2b>
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80087d2:	4604      	mov	r4, r0
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	f04f 0800 	mov.w	r8, #0
 80087da:	07eb      	lsls	r3, r5, #31
 80087dc:	d50a      	bpl.n	80087f4 <__pow5mult+0x74>
 80087de:	4639      	mov	r1, r7
 80087e0:	4622      	mov	r2, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ff36 	bl	8008654 <__multiply>
 80087e8:	4639      	mov	r1, r7
 80087ea:	4681      	mov	r9, r0
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff fe88 	bl	8008502 <_Bfree>
 80087f2:	464f      	mov	r7, r9
 80087f4:	106d      	asrs	r5, r5, #1
 80087f6:	d00b      	beq.n	8008810 <__pow5mult+0x90>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	b938      	cbnz	r0, 800880c <__pow5mult+0x8c>
 80087fc:	4622      	mov	r2, r4
 80087fe:	4621      	mov	r1, r4
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ff27 	bl	8008654 <__multiply>
 8008806:	6020      	str	r0, [r4, #0]
 8008808:	f8c0 8000 	str.w	r8, [r0]
 800880c:	4604      	mov	r4, r0
 800880e:	e7e4      	b.n	80087da <__pow5mult+0x5a>
 8008810:	4638      	mov	r0, r7
 8008812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008816:	bf00      	nop
 8008818:	08009238 	.word	0x08009238

0800881c <__lshift>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	6849      	ldr	r1, [r1, #4]
 800882a:	eb0a 0903 	add.w	r9, sl, r3
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	4607      	mov	r7, r0
 8008832:	4616      	mov	r6, r2
 8008834:	f109 0501 	add.w	r5, r9, #1
 8008838:	42ab      	cmp	r3, r5
 800883a:	db32      	blt.n	80088a2 <__lshift+0x86>
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff fe2c 	bl	800849a <_Balloc>
 8008842:	2300      	movs	r3, #0
 8008844:	4680      	mov	r8, r0
 8008846:	f100 0114 	add.w	r1, r0, #20
 800884a:	461a      	mov	r2, r3
 800884c:	4553      	cmp	r3, sl
 800884e:	db2b      	blt.n	80088a8 <__lshift+0x8c>
 8008850:	6920      	ldr	r0, [r4, #16]
 8008852:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008856:	f104 0314 	add.w	r3, r4, #20
 800885a:	f016 021f 	ands.w	r2, r6, #31
 800885e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008862:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008866:	d025      	beq.n	80088b4 <__lshift+0x98>
 8008868:	f1c2 0e20 	rsb	lr, r2, #32
 800886c:	2000      	movs	r0, #0
 800886e:	681e      	ldr	r6, [r3, #0]
 8008870:	468a      	mov	sl, r1
 8008872:	4096      	lsls	r6, r2
 8008874:	4330      	orrs	r0, r6
 8008876:	f84a 0b04 	str.w	r0, [sl], #4
 800887a:	f853 0b04 	ldr.w	r0, [r3], #4
 800887e:	459c      	cmp	ip, r3
 8008880:	fa20 f00e 	lsr.w	r0, r0, lr
 8008884:	d814      	bhi.n	80088b0 <__lshift+0x94>
 8008886:	6048      	str	r0, [r1, #4]
 8008888:	b108      	cbz	r0, 800888e <__lshift+0x72>
 800888a:	f109 0502 	add.w	r5, r9, #2
 800888e:	3d01      	subs	r5, #1
 8008890:	4638      	mov	r0, r7
 8008892:	f8c8 5010 	str.w	r5, [r8, #16]
 8008896:	4621      	mov	r1, r4
 8008898:	f7ff fe33 	bl	8008502 <_Bfree>
 800889c:	4640      	mov	r0, r8
 800889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a2:	3101      	adds	r1, #1
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	e7c7      	b.n	8008838 <__lshift+0x1c>
 80088a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088ac:	3301      	adds	r3, #1
 80088ae:	e7cd      	b.n	800884c <__lshift+0x30>
 80088b0:	4651      	mov	r1, sl
 80088b2:	e7dc      	b.n	800886e <__lshift+0x52>
 80088b4:	3904      	subs	r1, #4
 80088b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80088be:	459c      	cmp	ip, r3
 80088c0:	d8f9      	bhi.n	80088b6 <__lshift+0x9a>
 80088c2:	e7e4      	b.n	800888e <__lshift+0x72>

080088c4 <__mcmp>:
 80088c4:	6903      	ldr	r3, [r0, #16]
 80088c6:	690a      	ldr	r2, [r1, #16]
 80088c8:	1a9b      	subs	r3, r3, r2
 80088ca:	b530      	push	{r4, r5, lr}
 80088cc:	d10c      	bne.n	80088e8 <__mcmp+0x24>
 80088ce:	0092      	lsls	r2, r2, #2
 80088d0:	3014      	adds	r0, #20
 80088d2:	3114      	adds	r1, #20
 80088d4:	1884      	adds	r4, r0, r2
 80088d6:	4411      	add	r1, r2
 80088d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088e0:	4295      	cmp	r5, r2
 80088e2:	d003      	beq.n	80088ec <__mcmp+0x28>
 80088e4:	d305      	bcc.n	80088f2 <__mcmp+0x2e>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4618      	mov	r0, r3
 80088ea:	bd30      	pop	{r4, r5, pc}
 80088ec:	42a0      	cmp	r0, r4
 80088ee:	d3f3      	bcc.n	80088d8 <__mcmp+0x14>
 80088f0:	e7fa      	b.n	80088e8 <__mcmp+0x24>
 80088f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f6:	e7f7      	b.n	80088e8 <__mcmp+0x24>

080088f8 <__mdiff>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	460d      	mov	r5, r1
 80088fe:	4607      	mov	r7, r0
 8008900:	4611      	mov	r1, r2
 8008902:	4628      	mov	r0, r5
 8008904:	4614      	mov	r4, r2
 8008906:	f7ff ffdd 	bl	80088c4 <__mcmp>
 800890a:	1e06      	subs	r6, r0, #0
 800890c:	d108      	bne.n	8008920 <__mdiff+0x28>
 800890e:	4631      	mov	r1, r6
 8008910:	4638      	mov	r0, r7
 8008912:	f7ff fdc2 	bl	800849a <_Balloc>
 8008916:	2301      	movs	r3, #1
 8008918:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800891c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008920:	bfa4      	itt	ge
 8008922:	4623      	movge	r3, r4
 8008924:	462c      	movge	r4, r5
 8008926:	4638      	mov	r0, r7
 8008928:	6861      	ldr	r1, [r4, #4]
 800892a:	bfa6      	itte	ge
 800892c:	461d      	movge	r5, r3
 800892e:	2600      	movge	r6, #0
 8008930:	2601      	movlt	r6, #1
 8008932:	f7ff fdb2 	bl	800849a <_Balloc>
 8008936:	692b      	ldr	r3, [r5, #16]
 8008938:	60c6      	str	r6, [r0, #12]
 800893a:	6926      	ldr	r6, [r4, #16]
 800893c:	f105 0914 	add.w	r9, r5, #20
 8008940:	f104 0214 	add.w	r2, r4, #20
 8008944:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008948:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800894c:	f100 0514 	add.w	r5, r0, #20
 8008950:	f04f 0e00 	mov.w	lr, #0
 8008954:	f852 ab04 	ldr.w	sl, [r2], #4
 8008958:	f859 4b04 	ldr.w	r4, [r9], #4
 800895c:	fa1e f18a 	uxtah	r1, lr, sl
 8008960:	b2a3      	uxth	r3, r4
 8008962:	1ac9      	subs	r1, r1, r3
 8008964:	0c23      	lsrs	r3, r4, #16
 8008966:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800896a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800896e:	b289      	uxth	r1, r1
 8008970:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008974:	45c8      	cmp	r8, r9
 8008976:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800897a:	4694      	mov	ip, r2
 800897c:	f845 3b04 	str.w	r3, [r5], #4
 8008980:	d8e8      	bhi.n	8008954 <__mdiff+0x5c>
 8008982:	45bc      	cmp	ip, r7
 8008984:	d304      	bcc.n	8008990 <__mdiff+0x98>
 8008986:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800898a:	b183      	cbz	r3, 80089ae <__mdiff+0xb6>
 800898c:	6106      	str	r6, [r0, #16]
 800898e:	e7c5      	b.n	800891c <__mdiff+0x24>
 8008990:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008994:	fa1e f381 	uxtah	r3, lr, r1
 8008998:	141a      	asrs	r2, r3, #16
 800899a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800899e:	b29b      	uxth	r3, r3
 80089a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80089a8:	f845 3b04 	str.w	r3, [r5], #4
 80089ac:	e7e9      	b.n	8008982 <__mdiff+0x8a>
 80089ae:	3e01      	subs	r6, #1
 80089b0:	e7e9      	b.n	8008986 <__mdiff+0x8e>

080089b2 <__d2b>:
 80089b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089b6:	460e      	mov	r6, r1
 80089b8:	2101      	movs	r1, #1
 80089ba:	ec59 8b10 	vmov	r8, r9, d0
 80089be:	4615      	mov	r5, r2
 80089c0:	f7ff fd6b 	bl	800849a <_Balloc>
 80089c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089c8:	4607      	mov	r7, r0
 80089ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089ce:	bb34      	cbnz	r4, 8008a1e <__d2b+0x6c>
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	f1b8 0300 	subs.w	r3, r8, #0
 80089d6:	d027      	beq.n	8008a28 <__d2b+0x76>
 80089d8:	a802      	add	r0, sp, #8
 80089da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80089de:	f7ff fe01 	bl	80085e4 <__lo0bits>
 80089e2:	9900      	ldr	r1, [sp, #0]
 80089e4:	b1f0      	cbz	r0, 8008a24 <__d2b+0x72>
 80089e6:	9a01      	ldr	r2, [sp, #4]
 80089e8:	f1c0 0320 	rsb	r3, r0, #32
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	430b      	orrs	r3, r1
 80089f2:	40c2      	lsrs	r2, r0
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	9201      	str	r2, [sp, #4]
 80089f8:	9b01      	ldr	r3, [sp, #4]
 80089fa:	61bb      	str	r3, [r7, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bf14      	ite	ne
 8008a00:	2102      	movne	r1, #2
 8008a02:	2101      	moveq	r1, #1
 8008a04:	6139      	str	r1, [r7, #16]
 8008a06:	b1c4      	cbz	r4, 8008a3a <__d2b+0x88>
 8008a08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008a0c:	4404      	add	r4, r0
 8008a0e:	6034      	str	r4, [r6, #0]
 8008a10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a14:	6028      	str	r0, [r5, #0]
 8008a16:	4638      	mov	r0, r7
 8008a18:	b003      	add	sp, #12
 8008a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a22:	e7d5      	b.n	80089d0 <__d2b+0x1e>
 8008a24:	6179      	str	r1, [r7, #20]
 8008a26:	e7e7      	b.n	80089f8 <__d2b+0x46>
 8008a28:	a801      	add	r0, sp, #4
 8008a2a:	f7ff fddb 	bl	80085e4 <__lo0bits>
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	2101      	movs	r1, #1
 8008a34:	6139      	str	r1, [r7, #16]
 8008a36:	3020      	adds	r0, #32
 8008a38:	e7e5      	b.n	8008a06 <__d2b+0x54>
 8008a3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a42:	6030      	str	r0, [r6, #0]
 8008a44:	6918      	ldr	r0, [r3, #16]
 8008a46:	f7ff fdae 	bl	80085a6 <__hi0bits>
 8008a4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a4e:	e7e1      	b.n	8008a14 <__d2b+0x62>

08008a50 <_calloc_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	fb02 f401 	mul.w	r4, r2, r1
 8008a56:	4621      	mov	r1, r4
 8008a58:	f000 f808 	bl	8008a6c <_malloc_r>
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	b118      	cbz	r0, 8008a68 <_calloc_r+0x18>
 8008a60:	4622      	mov	r2, r4
 8008a62:	2100      	movs	r1, #0
 8008a64:	f7fe fb62 	bl	800712c <memset>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}

08008a6c <_malloc_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	1ccd      	adds	r5, r1, #3
 8008a70:	f025 0503 	bic.w	r5, r5, #3
 8008a74:	3508      	adds	r5, #8
 8008a76:	2d0c      	cmp	r5, #12
 8008a78:	bf38      	it	cc
 8008a7a:	250c      	movcc	r5, #12
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	4606      	mov	r6, r0
 8008a80:	db01      	blt.n	8008a86 <_malloc_r+0x1a>
 8008a82:	42a9      	cmp	r1, r5
 8008a84:	d903      	bls.n	8008a8e <_malloc_r+0x22>
 8008a86:	230c      	movs	r3, #12
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	bd70      	pop	{r4, r5, r6, pc}
 8008a8e:	f000 f869 	bl	8008b64 <__malloc_lock>
 8008a92:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <_malloc_r+0xac>)
 8008a94:	6814      	ldr	r4, [r2, #0]
 8008a96:	4621      	mov	r1, r4
 8008a98:	b991      	cbnz	r1, 8008ac0 <_malloc_r+0x54>
 8008a9a:	4c20      	ldr	r4, [pc, #128]	; (8008b1c <_malloc_r+0xb0>)
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	b91b      	cbnz	r3, 8008aa8 <_malloc_r+0x3c>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f000 f83d 	bl	8008b20 <_sbrk_r>
 8008aa6:	6020      	str	r0, [r4, #0]
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f000 f838 	bl	8008b20 <_sbrk_r>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d124      	bne.n	8008afe <_malloc_r+0x92>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 f854 	bl	8008b66 <__malloc_unlock>
 8008abe:	e7e4      	b.n	8008a8a <_malloc_r+0x1e>
 8008ac0:	680b      	ldr	r3, [r1, #0]
 8008ac2:	1b5b      	subs	r3, r3, r5
 8008ac4:	d418      	bmi.n	8008af8 <_malloc_r+0x8c>
 8008ac6:	2b0b      	cmp	r3, #11
 8008ac8:	d90f      	bls.n	8008aea <_malloc_r+0x7e>
 8008aca:	600b      	str	r3, [r1, #0]
 8008acc:	50cd      	str	r5, [r1, r3]
 8008ace:	18cc      	adds	r4, r1, r3
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 f848 	bl	8008b66 <__malloc_unlock>
 8008ad6:	f104 000b 	add.w	r0, r4, #11
 8008ada:	1d23      	adds	r3, r4, #4
 8008adc:	f020 0007 	bic.w	r0, r0, #7
 8008ae0:	1ac3      	subs	r3, r0, r3
 8008ae2:	d0d3      	beq.n	8008a8c <_malloc_r+0x20>
 8008ae4:	425a      	negs	r2, r3
 8008ae6:	50e2      	str	r2, [r4, r3]
 8008ae8:	e7d0      	b.n	8008a8c <_malloc_r+0x20>
 8008aea:	428c      	cmp	r4, r1
 8008aec:	684b      	ldr	r3, [r1, #4]
 8008aee:	bf16      	itet	ne
 8008af0:	6063      	strne	r3, [r4, #4]
 8008af2:	6013      	streq	r3, [r2, #0]
 8008af4:	460c      	movne	r4, r1
 8008af6:	e7eb      	b.n	8008ad0 <_malloc_r+0x64>
 8008af8:	460c      	mov	r4, r1
 8008afa:	6849      	ldr	r1, [r1, #4]
 8008afc:	e7cc      	b.n	8008a98 <_malloc_r+0x2c>
 8008afe:	1cc4      	adds	r4, r0, #3
 8008b00:	f024 0403 	bic.w	r4, r4, #3
 8008b04:	42a0      	cmp	r0, r4
 8008b06:	d005      	beq.n	8008b14 <_malloc_r+0xa8>
 8008b08:	1a21      	subs	r1, r4, r0
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f000 f808 	bl	8008b20 <_sbrk_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d0cf      	beq.n	8008ab4 <_malloc_r+0x48>
 8008b14:	6025      	str	r5, [r4, #0]
 8008b16:	e7db      	b.n	8008ad0 <_malloc_r+0x64>
 8008b18:	20000224 	.word	0x20000224
 8008b1c:	20000228 	.word	0x20000228

08008b20 <_sbrk_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4c06      	ldr	r4, [pc, #24]	; (8008b3c <_sbrk_r+0x1c>)
 8008b24:	2300      	movs	r3, #0
 8008b26:	4605      	mov	r5, r0
 8008b28:	4608      	mov	r0, r1
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	f7f8 fd22 	bl	8001574 <_sbrk>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_sbrk_r+0x1a>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_sbrk_r+0x1a>
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	200006a8 	.word	0x200006a8

08008b40 <__ascii_mbtowc>:
 8008b40:	b082      	sub	sp, #8
 8008b42:	b901      	cbnz	r1, 8008b46 <__ascii_mbtowc+0x6>
 8008b44:	a901      	add	r1, sp, #4
 8008b46:	b142      	cbz	r2, 8008b5a <__ascii_mbtowc+0x1a>
 8008b48:	b14b      	cbz	r3, 8008b5e <__ascii_mbtowc+0x1e>
 8008b4a:	7813      	ldrb	r3, [r2, #0]
 8008b4c:	600b      	str	r3, [r1, #0]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	1c10      	adds	r0, r2, #0
 8008b52:	bf18      	it	ne
 8008b54:	2001      	movne	r0, #1
 8008b56:	b002      	add	sp, #8
 8008b58:	4770      	bx	lr
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	e7fb      	b.n	8008b56 <__ascii_mbtowc+0x16>
 8008b5e:	f06f 0001 	mvn.w	r0, #1
 8008b62:	e7f8      	b.n	8008b56 <__ascii_mbtowc+0x16>

08008b64 <__malloc_lock>:
 8008b64:	4770      	bx	lr

08008b66 <__malloc_unlock>:
 8008b66:	4770      	bx	lr

08008b68 <__ascii_wctomb>:
 8008b68:	b149      	cbz	r1, 8008b7e <__ascii_wctomb+0x16>
 8008b6a:	2aff      	cmp	r2, #255	; 0xff
 8008b6c:	bf85      	ittet	hi
 8008b6e:	238a      	movhi	r3, #138	; 0x8a
 8008b70:	6003      	strhi	r3, [r0, #0]
 8008b72:	700a      	strbls	r2, [r1, #0]
 8008b74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b78:	bf98      	it	ls
 8008b7a:	2001      	movls	r0, #1
 8008b7c:	4770      	bx	lr
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4770      	bx	lr
	...

08008b84 <roundf>:
 8008b84:	ee10 0a10 	vmov	r0, s0
 8008b88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008b8c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8008b90:	2a16      	cmp	r2, #22
 8008b92:	dc15      	bgt.n	8008bc0 <roundf+0x3c>
 8008b94:	2a00      	cmp	r2, #0
 8008b96:	da08      	bge.n	8008baa <roundf+0x26>
 8008b98:	3201      	adds	r2, #1
 8008b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008b9e:	d101      	bne.n	8008ba4 <roundf+0x20>
 8008ba0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8008ba4:	ee00 3a10 	vmov	s0, r3
 8008ba8:	4770      	bx	lr
 8008baa:	4908      	ldr	r1, [pc, #32]	; (8008bcc <roundf+0x48>)
 8008bac:	4111      	asrs	r1, r2
 8008bae:	4208      	tst	r0, r1
 8008bb0:	d0fa      	beq.n	8008ba8 <roundf+0x24>
 8008bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bb6:	4113      	asrs	r3, r2
 8008bb8:	4403      	add	r3, r0
 8008bba:	ea23 0301 	bic.w	r3, r3, r1
 8008bbe:	e7f1      	b.n	8008ba4 <roundf+0x20>
 8008bc0:	2a80      	cmp	r2, #128	; 0x80
 8008bc2:	d1f1      	bne.n	8008ba8 <roundf+0x24>
 8008bc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	007fffff 	.word	0x007fffff

08008bd0 <atan2>:
 8008bd0:	f000 b802 	b.w	8008bd8 <__ieee754_atan2>
 8008bd4:	0000      	movs	r0, r0
	...

08008bd8 <__ieee754_atan2>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	ec57 6b11 	vmov	r6, r7, d1
 8008be0:	4273      	negs	r3, r6
 8008be2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008be6:	4333      	orrs	r3, r6
 8008be8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008d90 <__ieee754_atan2+0x1b8>
 8008bec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008bf0:	4573      	cmp	r3, lr
 8008bf2:	ec51 0b10 	vmov	r0, r1, d0
 8008bf6:	ee11 8a10 	vmov	r8, s2
 8008bfa:	d80a      	bhi.n	8008c12 <__ieee754_atan2+0x3a>
 8008bfc:	4244      	negs	r4, r0
 8008bfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c02:	4304      	orrs	r4, r0
 8008c04:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008c08:	4574      	cmp	r4, lr
 8008c0a:	468c      	mov	ip, r1
 8008c0c:	ee10 9a10 	vmov	r9, s0
 8008c10:	d907      	bls.n	8008c22 <__ieee754_atan2+0x4a>
 8008c12:	4632      	mov	r2, r6
 8008c14:	463b      	mov	r3, r7
 8008c16:	f7f7 faed 	bl	80001f4 <__adddf3>
 8008c1a:	ec41 0b10 	vmov	d0, r0, r1
 8008c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c22:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008c26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c2a:	4334      	orrs	r4, r6
 8008c2c:	d103      	bne.n	8008c36 <__ieee754_atan2+0x5e>
 8008c2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c32:	f000 b8b1 	b.w	8008d98 <atan>
 8008c36:	17bc      	asrs	r4, r7, #30
 8008c38:	f004 0402 	and.w	r4, r4, #2
 8008c3c:	ea53 0909 	orrs.w	r9, r3, r9
 8008c40:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008c44:	d107      	bne.n	8008c56 <__ieee754_atan2+0x7e>
 8008c46:	2c02      	cmp	r4, #2
 8008c48:	d073      	beq.n	8008d32 <__ieee754_atan2+0x15a>
 8008c4a:	2c03      	cmp	r4, #3
 8008c4c:	d1e5      	bne.n	8008c1a <__ieee754_atan2+0x42>
 8008c4e:	a13e      	add	r1, pc, #248	; (adr r1, 8008d48 <__ieee754_atan2+0x170>)
 8008c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c54:	e7e1      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008c56:	ea52 0808 	orrs.w	r8, r2, r8
 8008c5a:	d106      	bne.n	8008c6a <__ieee754_atan2+0x92>
 8008c5c:	f1bc 0f00 	cmp.w	ip, #0
 8008c60:	da6b      	bge.n	8008d3a <__ieee754_atan2+0x162>
 8008c62:	a13b      	add	r1, pc, #236	; (adr r1, 8008d50 <__ieee754_atan2+0x178>)
 8008c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c68:	e7d7      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008c6a:	4572      	cmp	r2, lr
 8008c6c:	d120      	bne.n	8008cb0 <__ieee754_atan2+0xd8>
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d111      	bne.n	8008c96 <__ieee754_atan2+0xbe>
 8008c72:	2c02      	cmp	r4, #2
 8008c74:	d007      	beq.n	8008c86 <__ieee754_atan2+0xae>
 8008c76:	2c03      	cmp	r4, #3
 8008c78:	d009      	beq.n	8008c8e <__ieee754_atan2+0xb6>
 8008c7a:	2c01      	cmp	r4, #1
 8008c7c:	d155      	bne.n	8008d2a <__ieee754_atan2+0x152>
 8008c7e:	a136      	add	r1, pc, #216	; (adr r1, 8008d58 <__ieee754_atan2+0x180>)
 8008c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c84:	e7c9      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008c86:	a136      	add	r1, pc, #216	; (adr r1, 8008d60 <__ieee754_atan2+0x188>)
 8008c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c8c:	e7c5      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008c8e:	a136      	add	r1, pc, #216	; (adr r1, 8008d68 <__ieee754_atan2+0x190>)
 8008c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c94:	e7c1      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008c96:	2c02      	cmp	r4, #2
 8008c98:	d04b      	beq.n	8008d32 <__ieee754_atan2+0x15a>
 8008c9a:	2c03      	cmp	r4, #3
 8008c9c:	d0d7      	beq.n	8008c4e <__ieee754_atan2+0x76>
 8008c9e:	2c01      	cmp	r4, #1
 8008ca0:	f04f 0000 	mov.w	r0, #0
 8008ca4:	d102      	bne.n	8008cac <__ieee754_atan2+0xd4>
 8008ca6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008caa:	e7b6      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008cac:	2100      	movs	r1, #0
 8008cae:	e7b4      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008cb0:	4573      	cmp	r3, lr
 8008cb2:	d0d3      	beq.n	8008c5c <__ieee754_atan2+0x84>
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	151b      	asrs	r3, r3, #20
 8008cb8:	2b3c      	cmp	r3, #60	; 0x3c
 8008cba:	dc1e      	bgt.n	8008cfa <__ieee754_atan2+0x122>
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	da01      	bge.n	8008cc4 <__ieee754_atan2+0xec>
 8008cc0:	333c      	adds	r3, #60	; 0x3c
 8008cc2:	db1e      	blt.n	8008d02 <__ieee754_atan2+0x12a>
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	f7f7 fd74 	bl	80007b4 <__aeabi_ddiv>
 8008ccc:	ec41 0b10 	vmov	d0, r0, r1
 8008cd0:	f000 fa02 	bl	80090d8 <fabs>
 8008cd4:	f000 f860 	bl	8008d98 <atan>
 8008cd8:	ec51 0b10 	vmov	r0, r1, d0
 8008cdc:	2c01      	cmp	r4, #1
 8008cde:	d013      	beq.n	8008d08 <__ieee754_atan2+0x130>
 8008ce0:	2c02      	cmp	r4, #2
 8008ce2:	d015      	beq.n	8008d10 <__ieee754_atan2+0x138>
 8008ce4:	2c00      	cmp	r4, #0
 8008ce6:	d098      	beq.n	8008c1a <__ieee754_atan2+0x42>
 8008ce8:	a321      	add	r3, pc, #132	; (adr r3, 8008d70 <__ieee754_atan2+0x198>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fa7f 	bl	80001f0 <__aeabi_dsub>
 8008cf2:	a321      	add	r3, pc, #132	; (adr r3, 8008d78 <__ieee754_atan2+0x1a0>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	e014      	b.n	8008d24 <__ieee754_atan2+0x14c>
 8008cfa:	a121      	add	r1, pc, #132	; (adr r1, 8008d80 <__ieee754_atan2+0x1a8>)
 8008cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d00:	e7ec      	b.n	8008cdc <__ieee754_atan2+0x104>
 8008d02:	2000      	movs	r0, #0
 8008d04:	2100      	movs	r1, #0
 8008d06:	e7e9      	b.n	8008cdc <__ieee754_atan2+0x104>
 8008d08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	e784      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008d10:	a317      	add	r3, pc, #92	; (adr r3, 8008d70 <__ieee754_atan2+0x198>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fa6b 	bl	80001f0 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	a116      	add	r1, pc, #88	; (adr r1, 8008d78 <__ieee754_atan2+0x1a0>)
 8008d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d24:	f7f7 fa64 	bl	80001f0 <__aeabi_dsub>
 8008d28:	e777      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008d2a:	a117      	add	r1, pc, #92	; (adr r1, 8008d88 <__ieee754_atan2+0x1b0>)
 8008d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d30:	e773      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008d32:	a111      	add	r1, pc, #68	; (adr r1, 8008d78 <__ieee754_atan2+0x1a0>)
 8008d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d38:	e76f      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008d3a:	a111      	add	r1, pc, #68	; (adr r1, 8008d80 <__ieee754_atan2+0x1a8>)
 8008d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d40:	e76b      	b.n	8008c1a <__ieee754_atan2+0x42>
 8008d42:	bf00      	nop
 8008d44:	f3af 8000 	nop.w
 8008d48:	54442d18 	.word	0x54442d18
 8008d4c:	c00921fb 	.word	0xc00921fb
 8008d50:	54442d18 	.word	0x54442d18
 8008d54:	bff921fb 	.word	0xbff921fb
 8008d58:	54442d18 	.word	0x54442d18
 8008d5c:	bfe921fb 	.word	0xbfe921fb
 8008d60:	7f3321d2 	.word	0x7f3321d2
 8008d64:	4002d97c 	.word	0x4002d97c
 8008d68:	7f3321d2 	.word	0x7f3321d2
 8008d6c:	c002d97c 	.word	0xc002d97c
 8008d70:	33145c07 	.word	0x33145c07
 8008d74:	3ca1a626 	.word	0x3ca1a626
 8008d78:	54442d18 	.word	0x54442d18
 8008d7c:	400921fb 	.word	0x400921fb
 8008d80:	54442d18 	.word	0x54442d18
 8008d84:	3ff921fb 	.word	0x3ff921fb
 8008d88:	54442d18 	.word	0x54442d18
 8008d8c:	3fe921fb 	.word	0x3fe921fb
 8008d90:	7ff00000 	.word	0x7ff00000
 8008d94:	00000000 	.word	0x00000000

08008d98 <atan>:
 8008d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	ec55 4b10 	vmov	r4, r5, d0
 8008da0:	4bc3      	ldr	r3, [pc, #780]	; (80090b0 <atan+0x318>)
 8008da2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008da6:	429e      	cmp	r6, r3
 8008da8:	46ab      	mov	fp, r5
 8008daa:	dd18      	ble.n	8008dde <atan+0x46>
 8008dac:	4bc1      	ldr	r3, [pc, #772]	; (80090b4 <atan+0x31c>)
 8008dae:	429e      	cmp	r6, r3
 8008db0:	dc01      	bgt.n	8008db6 <atan+0x1e>
 8008db2:	d109      	bne.n	8008dc8 <atan+0x30>
 8008db4:	b144      	cbz	r4, 8008dc8 <atan+0x30>
 8008db6:	4622      	mov	r2, r4
 8008db8:	462b      	mov	r3, r5
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fa19 	bl	80001f4 <__adddf3>
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	e006      	b.n	8008dd6 <atan+0x3e>
 8008dc8:	f1bb 0f00 	cmp.w	fp, #0
 8008dcc:	f340 8131 	ble.w	8009032 <atan+0x29a>
 8008dd0:	a59b      	add	r5, pc, #620	; (adr r5, 8009040 <atan+0x2a8>)
 8008dd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dd6:	ec45 4b10 	vmov	d0, r4, r5
 8008dda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dde:	4bb6      	ldr	r3, [pc, #728]	; (80090b8 <atan+0x320>)
 8008de0:	429e      	cmp	r6, r3
 8008de2:	dc14      	bgt.n	8008e0e <atan+0x76>
 8008de4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008de8:	429e      	cmp	r6, r3
 8008dea:	dc0d      	bgt.n	8008e08 <atan+0x70>
 8008dec:	a396      	add	r3, pc, #600	; (adr r3, 8009048 <atan+0x2b0>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	ee10 0a10 	vmov	r0, s0
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 f9fc 	bl	80001f4 <__adddf3>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4baf      	ldr	r3, [pc, #700]	; (80090bc <atan+0x324>)
 8008e00:	f7f7 fe3e 	bl	8000a80 <__aeabi_dcmpgt>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d1e6      	bne.n	8008dd6 <atan+0x3e>
 8008e08:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008e0c:	e02b      	b.n	8008e66 <atan+0xce>
 8008e0e:	f000 f963 	bl	80090d8 <fabs>
 8008e12:	4bab      	ldr	r3, [pc, #684]	; (80090c0 <atan+0x328>)
 8008e14:	429e      	cmp	r6, r3
 8008e16:	ec55 4b10 	vmov	r4, r5, d0
 8008e1a:	f300 80bf 	bgt.w	8008f9c <atan+0x204>
 8008e1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008e22:	429e      	cmp	r6, r3
 8008e24:	f300 80a0 	bgt.w	8008f68 <atan+0x1d0>
 8008e28:	ee10 2a10 	vmov	r2, s0
 8008e2c:	ee10 0a10 	vmov	r0, s0
 8008e30:	462b      	mov	r3, r5
 8008e32:	4629      	mov	r1, r5
 8008e34:	f7f7 f9de 	bl	80001f4 <__adddf3>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4ba0      	ldr	r3, [pc, #640]	; (80090bc <atan+0x324>)
 8008e3c:	f7f7 f9d8 	bl	80001f0 <__aeabi_dsub>
 8008e40:	2200      	movs	r2, #0
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 f9d1 	bl	80001f4 <__adddf3>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4630      	mov	r0, r6
 8008e58:	4639      	mov	r1, r7
 8008e5a:	f7f7 fcab 	bl	80007b4 <__aeabi_ddiv>
 8008e5e:	f04f 0a00 	mov.w	sl, #0
 8008e62:	4604      	mov	r4, r0
 8008e64:	460d      	mov	r5, r1
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	f7f7 fb77 	bl	8000560 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4680      	mov	r8, r0
 8008e78:	4689      	mov	r9, r1
 8008e7a:	f7f7 fb71 	bl	8000560 <__aeabi_dmul>
 8008e7e:	a374      	add	r3, pc, #464	; (adr r3, 8009050 <atan+0x2b8>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	4606      	mov	r6, r0
 8008e86:	460f      	mov	r7, r1
 8008e88:	f7f7 fb6a 	bl	8000560 <__aeabi_dmul>
 8008e8c:	a372      	add	r3, pc, #456	; (adr r3, 8009058 <atan+0x2c0>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	f7f7 f9af 	bl	80001f4 <__adddf3>
 8008e96:	4632      	mov	r2, r6
 8008e98:	463b      	mov	r3, r7
 8008e9a:	f7f7 fb61 	bl	8000560 <__aeabi_dmul>
 8008e9e:	a370      	add	r3, pc, #448	; (adr r3, 8009060 <atan+0x2c8>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 f9a6 	bl	80001f4 <__adddf3>
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	f7f7 fb58 	bl	8000560 <__aeabi_dmul>
 8008eb0:	a36d      	add	r3, pc, #436	; (adr r3, 8009068 <atan+0x2d0>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f7f7 f99d 	bl	80001f4 <__adddf3>
 8008eba:	4632      	mov	r2, r6
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	f7f7 fb4f 	bl	8000560 <__aeabi_dmul>
 8008ec2:	a36b      	add	r3, pc, #428	; (adr r3, 8009070 <atan+0x2d8>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f994 	bl	80001f4 <__adddf3>
 8008ecc:	4632      	mov	r2, r6
 8008ece:	463b      	mov	r3, r7
 8008ed0:	f7f7 fb46 	bl	8000560 <__aeabi_dmul>
 8008ed4:	a368      	add	r3, pc, #416	; (adr r3, 8009078 <atan+0x2e0>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f98b 	bl	80001f4 <__adddf3>
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	f7f7 fb3d 	bl	8000560 <__aeabi_dmul>
 8008ee6:	a366      	add	r3, pc, #408	; (adr r3, 8009080 <atan+0x2e8>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	4680      	mov	r8, r0
 8008eee:	4689      	mov	r9, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 fb34 	bl	8000560 <__aeabi_dmul>
 8008ef8:	a363      	add	r3, pc, #396	; (adr r3, 8009088 <atan+0x2f0>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 f977 	bl	80001f0 <__aeabi_dsub>
 8008f02:	4632      	mov	r2, r6
 8008f04:	463b      	mov	r3, r7
 8008f06:	f7f7 fb2b 	bl	8000560 <__aeabi_dmul>
 8008f0a:	a361      	add	r3, pc, #388	; (adr r3, 8009090 <atan+0x2f8>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f7f7 f96e 	bl	80001f0 <__aeabi_dsub>
 8008f14:	4632      	mov	r2, r6
 8008f16:	463b      	mov	r3, r7
 8008f18:	f7f7 fb22 	bl	8000560 <__aeabi_dmul>
 8008f1c:	a35e      	add	r3, pc, #376	; (adr r3, 8009098 <atan+0x300>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 f965 	bl	80001f0 <__aeabi_dsub>
 8008f26:	4632      	mov	r2, r6
 8008f28:	463b      	mov	r3, r7
 8008f2a:	f7f7 fb19 	bl	8000560 <__aeabi_dmul>
 8008f2e:	a35c      	add	r3, pc, #368	; (adr r3, 80090a0 <atan+0x308>)
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f7f7 f95c 	bl	80001f0 <__aeabi_dsub>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f7f7 fb10 	bl	8000560 <__aeabi_dmul>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4640      	mov	r0, r8
 8008f46:	4649      	mov	r1, r9
 8008f48:	f7f7 f954 	bl	80001f4 <__adddf3>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	462b      	mov	r3, r5
 8008f50:	f7f7 fb06 	bl	8000560 <__aeabi_dmul>
 8008f54:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	d14b      	bne.n	8008ff6 <atan+0x25e>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 f945 	bl	80001f0 <__aeabi_dsub>
 8008f66:	e72c      	b.n	8008dc2 <atan+0x2a>
 8008f68:	ee10 0a10 	vmov	r0, s0
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4b53      	ldr	r3, [pc, #332]	; (80090bc <atan+0x324>)
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 f93d 	bl	80001f0 <__aeabi_dsub>
 8008f76:	2200      	movs	r2, #0
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	4b4f      	ldr	r3, [pc, #316]	; (80090bc <atan+0x324>)
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	f7f7 f937 	bl	80001f4 <__adddf3>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	f7f7 fc11 	bl	80007b4 <__aeabi_ddiv>
 8008f92:	f04f 0a01 	mov.w	sl, #1
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
 8008f9a:	e764      	b.n	8008e66 <atan+0xce>
 8008f9c:	4b49      	ldr	r3, [pc, #292]	; (80090c4 <atan+0x32c>)
 8008f9e:	429e      	cmp	r6, r3
 8008fa0:	dc1d      	bgt.n	8008fde <atan+0x246>
 8008fa2:	ee10 0a10 	vmov	r0, s0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4b47      	ldr	r3, [pc, #284]	; (80090c8 <atan+0x330>)
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7f7 f920 	bl	80001f0 <__aeabi_dsub>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	4b44      	ldr	r3, [pc, #272]	; (80090c8 <atan+0x330>)
 8008fb8:	4620      	mov	r0, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f7f7 fad0 	bl	8000560 <__aeabi_dmul>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4b3e      	ldr	r3, [pc, #248]	; (80090bc <atan+0x324>)
 8008fc4:	f7f7 f916 	bl	80001f4 <__adddf3>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4630      	mov	r0, r6
 8008fce:	4639      	mov	r1, r7
 8008fd0:	f7f7 fbf0 	bl	80007b4 <__aeabi_ddiv>
 8008fd4:	f04f 0a02 	mov.w	sl, #2
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	e743      	b.n	8008e66 <atan+0xce>
 8008fde:	462b      	mov	r3, r5
 8008fe0:	ee10 2a10 	vmov	r2, s0
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	4939      	ldr	r1, [pc, #228]	; (80090cc <atan+0x334>)
 8008fe8:	f7f7 fbe4 	bl	80007b4 <__aeabi_ddiv>
 8008fec:	f04f 0a03 	mov.w	sl, #3
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	e737      	b.n	8008e66 <atan+0xce>
 8008ff6:	4b36      	ldr	r3, [pc, #216]	; (80090d0 <atan+0x338>)
 8008ff8:	4e36      	ldr	r6, [pc, #216]	; (80090d4 <atan+0x33c>)
 8008ffa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008ffe:	4456      	add	r6, sl
 8009000:	449a      	add	sl, r3
 8009002:	e9da 2300 	ldrd	r2, r3, [sl]
 8009006:	f7f7 f8f3 	bl	80001f0 <__aeabi_dsub>
 800900a:	4622      	mov	r2, r4
 800900c:	462b      	mov	r3, r5
 800900e:	f7f7 f8ef 	bl	80001f0 <__aeabi_dsub>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	e9d6 0100 	ldrd	r0, r1, [r6]
 800901a:	f7f7 f8e9 	bl	80001f0 <__aeabi_dsub>
 800901e:	f1bb 0f00 	cmp.w	fp, #0
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
 8009026:	f6bf aed6 	bge.w	8008dd6 <atan+0x3e>
 800902a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800902e:	461d      	mov	r5, r3
 8009030:	e6d1      	b.n	8008dd6 <atan+0x3e>
 8009032:	a51d      	add	r5, pc, #116	; (adr r5, 80090a8 <atan+0x310>)
 8009034:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009038:	e6cd      	b.n	8008dd6 <atan+0x3e>
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w
 8009040:	54442d18 	.word	0x54442d18
 8009044:	3ff921fb 	.word	0x3ff921fb
 8009048:	8800759c 	.word	0x8800759c
 800904c:	7e37e43c 	.word	0x7e37e43c
 8009050:	e322da11 	.word	0xe322da11
 8009054:	3f90ad3a 	.word	0x3f90ad3a
 8009058:	24760deb 	.word	0x24760deb
 800905c:	3fa97b4b 	.word	0x3fa97b4b
 8009060:	a0d03d51 	.word	0xa0d03d51
 8009064:	3fb10d66 	.word	0x3fb10d66
 8009068:	c54c206e 	.word	0xc54c206e
 800906c:	3fb745cd 	.word	0x3fb745cd
 8009070:	920083ff 	.word	0x920083ff
 8009074:	3fc24924 	.word	0x3fc24924
 8009078:	5555550d 	.word	0x5555550d
 800907c:	3fd55555 	.word	0x3fd55555
 8009080:	2c6a6c2f 	.word	0x2c6a6c2f
 8009084:	bfa2b444 	.word	0xbfa2b444
 8009088:	52defd9a 	.word	0x52defd9a
 800908c:	3fadde2d 	.word	0x3fadde2d
 8009090:	af749a6d 	.word	0xaf749a6d
 8009094:	3fb3b0f2 	.word	0x3fb3b0f2
 8009098:	fe231671 	.word	0xfe231671
 800909c:	3fbc71c6 	.word	0x3fbc71c6
 80090a0:	9998ebc4 	.word	0x9998ebc4
 80090a4:	3fc99999 	.word	0x3fc99999
 80090a8:	54442d18 	.word	0x54442d18
 80090ac:	bff921fb 	.word	0xbff921fb
 80090b0:	440fffff 	.word	0x440fffff
 80090b4:	7ff00000 	.word	0x7ff00000
 80090b8:	3fdbffff 	.word	0x3fdbffff
 80090bc:	3ff00000 	.word	0x3ff00000
 80090c0:	3ff2ffff 	.word	0x3ff2ffff
 80090c4:	40037fff 	.word	0x40037fff
 80090c8:	3ff80000 	.word	0x3ff80000
 80090cc:	bff00000 	.word	0xbff00000
 80090d0:	08009370 	.word	0x08009370
 80090d4:	08009350 	.word	0x08009350

080090d8 <fabs>:
 80090d8:	ec51 0b10 	vmov	r0, r1, d0
 80090dc:	ee10 2a10 	vmov	r2, s0
 80090e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090e4:	ec43 2b10 	vmov	d0, r2, r3
 80090e8:	4770      	bx	lr
	...

080090ec <_init>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr

080090f8 <_fini>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	bf00      	nop
 80090fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fe:	bc08      	pop	{r3}
 8009100:	469e      	mov	lr, r3
 8009102:	4770      	bx	lr
