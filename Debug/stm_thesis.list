
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008774  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08008910  08008910  00018910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b98  08008b98  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba0  08008ba0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200001dc  08008d84  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08008d84  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134b7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029de  00000000  00000000  000336c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a27  00000000  00000000  00037ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0a8  00000000  00000000  0005090f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000933f1  00000000  00000000  0005e9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049fc  00000000  00000000  000f1e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001dc 	.word	0x200001dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080088f4 	.word	0x080088f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e0 	.word	0x200001e0
 80001d4:	080088f4 	.word	0x080088f4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b972 	b.w	8000eac <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	4604      	mov	r4, r0
 8000be8:	4688      	mov	r8, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4615      	mov	r5, r2
 8000bf2:	d967      	bls.n	8000cc4 <__udivmoddi4+0xe4>
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	b14a      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfa:	f1c2 0720 	rsb	r7, r2, #32
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	fa20 f707 	lsr.w	r7, r0, r7
 8000c06:	4095      	lsls	r5, r2
 8000c08:	ea47 0803 	orr.w	r8, r7, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c18:	fa1f fc85 	uxth.w	ip, r5
 8000c1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c24:	fb07 f10c 	mul.w	r1, r7, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x60>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c32:	f080 811b 	bcs.w	8000e6c <__udivmoddi4+0x28c>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 8118 	bls.w	8000e6c <__udivmoddi4+0x28c>
 8000c3c:	3f02      	subs	r7, #2
 8000c3e:	442b      	add	r3, r5
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x290>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x290>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	442c      	add	r4, r5
 8000c6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c70:	eba4 040c 	sub.w	r4, r4, ip
 8000c74:	2700      	movs	r7, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa0>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xbe>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80eb 	beq.w	8000e66 <__udivmoddi4+0x286>
 8000c90:	2700      	movs	r7, #0
 8000c92:	e9c6 0100 	strd	r0, r1, [r6]
 8000c96:	4638      	mov	r0, r7
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f783 	clz	r7, r3
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d147      	bne.n	8000d36 <__udivmoddi4+0x156>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd0>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80fa 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa0>
 8000cbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xe8>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 808f 	bne.w	8000df0 <__udivmoddi4+0x210>
 8000cd2:	1b49      	subs	r1, r1, r5
 8000cd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd8:	fa1f f885 	uxth.w	r8, r5
 8000cdc:	2701      	movs	r7, #1
 8000cde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce2:	0c23      	lsrs	r3, r4, #16
 8000ce4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x122>
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000d02:	4684      	mov	ip, r0
 8000d04:	1a59      	subs	r1, r3, r1
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d14:	fb08 f800 	mul.w	r8, r8, r0
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x14c>
 8000d1c:	192c      	adds	r4, r5, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x14a>
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	f200 80b6 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 0408 	sub.w	r4, r4, r8
 8000d30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d34:	e79f      	b.n	8000c76 <__udivmoddi4+0x96>
 8000d36:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3a:	40bb      	lsls	r3, r7
 8000d3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d44:	fa01 f407 	lsl.w	r4, r1, r7
 8000d48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d54:	4325      	orrs	r5, r4
 8000d56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d60:	fa1f fa8e 	uxth.w	sl, lr
 8000d64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d68:	fb09 f40a 	mul.w	r4, r9, sl
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d72:	fa00 f107 	lsl.w	r1, r0, r7
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b0>
 8000d78:	eb1e 0303 	adds.w	r3, lr, r3
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d80:	f080 8087 	bcs.w	8000e92 <__udivmoddi4+0x2b2>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f240 8084 	bls.w	8000e92 <__udivmoddi4+0x2b2>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4473      	add	r3, lr
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	b2ad      	uxth	r5, r5
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3310 	mls	r3, r8, r0, r3
 8000d9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da4:	45a2      	cmp	sl, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1da>
 8000da8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db0:	d26b      	bcs.n	8000e8a <__udivmoddi4+0x2aa>
 8000db2:	45a2      	cmp	sl, r4
 8000db4:	d969      	bls.n	8000e8a <__udivmoddi4+0x2aa>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4474      	add	r4, lr
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	eba4 040a 	sub.w	r4, r4, sl
 8000dc6:	454c      	cmp	r4, r9
 8000dc8:	46c2      	mov	sl, r8
 8000dca:	464b      	mov	r3, r9
 8000dcc:	d354      	bcc.n	8000e78 <__udivmoddi4+0x298>
 8000dce:	d051      	beq.n	8000e74 <__udivmoddi4+0x294>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d069      	beq.n	8000ea8 <__udivmoddi4+0x2c8>
 8000dd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000ddc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de0:	40fd      	lsrs	r5, r7
 8000de2:	40fc      	lsrs	r4, r7
 8000de4:	ea4c 0505 	orr.w	r5, ip, r5
 8000de8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dec:	2700      	movs	r7, #0
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f703 	lsr.w	r7, r0, r3
 8000df8:	4095      	lsls	r5, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000e02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e06:	4338      	orrs	r0, r7
 8000e08:	0c01      	lsrs	r1, r0, #16
 8000e0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0e:	fa1f f885 	uxth.w	r8, r5
 8000e12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1a:	fb07 f308 	mul.w	r3, r7, r8
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x256>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e2c:	d22f      	bcs.n	8000e8e <__udivmoddi4+0x2ae>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d92d      	bls.n	8000e8e <__udivmoddi4+0x2ae>
 8000e32:	3f02      	subs	r7, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	b281      	uxth	r1, r0
 8000e3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb00 f308 	mul.w	r3, r0, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x27e>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e54:	d217      	bcs.n	8000e86 <__udivmoddi4+0x2a6>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d915      	bls.n	8000e86 <__udivmoddi4+0x2a6>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1ac9      	subs	r1, r1, r3
 8000e60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e64:	e73b      	b.n	8000cde <__udivmoddi4+0xfe>
 8000e66:	4637      	mov	r7, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e709      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	e6e7      	b.n	8000c40 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x8c>
 8000e74:	4541      	cmp	r1, r8
 8000e76:	d2ab      	bcs.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e80:	3801      	subs	r0, #1
 8000e82:	4613      	mov	r3, r2
 8000e84:	e7a4      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e86:	4660      	mov	r0, ip
 8000e88:	e7e9      	b.n	8000e5e <__udivmoddi4+0x27e>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	e795      	b.n	8000dba <__udivmoddi4+0x1da>
 8000e8e:	4667      	mov	r7, ip
 8000e90:	e7d1      	b.n	8000e36 <__udivmoddi4+0x256>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e77c      	b.n	8000d90 <__udivmoddi4+0x1b0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	442c      	add	r4, r5
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0x14c>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	442b      	add	r3, r5
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x124>
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xda>
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	e6e9      	b.n	8000c80 <__udivmoddi4+0xa0>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	200b      	movs	r0, #11
 8000ed8:	f001 fb87 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000edc:	200b      	movs	r0, #11
 8000ede:	f001 fba0 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f001 fb7f 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f001 fb98 	bl	8002622 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a48      	ldr	r2, [pc, #288]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b46      	ldr	r3, [pc, #280]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_GPIO_Init+0x144>)
 8000fc4:	f002 f85a 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fd0:	f002 f854 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fdc:	f002 f84e 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0x144>)
 8000ff8:	f001 febe 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin;
 8000ffc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_GPIO_Init+0x148>)
 8001016:	f001 feaf 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 800101a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0x148>)
 8001034:	f001 fea0 	bl	8002d78 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40020c00 	.word	0x40020c00

0800104c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x50>)
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <MX_I2C1_Init+0x54>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C1_Init+0x50>)
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x58>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_I2C1_Init+0x50>)
 800106a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2C1_Init+0x50>)
 800108a:	f002 f82b 	bl	80030e4 <HAL_I2C_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001094:	f000 f996 	bl	80013c4 <Error_Handler>
  }

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000204 	.word	0x20000204
 80010a0:	40005400 	.word	0x40005400
 80010a4:	00061a80 	.word	0x00061a80

080010a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a31      	ldr	r2, [pc, #196]	; (800118c <HAL_I2C_MspInit+0xe4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d15c      	bne.n	8001184 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IUM_SCL_Pin|IMU_SDA_Pin;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_I2C_MspInit+0xec>)
 8001104:	f001 fe38 	bl	8002d78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_I2C_MspInit+0xe8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_I2C_MspInit+0xf4>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800112c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800115c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001160:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800116a:	f001 fa75 	bl	8002658 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001174:	f000 f926 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_I2C_MspInit+0xf0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	20000258 	.word	0x20000258
 800119c:	40026010 	.word	0x40026010

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f001 f8b2 	bl	800230c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 f83e 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f7ff fea8 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b0:	f7ff fe7e 	bl	8000eb0 <MX_DMA_Init>
  MX_TIM1_Init();
 80011b4:	f000 f9e6 	bl	8001584 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b8:	f000 fa90 	bl	80016dc <MX_TIM2_Init>
  MX_TIM4_Init();
 80011bc:	f000 fae2 	bl	8001784 <MX_TIM4_Init>
  MX_TIM9_Init();
 80011c0:	f000 fb82 	bl	80018c8 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 fcf2 	bl	8001bac <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80011c8:	f000 fb30 	bl	800182c <MX_TIM5_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff3e 	bl	800104c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	480e      	ldr	r0, [pc, #56]	; (800120c <main+0x6c>)
 80011d4:	f003 fc20 	bl	8004a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011d8:	2104      	movs	r1, #4
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <main+0x6c>)
 80011dc:	f003 fc1c 	bl	8004a18 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <main+0x70>)
 80011e2:	f003 fbc0 	bl	8004966 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <main+0x74>)
 80011e8:	f003 fbbd 	bl	8004966 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011ec:	213c      	movs	r1, #60	; 0x3c
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <main+0x78>)
 80011f0:	f003 fcd6 	bl	8004ba0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011f4:	213c      	movs	r1, #60	; 0x3c
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <main+0x7c>)
 80011f8:	f003 fcd2 	bl	8004ba0 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 6);
 80011fc:	2206      	movs	r2, #6
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <main+0x80>)
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <main+0x84>)
 8001202:	f004 fc39 	bl	8005a78 <HAL_UART_Receive_DMA>

  MPU6050_INIT();
 8001206:	f000 fda7 	bl	8001d58 <MPU6050_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800120a:	e7fe      	b.n	800120a <main+0x6a>
 800120c:	20000460 	.word	0x20000460
 8001210:	200004a0 	.word	0x200004a0
 8001214:	20000420 	.word	0x20000420
 8001218:	200003e0 	.word	0x200003e0
 800121c:	200004e0 	.word	0x200004e0
 8001220:	20000338 	.word	0x20000338
 8001224:	20000580 	.word	0x20000580

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fb7a 	bl	8006930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <SystemClock_Config+0xcc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <SystemClock_Config+0xd0>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001298:	2308      	movs	r3, #8
 800129a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800129c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fecc 	bl	800404c <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ba:	f000 f883 	bl	80013c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2102      	movs	r1, #2
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 f925 	bl	800452c <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012e8:	f000 f86c 	bl	80013c4 <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3750      	adds	r7, #80	; 0x50
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af02      	add	r7, sp, #8
 8001302:	6078      	str	r0, [r7, #4]
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d04f      	beq.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0xb4>
*/


	}
//	delay 100ms
	else if(htim->Instance==htim9.Instance){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d149      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0xb4>
//		IMU_READ_DMA();

// 		ss = sensor
		struct data ss = ReadMPU();
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fdc9 	bl	8001eb8 <ReadMPU>
		testt[0] = ss.accel_x;
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800132a:	6013      	str	r3, [r2, #0]
		testt[1] = ss.accel_y;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001330:	6053      	str	r3, [r2, #4]
		testt[2] = ss.accel_z;
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001336:	6093      	str	r3, [r2, #8]
		testt[3] = ss.gyro_x;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800133c:	60d3      	str	r3, [r2, #12]
		testt[4] = ss.gyro_y;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001342:	6113      	str	r3, [r2, #16]
		testt[5] = ss.gyro_z;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001348:	6153      	str	r3, [r2, #20]
		testt[6] = ss.temp;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800134e:	6193      	str	r3, [r2, #24]
		if (testt[8] <= fabs(testt[3])){
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001352:	ed93 7a08 	vldr	s14, [r3, #32]
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001358:	edd3 7a03 	vldr	s15, [r3, #12]
 800135c:	eef0 7ae7 	vabs.f32	s15, s15
 8001360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d807      	bhi.n	800137a <HAL_TIM_PeriodElapsedCallback+0x7e>
			testt[8] = fabs(testt[3]);
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800136c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001370:	eef0 7ae7 	vabs.f32	s15, s15
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001376:	edc3 7a08 	vstr	s15, [r3, #32]
		}
//		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
//		uint8_t motor_dir1;
		volatile int16_t *velo;
		velo = Get_Velocity();
 800137a:	f000 fee7 	bl	800214c <Get_Velocity>
 800137e:	6278      	str	r0, [r7, #36]	; 0x24
		UartTransmit(ss.accel_x, ss.gyro_x, *(velo), *(velo+2), 1);
 8001380:	edd7 7a06 	vldr	s15, [r7, #24]
 8001384:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001388:	edd7 7a03 	vldr	s15, [r7, #12]
 800138c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b21a      	sxth	r2, r3
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	3304      	adds	r3, #4
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b219      	sxth	r1, r3
 800139e:	2301      	movs	r3, #1
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	ee17 1a90 	vmov	r1, s15
 80013a8:	ee17 0a10 	vmov	r0, s14
 80013ac:	f000 ff88 	bl	80022c0 <UartTransmit>
/*		if(v_target[0] >= 19.0f) vt=-0.5f;
		else if (v_target[0] <= 2.0) vt = 0.5f;
*/

	}
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000420 	.word	0x20000420
 80013bc:	200004a0 	.word	0x200004a0
 80013c0:	200002cc 	.word	0x200002cc

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 ff9a 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <DMA1_Stream0_IRQHandler+0x10>)
 8001486:	f001 fa0f 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000258 	.word	0x20000258

08001494 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <DMA1_Stream5_IRQHandler+0x10>)
 800149a:	f001 fa05 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000520 	.word	0x20000520

080014a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80014ae:	f003 fbae 	bl	8004c0e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80014b4:	f003 fbab 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000460 	.word	0x20000460
 80014c0:	200004a0 	.word	0x200004a0

080014c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <USART2_IRQHandler+0x10>)
 80014ca:	f004 fb55 	bl	8005b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000580 	.word	0x20000580

080014d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM5_IRQHandler+0x10>)
 80014de:	f003 fb96 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000420 	.word	0x20000420

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f005 f9de 	bl	80068dc <__errno>
 8001520:	4602      	mov	r2, r0
 8001522:	230c      	movs	r3, #12
 8001524:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20020000 	.word	0x20020000
 800154c:	00000400 	.word	0x00000400
 8001550:	200001f8 	.word	0x200001f8
 8001554:	200005c8 	.word	0x200005c8

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <SystemInit+0x28>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <SystemInit+0x28>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SystemInit+0x28>)
 800156e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001572:	609a      	str	r2, [r3, #8]
#endif
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2220      	movs	r2, #32
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 f9b7 	bl	8006930 <memset>

  htim1.Instance = TIM1;
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015c4:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <MX_TIM1_Init+0x154>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015ca:	220e      	movs	r2, #14
 80015cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 299;
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015d6:	f240 122b 	movw	r2, #299	; 0x12b
 80015da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ee:	4839      	ldr	r0, [pc, #228]	; (80016d4 <MX_TIM1_Init+0x150>)
 80015f0:	f003 f98e 	bl	8004910 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015fa:	f7ff fee3 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001608:	4619      	mov	r1, r3
 800160a:	4832      	ldr	r0, [pc, #200]	; (80016d4 <MX_TIM1_Init+0x150>)
 800160c:	f003 fcce 	bl	8004fac <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001616:	f7ff fed5 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800161a:	482e      	ldr	r0, [pc, #184]	; (80016d4 <MX_TIM1_Init+0x150>)
 800161c:	f003 f9c7 	bl	80049ae <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001626:	f7ff fecd 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001636:	4619      	mov	r1, r3
 8001638:	4826      	ldr	r0, [pc, #152]	; (80016d4 <MX_TIM1_Init+0x150>)
 800163a:	f004 f863 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001644:	f7ff febe 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <MX_TIM1_Init+0x150>)
 800166e:	f003 fbd7 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001678:	f7ff fea4 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800167c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001680:	2204      	movs	r2, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MX_TIM1_Init+0x150>)
 8001686:	f003 fbcb 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001690:	f7ff fe98 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_TIM1_Init+0x150>)
 80016b8:	f004 f892 	bl	80057e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80016c2:	f7ff fe7f 	bl	80013c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM1_Init+0x150>)
 80016c8:	f000 fa36 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 80016cc:	bf00      	nop
 80016ce:	3758      	adds	r7, #88	; 0x58
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000460 	.word	0x20000460
 80016d8:	40010000 	.word	0x40010000

080016dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	; 0x30
 80016e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2224      	movs	r2, #36	; 0x24
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 f920 	bl	8006930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_TIM2_Init+0xa4>)
 80016fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_TIM2_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM2_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM2_Init+0xa4>)
 800170e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM2_Init+0xa4>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM2_Init+0xa4>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001720:	2303      	movs	r3, #3
 8001722:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM2_Init+0xa4>)
 800174c:	f003 f996 	bl	8004a7c <HAL_TIM_Encoder_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001756:	f7ff fe35 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM2_Init+0xa4>)
 8001768:	f003 ffcc 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001772:	f7ff fe27 	bl	80013c4 <Error_Handler>
  }

}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	; 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200004e0 	.word	0x200004e0

08001784 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f005 f8cc 	bl	8006930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017a2:	4a21      	ldr	r2, [pc, #132]	; (8001828 <MX_TIM4_Init+0xa4>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c6:	2303      	movs	r3, #3
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ce:	2301      	movs	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017de:	2301      	movs	r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM4_Init+0xa0>)
 80017f2:	f003 f943 	bl	8004a7c <HAL_TIM_Encoder_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017fc:	f7ff fde2 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM4_Init+0xa0>)
 800180e:	f003 ff79 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001818:	f7ff fdd4 	bl	80013c4 <Error_Handler>
  }

}
 800181c:	bf00      	nop
 800181e:	3730      	adds	r7, #48	; 0x30
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200003e0 	.word	0x200003e0
 8001828:	40000800 	.word	0x40000800

0800182c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM5_Init+0x94>)
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <MX_TIM5_Init+0x98>)
 800184c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM5_Init+0x94>)
 8001850:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001854:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM5_Init+0x94>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM5_Init+0x94>)
 800185e:	2231      	movs	r2, #49	; 0x31
 8001860:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_TIM5_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM5_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_TIM5_Init+0x94>)
 8001870:	f003 f84e 	bl	8004910 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800187a:	f7ff fda3 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM5_Init+0x94>)
 800188c:	f003 fb8e 	bl	8004fac <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001896:	f7ff fd95 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_TIM5_Init+0x94>)
 80018a8:	f003 ff2c 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80018b2:	f7ff fd87 	bl	80013c4 <Error_Handler>
  }

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000420 	.word	0x20000420
 80018c4:	40000c00 	.word	0x40000c00

080018c8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_TIM9_Init+0x6c>)
 80018dc:	4a16      	ldr	r2, [pc, #88]	; (8001938 <MX_TIM9_Init+0x70>)
 80018de:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_TIM9_Init+0x6c>)
 80018e2:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80018e6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_TIM9_Init+0x6c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_TIM9_Init+0x6c>)
 80018f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_TIM9_Init+0x6c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MX_TIM9_Init+0x6c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <MX_TIM9_Init+0x6c>)
 8001904:	f003 f804 	bl	8004910 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800190e:	f7ff fd59 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_TIM9_Init+0x6c>)
 800191e:	f003 fb45 	bl	8004fac <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001928:	f7ff fd4c 	bl	80013c4 <Error_Handler>
  }

}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200004a0 	.word	0x200004a0
 8001938:	40014000 	.word	0x40014000

0800193c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_TIM_Base_MspInit+0xb8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d116      	bne.n	800197c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2018      	movs	r0, #24
 8001970:	f000 fe3b 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001974:	2018      	movs	r0, #24
 8001976:	f000 fe54 	bl	8002622 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800197a:	e036      	b.n	80019ea <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_TIM_Base_MspInit+0xc0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d116      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2032      	movs	r0, #50	; 0x32
 80019a8:	f000 fe1f 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019ac:	2032      	movs	r0, #50	; 0x32
 80019ae:	f000 fe38 	bl	8002622 <HAL_NVIC_EnableIRQ>
}
 80019b2:	e01a      	b.n	80019ea <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_TIM_Base_MspInit+0xc4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d115      	bne.n	80019ea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_TIM_Base_MspInit+0xbc>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	2018      	movs	r0, #24
 80019e0:	f000 fe03 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019e4:	2018      	movs	r0, #24
 80019e6:	f000 fe1c 	bl	8002622 <HAL_NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40010000 	.word	0x40010000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40000c00 	.word	0x40000c00
 8001a00:	40014000 	.word	0x40014000

08001a04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a24:	d14a      	bne.n	8001abc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a3e      	ldr	r2, [pc, #248]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	4825      	ldr	r0, [pc, #148]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x128>)
 8001a96:	f001 f96f 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481e      	ldr	r0, [pc, #120]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001ab6:	f001 f95f 	bl	8002d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001aba:	e030      	b.n	8001b1e <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x130>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12b      	bne.n	8001b1e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001b1a:	f001 f92d 	bl	8002d78 <HAL_GPIO_Init>
}
 8001b1e:	bf00      	nop
 8001b20:	3730      	adds	r7, #48	; 0x30
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40000800 	.word	0x40000800

08001b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11e      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8001b76:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_MspPostInit+0x70>)
 8001b94:	f001 f8f0 	bl	8002d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40021000 	.word	0x40021000

08001bac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <MX_USART2_UART_Init+0x50>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001be4:	f003 fe62 	bl	80058ac <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bee:	f7ff fbe9 	bl	80013c4 <Error_Handler>
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000580 	.word	0x20000580
 8001bfc:	40004400 	.word	0x40004400

08001c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_UART_MspInit+0xf0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d162      	bne.n	8001ce8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <HAL_UART_MspInit+0xf4>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <HAL_UART_MspInit+0xf4>)
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_UART_MspInit+0xf4>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_UART_MspInit+0xf4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_UART_MspInit+0xf4>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_UART_MspInit+0xf4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4820      	ldr	r0, [pc, #128]	; (8001cf8 <HAL_UART_MspInit+0xf8>)
 8001c76:	f001 f87f 	bl	8002d78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001c7c:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_UART_MspInit+0x100>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001cbe:	f000 fccb 	bl	8002658 <HAL_DMA_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001cc8:	f7ff fb7c 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_UART_MspInit+0xfc>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2026      	movs	r0, #38	; 0x26
 8001cde:	f000 fc84 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce2:	2026      	movs	r0, #38	; 0x26
 8001ce4:	f000 fc9d 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	20000520 	.word	0x20000520
 8001d00:	40026088 	.word	0x40026088

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d0a:	e003      	b.n	8001d14 <LoopCopyDataInit>

08001d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d12:	3104      	adds	r1, #4

08001d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d1c:	d3f6      	bcc.n	8001d0c <CopyDataInit>
  ldr  r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d20:	e002      	b.n	8001d28 <LoopFillZerobss>

08001d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d24:	f842 3b04 	str.w	r3, [r2], #4

08001d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d2c:	d3f9      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d2e:	f7ff fc13 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f004 fdd9 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff fa33 	bl	80011a0 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d40:	08008ba8 	.word	0x08008ba8
  ldr  r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d48:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001d4c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001d50:	200005c8 	.word	0x200005c8

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <MPU6050_INIT>:
#include "IMU_MPU6050.h"
#include "i2c.h"
#include "gpio.h"


void MPU6050_INIT(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af04      	add	r7, sp, #16

		// reset mpu6050
	TxBuffer[0] = 0x80;
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	226b      	movs	r2, #107	; 0x6b
 8001d76:	21d0      	movs	r1, #208	; 0xd0
 8001d78:	484b      	ldr	r0, [pc, #300]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001d7a:	f001 faeb 	bl	8003354 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001d7e:	20c8      	movs	r0, #200	; 0xc8
 8001d80:	f000 fb36 	bl	80023f0 <HAL_Delay>

	// tat sleep mode, tat cycle mode, temp_dis = 8MHZ
	TxBuffer[0] = 0x00;
 8001d84:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	2301      	movs	r3, #1
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	226b      	movs	r2, #107	; 0x6b
 8001d9c:	21d0      	movs	r1, #208	; 0xd0
 8001d9e:	4842      	ldr	r0, [pc, #264]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001da0:	f001 fad8 	bl	8003354 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001da4:	20c8      	movs	r0, #200	; 0xc8
 8001da6:	f000 fb23 	bl	80023f0 <HAL_Delay>

	// disabled DLPF
	TxBuffer[0] = 0x06;
 8001daa:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001dac:	2206      	movs	r2, #6
 8001dae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_CONFIG, 1, TxBuffer, 1, 1000);
 8001db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	221a      	movs	r2, #26
 8001dc2:	21d0      	movs	r1, #208	; 0xd0
 8001dc4:	4838      	ldr	r0, [pc, #224]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001dc6:	f001 fac5 	bl	8003354 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001dca:	20c8      	movs	r0, #200	; 0xc8
 8001dcc:	f000 fb10 	bl	80023f0 <HAL_Delay>

	// full scale range mode 3 +-2000do/s
	TxBuffer[0] = 0x18;
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001dd2:	2218      	movs	r2, #24
 8001dd4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, TxBuffer, 1, 1000);
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2301      	movs	r3, #1
 8001de6:	221b      	movs	r2, #27
 8001de8:	21d0      	movs	r1, #208	; 0xd0
 8001dea:	482f      	ldr	r0, [pc, #188]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001dec:	f001 fab2 	bl	8003354 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001df0:	20c8      	movs	r0, #200	; 0xc8
 8001df2:	f000 fafd 	bl	80023f0 <HAL_Delay>

	// full scale range mode 1 +-8g
	TxBuffer[0] = 0x10;
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001df8:	2210      	movs	r2, #16
 8001dfa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, TxBuffer, 1, 1000);
 8001dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	221c      	movs	r2, #28
 8001e0e:	21d0      	movs	r1, #208	; 0xd0
 8001e10:	4825      	ldr	r0, [pc, #148]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001e12:	f001 fa9f 	bl	8003354 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e16:	20c8      	movs	r0, #200	; 0xc8
 8001e18:	f000 faea 	bl	80023f0 <HAL_Delay>

	// cho phep ngat INT
	TxBuffer[0] = 0x19;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001e1e:	2219      	movs	r2, #25
 8001e20:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_INT_ENABLE, 1, TxBuffer, 1, 1000);
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MPU6050_INIT+0x14c>)
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	21d0      	movs	r1, #208	; 0xd0
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001e38:	f001 fa8c 	bl	8003354 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e3c:	20c8      	movs	r0, #200	; 0xc8
 8001e3e:	f000 fad7 	bl	80023f0 <HAL_Delay>

	// test MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, RxBuffer, 1, 1000);
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <MPU6050_INIT+0x154>)
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	2275      	movs	r2, #117	; 0x75
 8001e54:	21d0      	movs	r1, #208	; 0xd0
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <MPU6050_INIT+0x150>)
 8001e58:	f001 fb76 	bl	8003548 <HAL_I2C_Mem_Read>
	HAL_Delay(300);
 8001e5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e60:	f000 fac6 	bl	80023f0 <HAL_Delay>
	if (RxBuffer[0] == 0x68)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MPU6050_INIT+0x154>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b68      	cmp	r3, #104	; 0x68
 8001e6a:	d106      	bne.n	8001e7a <MPU6050_INIT+0x122>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e72:	480f      	ldr	r0, [pc, #60]	; (8001eb0 <MPU6050_INIT+0x158>)
 8001e74:	f001 f902 	bl	800307c <HAL_GPIO_WritePin>
		for(j=0;j<=11;j++){
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
			HAL_Delay(100);
		}
	}
}
 8001e78:	e010      	b.n	8001e9c <MPU6050_INIT+0x144>
		for(j=0;j<=11;j++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	e00a      	b.n	8001e96 <MPU6050_INIT+0x13e>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <MPU6050_INIT+0x158>)
 8001e86:	f001 f912 	bl	80030ae <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001e8a:	2064      	movs	r0, #100	; 0x64
 8001e8c:	f000 fab0 	bl	80023f0 <HAL_Delay>
		for(j=0;j<=11;j++){
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	3301      	adds	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	d9f1      	bls.n	8001e80 <MPU6050_INIT+0x128>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200003a8 	.word	0x200003a8
 8001ea8:	20000204 	.word	0x20000204
 8001eac:	200003a0 	.word	0x200003a0
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <ReadMPU>:
		float accel_x;	Toc do goc x (accelerometer)
		float accel_y;	Toc do goc y
		float accel_z;	Toc do goc z
	};
*/
struct data ReadMPU(){
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b092      	sub	sp, #72	; 0x48
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	struct data mpu;
	int8_t i;
	int16_t DataBuffer16[7];
	int16_t gyro_x_temp, gyro_y_temp, gyro_z_temp, accel_x_temp, accel_y_temp, accel_z_temp;
	IMU_READ_DMA();
 8001ec0:	f000 f92e 	bl	8002120 <IMU_READ_DMA>

	for(i=0;i<7;i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001eca:	e01e      	b.n	8001f0a <ReadMPU+0x52>
	{
		DataBuffer16[i] = (int16_t)(((uint16_t)DataBuffer[2*i]<<8) | DataBuffer[2*i + 1]);
 8001ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4a8f      	ldr	r2, [pc, #572]	; (8002110 <ReadMPU+0x258>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b219      	sxth	r1, r3
 8001eda:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a8b      	ldr	r2, [pc, #556]	; (8002110 <ReadMPU+0x258>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001eec:	430a      	orrs	r2, r1
 8001eee:	b212      	sxth	r2, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f823 2c3c 	strh.w	r2, [r3, #-60]
	for(i=0;i<7;i++)
 8001efc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001f0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	dddc      	ble.n	8001ecc <ReadMPU+0x14>
	}

	accel_x_temp = DataBuffer16[0];
 8001f12:	89bb      	ldrh	r3, [r7, #12]
 8001f14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	accel_y_temp = DataBuffer16[1];
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	accel_z_temp = DataBuffer16[2];
 8001f1e:	8a3b      	ldrh	r3, [r7, #16]
 8001f20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40


	mpu.accel_x = roundf(((atan2((double)accel_y_temp,(double)accel_z_temp)+M_PI)*RA_TO_DEC*1000.0f));
 8001f24:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe faaf 	bl	800048c <__aeabi_i2d>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe faa8 	bl	800048c <__aeabi_i2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	ec43 2b11 	vmov	d1, r2, r3
 8001f44:	ec45 4b10 	vmov	d0, r4, r5
 8001f48:	f006 fa46 	bl	80083d8 <atan2>
 8001f4c:	ec51 0b10 	vmov	r0, r1, d0
 8001f50:	a36b      	add	r3, pc, #428	; (adr r3, 8002100 <ReadMPU+0x248>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f94d 	bl	80001f4 <__adddf3>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	4621      	mov	r1, r4
 8001f62:	a369      	add	r3, pc, #420	; (adr r3, 8002108 <ReadMPU+0x250>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fafa 	bl	8000560 <__aeabi_dmul>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4618      	mov	r0, r3
 8001f72:	4621      	mov	r1, r4
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b66      	ldr	r3, [pc, #408]	; (8002114 <ReadMPU+0x25c>)
 8001f7a:	f7fe faf1 	bl	8000560 <__aeabi_dmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	4618      	mov	r0, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	f7fe fdc3 	bl	8000b10 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	ee00 3a10 	vmov	s0, r3
 8001f90:	f006 f9fc 	bl	800838c <roundf>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	mpu.accel_y = roundf((float)((atan2((double)accel_x_temp,(double)accel_z_temp))*RA_TO_DEC));
 8001f9c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa73 	bl	800048c <__aeabi_i2d>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	460d      	mov	r5, r1
 8001faa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa6c 	bl	800048c <__aeabi_i2d>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	ec43 2b11 	vmov	d1, r2, r3
 8001fbc:	ec45 4b10 	vmov	d0, r4, r5
 8001fc0:	f006 fa0a 	bl	80083d8 <atan2>
 8001fc4:	ec51 0b10 	vmov	r0, r1, d0
 8001fc8:	a34f      	add	r3, pc, #316	; (adr r3, 8002108 <ReadMPU+0x250>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fac7 	bl	8000560 <__aeabi_dmul>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	4621      	mov	r1, r4
 8001fda:	f7fe fd99 	bl	8000b10 <__aeabi_d2f>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	ee00 3a10 	vmov	s0, r3
 8001fe4:	f006 f9d2 	bl	800838c <roundf>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
 8001fec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	mpu.accel_z = roundf((float)((atan2((double)accel_x_temp,(double)accel_y_temp))*RA_TO_DEC));
 8001ff0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa49 	bl	800048c <__aeabi_i2d>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa42 	bl	800048c <__aeabi_i2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b11 	vmov	d1, r2, r3
 8002010:	ec45 4b10 	vmov	d0, r4, r5
 8002014:	f006 f9e0 	bl	80083d8 <atan2>
 8002018:	ec51 0b10 	vmov	r0, r1, d0
 800201c:	a33a      	add	r3, pc, #232	; (adr r3, 8002108 <ReadMPU+0x250>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fa9d 	bl	8000560 <__aeabi_dmul>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	4618      	mov	r0, r3
 800202c:	4621      	mov	r1, r4
 800202e:	f7fe fd6f 	bl	8000b10 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	ee00 3a10 	vmov	s0, r3
 8002038:	f006 f9a8 	bl	800838c <roundf>
 800203c:	eef0 7a40 	vmov.f32	s15, s0
 8002040:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
/*
	mpu.accel_x = atan((accel_y_temp)/sqrt(pow(accel_x_temp,2)+pow(accel_z_temp,2)))*RA_TO_DEC;
	mpu.accel_x = atan(gyroAngleX);
*/

	mpu.temp = (float)DataBuffer16[3];
 8002044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002050:	edc7 7a07 	vstr	s15, [r7, #28]

	gyro_x_temp = DataBuffer16[4];
 8002054:	8abb      	ldrh	r3, [r7, #20]
 8002056:	87fb      	strh	r3, [r7, #62]	; 0x3e
	gyro_y_temp = DataBuffer16[5];
 8002058:	8afb      	ldrh	r3, [r7, #22]
 800205a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	gyro_z_temp = DataBuffer16[6];
 800205c:	8b3b      	ldrh	r3, [r7, #24]
 800205e:	877b      	strh	r3, [r7, #58]	; 0x3a

	mpu.gyro_x = roundf((float)gyro_x_temp*1000.0f/131.0F);
 8002060:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002118 <ReadMPU+0x260>
 8002070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002074:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800211c <ReadMPU+0x264>
 8002078:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800207c:	eeb0 0a66 	vmov.f32	s0, s13
 8002080:	f006 f984 	bl	800838c <roundf>
 8002084:	eef0 7a40 	vmov.f32	s15, s0
 8002088:	edc7 7a08 	vstr	s15, [r7, #32]
	mpu.gyro_y = roundf((float)gyro_y_temp*1000.0f/131.0F);
 800208c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002098:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002118 <ReadMPU+0x260>
 800209c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800211c <ReadMPU+0x264>
 80020a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020a8:	eeb0 0a66 	vmov.f32	s0, s13
 80020ac:	f006 f96e 	bl	800838c <roundf>
 80020b0:	eef0 7a40 	vmov.f32	s15, s0
 80020b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	mpu.gyro_z = roundf((float)gyro_z_temp*1000.0f/131.0F);
 80020b8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002118 <ReadMPU+0x260>
 80020c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020cc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800211c <ReadMPU+0x264>
 80020d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020d4:	eeb0 0a66 	vmov.f32	s0, s13
 80020d8:	f006 f958 	bl	800838c <roundf>
 80020dc:	eef0 7a40 	vmov.f32	s15, s0
 80020e0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	return mpu;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	461d      	mov	r5, r3
 80020e8:	f107 041c 	add.w	r4, r7, #28
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}

}
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	3748      	adds	r7, #72	; 0x48
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002100:	54442d18 	.word	0x54442d18
 8002104:	400921fb 	.word	0x400921fb
 8002108:	20000000 	.word	0x20000000
 800210c:	404ca5dc 	.word	0x404ca5dc
 8002110:	20000360 	.word	0x20000360
 8002114:	408f4000 	.word	0x408f4000
 8002118:	447a0000 	.word	0x447a0000
 800211c:	43030000 	.word	0x43030000

08002120 <IMU_READ_DMA>:

/*
DataBuffer is output
uint8_t DataBuffer[14];
*/
void IMU_READ_DMA(){
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, DataBuffer, 14, 1);
 8002126:	2301      	movs	r3, #1
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	230e      	movs	r3, #14
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <IMU_READ_DMA+0x24>)
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	223b      	movs	r2, #59	; 0x3b
 8002136:	21d0      	movs	r1, #208	; 0xd0
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <IMU_READ_DMA+0x28>)
 800213a:	f001 fa05 	bl	8003548 <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, DataBuffer, 14);
//	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &DataBuffer[0], 14);
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000360 	.word	0x20000360
 8002148:	20000204 	.word	0x20000204

0800214c <Get_Velocity>:

/*
 * return pointer *(enc+0)  *(enc+1)

*/
volatile int16_t * Get_Velocity(){
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
//	volatile float enc[2];
	enc[0]= (TIM2->CNT)-1000;
 8002150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	b29b      	uxth	r3, r3
 8002158:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <Get_Velocity+0x48>)
 8002162:	801a      	strh	r2, [r3, #0]
//	if ((TIM2->CNT)>=5000) enc[1]=-1;
//	else enc[1]=1;

	enc[2]= (TIM4->CNT)-1000;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <Get_Velocity+0x4c>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b29b      	uxth	r3, r3
 800216a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800216e:	b29b      	uxth	r3, r3
 8002170:	b21a      	sxth	r2, r3
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <Get_Velocity+0x48>)
 8002174:	809a      	strh	r2, [r3, #4]
//	if ((TIM4->CNT)>5000) enc[3]=1;
//	else enc[3]=-1;

	TIM4->CNT=1000;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <Get_Velocity+0x4c>)
 8002178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=1000;
 800217e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

	return enc;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <Get_Velocity+0x48>)
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	20000348 	.word	0x20000348
 8002198:	40000800 	.word	0x40000800

0800219c <Dec2Bytes>:
		van toc trai: 2 byte
		van toc phai: 2 byte
		chieu: 1 byte
		data: 1 byte
*/
void Dec2Bytes(uint32_t accel, uint32_t gyro, int16_t encA, int16_t encB, uint8_t motor_dir){
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	460b      	mov	r3, r1
 80021ac:	80fb      	strh	r3, [r7, #6]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80bb      	strh	r3, [r7, #4]
	dataTransmit[0]=(uint8_t)((((uint16_t)encA)|0x00FF)>>8); // 8 bit H
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <Dec2Bytes+0xa0>)
 80021bc:	701a      	strb	r2, [r3, #0]
	dataTransmit[1]=(uint8_t)((((uint16_t)encA)|0xFF00)); 	      // 8 bit L
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <Dec2Bytes+0xa0>)
 80021c4:	705a      	strb	r2, [r3, #1]

	dataTransmit[2]=(uint8_t)((((uint16_t)encB)|0x00FF)>>8); // 8 bit H
 80021c6:	88bb      	ldrh	r3, [r7, #4]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <Dec2Bytes+0xa0>)
 80021d0:	709a      	strb	r2, [r3, #2]
	dataTransmit[3]=(uint8_t)((((uint16_t)encB)|0xFF00)); 	      // 8 bit L
 80021d2:	88bb      	ldrh	r3, [r7, #4]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <Dec2Bytes+0xa0>)
 80021d8:	70da      	strb	r2, [r3, #3]

	dataTransmit[4]=(uint8_t)((((uint32_t)accel)|0xFF00FFFF)>>16); // 8 bit H
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <Dec2Bytes+0xa0>)
 80021e6:	711a      	strb	r2, [r3, #4]
	dataTransmit[5]=(uint8_t)((((uint32_t)accel)|0xFFFF00FF)>>8); 	      // 8 bit M
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021f0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <Dec2Bytes+0xa0>)
 80021f8:	715a      	strb	r2, [r3, #5]
	dataTransmit[6]=(uint8_t)((((uint32_t)accel)|0xFFFFFF00));		// 8 bit L
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <Dec2Bytes+0xa0>)
 8002200:	719a      	strb	r2, [r3, #6]

	dataTransmit[7]=(uint8_t)((((uint32_t)gyro)|0xFF00FFFF)>>16); // 8 bit H
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <Dec2Bytes+0xa0>)
 800220e:	71da      	strb	r2, [r3, #7]
	dataTransmit[8]=(uint8_t)((((uint32_t)gyro)|0xFFFF00FF)>>8); 	      // 8 bit M
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002218:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <Dec2Bytes+0xa0>)
 8002220:	721a      	strb	r2, [r3, #8]
	dataTransmit[9]=(uint8_t)((((uint32_t)gyro)|0xFFFFFF00));		// 8 bit L
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <Dec2Bytes+0xa0>)
 8002228:	725a      	strb	r2, [r3, #9]

	dataTransmit[10] = motor_dir;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <Dec2Bytes+0xa0>)
 800222c:	7e3b      	ldrb	r3, [r7, #24]
 800222e:	7293      	strb	r3, [r2, #10]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200003c8 	.word	0x200003c8

08002240 <Byte2Dec>:

/*
 * Input: uint8_t receivebuffer[16];

*/
void Byte2Dec(){
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	k[0] = (float)(((int16_t)receivebuffer[0]<<8)|(int16_t)receivebuffer[1]);
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <Byte2Dec+0x78>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <Byte2Dec+0x78>)
 800224c:	7852      	ldrb	r2, [r2, #1]
 800224e:	4313      	orrs	r3, r2
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <Byte2Dec+0x7c>)
 800225a:	edc3 7a00 	vstr	s15, [r3]
	k[1] = (float)(((int16_t)receivebuffer[2]<<8)|(int16_t)receivebuffer[3]);
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <Byte2Dec+0x78>)
 8002260:	789b      	ldrb	r3, [r3, #2]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <Byte2Dec+0x78>)
 8002266:	78d2      	ldrb	r2, [r2, #3]
 8002268:	4313      	orrs	r3, r2
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <Byte2Dec+0x7c>)
 8002274:	edc3 7a01 	vstr	s15, [r3, #4]
	k[2] = (float)(((int16_t)receivebuffer[4]<<8)|(int16_t)receivebuffer[5]);
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <Byte2Dec+0x78>)
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <Byte2Dec+0x78>)
 8002280:	7952      	ldrb	r2, [r2, #5]
 8002282:	4313      	orrs	r3, r2
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <Byte2Dec+0x7c>)
 800228e:	edc3 7a02 	vstr	s15, [r3, #8]
	k[3] = (float)(((int16_t)receivebuffer[6]<<8)|(int16_t)receivebuffer[7]);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <Byte2Dec+0x78>)
 8002294:	799b      	ldrb	r3, [r3, #6]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <Byte2Dec+0x78>)
 800229a:	79d2      	ldrb	r2, [r2, #7]
 800229c:	4313      	orrs	r3, r2
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <Byte2Dec+0x7c>)
 80022a8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000338 	.word	0x20000338
 80022bc:	20000320 	.word	0x20000320

080022c0 <UartTransmit>:

/*
 *

*/
void UartTransmit(uint32_t accel, uint32_t gyro, int16_t encA, int16_t encB, uint8_t motor_dir){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	460b      	mov	r3, r1
 80022d0:	80fb      	strh	r3, [r7, #6]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80bb      	strh	r3, [r7, #4]
	Dec2Bytes(accel, gyro, encA, encB, motor_dir);
 80022d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022de:	7e3b      	ldrb	r3, [r7, #24]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	460b      	mov	r3, r1
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ff58 	bl	800219c <Dec2Bytes>

	HAL_UART_Transmit(&huart2, &dataTransmit[0], sizeof(dataTransmit), 1);
 80022ec:	2301      	movs	r3, #1
 80022ee:	2210      	movs	r2, #16
 80022f0:	4904      	ldr	r1, [pc, #16]	; (8002304 <UartTransmit+0x44>)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <UartTransmit+0x48>)
 80022f4:	f003 fb27 	bl	8005946 <HAL_UART_Transmit>

	Byte2Dec();
 80022f8:	f7ff ffa2 	bl	8002240 <Byte2Dec>

}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	200003c8 	.word	0x200003c8
 8002308:	20000580 	.word	0x20000580

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f94d 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff f848 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f965 	bl	800263e <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238c:	f000 f92d 	bl	80025ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008
 80023d4:	200005c0 	.word	0x200005c0

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	200005c0 	.word	0x200005c0

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_Delay+0x40>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffde 	bl	80023d8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000008 	.word	0x20000008

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	; (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff3e 	bl	800247c <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff8e 	bl	8002528 <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5d 	bl	80024d4 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff31 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff feb8 	bl	80023d8 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e099      	b.n	80027a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002694:	e00f      	b.n	80026b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002696:	f7ff fe9f 	bl	80023d8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d908      	bls.n	80026b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e078      	b.n	80027a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e8      	bne.n	8002696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_DMA_Init+0x158>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b04      	cmp	r3, #4
 800270e:	d107      	bne.n	8002720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4313      	orrs	r3, r2
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f023 0307 	bic.w	r3, r3, #7
 8002736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b04      	cmp	r3, #4
 8002748:	d117      	bne.n	800277a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa91 	bl	8002c84 <DMA_CheckFifoParam>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002776:	2301      	movs	r3, #1
 8002778:	e016      	b.n	80027a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa48 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 8002788:	4603      	mov	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	223f      	movs	r2, #63	; 0x3f
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	f010803f 	.word	0xf010803f

080027b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Start_IT+0x26>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e040      	b.n	800285c <HAL_DMA_Start_IT+0xa8>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d12f      	bne.n	800284e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f9da 	bl	8002bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	223f      	movs	r2, #63	; 0x3f
 800280e:	409a      	lsls	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0216 	orr.w	r2, r2, #22
 8002822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e005      	b.n	800285a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00c      	b.n	800289c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_DMA_IRQHandler+0x258>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a92      	ldr	r2, [pc, #584]	; (8002b04 <HAL_DMA_IRQHandler+0x25c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2208      	movs	r2, #8
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2208      	movs	r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2204      	movs	r2, #4
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d043      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2210      	movs	r2, #16
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e01f      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0208 	bic.w	r2, r2, #8
 8002a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 808e 	beq.w	8002b46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8086 	beq.w	8002b46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2220      	movs	r2, #32
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d136      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x1da>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d07d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
        }
        return;
 8002abe:	e078      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01c      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d030      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e02b      	b.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e022      	b.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
 8002b00:	20000000 	.word	0x20000000
 8002b04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0210 	bic.w	r2, r2, #16
 8002b24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d032      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d022      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d307      	bcc.n	8002b8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f2      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x2ca>
 8002b8c:	e000      	b.n	8002b90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bb2:	bf00      	nop
    }
  }
}
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop

08002bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d108      	bne.n	8002bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bfa:	e007      	b.n	8002c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b10      	subs	r3, #16
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d909      	bls.n	8002c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
 8002c58:	e007      	b.n	8002c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	aaaaaaab 	.word	0xaaaaaaab
 8002c80:	08008928 	.word	0x08008928

08002c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d855      	bhi.n	8002d50 <DMA_CheckFifoParam+0xcc>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x28>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002d51 	.word	0x08002d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d045      	beq.n	8002d54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e042      	b.n	8002d54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d13f      	bne.n	8002d58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cdc:	e03c      	b.n	8002d58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d121      	bne.n	8002d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d836      	bhi.n	8002d5c <DMA_CheckFifoParam+0xd8>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x70>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0b 	.word	0x08002d0b
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d1d 	.word	0x08002d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e02f      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d024      	beq.n	8002d60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e021      	b.n	8002d60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d24:	d11e      	bne.n	8002d64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2a:	e01b      	b.n	8002d64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <DMA_CheckFifoParam+0xb4>
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d003      	beq.n	8002d3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d36:	e018      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e015      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4e:	e00b      	b.n	8002d68 <DMA_CheckFifoParam+0xe4>
      break;
 8002d50:	bf00      	nop
 8002d52:	e00a      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d54:	bf00      	nop
 8002d56:	e008      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d58:	bf00      	nop
 8002d5a:	e006      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e004      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d60:	bf00      	nop
 8002d62:	e002      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;   
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d68:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e159      	b.n	8003048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d94:	2201      	movs	r2, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	f040 8148 	bne.w	8003042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d00b      	beq.n	8002dd2 <HAL_GPIO_Init+0x5a>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc6:	2b11      	cmp	r3, #17
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b12      	cmp	r3, #18
 8002dd0:	d130      	bne.n	8002e34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0201 	and.w	r2, r3, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0xfc>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b12      	cmp	r3, #18
 8002e72:	d123      	bne.n	8002ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a2 	beq.w	8003042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_GPIO_Init+0x2e4>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a55      	ldr	r2, [pc, #340]	; (800305c <HAL_GPIO_Init+0x2e4>)
 8002f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_GPIO_Init+0x2e4>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1a:	4a51      	ldr	r2, [pc, #324]	; (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a48      	ldr	r2, [pc, #288]	; (8003064 <HAL_GPIO_Init+0x2ec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d019      	beq.n	8002f7a <HAL_GPIO_Init+0x202>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_GPIO_Init+0x2f0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_GPIO_Init+0x1fe>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_GPIO_Init+0x2f4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00d      	beq.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a45      	ldr	r2, [pc, #276]	; (8003070 <HAL_GPIO_Init+0x2f8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <HAL_GPIO_Init+0x1f6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a44      	ldr	r2, [pc, #272]	; (8003074 <HAL_GPIO_Init+0x2fc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_GPIO_Init+0x1f2>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8c:	4934      	ldr	r1, [pc, #208]	; (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_GPIO_Init+0x300>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbe:	4a2e      	ldr	r2, [pc, #184]	; (8003078 <HAL_GPIO_Init+0x300>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fc4:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <HAL_GPIO_Init+0x300>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe8:	4a23      	ldr	r2, [pc, #140]	; (8003078 <HAL_GPIO_Init+0x300>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_GPIO_Init+0x300>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003012:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_GPIO_Init+0x300>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_GPIO_Init+0x300>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303c:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_GPIO_Init+0x300>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f aea2 	bls.w	8002d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	3724      	adds	r7, #36	; 0x24
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40023800 	.word	0x40023800
 8003060:	40013800 	.word	0x40013800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40020800 	.word	0x40020800
 8003070:	40020c00 	.word	0x40020c00
 8003074:	40021000 	.word	0x40021000
 8003078:	40013c00 	.word	0x40013c00

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	401a      	ands	r2, r3
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d104      	bne.n	80030d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	041a      	lsls	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e11f      	b.n	8003336 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd ffcc 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003146:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003148:	f001 fbba 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 800314c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a7b      	ldr	r2, [pc, #492]	; (8003340 <HAL_I2C_Init+0x25c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d807      	bhi.n	8003168 <HAL_I2C_Init+0x84>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_I2C_Init+0x260>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e006      	b.n	8003176 <HAL_I2C_Init+0x92>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_I2C_Init+0x264>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0db      	b.n	8003336 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_I2C_Init+0x268>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0c9b      	lsrs	r3, r3, #18
 8003188:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a64      	ldr	r2, [pc, #400]	; (8003340 <HAL_I2C_Init+0x25c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d802      	bhi.n	80031b8 <HAL_I2C_Init+0xd4>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3301      	adds	r3, #1
 80031b6:	e009      	b.n	80031cc <HAL_I2C_Init+0xe8>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	4a63      	ldr	r2, [pc, #396]	; (8003350 <HAL_I2C_Init+0x26c>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	3301      	adds	r3, #1
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4956      	ldr	r1, [pc, #344]	; (8003340 <HAL_I2C_Init+0x25c>)
 80031e8:	428b      	cmp	r3, r1
 80031ea:	d80d      	bhi.n	8003208 <HAL_I2C_Init+0x124>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e59      	subs	r1, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b04      	cmp	r3, #4
 8003202:	bf38      	it	cc
 8003204:	2304      	movcc	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1c4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x150>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x176>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x17e>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1c4>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1a4>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1c4>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336e:	f7ff f833 	bl	80023d8 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b20      	cmp	r3, #32
 800337e:	f040 80d9 	bne.w	8003534 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2319      	movs	r3, #25
 8003388:	2201      	movs	r2, #1
 800338a:	496d      	ldr	r1, [pc, #436]	; (8003540 <HAL_I2C_Mem_Write+0x1ec>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fc7f 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	e0cc      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Mem_Write+0x56>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0c5      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2221      	movs	r2, #33	; 0x21
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a4d      	ldr	r2, [pc, #308]	; (8003544 <HAL_I2C_Mem_Write+0x1f0>)
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003412:	88f8      	ldrh	r0, [r7, #6]
 8003414:	893a      	ldrh	r2, [r7, #8]
 8003416:	8979      	ldrh	r1, [r7, #10]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	4603      	mov	r3, r0
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fab6 	bl	8003994 <I2C_RequestMemoryWrite>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d052      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e081      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fd00 	bl	8003e3c <I2C_WaitOnTXEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b04      	cmp	r3, #4
 8003448:	d107      	bne.n	800345a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x180>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d017      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1aa      	bne.n	8003432 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fcec 	bl	8003ebe <I2C_WaitOnBTFFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e016      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	00100002 	.word	0x00100002
 8003544:	ffff0000 	.word	0xffff0000

08003548 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	; 0x30
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003562:	f7fe ff39 	bl	80023d8 <HAL_GetTick>
 8003566:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	f040 8208 	bne.w	8003986 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2319      	movs	r3, #25
 800357c:	2201      	movs	r2, #1
 800357e:	497b      	ldr	r1, [pc, #492]	; (800376c <HAL_I2C_Mem_Read+0x224>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fb85 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	e1fb      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_I2C_Mem_Read+0x56>
 800359a:	2302      	movs	r3, #2
 800359c:	e1f4      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d007      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2222      	movs	r2, #34	; 0x22
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a5b      	ldr	r2, [pc, #364]	; (8003770 <HAL_I2C_Mem_Read+0x228>)
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003606:	88f8      	ldrh	r0, [r7, #6]
 8003608:	893a      	ldrh	r2, [r7, #8]
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	4603      	mov	r3, r0
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fa52 	bl	8003ac0 <I2C_RequestMemoryRead>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1b0      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e184      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b01      	cmp	r3, #1
 800365c:	d11b      	bne.n	8003696 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e164      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	2b02      	cmp	r3, #2
 800369c:	d11b      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	e144      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036ec:	e138      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	f200 80f1 	bhi.w	80038da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d123      	bne.n	8003748 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fc1b 	bl	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e139      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003746:	e10b      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b02      	cmp	r3, #2
 800374e:	d14e      	bne.n	80037ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2200      	movs	r2, #0
 8003758:	4906      	ldr	r1, [pc, #24]	; (8003774 <HAL_I2C_Mem_Read+0x22c>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fa98 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e10e      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
 800376a:	bf00      	nop
 800376c:	00100002 	.word	0x00100002
 8003770:	ffff0000 	.word	0xffff0000
 8003774:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ec:	e0b8      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2200      	movs	r2, #0
 80037f6:	4966      	ldr	r1, [pc, #408]	; (8003990 <HAL_I2C_Mem_Read+0x448>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fa49 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0bf      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	2200      	movs	r2, #0
 8003852:	494f      	ldr	r1, [pc, #316]	; (8003990 <HAL_I2C_Mem_Read+0x448>)
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fa1b 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e091      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038d8:	e042      	b.n	8003960 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fb2e 	bl	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e04c      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d118      	bne.n	8003960 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	f47f aec2 	bne.w	80036ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	00010004 	.word	0x00010004

08003994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f960 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e4:	d103      	bne.n	80039ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e05f      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	492d      	ldr	r1, [pc, #180]	; (8003abc <I2C_RequestMemoryWrite+0x128>)
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f998 	bl	8003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e04c      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa02 	bl	8003e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d107      	bne.n	8003a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e02b      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a60:	893b      	ldrh	r3, [r7, #8]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	e021      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	6a39      	ldr	r1, [r7, #32]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9dc 	bl	8003e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d107      	bne.n	8003aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e005      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa6:	893b      	ldrh	r3, [r7, #8]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	00010002 	.word	0x00010002

08003ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8c2 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b20:	d103      	bne.n	8003b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0aa      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	4952      	ldr	r1, [pc, #328]	; (8003c8c <I2C_RequestMemoryRead+0x1cc>)
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f8fa 	bl	8003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e097      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f964 	bl	8003e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e076      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	611a      	str	r2, [r3, #16]
 8003ba6:	e021      	b.n	8003bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	6a39      	ldr	r1, [r7, #32]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f93e 	bl	8003e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d107      	bne.n	8003bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e050      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003be2:	893b      	ldrh	r3, [r7, #8]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	6a39      	ldr	r1, [r7, #32]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f923 	bl	8003e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00d      	beq.n	8003c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d107      	bne.n	8003c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e035      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f82b 	bl	8003c90 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4e:	d103      	bne.n	8003c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e013      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	6a3a      	ldr	r2, [r7, #32]
 8003c70:	4906      	ldr	r1, [pc, #24]	; (8003c8c <I2C_RequestMemoryRead+0x1cc>)
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f863 	bl	8003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	00010002 	.word	0x00010002

08003c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca0:	e025      	b.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca8:	d021      	beq.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fe fb95 	bl	80023d8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d116      	bne.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e023      	b.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10d      	bne.n	8003d14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	e00c      	b.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d0b6      	beq.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d4c:	e051      	b.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d123      	bne.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0204 	orr.w	r2, r3, #4
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e046      	b.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dac:	d021      	beq.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fe fb13 	bl	80023d8 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d116      	bne.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e020      	b.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10c      	bne.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	43da      	mvns	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf14      	ite	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	2300      	moveq	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	e00b      	b.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4013      	ands	r3, r2
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d18d      	bne.n	8003d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e48:	e02d      	b.n	8003ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8ce 	bl	8003fec <I2C_IsAcknowledgeFailed>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02d      	b.n	8003eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e60:	d021      	beq.n	8003ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7fe fab9 	bl	80023d8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d116      	bne.n	8003ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b80      	cmp	r3, #128	; 0x80
 8003eb2:	d1ca      	bne.n	8003e4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eca:	e02d      	b.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f88d 	bl	8003fec <I2C_IsAcknowledgeFailed>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e02d      	b.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee2:	d021      	beq.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fe fa78 	bl	80023d8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e007      	b.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d1ca      	bne.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f4c:	e042      	b.n	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d119      	bne.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e029      	b.n	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fe fa22 	bl	80023d8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d116      	bne.n	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e007      	b.n	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d1b5      	bne.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d11b      	bne.n	800403c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800400c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e25b      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d075      	beq.n	8004156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406a:	4ba3      	ldr	r3, [pc, #652]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b04      	cmp	r3, #4
 8004074:	d00c      	beq.n	8004090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004076:	4ba0      	ldr	r3, [pc, #640]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407e:	2b08      	cmp	r3, #8
 8004080:	d112      	bne.n	80040a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004082:	4b9d      	ldr	r3, [pc, #628]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408e:	d10b      	bne.n	80040a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	4b99      	ldr	r3, [pc, #612]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05b      	beq.n	8004154 <HAL_RCC_OscConfig+0x108>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d157      	bne.n	8004154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e236      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x74>
 80040b2:	4b91      	ldr	r3, [pc, #580]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a90      	ldr	r2, [pc, #576]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x98>
 80040ca:	4b8b      	ldr	r3, [pc, #556]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a8a      	ldr	r2, [pc, #552]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b88      	ldr	r3, [pc, #544]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a87      	ldr	r2, [pc, #540]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040e4:	4b84      	ldr	r3, [pc, #528]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a83      	ldr	r2, [pc, #524]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b81      	ldr	r3, [pc, #516]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a80      	ldr	r2, [pc, #512]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe f968 	bl	80023d8 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800410c:	f7fe f964 	bl	80023d8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e1fb      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xc0>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fe f954 	bl	80023d8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004134:	f7fe f950 	bl	80023d8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1e7      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0xe8>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004162:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416e:	4b62      	ldr	r3, [pc, #392]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004176:	2b08      	cmp	r3, #8
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417a:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	4b5c      	ldr	r3, [pc, #368]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x152>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e1bb      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b56      	ldr	r3, [pc, #344]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4952      	ldr	r1, [pc, #328]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	e03a      	b.n	800422a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <HAL_RCC_OscConfig+0x2b0>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fe f909 	bl	80023d8 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fe f905 	bl	80023d8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e19c      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e8:	4b43      	ldr	r3, [pc, #268]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4940      	ldr	r1, [pc, #256]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <HAL_RCC_OscConfig+0x2b0>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe f8e8 	bl	80023d8 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420c:	f7fe f8e4 	bl	80023d8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e17b      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d030      	beq.n	8004298 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d016      	beq.n	800426c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <HAL_RCC_OscConfig+0x2b4>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fe f8c8 	bl	80023d8 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424c:	f7fe f8c4 	bl	80023d8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e15b      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x200>
 800426a:	e015      	b.n	8004298 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426c:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x2b4>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe f8b1 	bl	80023d8 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427a:	f7fe f8ad 	bl	80023d8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e144      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a0 	beq.w	80043e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_OscConfig+0x2b8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d121      	bne.n	8004326 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCC_OscConfig+0x2b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <HAL_RCC_OscConfig+0x2b8>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ee:	f7fe f873 	bl	80023d8 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	e011      	b.n	800431a <HAL_RCC_OscConfig+0x2ce>
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	42470000 	.word	0x42470000
 8004300:	42470e80 	.word	0x42470e80
 8004304:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fe f866 	bl	80023d8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0fd      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b81      	ldr	r3, [pc, #516]	; (8004520 <HAL_RCC_OscConfig+0x4d4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d106      	bne.n	800433c <HAL_RCC_OscConfig+0x2f0>
 800432e:	4b7d      	ldr	r3, [pc, #500]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a7c      	ldr	r2, [pc, #496]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
 800433a:	e01c      	b.n	8004376 <HAL_RCC_OscConfig+0x32a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b05      	cmp	r3, #5
 8004342:	d10c      	bne.n	800435e <HAL_RCC_OscConfig+0x312>
 8004344:	4b77      	ldr	r3, [pc, #476]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a76      	ldr	r2, [pc, #472]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	4b74      	ldr	r3, [pc, #464]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a73      	ldr	r2, [pc, #460]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
 800435c:	e00b      	b.n	8004376 <HAL_RCC_OscConfig+0x32a>
 800435e:	4b71      	ldr	r3, [pc, #452]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a70      	ldr	r2, [pc, #448]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	4b6e      	ldr	r3, [pc, #440]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a6d      	ldr	r2, [pc, #436]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d015      	beq.n	80043aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fe f82b 	bl	80023d8 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe f827 	bl	80023d8 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e0bc      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ee      	beq.n	8004386 <HAL_RCC_OscConfig+0x33a>
 80043a8:	e014      	b.n	80043d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fe f815 	bl	80023d8 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fe f811 	bl	80023d8 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0a6      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c8:	4b56      	ldr	r3, [pc, #344]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d105      	bne.n	80043e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043da:	4b52      	ldr	r3, [pc, #328]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	4a51      	ldr	r2, [pc, #324]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 80043e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8092 	beq.w	8004514 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f0:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d05c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d141      	bne.n	8004488 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004404:	4b48      	ldr	r3, [pc, #288]	; (8004528 <HAL_RCC_OscConfig+0x4dc>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fd ffe5 	bl	80023d8 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004412:	f7fd ffe1 	bl	80023d8 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e078      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004424:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	019b      	lsls	r3, r3, #6
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	4933      	ldr	r1, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800445a:	4b33      	ldr	r3, [pc, #204]	; (8004528 <HAL_RCC_OscConfig+0x4dc>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd ffba 	bl	80023d8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd ffb6 	bl	80023d8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e04d      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x41c>
 8004486:	e045      	b.n	8004514 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x4dc>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fd ffa3 	bl	80023d8 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fd ff9f 	bl	80023d8 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e036      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x44a>
 80044b4:	e02e      	b.n	8004514 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e029      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_RCC_OscConfig+0x4d8>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d115      	bne.n	8004510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d10d      	bne.n	8004510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40007000 	.word	0x40007000
 8004524:	40023800 	.word	0x40023800
 8004528:	42470060 	.word	0x42470060

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0cc      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b68      	ldr	r3, [pc, #416]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d90c      	bls.n	8004568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b63      	ldr	r3, [pc, #396]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0b8      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a58      	ldr	r2, [pc, #352]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800458a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004598:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	494d      	ldr	r1, [pc, #308]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d044      	beq.n	800464c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d119      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e067      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4934      	ldr	r1, [pc, #208]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fd fedc 	bl	80023d8 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd fed8 	bl	80023d8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e04f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d20c      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e032      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4916      	ldr	r1, [pc, #88]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	490e      	ldr	r1, [pc, #56]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046b2:	f000 f821 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b6:	4601      	mov	r1, r0
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
 80046c6:	fa21 f303 	lsr.w	r3, r1, r3
 80046ca:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fe3c 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023c00 	.word	0x40023c00
 80046e8:	40023800 	.word	0x40023800
 80046ec:	08008910 	.word	0x08008910
 80046f0:	20000000 	.word	0x20000000
 80046f4:	20000004 	.word	0x20000004

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	2300      	movs	r3, #0
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800470e:	4b63      	ldr	r3, [pc, #396]	; (800489c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b04      	cmp	r3, #4
 8004718:	d007      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x32>
 800471a:	2b08      	cmp	r3, #8
 800471c:	d008      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x38>
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 80b4 	bne.w	800488c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004726:	60bb      	str	r3, [r7, #8]
       break;
 8004728:	e0b3      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b5e      	ldr	r3, [pc, #376]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800472c:	60bb      	str	r3, [r7, #8]
      break;
 800472e:	e0b0      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b5a      	ldr	r3, [pc, #360]	; (800489c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473a:	4b58      	ldr	r3, [pc, #352]	; (800489c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04a      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b55      	ldr	r3, [pc, #340]	; (800489c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	ea03 0501 	and.w	r5, r3, r1
 800475c:	ea04 0602 	and.w	r6, r4, r2
 8004760:	4629      	mov	r1, r5
 8004762:	4632      	mov	r2, r6
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	0154      	lsls	r4, r2, #5
 800476e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004772:	014b      	lsls	r3, r1, #5
 8004774:	4619      	mov	r1, r3
 8004776:	4622      	mov	r2, r4
 8004778:	1b49      	subs	r1, r1, r5
 800477a:	eb62 0206 	sbc.w	r2, r2, r6
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 0400 	mov.w	r4, #0
 8004786:	0194      	lsls	r4, r2, #6
 8004788:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800478c:	018b      	lsls	r3, r1, #6
 800478e:	1a5b      	subs	r3, r3, r1
 8004790:	eb64 0402 	sbc.w	r4, r4, r2
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	00e2      	lsls	r2, r4, #3
 800479e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047a2:	00d9      	lsls	r1, r3, #3
 80047a4:	460b      	mov	r3, r1
 80047a6:	4614      	mov	r4, r2
 80047a8:	195b      	adds	r3, r3, r5
 80047aa:	eb44 0406 	adc.w	r4, r4, r6
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	0262      	lsls	r2, r4, #9
 80047b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047bc:	0259      	lsls	r1, r3, #9
 80047be:	460b      	mov	r3, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	4621      	mov	r1, r4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	461a      	mov	r2, r3
 80047ce:	4623      	mov	r3, r4
 80047d0:	f7fc f9ee 	bl	8000bb0 <__aeabi_uldivmod>
 80047d4:	4603      	mov	r3, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e049      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047dc:	4b2f      	ldr	r3, [pc, #188]	; (800489c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	f04f 0400 	mov.w	r4, #0
 80047e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	ea03 0501 	and.w	r5, r3, r1
 80047f2:	ea04 0602 	and.w	r6, r4, r2
 80047f6:	4629      	mov	r1, r5
 80047f8:	4632      	mov	r2, r6
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	f04f 0400 	mov.w	r4, #0
 8004802:	0154      	lsls	r4, r2, #5
 8004804:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004808:	014b      	lsls	r3, r1, #5
 800480a:	4619      	mov	r1, r3
 800480c:	4622      	mov	r2, r4
 800480e:	1b49      	subs	r1, r1, r5
 8004810:	eb62 0206 	sbc.w	r2, r2, r6
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	f04f 0400 	mov.w	r4, #0
 800481c:	0194      	lsls	r4, r2, #6
 800481e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004822:	018b      	lsls	r3, r1, #6
 8004824:	1a5b      	subs	r3, r3, r1
 8004826:	eb64 0402 	sbc.w	r4, r4, r2
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	00e2      	lsls	r2, r4, #3
 8004834:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004838:	00d9      	lsls	r1, r3, #3
 800483a:	460b      	mov	r3, r1
 800483c:	4614      	mov	r4, r2
 800483e:	195b      	adds	r3, r3, r5
 8004840:	eb44 0406 	adc.w	r4, r4, r6
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	02a2      	lsls	r2, r4, #10
 800484e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004852:	0299      	lsls	r1, r3, #10
 8004854:	460b      	mov	r3, r1
 8004856:	4614      	mov	r4, r2
 8004858:	4618      	mov	r0, r3
 800485a:	4621      	mov	r1, r4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	461a      	mov	r2, r3
 8004864:	4623      	mov	r3, r4
 8004866:	f7fc f9a3 	bl	8000bb0 <__aeabi_uldivmod>
 800486a:	4603      	mov	r3, r0
 800486c:	460c      	mov	r4, r1
 800486e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	3301      	adds	r3, #1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	60bb      	str	r3, [r7, #8]
      break;
 800488a:	e002      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800488e:	60bb      	str	r3, [r7, #8]
      break;
 8004890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004892:	68bb      	ldr	r3, [r7, #8]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000000 	.word	0x20000000

080048c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048c4:	f7ff fff0 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048c8:	4601      	mov	r1, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0a9b      	lsrs	r3, r3, #10
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4a03      	ldr	r2, [pc, #12]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d6:	5cd3      	ldrb	r3, [r2, r3]
 80048d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	08008920 	.word	0x08008920

080048e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048ec:	f7ff ffdc 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048f0:	4601      	mov	r1, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	0b5b      	lsrs	r3, r3, #13
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4a03      	ldr	r2, [pc, #12]	; (800490c <HAL_RCC_GetPCLK2Freq+0x24>)
 80048fe:	5cd3      	ldrb	r3, [r2, r3]
 8004900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40023800 	.word	0x40023800
 800490c:	08008920 	.word	0x08008920

08004910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e01d      	b.n	800495e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd f800 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fc0c 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b06      	cmp	r3, #6
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e01d      	b.n	80049fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f815 	bl	8004a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 fbbd 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2201      	movs	r2, #1
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fe44 	bl	80056b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_TIM_PWM_Start+0x60>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d007      	beq.n	8004a6c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000

08004a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e083      	b.n	8004b98 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fc ffad 	bl	8001a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac0:	f023 0307 	bic.w	r3, r3, #7
 8004ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 fb4b 	bl	800516c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b1c:	f023 030c 	bic.w	r3, r3, #12
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_TIM_Encoder_Start+0x16>
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d008      	beq.n	8004bc6 <HAL_TIM_Encoder_Start+0x26>
 8004bb4:	e00f      	b.n	8004bd6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fd7a 	bl	80056b8 <TIM_CCxChannelCmd>
      break;
 8004bc4:	e016      	b.n	8004bf4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	2104      	movs	r1, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fd72 	bl	80056b8 <TIM_CCxChannelCmd>
      break;
 8004bd4:	e00e      	b.n	8004bf4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fd6a 	bl	80056b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	2104      	movs	r1, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fd63 	bl	80056b8 <TIM_CCxChannelCmd>
      break;
 8004bf2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d122      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d11b      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0202 	mvn.w	r2, #2
 8004c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa6c 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004c56:	e005      	b.n	8004c64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa5e 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa6f 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d122      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d11b      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0204 	mvn.w	r2, #4
 8004c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fa42 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004caa:	e005      	b.n	8004cb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa34 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa45 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d122      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11b      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0208 	mvn.w	r2, #8
 8004ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa18 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004cfe:	e005      	b.n	8004d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa0a 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa1b 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d122      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d11b      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0210 	mvn.w	r2, #16
 8004d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9ee 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004d52:	e005      	b.n	8004d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9e0 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9f1 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0201 	mvn.w	r2, #1
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fc fab5 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fd6d 	bl	8005898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d10e      	bne.n	8004dea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f9b6 	bl	8005156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d10e      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d107      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0220 	mvn.w	r2, #32
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fd37 	bl	8005884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e0b4      	b.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	f200 809f 	bhi.w	8004f90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004f91 	.word	0x08004f91
 8004e60:	08004f91 	.word	0x08004f91
 8004e64:	08004f91 	.word	0x08004f91
 8004e68:	08004ecd 	.word	0x08004ecd
 8004e6c:	08004f91 	.word	0x08004f91
 8004e70:	08004f91 	.word	0x08004f91
 8004e74:	08004f91 	.word	0x08004f91
 8004e78:	08004f0f 	.word	0x08004f0f
 8004e7c:	08004f91 	.word	0x08004f91
 8004e80:	08004f91 	.word	0x08004f91
 8004e84:	08004f91 	.word	0x08004f91
 8004e88:	08004f4f 	.word	0x08004f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f9ea 	bl	800526c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0208 	orr.w	r2, r2, #8
 8004ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6999      	ldr	r1, [r3, #24]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	619a      	str	r2, [r3, #24]
      break;
 8004eca:	e062      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fa30 	bl	8005338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6999      	ldr	r1, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	619a      	str	r2, [r3, #24]
      break;
 8004f0c:	e041      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fa7b 	bl	8005410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0208 	orr.w	r2, r2, #8
 8004f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0204 	bic.w	r2, r2, #4
 8004f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69d9      	ldr	r1, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	61da      	str	r2, [r3, #28]
      break;
 8004f4c:	e021      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fac5 	bl	80054e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69d9      	ldr	r1, [r3, #28]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	021a      	lsls	r2, r3, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	61da      	str	r2, [r3, #28]
      break;
 8004f8e:	e000      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_TIM_ConfigClockSource+0x18>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e0a6      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x166>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d067      	beq.n	80050cc <HAL_TIM_ConfigClockSource+0x120>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d80b      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x6c>
 8005000:	2b10      	cmp	r3, #16
 8005002:	d073      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0x140>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d802      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x62>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d06f      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800500c:	e078      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800500e:	2b20      	cmp	r3, #32
 8005010:	d06c      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0x140>
 8005012:	2b30      	cmp	r3, #48	; 0x30
 8005014:	d06a      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005016:	e073      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005018:	2b70      	cmp	r3, #112	; 0x70
 800501a:	d00d      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0x8c>
 800501c:	2b70      	cmp	r3, #112	; 0x70
 800501e:	d804      	bhi.n	800502a <HAL_TIM_ConfigClockSource+0x7e>
 8005020:	2b50      	cmp	r3, #80	; 0x50
 8005022:	d033      	beq.n	800508c <HAL_TIM_ConfigClockSource+0xe0>
 8005024:	2b60      	cmp	r3, #96	; 0x60
 8005026:	d041      	beq.n	80050ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005028:	e06a      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d066      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x152>
 8005030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005034:	d017      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005036:	e063      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f000 fb16 	bl	8005678 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800505a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e04c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f000 faff 	bl	8005678 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005088:	609a      	str	r2, [r3, #8]
      break;
 800508a:	e039      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	461a      	mov	r2, r3
 800509a:	f000 fa73 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2150      	movs	r1, #80	; 0x50
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 facc 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050aa:	e029      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f000 fa92 	bl	80055e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2160      	movs	r1, #96	; 0x60
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fabc 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050ca:	e019      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	461a      	mov	r2, r3
 80050da:	f000 fa53 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2140      	movs	r1, #64	; 0x40
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 faac 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050ea:	e009      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 faa3 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80050fc:	e000      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a34      	ldr	r2, [pc, #208]	; (8005250 <TIM_Base_SetConfig+0xe4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <TIM_Base_SetConfig+0x38>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d00b      	beq.n	80051a4 <TIM_Base_SetConfig+0x38>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a31      	ldr	r2, [pc, #196]	; (8005254 <TIM_Base_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_Base_SetConfig+0x38>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a30      	ldr	r2, [pc, #192]	; (8005258 <TIM_Base_SetConfig+0xec>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0x38>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a2f      	ldr	r2, [pc, #188]	; (800525c <TIM_Base_SetConfig+0xf0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a25      	ldr	r2, [pc, #148]	; (8005250 <TIM_Base_SetConfig+0xe4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01b      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d017      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <TIM_Base_SetConfig+0xe8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a21      	ldr	r2, [pc, #132]	; (8005258 <TIM_Base_SetConfig+0xec>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a20      	ldr	r2, [pc, #128]	; (800525c <TIM_Base_SetConfig+0xf0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <TIM_Base_SetConfig+0xf4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <TIM_Base_SetConfig+0xf8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <TIM_Base_SetConfig+0xfc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a08      	ldr	r2, [pc, #32]	; (8005250 <TIM_Base_SetConfig+0xe4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d103      	bne.n	800523c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	615a      	str	r2, [r3, #20]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0201 	bic.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0302 	bic.w	r3, r3, #2
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <TIM_OC1_SetConfig+0xc8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10c      	bne.n	80052e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0308 	bic.w	r3, r3, #8
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <TIM_OC1_SetConfig+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d111      	bne.n	800530e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000

08005338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0210 	bic.w	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0320 	bic.w	r3, r3, #32
 8005382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <TIM_OC2_SetConfig+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10d      	bne.n	80053b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a15      	ldr	r2, [pc, #84]	; (800540c <TIM_OC2_SetConfig+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d113      	bne.n	80053e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000

08005410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <TIM_OC3_SetConfig+0xd0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10d      	bne.n	800548a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <TIM_OC3_SetConfig+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d113      	bne.n	80054ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000

080054e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800552e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	031b      	lsls	r3, r3, #12
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a10      	ldr	r2, [pc, #64]	; (8005580 <TIM_OC4_SetConfig+0x9c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d109      	bne.n	8005558 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0210 	bic.w	r2, r3, #16
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 0307 	orr.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	431a      	orrs	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2201      	movs	r2, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e050      	b.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d013      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10c      	bne.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e03d      	b.n	8005878 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e03f      	b.n	800593e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc f994 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc77 	bl	80061e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b088      	sub	sp, #32
 800594a:	af02      	add	r7, sp, #8
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b20      	cmp	r3, #32
 8005964:	f040 8083 	bne.w	8005a6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_Transmit+0x2e>
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e07b      	b.n	8005a70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Transmit+0x40>
 8005982:	2302      	movs	r3, #2
 8005984:	e074      	b.n	8005a70 <HAL_UART_Transmit+0x12a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2221      	movs	r2, #33	; 0x21
 8005998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800599c:	f7fc fd1c 	bl	80023d8 <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059b6:	e042      	b.n	8005a3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ce:	d122      	bne.n	8005a16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fa80 	bl	8005ee0 <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e042      	b.n	8005a70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	e017      	b.n	8005a3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	e013      	b.n	8005a3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fa5d 	bl	8005ee0 <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e01f      	b.n	8005a70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	60ba      	str	r2, [r7, #8]
 8005a36:	781a      	ldrb	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1b7      	bne.n	80059b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fa44 	bl	8005ee0 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e006      	b.n	8005a70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
  }
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d166      	bne.n	8005b60 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_UART_Receive_DMA+0x26>
 8005a98:	88fb      	ldrh	r3, [r7, #6]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e05f      	b.n	8005b62 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UART_Receive_DMA+0x38>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e058      	b.n	8005b62 <HAL_UART_Receive_DMA+0xea>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2222      	movs	r2, #34	; 0x22
 8005ace:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	4a25      	ldr	r2, [pc, #148]	; (8005b6c <HAL_UART_Receive_DMA+0xf4>)
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <HAL_UART_Receive_DMA+0xf8>)
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	4a23      	ldr	r2, [pc, #140]	; (8005b74 <HAL_UART_Receive_DMA+0xfc>)
 8005ae8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	2200      	movs	r2, #0
 8005af0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	f7fc fe53 	bl	80027b4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	08005dc9 	.word	0x08005dc9
 8005b70:	08005e31 	.word	0x08005e31
 8005b74:	08005e4d 	.word	0x08005e4d

08005b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10d      	bne.n	8005bca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_UART_IRQHandler+0x52>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa8c 	bl	80060e0 <UART_Receive_IT>
      return;
 8005bc8:	e0d1      	b.n	8005d6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80b0 	beq.w	8005d32 <HAL_UART_IRQHandler+0x1ba>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <HAL_UART_IRQHandler+0x70>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80a5 	beq.w	8005d32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <HAL_UART_IRQHandler+0x90>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	f043 0201 	orr.w	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <HAL_UART_IRQHandler+0xb0>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	f043 0202 	orr.w	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_UART_IRQHandler+0xd0>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c40:	f043 0204 	orr.w	r2, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00f      	beq.n	8005c72 <HAL_UART_IRQHandler+0xfa>
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_UART_IRQHandler+0xee>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	f043 0208 	orr.w	r2, r3, #8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d078      	beq.n	8005d6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <HAL_UART_IRQHandler+0x11c>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa26 	bl	80060e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_UART_IRQHandler+0x144>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d031      	beq.n	8005d20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f96f 	bl	8005fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d123      	bne.n	8005d18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cde:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <HAL_UART_IRQHandler+0x1fc>)
 8005cee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fc fdb5 	bl	8002864 <HAL_DMA_Abort_IT>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0e:	e00e      	b.n	8005d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f84f 	bl	8005db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d16:	e00a      	b.n	8005d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f84b 	bl	8005db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1e:	e006      	b.n	8005d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f847 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d2c:	e01e      	b.n	8005d6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2e:	bf00      	nop
    return;
 8005d30:	e01c      	b.n	8005d6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <HAL_UART_IRQHandler+0x1d6>
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f95c 	bl	8006004 <UART_Transmit_IT>
    return;
 8005d4c:	e00f      	b.n	8005d6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1f6>
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9a4 	bl	80060b0 <UART_EndTransmit_IT>
    return;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d6c:	bf00      	nop
  }
}
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	08005fdd 	.word	0x08005fdd

08005d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11e      	bne.n	8005e22 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e18:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff ffb2 	bl	8005d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e28:	bf00      	nop
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff ffae 	bl	8005da0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b21      	cmp	r3, #33	; 0x21
 8005e7e:	d108      	bne.n	8005e92 <UART_DMAError+0x46>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e8c:	68b8      	ldr	r0, [r7, #8]
 8005e8e:	f000 f871 	bl	8005f74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b22      	cmp	r3, #34	; 0x22
 8005eb2:	d108      	bne.n	8005ec6 <UART_DMAError+0x7a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ec0:	68b8      	ldr	r0, [r7, #8]
 8005ec2:	f000 f86d 	bl	8005fa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	f043 0210 	orr.w	r2, r3, #16
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed2:	68b8      	ldr	r0, [r7, #8]
 8005ed4:	f7ff ff6e 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef0:	e02c      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef8:	d028      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f00:	f7fc fa6a 	bl	80023d8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d21d      	bcs.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e00f      	b.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4013      	ands	r3, r2
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d0c3      	beq.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005f8a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fedc 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b21      	cmp	r3, #33	; 0x21
 8006016:	d144      	bne.n	80060a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006020:	d11a      	bne.n	8006058 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006036:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	1c9a      	adds	r2, r3, #2
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]
 800604a:	e00e      	b.n	800606a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]
 8006056:	e008      	b.n	800606a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6211      	str	r1, [r2, #32]
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4619      	mov	r1, r3
 8006078:	84d1      	strh	r1, [r2, #38]	; 0x26
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10f      	bne.n	800609e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800609c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fe51 	bl	8005d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b22      	cmp	r3, #34	; 0x22
 80060f2:	d171      	bne.n	80061d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fc:	d123      	bne.n	8006146 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10e      	bne.n	800612a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28
 8006128:	e029      	b.n	800617e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	b29b      	uxth	r3, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
 8006144:	e01b      	b.n	800617e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6858      	ldr	r0, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6291      	str	r1, [r2, #40]	; 0x28
 800615e:	b2c2      	uxtb	r2, r0
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e00c      	b.n	800617e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	1c58      	adds	r0, r3, #1
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	6288      	str	r0, [r1, #40]	; 0x28
 8006176:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4619      	mov	r1, r3
 800618c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800618e:	2b00      	cmp	r3, #0
 8006190:	d120      	bne.n	80061d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0220 	bic.w	r2, r2, #32
 80061a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fdde 	bl	8005d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e002      	b.n	80061da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e000      	b.n	80061da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006226:	f023 030c 	bic.w	r3, r3, #12
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	430b      	orrs	r3, r1
 8006232:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006252:	f040 818b 	bne.w	800656c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4ac1      	ldr	r2, [pc, #772]	; (8006560 <UART_SetConfig+0x37c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d005      	beq.n	800626c <UART_SetConfig+0x88>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4abf      	ldr	r2, [pc, #764]	; (8006564 <UART_SetConfig+0x380>)
 8006266:	4293      	cmp	r3, r2
 8006268:	f040 80bd 	bne.w	80063e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800626c:	f7fe fb3c 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
 8006270:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	461d      	mov	r5, r3
 8006276:	f04f 0600 	mov.w	r6, #0
 800627a:	46a8      	mov	r8, r5
 800627c:	46b1      	mov	r9, r6
 800627e:	eb18 0308 	adds.w	r3, r8, r8
 8006282:	eb49 0409 	adc.w	r4, r9, r9
 8006286:	4698      	mov	r8, r3
 8006288:	46a1      	mov	r9, r4
 800628a:	eb18 0805 	adds.w	r8, r8, r5
 800628e:	eb49 0906 	adc.w	r9, r9, r6
 8006292:	f04f 0100 	mov.w	r1, #0
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800629e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062a6:	4688      	mov	r8, r1
 80062a8:	4691      	mov	r9, r2
 80062aa:	eb18 0005 	adds.w	r0, r8, r5
 80062ae:	eb49 0106 	adc.w	r1, r9, r6
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	461d      	mov	r5, r3
 80062b8:	f04f 0600 	mov.w	r6, #0
 80062bc:	196b      	adds	r3, r5, r5
 80062be:	eb46 0406 	adc.w	r4, r6, r6
 80062c2:	461a      	mov	r2, r3
 80062c4:	4623      	mov	r3, r4
 80062c6:	f7fa fc73 	bl	8000bb0 <__aeabi_uldivmod>
 80062ca:	4603      	mov	r3, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	461a      	mov	r2, r3
 80062d0:	4ba5      	ldr	r3, [pc, #660]	; (8006568 <UART_SetConfig+0x384>)
 80062d2:	fba3 2302 	umull	r2, r3, r3, r2
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	461d      	mov	r5, r3
 80062e0:	f04f 0600 	mov.w	r6, #0
 80062e4:	46a9      	mov	r9, r5
 80062e6:	46b2      	mov	sl, r6
 80062e8:	eb19 0309 	adds.w	r3, r9, r9
 80062ec:	eb4a 040a 	adc.w	r4, sl, sl
 80062f0:	4699      	mov	r9, r3
 80062f2:	46a2      	mov	sl, r4
 80062f4:	eb19 0905 	adds.w	r9, r9, r5
 80062f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800630c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006310:	4689      	mov	r9, r1
 8006312:	4692      	mov	sl, r2
 8006314:	eb19 0005 	adds.w	r0, r9, r5
 8006318:	eb4a 0106 	adc.w	r1, sl, r6
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	461d      	mov	r5, r3
 8006322:	f04f 0600 	mov.w	r6, #0
 8006326:	196b      	adds	r3, r5, r5
 8006328:	eb46 0406 	adc.w	r4, r6, r6
 800632c:	461a      	mov	r2, r3
 800632e:	4623      	mov	r3, r4
 8006330:	f7fa fc3e 	bl	8000bb0 <__aeabi_uldivmod>
 8006334:	4603      	mov	r3, r0
 8006336:	460c      	mov	r4, r1
 8006338:	461a      	mov	r2, r3
 800633a:	4b8b      	ldr	r3, [pc, #556]	; (8006568 <UART_SetConfig+0x384>)
 800633c:	fba3 1302 	umull	r1, r3, r3, r2
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	2164      	movs	r1, #100	; 0x64
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	3332      	adds	r3, #50	; 0x32
 800634e:	4a86      	ldr	r2, [pc, #536]	; (8006568 <UART_SetConfig+0x384>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800635c:	4498      	add	r8, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	461d      	mov	r5, r3
 8006362:	f04f 0600 	mov.w	r6, #0
 8006366:	46a9      	mov	r9, r5
 8006368:	46b2      	mov	sl, r6
 800636a:	eb19 0309 	adds.w	r3, r9, r9
 800636e:	eb4a 040a 	adc.w	r4, sl, sl
 8006372:	4699      	mov	r9, r3
 8006374:	46a2      	mov	sl, r4
 8006376:	eb19 0905 	adds.w	r9, r9, r5
 800637a:	eb4a 0a06 	adc.w	sl, sl, r6
 800637e:	f04f 0100 	mov.w	r1, #0
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800638a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800638e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006392:	4689      	mov	r9, r1
 8006394:	4692      	mov	sl, r2
 8006396:	eb19 0005 	adds.w	r0, r9, r5
 800639a:	eb4a 0106 	adc.w	r1, sl, r6
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	461d      	mov	r5, r3
 80063a4:	f04f 0600 	mov.w	r6, #0
 80063a8:	196b      	adds	r3, r5, r5
 80063aa:	eb46 0406 	adc.w	r4, r6, r6
 80063ae:	461a      	mov	r2, r3
 80063b0:	4623      	mov	r3, r4
 80063b2:	f7fa fbfd 	bl	8000bb0 <__aeabi_uldivmod>
 80063b6:	4603      	mov	r3, r0
 80063b8:	460c      	mov	r4, r1
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <UART_SetConfig+0x384>)
 80063be:	fba3 1302 	umull	r1, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2164      	movs	r1, #100	; 0x64
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	3332      	adds	r3, #50	; 0x32
 80063d0:	4a65      	ldr	r2, [pc, #404]	; (8006568 <UART_SetConfig+0x384>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f003 0207 	and.w	r2, r3, #7
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4442      	add	r2, r8
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	e26f      	b.n	80068c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7fe fa6b 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 80063ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	461d      	mov	r5, r3
 80063f0:	f04f 0600 	mov.w	r6, #0
 80063f4:	46a8      	mov	r8, r5
 80063f6:	46b1      	mov	r9, r6
 80063f8:	eb18 0308 	adds.w	r3, r8, r8
 80063fc:	eb49 0409 	adc.w	r4, r9, r9
 8006400:	4698      	mov	r8, r3
 8006402:	46a1      	mov	r9, r4
 8006404:	eb18 0805 	adds.w	r8, r8, r5
 8006408:	eb49 0906 	adc.w	r9, r9, r6
 800640c:	f04f 0100 	mov.w	r1, #0
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006418:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800641c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006420:	4688      	mov	r8, r1
 8006422:	4691      	mov	r9, r2
 8006424:	eb18 0005 	adds.w	r0, r8, r5
 8006428:	eb49 0106 	adc.w	r1, r9, r6
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	461d      	mov	r5, r3
 8006432:	f04f 0600 	mov.w	r6, #0
 8006436:	196b      	adds	r3, r5, r5
 8006438:	eb46 0406 	adc.w	r4, r6, r6
 800643c:	461a      	mov	r2, r3
 800643e:	4623      	mov	r3, r4
 8006440:	f7fa fbb6 	bl	8000bb0 <__aeabi_uldivmod>
 8006444:	4603      	mov	r3, r0
 8006446:	460c      	mov	r4, r1
 8006448:	461a      	mov	r2, r3
 800644a:	4b47      	ldr	r3, [pc, #284]	; (8006568 <UART_SetConfig+0x384>)
 800644c:	fba3 2302 	umull	r2, r3, r3, r2
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	461d      	mov	r5, r3
 800645a:	f04f 0600 	mov.w	r6, #0
 800645e:	46a9      	mov	r9, r5
 8006460:	46b2      	mov	sl, r6
 8006462:	eb19 0309 	adds.w	r3, r9, r9
 8006466:	eb4a 040a 	adc.w	r4, sl, sl
 800646a:	4699      	mov	r9, r3
 800646c:	46a2      	mov	sl, r4
 800646e:	eb19 0905 	adds.w	r9, r9, r5
 8006472:	eb4a 0a06 	adc.w	sl, sl, r6
 8006476:	f04f 0100 	mov.w	r1, #0
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006482:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006486:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800648a:	4689      	mov	r9, r1
 800648c:	4692      	mov	sl, r2
 800648e:	eb19 0005 	adds.w	r0, r9, r5
 8006492:	eb4a 0106 	adc.w	r1, sl, r6
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	461d      	mov	r5, r3
 800649c:	f04f 0600 	mov.w	r6, #0
 80064a0:	196b      	adds	r3, r5, r5
 80064a2:	eb46 0406 	adc.w	r4, r6, r6
 80064a6:	461a      	mov	r2, r3
 80064a8:	4623      	mov	r3, r4
 80064aa:	f7fa fb81 	bl	8000bb0 <__aeabi_uldivmod>
 80064ae:	4603      	mov	r3, r0
 80064b0:	460c      	mov	r4, r1
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <UART_SetConfig+0x384>)
 80064b6:	fba3 1302 	umull	r1, r3, r3, r2
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2164      	movs	r1, #100	; 0x64
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	3332      	adds	r3, #50	; 0x32
 80064c8:	4a27      	ldr	r2, [pc, #156]	; (8006568 <UART_SetConfig+0x384>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064d6:	4498      	add	r8, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	461d      	mov	r5, r3
 80064dc:	f04f 0600 	mov.w	r6, #0
 80064e0:	46a9      	mov	r9, r5
 80064e2:	46b2      	mov	sl, r6
 80064e4:	eb19 0309 	adds.w	r3, r9, r9
 80064e8:	eb4a 040a 	adc.w	r4, sl, sl
 80064ec:	4699      	mov	r9, r3
 80064ee:	46a2      	mov	sl, r4
 80064f0:	eb19 0905 	adds.w	r9, r9, r5
 80064f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800650c:	4689      	mov	r9, r1
 800650e:	4692      	mov	sl, r2
 8006510:	eb19 0005 	adds.w	r0, r9, r5
 8006514:	eb4a 0106 	adc.w	r1, sl, r6
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	461d      	mov	r5, r3
 800651e:	f04f 0600 	mov.w	r6, #0
 8006522:	196b      	adds	r3, r5, r5
 8006524:	eb46 0406 	adc.w	r4, r6, r6
 8006528:	461a      	mov	r2, r3
 800652a:	4623      	mov	r3, r4
 800652c:	f7fa fb40 	bl	8000bb0 <__aeabi_uldivmod>
 8006530:	4603      	mov	r3, r0
 8006532:	460c      	mov	r4, r1
 8006534:	461a      	mov	r2, r3
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <UART_SetConfig+0x384>)
 8006538:	fba3 1302 	umull	r1, r3, r3, r2
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	2164      	movs	r1, #100	; 0x64
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	3332      	adds	r3, #50	; 0x32
 800654a:	4a07      	ldr	r2, [pc, #28]	; (8006568 <UART_SetConfig+0x384>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	f003 0207 	and.w	r2, r3, #7
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4442      	add	r2, r8
 800655c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800655e:	e1b2      	b.n	80068c6 <UART_SetConfig+0x6e2>
 8006560:	40011000 	.word	0x40011000
 8006564:	40011400 	.word	0x40011400
 8006568:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4ad7      	ldr	r2, [pc, #860]	; (80068d0 <UART_SetConfig+0x6ec>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d005      	beq.n	8006582 <UART_SetConfig+0x39e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4ad6      	ldr	r2, [pc, #856]	; (80068d4 <UART_SetConfig+0x6f0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	f040 80d1 	bne.w	8006724 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006582:	f7fe f9b1 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
 8006586:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	469a      	mov	sl, r3
 800658c:	f04f 0b00 	mov.w	fp, #0
 8006590:	46d0      	mov	r8, sl
 8006592:	46d9      	mov	r9, fp
 8006594:	eb18 0308 	adds.w	r3, r8, r8
 8006598:	eb49 0409 	adc.w	r4, r9, r9
 800659c:	4698      	mov	r8, r3
 800659e:	46a1      	mov	r9, r4
 80065a0:	eb18 080a 	adds.w	r8, r8, sl
 80065a4:	eb49 090b 	adc.w	r9, r9, fp
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065bc:	4688      	mov	r8, r1
 80065be:	4691      	mov	r9, r2
 80065c0:	eb1a 0508 	adds.w	r5, sl, r8
 80065c4:	eb4b 0609 	adc.w	r6, fp, r9
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	4619      	mov	r1, r3
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	f04f 0400 	mov.w	r4, #0
 80065da:	0094      	lsls	r4, r2, #2
 80065dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065e0:	008b      	lsls	r3, r1, #2
 80065e2:	461a      	mov	r2, r3
 80065e4:	4623      	mov	r3, r4
 80065e6:	4628      	mov	r0, r5
 80065e8:	4631      	mov	r1, r6
 80065ea:	f7fa fae1 	bl	8000bb0 <__aeabi_uldivmod>
 80065ee:	4603      	mov	r3, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	461a      	mov	r2, r3
 80065f4:	4bb8      	ldr	r3, [pc, #736]	; (80068d8 <UART_SetConfig+0x6f4>)
 80065f6:	fba3 2302 	umull	r2, r3, r3, r2
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	469b      	mov	fp, r3
 8006604:	f04f 0c00 	mov.w	ip, #0
 8006608:	46d9      	mov	r9, fp
 800660a:	46e2      	mov	sl, ip
 800660c:	eb19 0309 	adds.w	r3, r9, r9
 8006610:	eb4a 040a 	adc.w	r4, sl, sl
 8006614:	4699      	mov	r9, r3
 8006616:	46a2      	mov	sl, r4
 8006618:	eb19 090b 	adds.w	r9, r9, fp
 800661c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800662c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006634:	4689      	mov	r9, r1
 8006636:	4692      	mov	sl, r2
 8006638:	eb1b 0509 	adds.w	r5, fp, r9
 800663c:	eb4c 060a 	adc.w	r6, ip, sl
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4619      	mov	r1, r3
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	f04f 0400 	mov.w	r4, #0
 8006652:	0094      	lsls	r4, r2, #2
 8006654:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006658:	008b      	lsls	r3, r1, #2
 800665a:	461a      	mov	r2, r3
 800665c:	4623      	mov	r3, r4
 800665e:	4628      	mov	r0, r5
 8006660:	4631      	mov	r1, r6
 8006662:	f7fa faa5 	bl	8000bb0 <__aeabi_uldivmod>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	461a      	mov	r2, r3
 800666c:	4b9a      	ldr	r3, [pc, #616]	; (80068d8 <UART_SetConfig+0x6f4>)
 800666e:	fba3 1302 	umull	r1, r3, r3, r2
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2164      	movs	r1, #100	; 0x64
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	3332      	adds	r3, #50	; 0x32
 8006680:	4a95      	ldr	r2, [pc, #596]	; (80068d8 <UART_SetConfig+0x6f4>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668c:	4498      	add	r8, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	469b      	mov	fp, r3
 8006692:	f04f 0c00 	mov.w	ip, #0
 8006696:	46d9      	mov	r9, fp
 8006698:	46e2      	mov	sl, ip
 800669a:	eb19 0309 	adds.w	r3, r9, r9
 800669e:	eb4a 040a 	adc.w	r4, sl, sl
 80066a2:	4699      	mov	r9, r3
 80066a4:	46a2      	mov	sl, r4
 80066a6:	eb19 090b 	adds.w	r9, r9, fp
 80066aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066ae:	f04f 0100 	mov.w	r1, #0
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066c2:	4689      	mov	r9, r1
 80066c4:	4692      	mov	sl, r2
 80066c6:	eb1b 0509 	adds.w	r5, fp, r9
 80066ca:	eb4c 060a 	adc.w	r6, ip, sl
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	f04f 0400 	mov.w	r4, #0
 80066e0:	0094      	lsls	r4, r2, #2
 80066e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066e6:	008b      	lsls	r3, r1, #2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4623      	mov	r3, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	4631      	mov	r1, r6
 80066f0:	f7fa fa5e 	bl	8000bb0 <__aeabi_uldivmod>
 80066f4:	4603      	mov	r3, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b77      	ldr	r3, [pc, #476]	; (80068d8 <UART_SetConfig+0x6f4>)
 80066fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	2164      	movs	r1, #100	; 0x64
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	3332      	adds	r3, #50	; 0x32
 800670e:	4a72      	ldr	r2, [pc, #456]	; (80068d8 <UART_SetConfig+0x6f4>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 020f 	and.w	r2, r3, #15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4442      	add	r2, r8
 8006720:	609a      	str	r2, [r3, #8]
 8006722:	e0d0      	b.n	80068c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006724:	f7fe f8cc 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8006728:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	469a      	mov	sl, r3
 800672e:	f04f 0b00 	mov.w	fp, #0
 8006732:	46d0      	mov	r8, sl
 8006734:	46d9      	mov	r9, fp
 8006736:	eb18 0308 	adds.w	r3, r8, r8
 800673a:	eb49 0409 	adc.w	r4, r9, r9
 800673e:	4698      	mov	r8, r3
 8006740:	46a1      	mov	r9, r4
 8006742:	eb18 080a 	adds.w	r8, r8, sl
 8006746:	eb49 090b 	adc.w	r9, r9, fp
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006756:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800675a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800675e:	4688      	mov	r8, r1
 8006760:	4691      	mov	r9, r2
 8006762:	eb1a 0508 	adds.w	r5, sl, r8
 8006766:	eb4b 0609 	adc.w	r6, fp, r9
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4619      	mov	r1, r3
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	f04f 0400 	mov.w	r4, #0
 800677c:	0094      	lsls	r4, r2, #2
 800677e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006782:	008b      	lsls	r3, r1, #2
 8006784:	461a      	mov	r2, r3
 8006786:	4623      	mov	r3, r4
 8006788:	4628      	mov	r0, r5
 800678a:	4631      	mov	r1, r6
 800678c:	f7fa fa10 	bl	8000bb0 <__aeabi_uldivmod>
 8006790:	4603      	mov	r3, r0
 8006792:	460c      	mov	r4, r1
 8006794:	461a      	mov	r2, r3
 8006796:	4b50      	ldr	r3, [pc, #320]	; (80068d8 <UART_SetConfig+0x6f4>)
 8006798:	fba3 2302 	umull	r2, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	469b      	mov	fp, r3
 80067a6:	f04f 0c00 	mov.w	ip, #0
 80067aa:	46d9      	mov	r9, fp
 80067ac:	46e2      	mov	sl, ip
 80067ae:	eb19 0309 	adds.w	r3, r9, r9
 80067b2:	eb4a 040a 	adc.w	r4, sl, sl
 80067b6:	4699      	mov	r9, r3
 80067b8:	46a2      	mov	sl, r4
 80067ba:	eb19 090b 	adds.w	r9, r9, fp
 80067be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067d6:	4689      	mov	r9, r1
 80067d8:	4692      	mov	sl, r2
 80067da:	eb1b 0509 	adds.w	r5, fp, r9
 80067de:	eb4c 060a 	adc.w	r6, ip, sl
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4619      	mov	r1, r3
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	f04f 0400 	mov.w	r4, #0
 80067f4:	0094      	lsls	r4, r2, #2
 80067f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067fa:	008b      	lsls	r3, r1, #2
 80067fc:	461a      	mov	r2, r3
 80067fe:	4623      	mov	r3, r4
 8006800:	4628      	mov	r0, r5
 8006802:	4631      	mov	r1, r6
 8006804:	f7fa f9d4 	bl	8000bb0 <__aeabi_uldivmod>
 8006808:	4603      	mov	r3, r0
 800680a:	460c      	mov	r4, r1
 800680c:	461a      	mov	r2, r3
 800680e:	4b32      	ldr	r3, [pc, #200]	; (80068d8 <UART_SetConfig+0x6f4>)
 8006810:	fba3 1302 	umull	r1, r3, r3, r2
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	2164      	movs	r1, #100	; 0x64
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	3332      	adds	r3, #50	; 0x32
 8006822:	4a2d      	ldr	r2, [pc, #180]	; (80068d8 <UART_SetConfig+0x6f4>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800682e:	4498      	add	r8, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	469b      	mov	fp, r3
 8006834:	f04f 0c00 	mov.w	ip, #0
 8006838:	46d9      	mov	r9, fp
 800683a:	46e2      	mov	sl, ip
 800683c:	eb19 0309 	adds.w	r3, r9, r9
 8006840:	eb4a 040a 	adc.w	r4, sl, sl
 8006844:	4699      	mov	r9, r3
 8006846:	46a2      	mov	sl, r4
 8006848:	eb19 090b 	adds.w	r9, r9, fp
 800684c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800685c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006864:	4689      	mov	r9, r1
 8006866:	4692      	mov	sl, r2
 8006868:	eb1b 0509 	adds.w	r5, fp, r9
 800686c:	eb4c 060a 	adc.w	r6, ip, sl
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4619      	mov	r1, r3
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	f04f 0400 	mov.w	r4, #0
 8006882:	0094      	lsls	r4, r2, #2
 8006884:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006888:	008b      	lsls	r3, r1, #2
 800688a:	461a      	mov	r2, r3
 800688c:	4623      	mov	r3, r4
 800688e:	4628      	mov	r0, r5
 8006890:	4631      	mov	r1, r6
 8006892:	f7fa f98d 	bl	8000bb0 <__aeabi_uldivmod>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	461a      	mov	r2, r3
 800689c:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <UART_SetConfig+0x6f4>)
 800689e:	fba3 1302 	umull	r1, r3, r3, r2
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	2164      	movs	r1, #100	; 0x64
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	3332      	adds	r3, #50	; 0x32
 80068b0:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <UART_SetConfig+0x6f4>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	f003 020f 	and.w	r2, r3, #15
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4442      	add	r2, r8
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	e7ff      	b.n	80068c6 <UART_SetConfig+0x6e2>
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	51eb851f 	.word	0x51eb851f

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000000c 	.word	0x2000000c

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4e0d      	ldr	r6, [pc, #52]	; (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	; (8006924 <__libc_init_array+0x3c>)
 80068ee:	1ba4      	subs	r4, r4, r6
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2500      	movs	r5, #0
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4e0b      	ldr	r6, [pc, #44]	; (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	; (800692c <__libc_init_array+0x44>)
 80068fc:	f001 fffa 	bl	80088f4 <_init>
 8006900:	1ba4      	subs	r4, r4, r6
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2500      	movs	r5, #0
 8006906:	42a5      	cmp	r5, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006910:	4798      	blx	r3
 8006912:	3501      	adds	r5, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800691a:	4798      	blx	r3
 800691c:	3501      	adds	r5, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	08008ba0 	.word	0x08008ba0
 8006924:	08008ba0 	.word	0x08008ba0
 8006928:	08008ba0 	.word	0x08008ba0
 800692c:	08008ba4 	.word	0x08008ba4

08006930 <memset>:
 8006930:	4402      	add	r2, r0
 8006932:	4603      	mov	r3, r0
 8006934:	4293      	cmp	r3, r2
 8006936:	d100      	bne.n	800693a <memset+0xa>
 8006938:	4770      	bx	lr
 800693a:	f803 1b01 	strb.w	r1, [r3], #1
 800693e:	e7f9      	b.n	8006934 <memset+0x4>

08006940 <__cvt>:
 8006940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	ec55 4b10 	vmov	r4, r5, d0
 8006948:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800694a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800694e:	2d00      	cmp	r5, #0
 8006950:	460e      	mov	r6, r1
 8006952:	4691      	mov	r9, r2
 8006954:	4619      	mov	r1, r3
 8006956:	bfb8      	it	lt
 8006958:	4622      	movlt	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	f027 0720 	bic.w	r7, r7, #32
 8006960:	bfbb      	ittet	lt
 8006962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006966:	461d      	movlt	r5, r3
 8006968:	2300      	movge	r3, #0
 800696a:	232d      	movlt	r3, #45	; 0x2d
 800696c:	bfb8      	it	lt
 800696e:	4614      	movlt	r4, r2
 8006970:	2f46      	cmp	r7, #70	; 0x46
 8006972:	700b      	strb	r3, [r1, #0]
 8006974:	d004      	beq.n	8006980 <__cvt+0x40>
 8006976:	2f45      	cmp	r7, #69	; 0x45
 8006978:	d100      	bne.n	800697c <__cvt+0x3c>
 800697a:	3601      	adds	r6, #1
 800697c:	2102      	movs	r1, #2
 800697e:	e000      	b.n	8006982 <__cvt+0x42>
 8006980:	2103      	movs	r1, #3
 8006982:	ab03      	add	r3, sp, #12
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	ab02      	add	r3, sp, #8
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	4632      	mov	r2, r6
 800698c:	4653      	mov	r3, sl
 800698e:	ec45 4b10 	vmov	d0, r4, r5
 8006992:	f000 fbad 	bl	80070f0 <_dtoa_r>
 8006996:	2f47      	cmp	r7, #71	; 0x47
 8006998:	4680      	mov	r8, r0
 800699a:	d102      	bne.n	80069a2 <__cvt+0x62>
 800699c:	f019 0f01 	tst.w	r9, #1
 80069a0:	d026      	beq.n	80069f0 <__cvt+0xb0>
 80069a2:	2f46      	cmp	r7, #70	; 0x46
 80069a4:	eb08 0906 	add.w	r9, r8, r6
 80069a8:	d111      	bne.n	80069ce <__cvt+0x8e>
 80069aa:	f898 3000 	ldrb.w	r3, [r8]
 80069ae:	2b30      	cmp	r3, #48	; 0x30
 80069b0:	d10a      	bne.n	80069c8 <__cvt+0x88>
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7fa f839 	bl	8000a30 <__aeabi_dcmpeq>
 80069be:	b918      	cbnz	r0, 80069c8 <__cvt+0x88>
 80069c0:	f1c6 0601 	rsb	r6, r6, #1
 80069c4:	f8ca 6000 	str.w	r6, [sl]
 80069c8:	f8da 3000 	ldr.w	r3, [sl]
 80069cc:	4499      	add	r9, r3
 80069ce:	2200      	movs	r2, #0
 80069d0:	2300      	movs	r3, #0
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7fa f82b 	bl	8000a30 <__aeabi_dcmpeq>
 80069da:	b938      	cbnz	r0, 80069ec <__cvt+0xac>
 80069dc:	2230      	movs	r2, #48	; 0x30
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	454b      	cmp	r3, r9
 80069e2:	d205      	bcs.n	80069f0 <__cvt+0xb0>
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	9103      	str	r1, [sp, #12]
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e7f8      	b.n	80069de <__cvt+0x9e>
 80069ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069f4:	eba3 0308 	sub.w	r3, r3, r8
 80069f8:	4640      	mov	r0, r8
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	b004      	add	sp, #16
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a02 <__exponent>:
 8006a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a04:	2900      	cmp	r1, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	bfba      	itte	lt
 8006a0a:	4249      	neglt	r1, r1
 8006a0c:	232d      	movlt	r3, #45	; 0x2d
 8006a0e:	232b      	movge	r3, #43	; 0x2b
 8006a10:	2909      	cmp	r1, #9
 8006a12:	f804 2b02 	strb.w	r2, [r4], #2
 8006a16:	7043      	strb	r3, [r0, #1]
 8006a18:	dd20      	ble.n	8006a5c <__exponent+0x5a>
 8006a1a:	f10d 0307 	add.w	r3, sp, #7
 8006a1e:	461f      	mov	r7, r3
 8006a20:	260a      	movs	r6, #10
 8006a22:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a26:	fb06 1115 	mls	r1, r6, r5, r1
 8006a2a:	3130      	adds	r1, #48	; 0x30
 8006a2c:	2d09      	cmp	r5, #9
 8006a2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a32:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006a36:	4629      	mov	r1, r5
 8006a38:	dc09      	bgt.n	8006a4e <__exponent+0x4c>
 8006a3a:	3130      	adds	r1, #48	; 0x30
 8006a3c:	3b02      	subs	r3, #2
 8006a3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a42:	42bb      	cmp	r3, r7
 8006a44:	4622      	mov	r2, r4
 8006a46:	d304      	bcc.n	8006a52 <__exponent+0x50>
 8006a48:	1a10      	subs	r0, r2, r0
 8006a4a:	b003      	add	sp, #12
 8006a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4e:	4613      	mov	r3, r2
 8006a50:	e7e7      	b.n	8006a22 <__exponent+0x20>
 8006a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a56:	f804 2b01 	strb.w	r2, [r4], #1
 8006a5a:	e7f2      	b.n	8006a42 <__exponent+0x40>
 8006a5c:	2330      	movs	r3, #48	; 0x30
 8006a5e:	4419      	add	r1, r3
 8006a60:	7083      	strb	r3, [r0, #2]
 8006a62:	1d02      	adds	r2, r0, #4
 8006a64:	70c1      	strb	r1, [r0, #3]
 8006a66:	e7ef      	b.n	8006a48 <__exponent+0x46>

08006a68 <_printf_float>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	b08d      	sub	sp, #52	; 0x34
 8006a6e:	460c      	mov	r4, r1
 8006a70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006a74:	4616      	mov	r6, r2
 8006a76:	461f      	mov	r7, r3
 8006a78:	4605      	mov	r5, r0
 8006a7a:	f001 f8f1 	bl	8007c60 <_localeconv_r>
 8006a7e:	6803      	ldr	r3, [r0, #0]
 8006a80:	9304      	str	r3, [sp, #16]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7f9 fba8 	bl	80001d8 <strlen>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a90:	9005      	str	r0, [sp, #20]
 8006a92:	3307      	adds	r3, #7
 8006a94:	f023 0307 	bic.w	r3, r3, #7
 8006a98:	f103 0208 	add.w	r2, r3, #8
 8006a9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006aa0:	f8d4 b000 	ldr.w	fp, [r4]
 8006aa4:	f8c8 2000 	str.w	r2, [r8]
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ab0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ab4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ab8:	9307      	str	r3, [sp, #28]
 8006aba:	f8cd 8018 	str.w	r8, [sp, #24]
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac2:	4ba7      	ldr	r3, [pc, #668]	; (8006d60 <_printf_float+0x2f8>)
 8006ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac8:	f7f9 ffe4 	bl	8000a94 <__aeabi_dcmpun>
 8006acc:	bb70      	cbnz	r0, 8006b2c <_printf_float+0xc4>
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ad2:	4ba3      	ldr	r3, [pc, #652]	; (8006d60 <_printf_float+0x2f8>)
 8006ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad8:	f7f9 ffbe 	bl	8000a58 <__aeabi_dcmple>
 8006adc:	bb30      	cbnz	r0, 8006b2c <_printf_float+0xc4>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	f7f9 ffad 	bl	8000a44 <__aeabi_dcmplt>
 8006aea:	b110      	cbz	r0, 8006af2 <_printf_float+0x8a>
 8006aec:	232d      	movs	r3, #45	; 0x2d
 8006aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af2:	4a9c      	ldr	r2, [pc, #624]	; (8006d64 <_printf_float+0x2fc>)
 8006af4:	4b9c      	ldr	r3, [pc, #624]	; (8006d68 <_printf_float+0x300>)
 8006af6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006afa:	bf8c      	ite	hi
 8006afc:	4690      	movhi	r8, r2
 8006afe:	4698      	movls	r8, r3
 8006b00:	2303      	movs	r3, #3
 8006b02:	f02b 0204 	bic.w	r2, fp, #4
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	6022      	str	r2, [r4, #0]
 8006b0a:	f04f 0900 	mov.w	r9, #0
 8006b0e:	9700      	str	r7, [sp, #0]
 8006b10:	4633      	mov	r3, r6
 8006b12:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f9e6 	bl	8006ee8 <_printf_common>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	f040 808d 	bne.w	8006c3c <_printf_float+0x1d4>
 8006b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b26:	b00d      	add	sp, #52	; 0x34
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	4649      	mov	r1, r9
 8006b34:	f7f9 ffae 	bl	8000a94 <__aeabi_dcmpun>
 8006b38:	b110      	cbz	r0, 8006b40 <_printf_float+0xd8>
 8006b3a:	4a8c      	ldr	r2, [pc, #560]	; (8006d6c <_printf_float+0x304>)
 8006b3c:	4b8c      	ldr	r3, [pc, #560]	; (8006d70 <_printf_float+0x308>)
 8006b3e:	e7da      	b.n	8006af6 <_printf_float+0x8e>
 8006b40:	6861      	ldr	r1, [r4, #4]
 8006b42:	1c4b      	adds	r3, r1, #1
 8006b44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006b48:	a80a      	add	r0, sp, #40	; 0x28
 8006b4a:	d13e      	bne.n	8006bca <_printf_float+0x162>
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	2300      	movs	r3, #0
 8006b52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006b56:	ab09      	add	r3, sp, #36	; 0x24
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	ec49 8b10 	vmov	d0, r8, r9
 8006b5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b62:	6022      	str	r2, [r4, #0]
 8006b64:	f8cd a004 	str.w	sl, [sp, #4]
 8006b68:	6861      	ldr	r1, [r4, #4]
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f7ff fee8 	bl	8006940 <__cvt>
 8006b70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006b74:	2b47      	cmp	r3, #71	; 0x47
 8006b76:	4680      	mov	r8, r0
 8006b78:	d109      	bne.n	8006b8e <_printf_float+0x126>
 8006b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7c:	1cd8      	adds	r0, r3, #3
 8006b7e:	db02      	blt.n	8006b86 <_printf_float+0x11e>
 8006b80:	6862      	ldr	r2, [r4, #4]
 8006b82:	4293      	cmp	r3, r2
 8006b84:	dd47      	ble.n	8006c16 <_printf_float+0x1ae>
 8006b86:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b8a:	fa5f fa8a 	uxtb.w	sl, sl
 8006b8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006b92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b94:	d824      	bhi.n	8006be0 <_printf_float+0x178>
 8006b96:	3901      	subs	r1, #1
 8006b98:	4652      	mov	r2, sl
 8006b9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b9e:	9109      	str	r1, [sp, #36]	; 0x24
 8006ba0:	f7ff ff2f 	bl	8006a02 <__exponent>
 8006ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba6:	1813      	adds	r3, r2, r0
 8006ba8:	2a01      	cmp	r2, #1
 8006baa:	4681      	mov	r9, r0
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	dc02      	bgt.n	8006bb6 <_printf_float+0x14e>
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	07d1      	lsls	r1, r2, #31
 8006bb4:	d501      	bpl.n	8006bba <_printf_float+0x152>
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0a5      	beq.n	8006b0e <_printf_float+0xa6>
 8006bc2:	232d      	movs	r3, #45	; 0x2d
 8006bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc8:	e7a1      	b.n	8006b0e <_printf_float+0xa6>
 8006bca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006bce:	f000 8177 	beq.w	8006ec0 <_printf_float+0x458>
 8006bd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006bd6:	d1bb      	bne.n	8006b50 <_printf_float+0xe8>
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	d1b9      	bne.n	8006b50 <_printf_float+0xe8>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e7b6      	b.n	8006b4e <_printf_float+0xe6>
 8006be0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006be4:	d119      	bne.n	8006c1a <_printf_float+0x1b2>
 8006be6:	2900      	cmp	r1, #0
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	dd0c      	ble.n	8006c06 <_printf_float+0x19e>
 8006bec:	6121      	str	r1, [r4, #16]
 8006bee:	b913      	cbnz	r3, 8006bf6 <_printf_float+0x18e>
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	07d2      	lsls	r2, r2, #31
 8006bf4:	d502      	bpl.n	8006bfc <_printf_float+0x194>
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	440b      	add	r3, r1
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c00:	f04f 0900 	mov.w	r9, #0
 8006c04:	e7d9      	b.n	8006bba <_printf_float+0x152>
 8006c06:	b913      	cbnz	r3, 8006c0e <_printf_float+0x1a6>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	07d0      	lsls	r0, r2, #31
 8006c0c:	d501      	bpl.n	8006c12 <_printf_float+0x1aa>
 8006c0e:	3302      	adds	r3, #2
 8006c10:	e7f3      	b.n	8006bfa <_printf_float+0x192>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e7f1      	b.n	8006bfa <_printf_float+0x192>
 8006c16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006c1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	db05      	blt.n	8006c2e <_printf_float+0x1c6>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	07d1      	lsls	r1, r2, #31
 8006c28:	d5e8      	bpl.n	8006bfc <_printf_float+0x194>
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	e7e5      	b.n	8006bfa <_printf_float+0x192>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfd4      	ite	le
 8006c32:	f1c3 0302 	rsble	r3, r3, #2
 8006c36:	2301      	movgt	r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	e7de      	b.n	8006bfa <_printf_float+0x192>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	055a      	lsls	r2, r3, #21
 8006c40:	d407      	bmi.n	8006c52 <_printf_float+0x1ea>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	4642      	mov	r2, r8
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d12b      	bne.n	8006ca8 <_printf_float+0x240>
 8006c50:	e767      	b.n	8006b22 <_printf_float+0xba>
 8006c52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c56:	f240 80dc 	bls.w	8006e12 <_printf_float+0x3aa>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c62:	f7f9 fee5 	bl	8000a30 <__aeabi_dcmpeq>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d033      	beq.n	8006cd2 <_printf_float+0x26a>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4a41      	ldr	r2, [pc, #260]	; (8006d74 <_printf_float+0x30c>)
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	f43f af54 	beq.w	8006b22 <_printf_float+0xba>
 8006c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	db02      	blt.n	8006c88 <_printf_float+0x220>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	07d8      	lsls	r0, r3, #31
 8006c86:	d50f      	bpl.n	8006ca8 <_printf_float+0x240>
 8006c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af45 	beq.w	8006b22 <_printf_float+0xba>
 8006c98:	f04f 0800 	mov.w	r8, #0
 8006c9c:	f104 091a 	add.w	r9, r4, #26
 8006ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	dc09      	bgt.n	8006cbc <_printf_float+0x254>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	079b      	lsls	r3, r3, #30
 8006cac:	f100 8103 	bmi.w	8006eb6 <_printf_float+0x44e>
 8006cb0:	68e0      	ldr	r0, [r4, #12]
 8006cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb4:	4298      	cmp	r0, r3
 8006cb6:	bfb8      	it	lt
 8006cb8:	4618      	movlt	r0, r3
 8006cba:	e734      	b.n	8006b26 <_printf_float+0xbe>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	464a      	mov	r2, r9
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f43f af2b 	beq.w	8006b22 <_printf_float+0xba>
 8006ccc:	f108 0801 	add.w	r8, r8, #1
 8006cd0:	e7e6      	b.n	8006ca0 <_printf_float+0x238>
 8006cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dc2b      	bgt.n	8006d30 <_printf_float+0x2c8>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <_printf_float+0x30c>)
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f af1d 	beq.w	8006b22 <_printf_float+0xba>
 8006ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cea:	b923      	cbnz	r3, 8006cf6 <_printf_float+0x28e>
 8006cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cee:	b913      	cbnz	r3, 8006cf6 <_printf_float+0x28e>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	07d9      	lsls	r1, r3, #31
 8006cf4:	d5d8      	bpl.n	8006ca8 <_printf_float+0x240>
 8006cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f af0e 	beq.w	8006b22 <_printf_float+0xba>
 8006d06:	f04f 0900 	mov.w	r9, #0
 8006d0a:	f104 0a1a 	add.w	sl, r4, #26
 8006d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d10:	425b      	negs	r3, r3
 8006d12:	454b      	cmp	r3, r9
 8006d14:	dc01      	bgt.n	8006d1a <_printf_float+0x2b2>
 8006d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d18:	e794      	b.n	8006c44 <_printf_float+0x1dc>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	f43f aefc 	beq.w	8006b22 <_printf_float+0xba>
 8006d2a:	f109 0901 	add.w	r9, r9, #1
 8006d2e:	e7ee      	b.n	8006d0e <_printf_float+0x2a6>
 8006d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d34:	429a      	cmp	r2, r3
 8006d36:	bfa8      	it	ge
 8006d38:	461a      	movge	r2, r3
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	4691      	mov	r9, r2
 8006d3e:	dd07      	ble.n	8006d50 <_printf_float+0x2e8>
 8006d40:	4613      	mov	r3, r2
 8006d42:	4631      	mov	r1, r6
 8006d44:	4642      	mov	r2, r8
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f aee9 	beq.w	8006b22 <_printf_float+0xba>
 8006d50:	f104 031a 	add.w	r3, r4, #26
 8006d54:	f04f 0b00 	mov.w	fp, #0
 8006d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d5c:	9306      	str	r3, [sp, #24]
 8006d5e:	e015      	b.n	8006d8c <_printf_float+0x324>
 8006d60:	7fefffff 	.word	0x7fefffff
 8006d64:	08008934 	.word	0x08008934
 8006d68:	08008930 	.word	0x08008930
 8006d6c:	0800893c 	.word	0x0800893c
 8006d70:	08008938 	.word	0x08008938
 8006d74:	08008940 	.word	0x08008940
 8006d78:	2301      	movs	r3, #1
 8006d7a:	9a06      	ldr	r2, [sp, #24]
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	f43f aecd 	beq.w	8006b22 <_printf_float+0xba>
 8006d88:	f10b 0b01 	add.w	fp, fp, #1
 8006d8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006d90:	ebaa 0309 	sub.w	r3, sl, r9
 8006d94:	455b      	cmp	r3, fp
 8006d96:	dcef      	bgt.n	8006d78 <_printf_float+0x310>
 8006d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	44d0      	add	r8, sl
 8006da0:	db15      	blt.n	8006dce <_printf_float+0x366>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07da      	lsls	r2, r3, #31
 8006da6:	d412      	bmi.n	8006dce <_printf_float+0x366>
 8006da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006daa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dac:	eba3 020a 	sub.w	r2, r3, sl
 8006db0:	eba3 0a01 	sub.w	sl, r3, r1
 8006db4:	4592      	cmp	sl, r2
 8006db6:	bfa8      	it	ge
 8006db8:	4692      	movge	sl, r2
 8006dba:	f1ba 0f00 	cmp.w	sl, #0
 8006dbe:	dc0e      	bgt.n	8006dde <_printf_float+0x376>
 8006dc0:	f04f 0800 	mov.w	r8, #0
 8006dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dc8:	f104 091a 	add.w	r9, r4, #26
 8006dcc:	e019      	b.n	8006e02 <_printf_float+0x39a>
 8006dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d1e5      	bne.n	8006da8 <_printf_float+0x340>
 8006ddc:	e6a1      	b.n	8006b22 <_printf_float+0xba>
 8006dde:	4653      	mov	r3, sl
 8006de0:	4642      	mov	r2, r8
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	d1e9      	bne.n	8006dc0 <_printf_float+0x358>
 8006dec:	e699      	b.n	8006b22 <_printf_float+0xba>
 8006dee:	2301      	movs	r3, #1
 8006df0:	464a      	mov	r2, r9
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f ae92 	beq.w	8006b22 <_printf_float+0xba>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	eba3 030a 	sub.w	r3, r3, sl
 8006e0c:	4543      	cmp	r3, r8
 8006e0e:	dcee      	bgt.n	8006dee <_printf_float+0x386>
 8006e10:	e74a      	b.n	8006ca8 <_printf_float+0x240>
 8006e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e14:	2a01      	cmp	r2, #1
 8006e16:	dc01      	bgt.n	8006e1c <_printf_float+0x3b4>
 8006e18:	07db      	lsls	r3, r3, #31
 8006e1a:	d53a      	bpl.n	8006e92 <_printf_float+0x42a>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4642      	mov	r2, r8
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f ae7b 	beq.w	8006b22 <_printf_float+0xba>
 8006e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f108 0801 	add.w	r8, r8, #1
 8006e3c:	f43f ae71 	beq.w	8006b22 <_printf_float+0xba>
 8006e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e42:	2200      	movs	r2, #0
 8006e44:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f7f9 fdef 	bl	8000a30 <__aeabi_dcmpeq>
 8006e52:	b9c8      	cbnz	r0, 8006e88 <_printf_float+0x420>
 8006e54:	4653      	mov	r3, sl
 8006e56:	4642      	mov	r2, r8
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d10e      	bne.n	8006e80 <_printf_float+0x418>
 8006e62:	e65e      	b.n	8006b22 <_printf_float+0xba>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4652      	mov	r2, sl
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f ae57 	beq.w	8006b22 <_printf_float+0xba>
 8006e74:	f108 0801 	add.w	r8, r8, #1
 8006e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	4543      	cmp	r3, r8
 8006e7e:	dcf1      	bgt.n	8006e64 <_printf_float+0x3fc>
 8006e80:	464b      	mov	r3, r9
 8006e82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e86:	e6de      	b.n	8006c46 <_printf_float+0x1de>
 8006e88:	f04f 0800 	mov.w	r8, #0
 8006e8c:	f104 0a1a 	add.w	sl, r4, #26
 8006e90:	e7f2      	b.n	8006e78 <_printf_float+0x410>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e7df      	b.n	8006e56 <_printf_float+0x3ee>
 8006e96:	2301      	movs	r3, #1
 8006e98:	464a      	mov	r2, r9
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f ae3e 	beq.w	8006b22 <_printf_float+0xba>
 8006ea6:	f108 0801 	add.w	r8, r8, #1
 8006eaa:	68e3      	ldr	r3, [r4, #12]
 8006eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	4543      	cmp	r3, r8
 8006eb2:	dcf0      	bgt.n	8006e96 <_printf_float+0x42e>
 8006eb4:	e6fc      	b.n	8006cb0 <_printf_float+0x248>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	f104 0919 	add.w	r9, r4, #25
 8006ebe:	e7f4      	b.n	8006eaa <_printf_float+0x442>
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	f43f ae8b 	beq.w	8006bdc <_printf_float+0x174>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ecc:	ab09      	add	r3, sp, #36	; 0x24
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	ec49 8b10 	vmov	d0, r8, r9
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	f8cd a004 	str.w	sl, [sp, #4]
 8006eda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f7ff fd2e 	bl	8006940 <__cvt>
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	e648      	b.n	8006b7a <_printf_float+0x112>

08006ee8 <_printf_common>:
 8006ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eec:	4691      	mov	r9, r2
 8006eee:	461f      	mov	r7, r3
 8006ef0:	688a      	ldr	r2, [r1, #8]
 8006ef2:	690b      	ldr	r3, [r1, #16]
 8006ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	bfb8      	it	lt
 8006efc:	4613      	movlt	r3, r2
 8006efe:	f8c9 3000 	str.w	r3, [r9]
 8006f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f06:	4606      	mov	r6, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	b112      	cbz	r2, 8006f12 <_printf_common+0x2a>
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f8c9 3000 	str.w	r3, [r9]
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	0699      	lsls	r1, r3, #26
 8006f16:	bf42      	ittt	mi
 8006f18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f1c:	3302      	addmi	r3, #2
 8006f1e:	f8c9 3000 	strmi.w	r3, [r9]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	f015 0506 	ands.w	r5, r5, #6
 8006f28:	d107      	bne.n	8006f3a <_printf_common+0x52>
 8006f2a:	f104 0a19 	add.w	sl, r4, #25
 8006f2e:	68e3      	ldr	r3, [r4, #12]
 8006f30:	f8d9 2000 	ldr.w	r2, [r9]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	42ab      	cmp	r3, r5
 8006f38:	dc28      	bgt.n	8006f8c <_printf_common+0xa4>
 8006f3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	3300      	adds	r3, #0
 8006f42:	bf18      	it	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	0692      	lsls	r2, r2, #26
 8006f48:	d42d      	bmi.n	8006fa6 <_printf_common+0xbe>
 8006f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4630      	mov	r0, r6
 8006f52:	47c0      	blx	r8
 8006f54:	3001      	adds	r0, #1
 8006f56:	d020      	beq.n	8006f9a <_printf_common+0xb2>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	68e5      	ldr	r5, [r4, #12]
 8006f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f60:	f003 0306 	and.w	r3, r3, #6
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	bf08      	it	eq
 8006f68:	1aad      	subeq	r5, r5, r2
 8006f6a:	68a3      	ldr	r3, [r4, #8]
 8006f6c:	6922      	ldr	r2, [r4, #16]
 8006f6e:	bf0c      	ite	eq
 8006f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f74:	2500      	movne	r5, #0
 8006f76:	4293      	cmp	r3, r2
 8006f78:	bfc4      	itt	gt
 8006f7a:	1a9b      	subgt	r3, r3, r2
 8006f7c:	18ed      	addgt	r5, r5, r3
 8006f7e:	f04f 0900 	mov.w	r9, #0
 8006f82:	341a      	adds	r4, #26
 8006f84:	454d      	cmp	r5, r9
 8006f86:	d11a      	bne.n	8006fbe <_printf_common+0xd6>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e008      	b.n	8006f9e <_printf_common+0xb6>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4652      	mov	r2, sl
 8006f90:	4639      	mov	r1, r7
 8006f92:	4630      	mov	r0, r6
 8006f94:	47c0      	blx	r8
 8006f96:	3001      	adds	r0, #1
 8006f98:	d103      	bne.n	8006fa2 <_printf_common+0xba>
 8006f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	e7c3      	b.n	8006f2e <_printf_common+0x46>
 8006fa6:	18e1      	adds	r1, r4, r3
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	2030      	movs	r0, #48	; 0x30
 8006fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fb0:	4422      	add	r2, r4
 8006fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fba:	3302      	adds	r3, #2
 8006fbc:	e7c5      	b.n	8006f4a <_printf_common+0x62>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	47c0      	blx	r8
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d0e6      	beq.n	8006f9a <_printf_common+0xb2>
 8006fcc:	f109 0901 	add.w	r9, r9, #1
 8006fd0:	e7d8      	b.n	8006f84 <_printf_common+0x9c>

08006fd2 <quorem>:
 8006fd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	6903      	ldr	r3, [r0, #16]
 8006fd8:	690c      	ldr	r4, [r1, #16]
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	4680      	mov	r8, r0
 8006fde:	f2c0 8082 	blt.w	80070e6 <quorem+0x114>
 8006fe2:	3c01      	subs	r4, #1
 8006fe4:	f101 0714 	add.w	r7, r1, #20
 8006fe8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006fec:	f100 0614 	add.w	r6, r0, #20
 8006ff0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006ff4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006ff8:	eb06 030c 	add.w	r3, r6, ip
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	eb07 090c 	add.w	r9, r7, ip
 8007002:	9301      	str	r3, [sp, #4]
 8007004:	fbb0 f5f5 	udiv	r5, r0, r5
 8007008:	b395      	cbz	r5, 8007070 <quorem+0x9e>
 800700a:	f04f 0a00 	mov.w	sl, #0
 800700e:	4638      	mov	r0, r7
 8007010:	46b6      	mov	lr, r6
 8007012:	46d3      	mov	fp, sl
 8007014:	f850 2b04 	ldr.w	r2, [r0], #4
 8007018:	b293      	uxth	r3, r2
 800701a:	fb05 a303 	mla	r3, r5, r3, sl
 800701e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007022:	b29b      	uxth	r3, r3
 8007024:	ebab 0303 	sub.w	r3, fp, r3
 8007028:	0c12      	lsrs	r2, r2, #16
 800702a:	f8de b000 	ldr.w	fp, [lr]
 800702e:	fb05 a202 	mla	r2, r5, r2, sl
 8007032:	fa13 f38b 	uxtah	r3, r3, fp
 8007036:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800703a:	fa1f fb82 	uxth.w	fp, r2
 800703e:	f8de 2000 	ldr.w	r2, [lr]
 8007042:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800704a:	b29b      	uxth	r3, r3
 800704c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007050:	4581      	cmp	r9, r0
 8007052:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007056:	f84e 3b04 	str.w	r3, [lr], #4
 800705a:	d2db      	bcs.n	8007014 <quorem+0x42>
 800705c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007060:	b933      	cbnz	r3, 8007070 <quorem+0x9e>
 8007062:	9b01      	ldr	r3, [sp, #4]
 8007064:	3b04      	subs	r3, #4
 8007066:	429e      	cmp	r6, r3
 8007068:	461a      	mov	r2, r3
 800706a:	d330      	bcc.n	80070ce <quorem+0xfc>
 800706c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007070:	4640      	mov	r0, r8
 8007072:	f001 f82b 	bl	80080cc <__mcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	db25      	blt.n	80070c6 <quorem+0xf4>
 800707a:	3501      	adds	r5, #1
 800707c:	4630      	mov	r0, r6
 800707e:	f04f 0c00 	mov.w	ip, #0
 8007082:	f857 2b04 	ldr.w	r2, [r7], #4
 8007086:	f8d0 e000 	ldr.w	lr, [r0]
 800708a:	b293      	uxth	r3, r2
 800708c:	ebac 0303 	sub.w	r3, ip, r3
 8007090:	0c12      	lsrs	r2, r2, #16
 8007092:	fa13 f38e 	uxtah	r3, r3, lr
 8007096:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800709a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a4:	45b9      	cmp	r9, r7
 80070a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070aa:	f840 3b04 	str.w	r3, [r0], #4
 80070ae:	d2e8      	bcs.n	8007082 <quorem+0xb0>
 80070b0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80070b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80070b8:	b92a      	cbnz	r2, 80070c6 <quorem+0xf4>
 80070ba:	3b04      	subs	r3, #4
 80070bc:	429e      	cmp	r6, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	d30b      	bcc.n	80070da <quorem+0x108>
 80070c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80070c6:	4628      	mov	r0, r5
 80070c8:	b003      	add	sp, #12
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1ca      	bne.n	800706c <quorem+0x9a>
 80070d6:	3c01      	subs	r4, #1
 80070d8:	e7c5      	b.n	8007066 <quorem+0x94>
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	3b04      	subs	r3, #4
 80070de:	2a00      	cmp	r2, #0
 80070e0:	d1ef      	bne.n	80070c2 <quorem+0xf0>
 80070e2:	3c01      	subs	r4, #1
 80070e4:	e7ea      	b.n	80070bc <quorem+0xea>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7ee      	b.n	80070c8 <quorem+0xf6>
 80070ea:	0000      	movs	r0, r0
 80070ec:	0000      	movs	r0, r0
	...

080070f0 <_dtoa_r>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	ec57 6b10 	vmov	r6, r7, d0
 80070f8:	b097      	sub	sp, #92	; 0x5c
 80070fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070fc:	9106      	str	r1, [sp, #24]
 80070fe:	4604      	mov	r4, r0
 8007100:	920b      	str	r2, [sp, #44]	; 0x2c
 8007102:	9312      	str	r3, [sp, #72]	; 0x48
 8007104:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007108:	e9cd 6700 	strd	r6, r7, [sp]
 800710c:	b93d      	cbnz	r5, 800711e <_dtoa_r+0x2e>
 800710e:	2010      	movs	r0, #16
 8007110:	f000 fdb4 	bl	8007c7c <malloc>
 8007114:	6260      	str	r0, [r4, #36]	; 0x24
 8007116:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800711a:	6005      	str	r5, [r0, #0]
 800711c:	60c5      	str	r5, [r0, #12]
 800711e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	b151      	cbz	r1, 800713a <_dtoa_r+0x4a>
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	604a      	str	r2, [r1, #4]
 8007128:	2301      	movs	r3, #1
 800712a:	4093      	lsls	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fdeb 	bl	8007d0a <_Bfree>
 8007134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	1e3b      	subs	r3, r7, #0
 800713c:	bfbb      	ittet	lt
 800713e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007142:	9301      	strlt	r3, [sp, #4]
 8007144:	2300      	movge	r3, #0
 8007146:	2201      	movlt	r2, #1
 8007148:	bfac      	ite	ge
 800714a:	f8c8 3000 	strge.w	r3, [r8]
 800714e:	f8c8 2000 	strlt.w	r2, [r8]
 8007152:	4baf      	ldr	r3, [pc, #700]	; (8007410 <_dtoa_r+0x320>)
 8007154:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007158:	ea33 0308 	bics.w	r3, r3, r8
 800715c:	d114      	bne.n	8007188 <_dtoa_r+0x98>
 800715e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007160:	f242 730f 	movw	r3, #9999	; 0x270f
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	b923      	cbnz	r3, 8007174 <_dtoa_r+0x84>
 800716a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800716e:	2800      	cmp	r0, #0
 8007170:	f000 8542 	beq.w	8007bf8 <_dtoa_r+0xb08>
 8007174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007176:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007424 <_dtoa_r+0x334>
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8544 	beq.w	8007c08 <_dtoa_r+0xb18>
 8007180:	f10b 0303 	add.w	r3, fp, #3
 8007184:	f000 bd3e 	b.w	8007c04 <_dtoa_r+0xb14>
 8007188:	e9dd 6700 	ldrd	r6, r7, [sp]
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	4630      	mov	r0, r6
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 fc4c 	bl	8000a30 <__aeabi_dcmpeq>
 8007198:	4681      	mov	r9, r0
 800719a:	b168      	cbz	r0, 80071b8 <_dtoa_r+0xc8>
 800719c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800719e:	2301      	movs	r3, #1
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8524 	beq.w	8007bf2 <_dtoa_r+0xb02>
 80071aa:	4b9a      	ldr	r3, [pc, #616]	; (8007414 <_dtoa_r+0x324>)
 80071ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071ae:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	f000 bd28 	b.w	8007c08 <_dtoa_r+0xb18>
 80071b8:	aa14      	add	r2, sp, #80	; 0x50
 80071ba:	a915      	add	r1, sp, #84	; 0x54
 80071bc:	ec47 6b10 	vmov	d0, r6, r7
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fffa 	bl	80081ba <__d2b>
 80071c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80071ca:	9004      	str	r0, [sp, #16]
 80071cc:	2d00      	cmp	r5, #0
 80071ce:	d07c      	beq.n	80072ca <_dtoa_r+0x1da>
 80071d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80071d8:	46b2      	mov	sl, r6
 80071da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80071de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80071e6:	2200      	movs	r2, #0
 80071e8:	4b8b      	ldr	r3, [pc, #556]	; (8007418 <_dtoa_r+0x328>)
 80071ea:	4650      	mov	r0, sl
 80071ec:	4659      	mov	r1, fp
 80071ee:	f7f8 ffff 	bl	80001f0 <__aeabi_dsub>
 80071f2:	a381      	add	r3, pc, #516	; (adr r3, 80073f8 <_dtoa_r+0x308>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f7f9 f9b2 	bl	8000560 <__aeabi_dmul>
 80071fc:	a380      	add	r3, pc, #512	; (adr r3, 8007400 <_dtoa_r+0x310>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 fff7 	bl	80001f4 <__adddf3>
 8007206:	4606      	mov	r6, r0
 8007208:	4628      	mov	r0, r5
 800720a:	460f      	mov	r7, r1
 800720c:	f7f9 f93e 	bl	800048c <__aeabi_i2d>
 8007210:	a37d      	add	r3, pc, #500	; (adr r3, 8007408 <_dtoa_r+0x318>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f9a3 	bl	8000560 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f8 ffe7 	bl	80001f4 <__adddf3>
 8007226:	4606      	mov	r6, r0
 8007228:	460f      	mov	r7, r1
 800722a:	f7f9 fc49 	bl	8000ac0 <__aeabi_d2iz>
 800722e:	2200      	movs	r2, #0
 8007230:	4682      	mov	sl, r0
 8007232:	2300      	movs	r3, #0
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fc04 	bl	8000a44 <__aeabi_dcmplt>
 800723c:	b148      	cbz	r0, 8007252 <_dtoa_r+0x162>
 800723e:	4650      	mov	r0, sl
 8007240:	f7f9 f924 	bl	800048c <__aeabi_i2d>
 8007244:	4632      	mov	r2, r6
 8007246:	463b      	mov	r3, r7
 8007248:	f7f9 fbf2 	bl	8000a30 <__aeabi_dcmpeq>
 800724c:	b908      	cbnz	r0, 8007252 <_dtoa_r+0x162>
 800724e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007252:	f1ba 0f16 	cmp.w	sl, #22
 8007256:	d859      	bhi.n	800730c <_dtoa_r+0x21c>
 8007258:	4970      	ldr	r1, [pc, #448]	; (800741c <_dtoa_r+0x32c>)
 800725a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800725e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007266:	f7f9 fc0b 	bl	8000a80 <__aeabi_dcmpgt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d050      	beq.n	8007310 <_dtoa_r+0x220>
 800726e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007272:	2300      	movs	r3, #0
 8007274:	930f      	str	r3, [sp, #60]	; 0x3c
 8007276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007278:	1b5d      	subs	r5, r3, r5
 800727a:	f1b5 0801 	subs.w	r8, r5, #1
 800727e:	bf49      	itett	mi
 8007280:	f1c5 0301 	rsbmi	r3, r5, #1
 8007284:	2300      	movpl	r3, #0
 8007286:	9305      	strmi	r3, [sp, #20]
 8007288:	f04f 0800 	movmi.w	r8, #0
 800728c:	bf58      	it	pl
 800728e:	9305      	strpl	r3, [sp, #20]
 8007290:	f1ba 0f00 	cmp.w	sl, #0
 8007294:	db3e      	blt.n	8007314 <_dtoa_r+0x224>
 8007296:	2300      	movs	r3, #0
 8007298:	44d0      	add	r8, sl
 800729a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	9b06      	ldr	r3, [sp, #24]
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	f200 8090 	bhi.w	80073c8 <_dtoa_r+0x2d8>
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	bfc4      	itt	gt
 80072ac:	3b04      	subgt	r3, #4
 80072ae:	9306      	strgt	r3, [sp, #24]
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	f1a3 0302 	sub.w	r3, r3, #2
 80072b6:	bfcc      	ite	gt
 80072b8:	2500      	movgt	r5, #0
 80072ba:	2501      	movle	r5, #1
 80072bc:	2b03      	cmp	r3, #3
 80072be:	f200 808f 	bhi.w	80073e0 <_dtoa_r+0x2f0>
 80072c2:	e8df f003 	tbb	[pc, r3]
 80072c6:	7f7d      	.short	0x7f7d
 80072c8:	7131      	.short	0x7131
 80072ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80072ce:	441d      	add	r5, r3
 80072d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80072d4:	2820      	cmp	r0, #32
 80072d6:	dd13      	ble.n	8007300 <_dtoa_r+0x210>
 80072d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	fa08 f800 	lsl.w	r8, r8, r0
 80072e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80072e6:	fa23 f000 	lsr.w	r0, r3, r0
 80072ea:	ea48 0000 	orr.w	r0, r8, r0
 80072ee:	f7f9 f8bd 	bl	800046c <__aeabi_ui2d>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4682      	mov	sl, r0
 80072f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80072fa:	3d01      	subs	r5, #1
 80072fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80072fe:	e772      	b.n	80071e6 <_dtoa_r+0xf6>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	f1c0 0020 	rsb	r0, r0, #32
 8007306:	fa03 f000 	lsl.w	r0, r3, r0
 800730a:	e7f0      	b.n	80072ee <_dtoa_r+0x1fe>
 800730c:	2301      	movs	r3, #1
 800730e:	e7b1      	b.n	8007274 <_dtoa_r+0x184>
 8007310:	900f      	str	r0, [sp, #60]	; 0x3c
 8007312:	e7b0      	b.n	8007276 <_dtoa_r+0x186>
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	eba3 030a 	sub.w	r3, r3, sl
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	f1ca 0300 	rsb	r3, sl, #0
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	2300      	movs	r3, #0
 8007324:	930e      	str	r3, [sp, #56]	; 0x38
 8007326:	e7bb      	b.n	80072a0 <_dtoa_r+0x1b0>
 8007328:	2301      	movs	r3, #1
 800732a:	930a      	str	r3, [sp, #40]	; 0x28
 800732c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	dd59      	ble.n	80073e6 <_dtoa_r+0x2f6>
 8007332:	9302      	str	r3, [sp, #8]
 8007334:	4699      	mov	r9, r3
 8007336:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007338:	2200      	movs	r2, #0
 800733a:	6072      	str	r2, [r6, #4]
 800733c:	2204      	movs	r2, #4
 800733e:	f102 0014 	add.w	r0, r2, #20
 8007342:	4298      	cmp	r0, r3
 8007344:	6871      	ldr	r1, [r6, #4]
 8007346:	d953      	bls.n	80073f0 <_dtoa_r+0x300>
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fcaa 	bl	8007ca2 <_Balloc>
 800734e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	f1b9 0f0e 	cmp.w	r9, #14
 8007356:	f8d3 b000 	ldr.w	fp, [r3]
 800735a:	f200 80e6 	bhi.w	800752a <_dtoa_r+0x43a>
 800735e:	2d00      	cmp	r5, #0
 8007360:	f000 80e3 	beq.w	800752a <_dtoa_r+0x43a>
 8007364:	ed9d 7b00 	vldr	d7, [sp]
 8007368:	f1ba 0f00 	cmp.w	sl, #0
 800736c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007370:	dd74      	ble.n	800745c <_dtoa_r+0x36c>
 8007372:	4a2a      	ldr	r2, [pc, #168]	; (800741c <_dtoa_r+0x32c>)
 8007374:	f00a 030f 	and.w	r3, sl, #15
 8007378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800737c:	ed93 7b00 	vldr	d7, [r3]
 8007380:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007384:	06f0      	lsls	r0, r6, #27
 8007386:	ed8d 7b08 	vstr	d7, [sp, #32]
 800738a:	d565      	bpl.n	8007458 <_dtoa_r+0x368>
 800738c:	4b24      	ldr	r3, [pc, #144]	; (8007420 <_dtoa_r+0x330>)
 800738e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007392:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007396:	f7f9 fa0d 	bl	80007b4 <__aeabi_ddiv>
 800739a:	e9cd 0100 	strd	r0, r1, [sp]
 800739e:	f006 060f 	and.w	r6, r6, #15
 80073a2:	2503      	movs	r5, #3
 80073a4:	4f1e      	ldr	r7, [pc, #120]	; (8007420 <_dtoa_r+0x330>)
 80073a6:	e04c      	b.n	8007442 <_dtoa_r+0x352>
 80073a8:	2301      	movs	r3, #1
 80073aa:	930a      	str	r3, [sp, #40]	; 0x28
 80073ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ae:	4453      	add	r3, sl
 80073b0:	f103 0901 	add.w	r9, r3, #1
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	464b      	mov	r3, r9
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	bfb8      	it	lt
 80073bc:	2301      	movlt	r3, #1
 80073be:	e7ba      	b.n	8007336 <_dtoa_r+0x246>
 80073c0:	2300      	movs	r3, #0
 80073c2:	e7b2      	b.n	800732a <_dtoa_r+0x23a>
 80073c4:	2300      	movs	r3, #0
 80073c6:	e7f0      	b.n	80073aa <_dtoa_r+0x2ba>
 80073c8:	2501      	movs	r5, #1
 80073ca:	2300      	movs	r3, #0
 80073cc:	9306      	str	r3, [sp, #24]
 80073ce:	950a      	str	r5, [sp, #40]	; 0x28
 80073d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	4699      	mov	r9, r3
 80073d8:	2200      	movs	r2, #0
 80073da:	2312      	movs	r3, #18
 80073dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80073de:	e7aa      	b.n	8007336 <_dtoa_r+0x246>
 80073e0:	2301      	movs	r3, #1
 80073e2:	930a      	str	r3, [sp, #40]	; 0x28
 80073e4:	e7f4      	b.n	80073d0 <_dtoa_r+0x2e0>
 80073e6:	2301      	movs	r3, #1
 80073e8:	9302      	str	r3, [sp, #8]
 80073ea:	4699      	mov	r9, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	e7f5      	b.n	80073dc <_dtoa_r+0x2ec>
 80073f0:	3101      	adds	r1, #1
 80073f2:	6071      	str	r1, [r6, #4]
 80073f4:	0052      	lsls	r2, r2, #1
 80073f6:	e7a2      	b.n	800733e <_dtoa_r+0x24e>
 80073f8:	636f4361 	.word	0x636f4361
 80073fc:	3fd287a7 	.word	0x3fd287a7
 8007400:	8b60c8b3 	.word	0x8b60c8b3
 8007404:	3fc68a28 	.word	0x3fc68a28
 8007408:	509f79fb 	.word	0x509f79fb
 800740c:	3fd34413 	.word	0x3fd34413
 8007410:	7ff00000 	.word	0x7ff00000
 8007414:	08008941 	.word	0x08008941
 8007418:	3ff80000 	.word	0x3ff80000
 800741c:	08008978 	.word	0x08008978
 8007420:	08008950 	.word	0x08008950
 8007424:	0800894b 	.word	0x0800894b
 8007428:	07f1      	lsls	r1, r6, #31
 800742a:	d508      	bpl.n	800743e <_dtoa_r+0x34e>
 800742c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007434:	f7f9 f894 	bl	8000560 <__aeabi_dmul>
 8007438:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800743c:	3501      	adds	r5, #1
 800743e:	1076      	asrs	r6, r6, #1
 8007440:	3708      	adds	r7, #8
 8007442:	2e00      	cmp	r6, #0
 8007444:	d1f0      	bne.n	8007428 <_dtoa_r+0x338>
 8007446:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800744a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800744e:	f7f9 f9b1 	bl	80007b4 <__aeabi_ddiv>
 8007452:	e9cd 0100 	strd	r0, r1, [sp]
 8007456:	e01a      	b.n	800748e <_dtoa_r+0x39e>
 8007458:	2502      	movs	r5, #2
 800745a:	e7a3      	b.n	80073a4 <_dtoa_r+0x2b4>
 800745c:	f000 80a0 	beq.w	80075a0 <_dtoa_r+0x4b0>
 8007460:	f1ca 0600 	rsb	r6, sl, #0
 8007464:	4b9f      	ldr	r3, [pc, #636]	; (80076e4 <_dtoa_r+0x5f4>)
 8007466:	4fa0      	ldr	r7, [pc, #640]	; (80076e8 <_dtoa_r+0x5f8>)
 8007468:	f006 020f 	and.w	r2, r6, #15
 800746c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007478:	f7f9 f872 	bl	8000560 <__aeabi_dmul>
 800747c:	e9cd 0100 	strd	r0, r1, [sp]
 8007480:	1136      	asrs	r6, r6, #4
 8007482:	2300      	movs	r3, #0
 8007484:	2502      	movs	r5, #2
 8007486:	2e00      	cmp	r6, #0
 8007488:	d17f      	bne.n	800758a <_dtoa_r+0x49a>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e1      	bne.n	8007452 <_dtoa_r+0x362>
 800748e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8087 	beq.w	80075a4 <_dtoa_r+0x4b4>
 8007496:	e9dd 6700 	ldrd	r6, r7, [sp]
 800749a:	2200      	movs	r2, #0
 800749c:	4b93      	ldr	r3, [pc, #588]	; (80076ec <_dtoa_r+0x5fc>)
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	f7f9 facf 	bl	8000a44 <__aeabi_dcmplt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d07c      	beq.n	80075a4 <_dtoa_r+0x4b4>
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	d079      	beq.n	80075a4 <_dtoa_r+0x4b4>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dd35      	ble.n	8007522 <_dtoa_r+0x432>
 80074b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80074ba:	9308      	str	r3, [sp, #32]
 80074bc:	4639      	mov	r1, r7
 80074be:	2200      	movs	r2, #0
 80074c0:	4b8b      	ldr	r3, [pc, #556]	; (80076f0 <_dtoa_r+0x600>)
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7f9 f84c 	bl	8000560 <__aeabi_dmul>
 80074c8:	e9cd 0100 	strd	r0, r1, [sp]
 80074cc:	9f02      	ldr	r7, [sp, #8]
 80074ce:	3501      	adds	r5, #1
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7f8 ffdb 	bl	800048c <__aeabi_i2d>
 80074d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074da:	f7f9 f841 	bl	8000560 <__aeabi_dmul>
 80074de:	2200      	movs	r2, #0
 80074e0:	4b84      	ldr	r3, [pc, #528]	; (80076f4 <_dtoa_r+0x604>)
 80074e2:	f7f8 fe87 	bl	80001f4 <__adddf3>
 80074e6:	4605      	mov	r5, r0
 80074e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074ec:	2f00      	cmp	r7, #0
 80074ee:	d15d      	bne.n	80075ac <_dtoa_r+0x4bc>
 80074f0:	2200      	movs	r2, #0
 80074f2:	4b81      	ldr	r3, [pc, #516]	; (80076f8 <_dtoa_r+0x608>)
 80074f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f8:	f7f8 fe7a 	bl	80001f0 <__aeabi_dsub>
 80074fc:	462a      	mov	r2, r5
 80074fe:	4633      	mov	r3, r6
 8007500:	e9cd 0100 	strd	r0, r1, [sp]
 8007504:	f7f9 fabc 	bl	8000a80 <__aeabi_dcmpgt>
 8007508:	2800      	cmp	r0, #0
 800750a:	f040 8288 	bne.w	8007a1e <_dtoa_r+0x92e>
 800750e:	462a      	mov	r2, r5
 8007510:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007518:	f7f9 fa94 	bl	8000a44 <__aeabi_dcmplt>
 800751c:	2800      	cmp	r0, #0
 800751e:	f040 827c 	bne.w	8007a1a <_dtoa_r+0x92a>
 8007522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007526:	e9cd 2300 	strd	r2, r3, [sp]
 800752a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800752c:	2b00      	cmp	r3, #0
 800752e:	f2c0 8150 	blt.w	80077d2 <_dtoa_r+0x6e2>
 8007532:	f1ba 0f0e 	cmp.w	sl, #14
 8007536:	f300 814c 	bgt.w	80077d2 <_dtoa_r+0x6e2>
 800753a:	4b6a      	ldr	r3, [pc, #424]	; (80076e4 <_dtoa_r+0x5f4>)
 800753c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007540:	ed93 7b00 	vldr	d7, [r3]
 8007544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	ed8d 7b02 	vstr	d7, [sp, #8]
 800754c:	f280 80d8 	bge.w	8007700 <_dtoa_r+0x610>
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	f300 80d4 	bgt.w	8007700 <_dtoa_r+0x610>
 8007558:	f040 825e 	bne.w	8007a18 <_dtoa_r+0x928>
 800755c:	2200      	movs	r2, #0
 800755e:	4b66      	ldr	r3, [pc, #408]	; (80076f8 <_dtoa_r+0x608>)
 8007560:	ec51 0b17 	vmov	r0, r1, d7
 8007564:	f7f8 fffc 	bl	8000560 <__aeabi_dmul>
 8007568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800756c:	f7f9 fa7e 	bl	8000a6c <__aeabi_dcmpge>
 8007570:	464f      	mov	r7, r9
 8007572:	464e      	mov	r6, r9
 8007574:	2800      	cmp	r0, #0
 8007576:	f040 8234 	bne.w	80079e2 <_dtoa_r+0x8f2>
 800757a:	2331      	movs	r3, #49	; 0x31
 800757c:	f10b 0501 	add.w	r5, fp, #1
 8007580:	f88b 3000 	strb.w	r3, [fp]
 8007584:	f10a 0a01 	add.w	sl, sl, #1
 8007588:	e22f      	b.n	80079ea <_dtoa_r+0x8fa>
 800758a:	07f2      	lsls	r2, r6, #31
 800758c:	d505      	bpl.n	800759a <_dtoa_r+0x4aa>
 800758e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007592:	f7f8 ffe5 	bl	8000560 <__aeabi_dmul>
 8007596:	3501      	adds	r5, #1
 8007598:	2301      	movs	r3, #1
 800759a:	1076      	asrs	r6, r6, #1
 800759c:	3708      	adds	r7, #8
 800759e:	e772      	b.n	8007486 <_dtoa_r+0x396>
 80075a0:	2502      	movs	r5, #2
 80075a2:	e774      	b.n	800748e <_dtoa_r+0x39e>
 80075a4:	f8cd a020 	str.w	sl, [sp, #32]
 80075a8:	464f      	mov	r7, r9
 80075aa:	e791      	b.n	80074d0 <_dtoa_r+0x3e0>
 80075ac:	4b4d      	ldr	r3, [pc, #308]	; (80076e4 <_dtoa_r+0x5f4>)
 80075ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d047      	beq.n	800764c <_dtoa_r+0x55c>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	2000      	movs	r0, #0
 80075c2:	494e      	ldr	r1, [pc, #312]	; (80076fc <_dtoa_r+0x60c>)
 80075c4:	f7f9 f8f6 	bl	80007b4 <__aeabi_ddiv>
 80075c8:	462a      	mov	r2, r5
 80075ca:	4633      	mov	r3, r6
 80075cc:	f7f8 fe10 	bl	80001f0 <__aeabi_dsub>
 80075d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80075d4:	465d      	mov	r5, fp
 80075d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075da:	f7f9 fa71 	bl	8000ac0 <__aeabi_d2iz>
 80075de:	4606      	mov	r6, r0
 80075e0:	f7f8 ff54 	bl	800048c <__aeabi_i2d>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ec:	f7f8 fe00 	bl	80001f0 <__aeabi_dsub>
 80075f0:	3630      	adds	r6, #48	; 0x30
 80075f2:	f805 6b01 	strb.w	r6, [r5], #1
 80075f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075fa:	e9cd 0100 	strd	r0, r1, [sp]
 80075fe:	f7f9 fa21 	bl	8000a44 <__aeabi_dcmplt>
 8007602:	2800      	cmp	r0, #0
 8007604:	d163      	bne.n	80076ce <_dtoa_r+0x5de>
 8007606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760a:	2000      	movs	r0, #0
 800760c:	4937      	ldr	r1, [pc, #220]	; (80076ec <_dtoa_r+0x5fc>)
 800760e:	f7f8 fdef 	bl	80001f0 <__aeabi_dsub>
 8007612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007616:	f7f9 fa15 	bl	8000a44 <__aeabi_dcmplt>
 800761a:	2800      	cmp	r0, #0
 800761c:	f040 80b7 	bne.w	800778e <_dtoa_r+0x69e>
 8007620:	eba5 030b 	sub.w	r3, r5, fp
 8007624:	429f      	cmp	r7, r3
 8007626:	f77f af7c 	ble.w	8007522 <_dtoa_r+0x432>
 800762a:	2200      	movs	r2, #0
 800762c:	4b30      	ldr	r3, [pc, #192]	; (80076f0 <_dtoa_r+0x600>)
 800762e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007632:	f7f8 ff95 	bl	8000560 <__aeabi_dmul>
 8007636:	2200      	movs	r2, #0
 8007638:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800763c:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <_dtoa_r+0x600>)
 800763e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007642:	f7f8 ff8d 	bl	8000560 <__aeabi_dmul>
 8007646:	e9cd 0100 	strd	r0, r1, [sp]
 800764a:	e7c4      	b.n	80075d6 <_dtoa_r+0x4e6>
 800764c:	462a      	mov	r2, r5
 800764e:	4633      	mov	r3, r6
 8007650:	f7f8 ff86 	bl	8000560 <__aeabi_dmul>
 8007654:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007658:	eb0b 0507 	add.w	r5, fp, r7
 800765c:	465e      	mov	r6, fp
 800765e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007662:	f7f9 fa2d 	bl	8000ac0 <__aeabi_d2iz>
 8007666:	4607      	mov	r7, r0
 8007668:	f7f8 ff10 	bl	800048c <__aeabi_i2d>
 800766c:	3730      	adds	r7, #48	; 0x30
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007676:	f7f8 fdbb 	bl	80001f0 <__aeabi_dsub>
 800767a:	f806 7b01 	strb.w	r7, [r6], #1
 800767e:	42ae      	cmp	r6, r5
 8007680:	e9cd 0100 	strd	r0, r1, [sp]
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	d126      	bne.n	80076d8 <_dtoa_r+0x5e8>
 800768a:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <_dtoa_r+0x60c>)
 800768c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007690:	f7f8 fdb0 	bl	80001f4 <__adddf3>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800769c:	f7f9 f9f0 	bl	8000a80 <__aeabi_dcmpgt>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d174      	bne.n	800778e <_dtoa_r+0x69e>
 80076a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80076a8:	2000      	movs	r0, #0
 80076aa:	4914      	ldr	r1, [pc, #80]	; (80076fc <_dtoa_r+0x60c>)
 80076ac:	f7f8 fda0 	bl	80001f0 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076b8:	f7f9 f9c4 	bl	8000a44 <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f43f af30 	beq.w	8007522 <_dtoa_r+0x432>
 80076c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80076cc:	d002      	beq.n	80076d4 <_dtoa_r+0x5e4>
 80076ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80076d2:	e04a      	b.n	800776a <_dtoa_r+0x67a>
 80076d4:	4615      	mov	r5, r2
 80076d6:	e7f4      	b.n	80076c2 <_dtoa_r+0x5d2>
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <_dtoa_r+0x600>)
 80076da:	f7f8 ff41 	bl	8000560 <__aeabi_dmul>
 80076de:	e9cd 0100 	strd	r0, r1, [sp]
 80076e2:	e7bc      	b.n	800765e <_dtoa_r+0x56e>
 80076e4:	08008978 	.word	0x08008978
 80076e8:	08008950 	.word	0x08008950
 80076ec:	3ff00000 	.word	0x3ff00000
 80076f0:	40240000 	.word	0x40240000
 80076f4:	401c0000 	.word	0x401c0000
 80076f8:	40140000 	.word	0x40140000
 80076fc:	3fe00000 	.word	0x3fe00000
 8007700:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007704:	465d      	mov	r5, fp
 8007706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7f9 f851 	bl	80007b4 <__aeabi_ddiv>
 8007712:	f7f9 f9d5 	bl	8000ac0 <__aeabi_d2iz>
 8007716:	4680      	mov	r8, r0
 8007718:	f7f8 feb8 	bl	800048c <__aeabi_i2d>
 800771c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007720:	f7f8 ff1e 	bl	8000560 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4630      	mov	r0, r6
 800772a:	4639      	mov	r1, r7
 800772c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007730:	f7f8 fd5e 	bl	80001f0 <__aeabi_dsub>
 8007734:	f805 6b01 	strb.w	r6, [r5], #1
 8007738:	eba5 060b 	sub.w	r6, r5, fp
 800773c:	45b1      	cmp	r9, r6
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	d139      	bne.n	80077b8 <_dtoa_r+0x6c8>
 8007744:	f7f8 fd56 	bl	80001f4 <__adddf3>
 8007748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800774c:	4606      	mov	r6, r0
 800774e:	460f      	mov	r7, r1
 8007750:	f7f9 f996 	bl	8000a80 <__aeabi_dcmpgt>
 8007754:	b9c8      	cbnz	r0, 800778a <_dtoa_r+0x69a>
 8007756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f9 f967 	bl	8000a30 <__aeabi_dcmpeq>
 8007762:	b110      	cbz	r0, 800776a <_dtoa_r+0x67a>
 8007764:	f018 0f01 	tst.w	r8, #1
 8007768:	d10f      	bne.n	800778a <_dtoa_r+0x69a>
 800776a:	9904      	ldr	r1, [sp, #16]
 800776c:	4620      	mov	r0, r4
 800776e:	f000 facc 	bl	8007d0a <_Bfree>
 8007772:	2300      	movs	r3, #0
 8007774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007776:	702b      	strb	r3, [r5, #0]
 8007778:	f10a 0301 	add.w	r3, sl, #1
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 8241 	beq.w	8007c08 <_dtoa_r+0xb18>
 8007786:	601d      	str	r5, [r3, #0]
 8007788:	e23e      	b.n	8007c08 <_dtoa_r+0xb18>
 800778a:	f8cd a020 	str.w	sl, [sp, #32]
 800778e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007792:	2a39      	cmp	r2, #57	; 0x39
 8007794:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007798:	d108      	bne.n	80077ac <_dtoa_r+0x6bc>
 800779a:	459b      	cmp	fp, r3
 800779c:	d10a      	bne.n	80077b4 <_dtoa_r+0x6c4>
 800779e:	9b08      	ldr	r3, [sp, #32]
 80077a0:	3301      	adds	r3, #1
 80077a2:	9308      	str	r3, [sp, #32]
 80077a4:	2330      	movs	r3, #48	; 0x30
 80077a6:	f88b 3000 	strb.w	r3, [fp]
 80077aa:	465b      	mov	r3, fp
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	3201      	adds	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e78c      	b.n	80076ce <_dtoa_r+0x5de>
 80077b4:	461d      	mov	r5, r3
 80077b6:	e7ea      	b.n	800778e <_dtoa_r+0x69e>
 80077b8:	2200      	movs	r2, #0
 80077ba:	4b9b      	ldr	r3, [pc, #620]	; (8007a28 <_dtoa_r+0x938>)
 80077bc:	f7f8 fed0 	bl	8000560 <__aeabi_dmul>
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	f7f9 f932 	bl	8000a30 <__aeabi_dcmpeq>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d09a      	beq.n	8007706 <_dtoa_r+0x616>
 80077d0:	e7cb      	b.n	800776a <_dtoa_r+0x67a>
 80077d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	f000 808b 	beq.w	80078f0 <_dtoa_r+0x800>
 80077da:	9a06      	ldr	r2, [sp, #24]
 80077dc:	2a01      	cmp	r2, #1
 80077de:	dc6e      	bgt.n	80078be <_dtoa_r+0x7ce>
 80077e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d067      	beq.n	80078b6 <_dtoa_r+0x7c6>
 80077e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077ea:	9f07      	ldr	r7, [sp, #28]
 80077ec:	9d05      	ldr	r5, [sp, #20]
 80077ee:	9a05      	ldr	r2, [sp, #20]
 80077f0:	2101      	movs	r1, #1
 80077f2:	441a      	add	r2, r3
 80077f4:	4620      	mov	r0, r4
 80077f6:	9205      	str	r2, [sp, #20]
 80077f8:	4498      	add	r8, r3
 80077fa:	f000 fb26 	bl	8007e4a <__i2b>
 80077fe:	4606      	mov	r6, r0
 8007800:	2d00      	cmp	r5, #0
 8007802:	dd0c      	ble.n	800781e <_dtoa_r+0x72e>
 8007804:	f1b8 0f00 	cmp.w	r8, #0
 8007808:	dd09      	ble.n	800781e <_dtoa_r+0x72e>
 800780a:	4545      	cmp	r5, r8
 800780c:	9a05      	ldr	r2, [sp, #20]
 800780e:	462b      	mov	r3, r5
 8007810:	bfa8      	it	ge
 8007812:	4643      	movge	r3, r8
 8007814:	1ad2      	subs	r2, r2, r3
 8007816:	9205      	str	r2, [sp, #20]
 8007818:	1aed      	subs	r5, r5, r3
 800781a:	eba8 0803 	sub.w	r8, r8, r3
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	b1eb      	cbz	r3, 800785e <_dtoa_r+0x76e>
 8007822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d067      	beq.n	80078f8 <_dtoa_r+0x808>
 8007828:	b18f      	cbz	r7, 800784e <_dtoa_r+0x75e>
 800782a:	4631      	mov	r1, r6
 800782c:	463a      	mov	r2, r7
 800782e:	4620      	mov	r0, r4
 8007830:	f000 fbaa 	bl	8007f88 <__pow5mult>
 8007834:	9a04      	ldr	r2, [sp, #16]
 8007836:	4601      	mov	r1, r0
 8007838:	4606      	mov	r6, r0
 800783a:	4620      	mov	r0, r4
 800783c:	f000 fb0e 	bl	8007e5c <__multiply>
 8007840:	9904      	ldr	r1, [sp, #16]
 8007842:	9008      	str	r0, [sp, #32]
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fa60 	bl	8007d0a <_Bfree>
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	9b07      	ldr	r3, [sp, #28]
 8007850:	1bda      	subs	r2, r3, r7
 8007852:	d004      	beq.n	800785e <_dtoa_r+0x76e>
 8007854:	9904      	ldr	r1, [sp, #16]
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fb96 	bl	8007f88 <__pow5mult>
 800785c:	9004      	str	r0, [sp, #16]
 800785e:	2101      	movs	r1, #1
 8007860:	4620      	mov	r0, r4
 8007862:	f000 faf2 	bl	8007e4a <__i2b>
 8007866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007868:	4607      	mov	r7, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 81d0 	beq.w	8007c10 <_dtoa_r+0xb20>
 8007870:	461a      	mov	r2, r3
 8007872:	4601      	mov	r1, r0
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fb87 	bl	8007f88 <__pow5mult>
 800787a:	9b06      	ldr	r3, [sp, #24]
 800787c:	2b01      	cmp	r3, #1
 800787e:	4607      	mov	r7, r0
 8007880:	dc40      	bgt.n	8007904 <_dtoa_r+0x814>
 8007882:	9b00      	ldr	r3, [sp, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d139      	bne.n	80078fc <_dtoa_r+0x80c>
 8007888:	9b01      	ldr	r3, [sp, #4]
 800788a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800788e:	2b00      	cmp	r3, #0
 8007890:	d136      	bne.n	8007900 <_dtoa_r+0x810>
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007898:	0d1b      	lsrs	r3, r3, #20
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	b12b      	cbz	r3, 80078aa <_dtoa_r+0x7ba>
 800789e:	9b05      	ldr	r3, [sp, #20]
 80078a0:	3301      	adds	r3, #1
 80078a2:	9305      	str	r3, [sp, #20]
 80078a4:	f108 0801 	add.w	r8, r8, #1
 80078a8:	2301      	movs	r3, #1
 80078aa:	9307      	str	r3, [sp, #28]
 80078ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d12a      	bne.n	8007908 <_dtoa_r+0x818>
 80078b2:	2001      	movs	r0, #1
 80078b4:	e030      	b.n	8007918 <_dtoa_r+0x828>
 80078b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078bc:	e795      	b.n	80077ea <_dtoa_r+0x6fa>
 80078be:	9b07      	ldr	r3, [sp, #28]
 80078c0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80078c4:	42bb      	cmp	r3, r7
 80078c6:	bfbf      	itttt	lt
 80078c8:	9b07      	ldrlt	r3, [sp, #28]
 80078ca:	9707      	strlt	r7, [sp, #28]
 80078cc:	1afa      	sublt	r2, r7, r3
 80078ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80078d0:	bfbb      	ittet	lt
 80078d2:	189b      	addlt	r3, r3, r2
 80078d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80078d6:	1bdf      	subge	r7, r3, r7
 80078d8:	2700      	movlt	r7, #0
 80078da:	f1b9 0f00 	cmp.w	r9, #0
 80078de:	bfb5      	itete	lt
 80078e0:	9b05      	ldrlt	r3, [sp, #20]
 80078e2:	9d05      	ldrge	r5, [sp, #20]
 80078e4:	eba3 0509 	sublt.w	r5, r3, r9
 80078e8:	464b      	movge	r3, r9
 80078ea:	bfb8      	it	lt
 80078ec:	2300      	movlt	r3, #0
 80078ee:	e77e      	b.n	80077ee <_dtoa_r+0x6fe>
 80078f0:	9f07      	ldr	r7, [sp, #28]
 80078f2:	9d05      	ldr	r5, [sp, #20]
 80078f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80078f6:	e783      	b.n	8007800 <_dtoa_r+0x710>
 80078f8:	9a07      	ldr	r2, [sp, #28]
 80078fa:	e7ab      	b.n	8007854 <_dtoa_r+0x764>
 80078fc:	2300      	movs	r3, #0
 80078fe:	e7d4      	b.n	80078aa <_dtoa_r+0x7ba>
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	e7d2      	b.n	80078aa <_dtoa_r+0x7ba>
 8007904:	2300      	movs	r3, #0
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800790e:	6918      	ldr	r0, [r3, #16]
 8007910:	f000 fa4d 	bl	8007dae <__hi0bits>
 8007914:	f1c0 0020 	rsb	r0, r0, #32
 8007918:	4440      	add	r0, r8
 800791a:	f010 001f 	ands.w	r0, r0, #31
 800791e:	d047      	beq.n	80079b0 <_dtoa_r+0x8c0>
 8007920:	f1c0 0320 	rsb	r3, r0, #32
 8007924:	2b04      	cmp	r3, #4
 8007926:	dd3b      	ble.n	80079a0 <_dtoa_r+0x8b0>
 8007928:	9b05      	ldr	r3, [sp, #20]
 800792a:	f1c0 001c 	rsb	r0, r0, #28
 800792e:	4403      	add	r3, r0
 8007930:	9305      	str	r3, [sp, #20]
 8007932:	4405      	add	r5, r0
 8007934:	4480      	add	r8, r0
 8007936:	9b05      	ldr	r3, [sp, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	dd05      	ble.n	8007948 <_dtoa_r+0x858>
 800793c:	461a      	mov	r2, r3
 800793e:	9904      	ldr	r1, [sp, #16]
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fb6f 	bl	8008024 <__lshift>
 8007946:	9004      	str	r0, [sp, #16]
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	dd05      	ble.n	800795a <_dtoa_r+0x86a>
 800794e:	4639      	mov	r1, r7
 8007950:	4642      	mov	r2, r8
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fb66 	bl	8008024 <__lshift>
 8007958:	4607      	mov	r7, r0
 800795a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800795c:	b353      	cbz	r3, 80079b4 <_dtoa_r+0x8c4>
 800795e:	4639      	mov	r1, r7
 8007960:	9804      	ldr	r0, [sp, #16]
 8007962:	f000 fbb3 	bl	80080cc <__mcmp>
 8007966:	2800      	cmp	r0, #0
 8007968:	da24      	bge.n	80079b4 <_dtoa_r+0x8c4>
 800796a:	2300      	movs	r3, #0
 800796c:	220a      	movs	r2, #10
 800796e:	9904      	ldr	r1, [sp, #16]
 8007970:	4620      	mov	r0, r4
 8007972:	f000 f9e1 	bl	8007d38 <__multadd>
 8007976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007978:	9004      	str	r0, [sp, #16]
 800797a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 814d 	beq.w	8007c1e <_dtoa_r+0xb2e>
 8007984:	2300      	movs	r3, #0
 8007986:	4631      	mov	r1, r6
 8007988:	220a      	movs	r2, #10
 800798a:	4620      	mov	r0, r4
 800798c:	f000 f9d4 	bl	8007d38 <__multadd>
 8007990:	9b02      	ldr	r3, [sp, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	4606      	mov	r6, r0
 8007996:	dc4f      	bgt.n	8007a38 <_dtoa_r+0x948>
 8007998:	9b06      	ldr	r3, [sp, #24]
 800799a:	2b02      	cmp	r3, #2
 800799c:	dd4c      	ble.n	8007a38 <_dtoa_r+0x948>
 800799e:	e011      	b.n	80079c4 <_dtoa_r+0x8d4>
 80079a0:	d0c9      	beq.n	8007936 <_dtoa_r+0x846>
 80079a2:	9a05      	ldr	r2, [sp, #20]
 80079a4:	331c      	adds	r3, #28
 80079a6:	441a      	add	r2, r3
 80079a8:	9205      	str	r2, [sp, #20]
 80079aa:	441d      	add	r5, r3
 80079ac:	4498      	add	r8, r3
 80079ae:	e7c2      	b.n	8007936 <_dtoa_r+0x846>
 80079b0:	4603      	mov	r3, r0
 80079b2:	e7f6      	b.n	80079a2 <_dtoa_r+0x8b2>
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	dc38      	bgt.n	8007a2c <_dtoa_r+0x93c>
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	dd35      	ble.n	8007a2c <_dtoa_r+0x93c>
 80079c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	b963      	cbnz	r3, 80079e2 <_dtoa_r+0x8f2>
 80079c8:	4639      	mov	r1, r7
 80079ca:	2205      	movs	r2, #5
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 f9b3 	bl	8007d38 <__multadd>
 80079d2:	4601      	mov	r1, r0
 80079d4:	4607      	mov	r7, r0
 80079d6:	9804      	ldr	r0, [sp, #16]
 80079d8:	f000 fb78 	bl	80080cc <__mcmp>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f73f adcc 	bgt.w	800757a <_dtoa_r+0x48a>
 80079e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e4:	465d      	mov	r5, fp
 80079e6:	ea6f 0a03 	mvn.w	sl, r3
 80079ea:	f04f 0900 	mov.w	r9, #0
 80079ee:	4639      	mov	r1, r7
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f98a 	bl	8007d0a <_Bfree>
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	f43f aeb7 	beq.w	800776a <_dtoa_r+0x67a>
 80079fc:	f1b9 0f00 	cmp.w	r9, #0
 8007a00:	d005      	beq.n	8007a0e <_dtoa_r+0x91e>
 8007a02:	45b1      	cmp	r9, r6
 8007a04:	d003      	beq.n	8007a0e <_dtoa_r+0x91e>
 8007a06:	4649      	mov	r1, r9
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f97e 	bl	8007d0a <_Bfree>
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 f97a 	bl	8007d0a <_Bfree>
 8007a16:	e6a8      	b.n	800776a <_dtoa_r+0x67a>
 8007a18:	2700      	movs	r7, #0
 8007a1a:	463e      	mov	r6, r7
 8007a1c:	e7e1      	b.n	80079e2 <_dtoa_r+0x8f2>
 8007a1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007a22:	463e      	mov	r6, r7
 8007a24:	e5a9      	b.n	800757a <_dtoa_r+0x48a>
 8007a26:	bf00      	nop
 8007a28:	40240000 	.word	0x40240000
 8007a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 80fa 	beq.w	8007c2c <_dtoa_r+0xb3c>
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	dd05      	ble.n	8007a48 <_dtoa_r+0x958>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 faef 	bl	8008024 <__lshift>
 8007a46:	4606      	mov	r6, r0
 8007a48:	9b07      	ldr	r3, [sp, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d04c      	beq.n	8007ae8 <_dtoa_r+0x9f8>
 8007a4e:	6871      	ldr	r1, [r6, #4]
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 f926 	bl	8007ca2 <_Balloc>
 8007a56:	6932      	ldr	r2, [r6, #16]
 8007a58:	3202      	adds	r2, #2
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	0092      	lsls	r2, r2, #2
 8007a5e:	f106 010c 	add.w	r1, r6, #12
 8007a62:	300c      	adds	r0, #12
 8007a64:	f000 f912 	bl	8007c8c <memcpy>
 8007a68:	2201      	movs	r2, #1
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 fad9 	bl	8008024 <__lshift>
 8007a72:	9b00      	ldr	r3, [sp, #0]
 8007a74:	f8cd b014 	str.w	fp, [sp, #20]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	46b1      	mov	r9, r6
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	4606      	mov	r6, r0
 8007a82:	4639      	mov	r1, r7
 8007a84:	9804      	ldr	r0, [sp, #16]
 8007a86:	f7ff faa4 	bl	8006fd2 <quorem>
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a92:	9804      	ldr	r0, [sp, #16]
 8007a94:	f000 fb1a 	bl	80080cc <__mcmp>
 8007a98:	4632      	mov	r2, r6
 8007a9a:	9000      	str	r0, [sp, #0]
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 fb2e 	bl	8008100 <__mdiff>
 8007aa4:	68c3      	ldr	r3, [r0, #12]
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	bb03      	cbnz	r3, 8007aec <_dtoa_r+0x9fc>
 8007aaa:	4601      	mov	r1, r0
 8007aac:	9008      	str	r0, [sp, #32]
 8007aae:	9804      	ldr	r0, [sp, #16]
 8007ab0:	f000 fb0c 	bl	80080cc <__mcmp>
 8007ab4:	9a08      	ldr	r2, [sp, #32]
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4620      	mov	r0, r4
 8007abc:	9308      	str	r3, [sp, #32]
 8007abe:	f000 f924 	bl	8007d0a <_Bfree>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	b9a3      	cbnz	r3, 8007af0 <_dtoa_r+0xa00>
 8007ac6:	9a06      	ldr	r2, [sp, #24]
 8007ac8:	b992      	cbnz	r2, 8007af0 <_dtoa_r+0xa00>
 8007aca:	9a07      	ldr	r2, [sp, #28]
 8007acc:	b982      	cbnz	r2, 8007af0 <_dtoa_r+0xa00>
 8007ace:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ad2:	d029      	beq.n	8007b28 <_dtoa_r+0xa38>
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd01      	ble.n	8007ade <_dtoa_r+0x9ee>
 8007ada:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ade:	9b05      	ldr	r3, [sp, #20]
 8007ae0:	1c5d      	adds	r5, r3, #1
 8007ae2:	f883 8000 	strb.w	r8, [r3]
 8007ae6:	e782      	b.n	80079ee <_dtoa_r+0x8fe>
 8007ae8:	4630      	mov	r0, r6
 8007aea:	e7c2      	b.n	8007a72 <_dtoa_r+0x982>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7e3      	b.n	8007ab8 <_dtoa_r+0x9c8>
 8007af0:	9a00      	ldr	r2, [sp, #0]
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	db04      	blt.n	8007b00 <_dtoa_r+0xa10>
 8007af6:	d125      	bne.n	8007b44 <_dtoa_r+0xa54>
 8007af8:	9a06      	ldr	r2, [sp, #24]
 8007afa:	bb1a      	cbnz	r2, 8007b44 <_dtoa_r+0xa54>
 8007afc:	9a07      	ldr	r2, [sp, #28]
 8007afe:	bb0a      	cbnz	r2, 8007b44 <_dtoa_r+0xa54>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	ddec      	ble.n	8007ade <_dtoa_r+0x9ee>
 8007b04:	2201      	movs	r2, #1
 8007b06:	9904      	ldr	r1, [sp, #16]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fa8b 	bl	8008024 <__lshift>
 8007b0e:	4639      	mov	r1, r7
 8007b10:	9004      	str	r0, [sp, #16]
 8007b12:	f000 fadb 	bl	80080cc <__mcmp>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	dc03      	bgt.n	8007b22 <_dtoa_r+0xa32>
 8007b1a:	d1e0      	bne.n	8007ade <_dtoa_r+0x9ee>
 8007b1c:	f018 0f01 	tst.w	r8, #1
 8007b20:	d0dd      	beq.n	8007ade <_dtoa_r+0x9ee>
 8007b22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007b26:	d1d8      	bne.n	8007ada <_dtoa_r+0x9ea>
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	9a05      	ldr	r2, [sp, #20]
 8007b2c:	1c5d      	adds	r5, r3, #1
 8007b2e:	2339      	movs	r3, #57	; 0x39
 8007b30:	7013      	strb	r3, [r2, #0]
 8007b32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b36:	2b39      	cmp	r3, #57	; 0x39
 8007b38:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007b3c:	d04f      	beq.n	8007bde <_dtoa_r+0xaee>
 8007b3e:	3301      	adds	r3, #1
 8007b40:	7013      	strb	r3, [r2, #0]
 8007b42:	e754      	b.n	80079ee <_dtoa_r+0x8fe>
 8007b44:	9a05      	ldr	r2, [sp, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f102 0501 	add.w	r5, r2, #1
 8007b4c:	dd06      	ble.n	8007b5c <_dtoa_r+0xa6c>
 8007b4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007b52:	d0e9      	beq.n	8007b28 <_dtoa_r+0xa38>
 8007b54:	f108 0801 	add.w	r8, r8, #1
 8007b58:	9b05      	ldr	r3, [sp, #20]
 8007b5a:	e7c2      	b.n	8007ae2 <_dtoa_r+0x9f2>
 8007b5c:	9a02      	ldr	r2, [sp, #8]
 8007b5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007b62:	eba5 030b 	sub.w	r3, r5, fp
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d021      	beq.n	8007bae <_dtoa_r+0xabe>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	9904      	ldr	r1, [sp, #16]
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 f8e1 	bl	8007d38 <__multadd>
 8007b76:	45b1      	cmp	r9, r6
 8007b78:	9004      	str	r0, [sp, #16]
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	f04f 020a 	mov.w	r2, #10
 8007b82:	4649      	mov	r1, r9
 8007b84:	4620      	mov	r0, r4
 8007b86:	d105      	bne.n	8007b94 <_dtoa_r+0xaa4>
 8007b88:	f000 f8d6 	bl	8007d38 <__multadd>
 8007b8c:	4681      	mov	r9, r0
 8007b8e:	4606      	mov	r6, r0
 8007b90:	9505      	str	r5, [sp, #20]
 8007b92:	e776      	b.n	8007a82 <_dtoa_r+0x992>
 8007b94:	f000 f8d0 	bl	8007d38 <__multadd>
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4681      	mov	r9, r0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	220a      	movs	r2, #10
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f8c9 	bl	8007d38 <__multadd>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	e7f2      	b.n	8007b90 <_dtoa_r+0xaa0>
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	2201      	movs	r2, #1
 8007bb0:	9904      	ldr	r1, [sp, #16]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 fa36 	bl	8008024 <__lshift>
 8007bb8:	4639      	mov	r1, r7
 8007bba:	9004      	str	r0, [sp, #16]
 8007bbc:	f000 fa86 	bl	80080cc <__mcmp>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	dcb6      	bgt.n	8007b32 <_dtoa_r+0xa42>
 8007bc4:	d102      	bne.n	8007bcc <_dtoa_r+0xadc>
 8007bc6:	f018 0f01 	tst.w	r8, #1
 8007bca:	d1b2      	bne.n	8007b32 <_dtoa_r+0xa42>
 8007bcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bd0:	2b30      	cmp	r3, #48	; 0x30
 8007bd2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007bd6:	f47f af0a 	bne.w	80079ee <_dtoa_r+0x8fe>
 8007bda:	4615      	mov	r5, r2
 8007bdc:	e7f6      	b.n	8007bcc <_dtoa_r+0xadc>
 8007bde:	4593      	cmp	fp, r2
 8007be0:	d105      	bne.n	8007bee <_dtoa_r+0xafe>
 8007be2:	2331      	movs	r3, #49	; 0x31
 8007be4:	f10a 0a01 	add.w	sl, sl, #1
 8007be8:	f88b 3000 	strb.w	r3, [fp]
 8007bec:	e6ff      	b.n	80079ee <_dtoa_r+0x8fe>
 8007bee:	4615      	mov	r5, r2
 8007bf0:	e79f      	b.n	8007b32 <_dtoa_r+0xa42>
 8007bf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007c58 <_dtoa_r+0xb68>
 8007bf6:	e007      	b.n	8007c08 <_dtoa_r+0xb18>
 8007bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bfa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007c5c <_dtoa_r+0xb6c>
 8007bfe:	b11b      	cbz	r3, 8007c08 <_dtoa_r+0xb18>
 8007c00:	f10b 0308 	add.w	r3, fp, #8
 8007c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	4658      	mov	r0, fp
 8007c0a:	b017      	add	sp, #92	; 0x5c
 8007c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c10:	9b06      	ldr	r3, [sp, #24]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	f77f ae35 	ble.w	8007882 <_dtoa_r+0x792>
 8007c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	e649      	b.n	80078b2 <_dtoa_r+0x7c2>
 8007c1e:	9b02      	ldr	r3, [sp, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dc03      	bgt.n	8007c2c <_dtoa_r+0xb3c>
 8007c24:	9b06      	ldr	r3, [sp, #24]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	f73f aecc 	bgt.w	80079c4 <_dtoa_r+0x8d4>
 8007c2c:	465d      	mov	r5, fp
 8007c2e:	4639      	mov	r1, r7
 8007c30:	9804      	ldr	r0, [sp, #16]
 8007c32:	f7ff f9ce 	bl	8006fd2 <quorem>
 8007c36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c3a:	f805 8b01 	strb.w	r8, [r5], #1
 8007c3e:	9a02      	ldr	r2, [sp, #8]
 8007c40:	eba5 030b 	sub.w	r3, r5, fp
 8007c44:	429a      	cmp	r2, r3
 8007c46:	ddb0      	ble.n	8007baa <_dtoa_r+0xaba>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	220a      	movs	r2, #10
 8007c4c:	9904      	ldr	r1, [sp, #16]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 f872 	bl	8007d38 <__multadd>
 8007c54:	9004      	str	r0, [sp, #16]
 8007c56:	e7ea      	b.n	8007c2e <_dtoa_r+0xb3e>
 8007c58:	08008940 	.word	0x08008940
 8007c5c:	08008942 	.word	0x08008942

08007c60 <_localeconv_r>:
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <_localeconv_r+0x14>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6a18      	ldr	r0, [r3, #32]
 8007c66:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <_localeconv_r+0x18>)
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bf08      	it	eq
 8007c6c:	4618      	moveq	r0, r3
 8007c6e:	30f0      	adds	r0, #240	; 0xf0
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	2000000c 	.word	0x2000000c
 8007c78:	20000070 	.word	0x20000070

08007c7c <malloc>:
 8007c7c:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <malloc+0xc>)
 8007c7e:	4601      	mov	r1, r0
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	f000 baf7 	b.w	8008274 <_malloc_r>
 8007c86:	bf00      	nop
 8007c88:	2000000c 	.word	0x2000000c

08007c8c <memcpy>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	1e43      	subs	r3, r0, #1
 8007c90:	440a      	add	r2, r1
 8007c92:	4291      	cmp	r1, r2
 8007c94:	d100      	bne.n	8007c98 <memcpy+0xc>
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ca0:	e7f7      	b.n	8007c92 <memcpy+0x6>

08007ca2 <_Balloc>:
 8007ca2:	b570      	push	{r4, r5, r6, lr}
 8007ca4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	460e      	mov	r6, r1
 8007caa:	b93d      	cbnz	r5, 8007cbc <_Balloc+0x1a>
 8007cac:	2010      	movs	r0, #16
 8007cae:	f7ff ffe5 	bl	8007c7c <malloc>
 8007cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8007cb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cb8:	6005      	str	r5, [r0, #0]
 8007cba:	60c5      	str	r5, [r0, #12]
 8007cbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007cbe:	68eb      	ldr	r3, [r5, #12]
 8007cc0:	b183      	cbz	r3, 8007ce4 <_Balloc+0x42>
 8007cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007cca:	b9b8      	cbnz	r0, 8007cfc <_Balloc+0x5a>
 8007ccc:	2101      	movs	r1, #1
 8007cce:	fa01 f506 	lsl.w	r5, r1, r6
 8007cd2:	1d6a      	adds	r2, r5, #5
 8007cd4:	0092      	lsls	r2, r2, #2
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 fabe 	bl	8008258 <_calloc_r>
 8007cdc:	b160      	cbz	r0, 8007cf8 <_Balloc+0x56>
 8007cde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007ce2:	e00e      	b.n	8007d02 <_Balloc+0x60>
 8007ce4:	2221      	movs	r2, #33	; 0x21
 8007ce6:	2104      	movs	r1, #4
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fab5 	bl	8008258 <_calloc_r>
 8007cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf0:	60e8      	str	r0, [r5, #12]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e4      	bne.n	8007cc2 <_Balloc+0x20>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	6802      	ldr	r2, [r0, #0]
 8007cfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007d02:	2300      	movs	r3, #0
 8007d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d08:	e7f7      	b.n	8007cfa <_Balloc+0x58>

08007d0a <_Bfree>:
 8007d0a:	b570      	push	{r4, r5, r6, lr}
 8007d0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460d      	mov	r5, r1
 8007d12:	b93c      	cbnz	r4, 8007d24 <_Bfree+0x1a>
 8007d14:	2010      	movs	r0, #16
 8007d16:	f7ff ffb1 	bl	8007c7c <malloc>
 8007d1a:	6270      	str	r0, [r6, #36]	; 0x24
 8007d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d20:	6004      	str	r4, [r0, #0]
 8007d22:	60c4      	str	r4, [r0, #12]
 8007d24:	b13d      	cbz	r5, 8007d36 <_Bfree+0x2c>
 8007d26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d28:	686a      	ldr	r2, [r5, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d30:	6029      	str	r1, [r5, #0]
 8007d32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007d36:	bd70      	pop	{r4, r5, r6, pc}

08007d38 <__multadd>:
 8007d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3c:	690d      	ldr	r5, [r1, #16]
 8007d3e:	461f      	mov	r7, r3
 8007d40:	4606      	mov	r6, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	f101 0c14 	add.w	ip, r1, #20
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f8dc 0000 	ldr.w	r0, [ip]
 8007d4e:	b281      	uxth	r1, r0
 8007d50:	fb02 7101 	mla	r1, r2, r1, r7
 8007d54:	0c0f      	lsrs	r7, r1, #16
 8007d56:	0c00      	lsrs	r0, r0, #16
 8007d58:	fb02 7000 	mla	r0, r2, r0, r7
 8007d5c:	b289      	uxth	r1, r1
 8007d5e:	3301      	adds	r3, #1
 8007d60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007d64:	429d      	cmp	r5, r3
 8007d66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d6e:	dcec      	bgt.n	8007d4a <__multadd+0x12>
 8007d70:	b1d7      	cbz	r7, 8007da8 <__multadd+0x70>
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	42ab      	cmp	r3, r5
 8007d76:	dc12      	bgt.n	8007d9e <__multadd+0x66>
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	f7ff ff90 	bl	8007ca2 <_Balloc>
 8007d82:	6922      	ldr	r2, [r4, #16]
 8007d84:	3202      	adds	r2, #2
 8007d86:	f104 010c 	add.w	r1, r4, #12
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	0092      	lsls	r2, r2, #2
 8007d8e:	300c      	adds	r0, #12
 8007d90:	f7ff ff7c 	bl	8007c8c <memcpy>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7ff ffb7 	bl	8007d0a <_Bfree>
 8007d9c:	4644      	mov	r4, r8
 8007d9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007da2:	3501      	adds	r5, #1
 8007da4:	615f      	str	r7, [r3, #20]
 8007da6:	6125      	str	r5, [r4, #16]
 8007da8:	4620      	mov	r0, r4
 8007daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007dae <__hi0bits>:
 8007dae:	0c02      	lsrs	r2, r0, #16
 8007db0:	0412      	lsls	r2, r2, #16
 8007db2:	4603      	mov	r3, r0
 8007db4:	b9b2      	cbnz	r2, 8007de4 <__hi0bits+0x36>
 8007db6:	0403      	lsls	r3, r0, #16
 8007db8:	2010      	movs	r0, #16
 8007dba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007dbe:	bf04      	itt	eq
 8007dc0:	021b      	lsleq	r3, r3, #8
 8007dc2:	3008      	addeq	r0, #8
 8007dc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007dc8:	bf04      	itt	eq
 8007dca:	011b      	lsleq	r3, r3, #4
 8007dcc:	3004      	addeq	r0, #4
 8007dce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dd2:	bf04      	itt	eq
 8007dd4:	009b      	lsleq	r3, r3, #2
 8007dd6:	3002      	addeq	r0, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db06      	blt.n	8007dea <__hi0bits+0x3c>
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	d503      	bpl.n	8007de8 <__hi0bits+0x3a>
 8007de0:	3001      	adds	r0, #1
 8007de2:	4770      	bx	lr
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7e8      	b.n	8007dba <__hi0bits+0xc>
 8007de8:	2020      	movs	r0, #32
 8007dea:	4770      	bx	lr

08007dec <__lo0bits>:
 8007dec:	6803      	ldr	r3, [r0, #0]
 8007dee:	f013 0207 	ands.w	r2, r3, #7
 8007df2:	4601      	mov	r1, r0
 8007df4:	d00b      	beq.n	8007e0e <__lo0bits+0x22>
 8007df6:	07da      	lsls	r2, r3, #31
 8007df8:	d423      	bmi.n	8007e42 <__lo0bits+0x56>
 8007dfa:	0798      	lsls	r0, r3, #30
 8007dfc:	bf49      	itett	mi
 8007dfe:	085b      	lsrmi	r3, r3, #1
 8007e00:	089b      	lsrpl	r3, r3, #2
 8007e02:	2001      	movmi	r0, #1
 8007e04:	600b      	strmi	r3, [r1, #0]
 8007e06:	bf5c      	itt	pl
 8007e08:	600b      	strpl	r3, [r1, #0]
 8007e0a:	2002      	movpl	r0, #2
 8007e0c:	4770      	bx	lr
 8007e0e:	b298      	uxth	r0, r3
 8007e10:	b9a8      	cbnz	r0, 8007e3e <__lo0bits+0x52>
 8007e12:	0c1b      	lsrs	r3, r3, #16
 8007e14:	2010      	movs	r0, #16
 8007e16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e1a:	bf04      	itt	eq
 8007e1c:	0a1b      	lsreq	r3, r3, #8
 8007e1e:	3008      	addeq	r0, #8
 8007e20:	071a      	lsls	r2, r3, #28
 8007e22:	bf04      	itt	eq
 8007e24:	091b      	lsreq	r3, r3, #4
 8007e26:	3004      	addeq	r0, #4
 8007e28:	079a      	lsls	r2, r3, #30
 8007e2a:	bf04      	itt	eq
 8007e2c:	089b      	lsreq	r3, r3, #2
 8007e2e:	3002      	addeq	r0, #2
 8007e30:	07da      	lsls	r2, r3, #31
 8007e32:	d402      	bmi.n	8007e3a <__lo0bits+0x4e>
 8007e34:	085b      	lsrs	r3, r3, #1
 8007e36:	d006      	beq.n	8007e46 <__lo0bits+0x5a>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	600b      	str	r3, [r1, #0]
 8007e3c:	4770      	bx	lr
 8007e3e:	4610      	mov	r0, r2
 8007e40:	e7e9      	b.n	8007e16 <__lo0bits+0x2a>
 8007e42:	2000      	movs	r0, #0
 8007e44:	4770      	bx	lr
 8007e46:	2020      	movs	r0, #32
 8007e48:	4770      	bx	lr

08007e4a <__i2b>:
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	2101      	movs	r1, #1
 8007e50:	f7ff ff27 	bl	8007ca2 <_Balloc>
 8007e54:	2201      	movs	r2, #1
 8007e56:	6144      	str	r4, [r0, #20]
 8007e58:	6102      	str	r2, [r0, #16]
 8007e5a:	bd10      	pop	{r4, pc}

08007e5c <__multiply>:
 8007e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	4614      	mov	r4, r2
 8007e62:	690a      	ldr	r2, [r1, #16]
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	bfb8      	it	lt
 8007e6a:	460b      	movlt	r3, r1
 8007e6c:	4688      	mov	r8, r1
 8007e6e:	bfbc      	itt	lt
 8007e70:	46a0      	movlt	r8, r4
 8007e72:	461c      	movlt	r4, r3
 8007e74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e84:	eb07 0609 	add.w	r6, r7, r9
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	bfb8      	it	lt
 8007e8c:	3101      	addlt	r1, #1
 8007e8e:	f7ff ff08 	bl	8007ca2 <_Balloc>
 8007e92:	f100 0514 	add.w	r5, r0, #20
 8007e96:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007e9a:	462b      	mov	r3, r5
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4573      	cmp	r3, lr
 8007ea0:	d316      	bcc.n	8007ed0 <__multiply+0x74>
 8007ea2:	f104 0214 	add.w	r2, r4, #20
 8007ea6:	f108 0114 	add.w	r1, r8, #20
 8007eaa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007eae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	9201      	str	r2, [sp, #4]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d80c      	bhi.n	8007ed6 <__multiply+0x7a>
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	dd03      	ble.n	8007ec8 <__multiply+0x6c>
 8007ec0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d05d      	beq.n	8007f84 <__multiply+0x128>
 8007ec8:	6106      	str	r6, [r0, #16]
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	f843 2b04 	str.w	r2, [r3], #4
 8007ed4:	e7e3      	b.n	8007e9e <__multiply+0x42>
 8007ed6:	f8b2 b000 	ldrh.w	fp, [r2]
 8007eda:	f1bb 0f00 	cmp.w	fp, #0
 8007ede:	d023      	beq.n	8007f28 <__multiply+0xcc>
 8007ee0:	4689      	mov	r9, r1
 8007ee2:	46ac      	mov	ip, r5
 8007ee4:	f04f 0800 	mov.w	r8, #0
 8007ee8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007eec:	f8dc a000 	ldr.w	sl, [ip]
 8007ef0:	b2a3      	uxth	r3, r4
 8007ef2:	fa1f fa8a 	uxth.w	sl, sl
 8007ef6:	fb0b a303 	mla	r3, fp, r3, sl
 8007efa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007efe:	f8dc 4000 	ldr.w	r4, [ip]
 8007f02:	4443      	add	r3, r8
 8007f04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007f08:	fb0b 840a 	mla	r4, fp, sl, r8
 8007f0c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007f10:	46e2      	mov	sl, ip
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007f18:	454f      	cmp	r7, r9
 8007f1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007f1e:	f84a 3b04 	str.w	r3, [sl], #4
 8007f22:	d82b      	bhi.n	8007f7c <__multiply+0x120>
 8007f24:	f8cc 8004 	str.w	r8, [ip, #4]
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007f2e:	3204      	adds	r2, #4
 8007f30:	f1ba 0f00 	cmp.w	sl, #0
 8007f34:	d020      	beq.n	8007f78 <__multiply+0x11c>
 8007f36:	682b      	ldr	r3, [r5, #0]
 8007f38:	4689      	mov	r9, r1
 8007f3a:	46a8      	mov	r8, r5
 8007f3c:	f04f 0b00 	mov.w	fp, #0
 8007f40:	f8b9 c000 	ldrh.w	ip, [r9]
 8007f44:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007f48:	fb0a 440c 	mla	r4, sl, ip, r4
 8007f4c:	445c      	add	r4, fp
 8007f4e:	46c4      	mov	ip, r8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007f56:	f84c 3b04 	str.w	r3, [ip], #4
 8007f5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f5e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	fb0a b303 	mla	r3, sl, r3, fp
 8007f68:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007f6c:	454f      	cmp	r7, r9
 8007f6e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007f72:	d805      	bhi.n	8007f80 <__multiply+0x124>
 8007f74:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f78:	3504      	adds	r5, #4
 8007f7a:	e79b      	b.n	8007eb4 <__multiply+0x58>
 8007f7c:	46d4      	mov	ip, sl
 8007f7e:	e7b3      	b.n	8007ee8 <__multiply+0x8c>
 8007f80:	46e0      	mov	r8, ip
 8007f82:	e7dd      	b.n	8007f40 <__multiply+0xe4>
 8007f84:	3e01      	subs	r6, #1
 8007f86:	e799      	b.n	8007ebc <__multiply+0x60>

08007f88 <__pow5mult>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4615      	mov	r5, r2
 8007f8e:	f012 0203 	ands.w	r2, r2, #3
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	d007      	beq.n	8007fa8 <__pow5mult+0x20>
 8007f98:	3a01      	subs	r2, #1
 8007f9a:	4c21      	ldr	r4, [pc, #132]	; (8008020 <__pow5mult+0x98>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fa2:	f7ff fec9 	bl	8007d38 <__multadd>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	10ad      	asrs	r5, r5, #2
 8007faa:	d035      	beq.n	8008018 <__pow5mult+0x90>
 8007fac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fae:	b93c      	cbnz	r4, 8007fc0 <__pow5mult+0x38>
 8007fb0:	2010      	movs	r0, #16
 8007fb2:	f7ff fe63 	bl	8007c7c <malloc>
 8007fb6:	6270      	str	r0, [r6, #36]	; 0x24
 8007fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fbc:	6004      	str	r4, [r0, #0]
 8007fbe:	60c4      	str	r4, [r0, #12]
 8007fc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fc8:	b94c      	cbnz	r4, 8007fde <__pow5mult+0x56>
 8007fca:	f240 2171 	movw	r1, #625	; 0x271
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ff3b 	bl	8007e4a <__i2b>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fda:	4604      	mov	r4, r0
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	07eb      	lsls	r3, r5, #31
 8007fe4:	d50a      	bpl.n	8007ffc <__pow5mult+0x74>
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4622      	mov	r2, r4
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ff36 	bl	8007e5c <__multiply>
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff fe88 	bl	8007d0a <_Bfree>
 8007ffa:	464f      	mov	r7, r9
 8007ffc:	106d      	asrs	r5, r5, #1
 8007ffe:	d00b      	beq.n	8008018 <__pow5mult+0x90>
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	b938      	cbnz	r0, 8008014 <__pow5mult+0x8c>
 8008004:	4622      	mov	r2, r4
 8008006:	4621      	mov	r1, r4
 8008008:	4630      	mov	r0, r6
 800800a:	f7ff ff27 	bl	8007e5c <__multiply>
 800800e:	6020      	str	r0, [r4, #0]
 8008010:	f8c0 8000 	str.w	r8, [r0]
 8008014:	4604      	mov	r4, r0
 8008016:	e7e4      	b.n	8007fe2 <__pow5mult+0x5a>
 8008018:	4638      	mov	r0, r7
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	bf00      	nop
 8008020:	08008a40 	.word	0x08008a40

08008024 <__lshift>:
 8008024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	460c      	mov	r4, r1
 800802a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	6849      	ldr	r1, [r1, #4]
 8008032:	eb0a 0903 	add.w	r9, sl, r3
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	4607      	mov	r7, r0
 800803a:	4616      	mov	r6, r2
 800803c:	f109 0501 	add.w	r5, r9, #1
 8008040:	42ab      	cmp	r3, r5
 8008042:	db32      	blt.n	80080aa <__lshift+0x86>
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff fe2c 	bl	8007ca2 <_Balloc>
 800804a:	2300      	movs	r3, #0
 800804c:	4680      	mov	r8, r0
 800804e:	f100 0114 	add.w	r1, r0, #20
 8008052:	461a      	mov	r2, r3
 8008054:	4553      	cmp	r3, sl
 8008056:	db2b      	blt.n	80080b0 <__lshift+0x8c>
 8008058:	6920      	ldr	r0, [r4, #16]
 800805a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800805e:	f104 0314 	add.w	r3, r4, #20
 8008062:	f016 021f 	ands.w	r2, r6, #31
 8008066:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800806a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800806e:	d025      	beq.n	80080bc <__lshift+0x98>
 8008070:	f1c2 0e20 	rsb	lr, r2, #32
 8008074:	2000      	movs	r0, #0
 8008076:	681e      	ldr	r6, [r3, #0]
 8008078:	468a      	mov	sl, r1
 800807a:	4096      	lsls	r6, r2
 800807c:	4330      	orrs	r0, r6
 800807e:	f84a 0b04 	str.w	r0, [sl], #4
 8008082:	f853 0b04 	ldr.w	r0, [r3], #4
 8008086:	459c      	cmp	ip, r3
 8008088:	fa20 f00e 	lsr.w	r0, r0, lr
 800808c:	d814      	bhi.n	80080b8 <__lshift+0x94>
 800808e:	6048      	str	r0, [r1, #4]
 8008090:	b108      	cbz	r0, 8008096 <__lshift+0x72>
 8008092:	f109 0502 	add.w	r5, r9, #2
 8008096:	3d01      	subs	r5, #1
 8008098:	4638      	mov	r0, r7
 800809a:	f8c8 5010 	str.w	r5, [r8, #16]
 800809e:	4621      	mov	r1, r4
 80080a0:	f7ff fe33 	bl	8007d0a <_Bfree>
 80080a4:	4640      	mov	r0, r8
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	3101      	adds	r1, #1
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	e7c7      	b.n	8008040 <__lshift+0x1c>
 80080b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80080b4:	3301      	adds	r3, #1
 80080b6:	e7cd      	b.n	8008054 <__lshift+0x30>
 80080b8:	4651      	mov	r1, sl
 80080ba:	e7dc      	b.n	8008076 <__lshift+0x52>
 80080bc:	3904      	subs	r1, #4
 80080be:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80080c6:	459c      	cmp	ip, r3
 80080c8:	d8f9      	bhi.n	80080be <__lshift+0x9a>
 80080ca:	e7e4      	b.n	8008096 <__lshift+0x72>

080080cc <__mcmp>:
 80080cc:	6903      	ldr	r3, [r0, #16]
 80080ce:	690a      	ldr	r2, [r1, #16]
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	b530      	push	{r4, r5, lr}
 80080d4:	d10c      	bne.n	80080f0 <__mcmp+0x24>
 80080d6:	0092      	lsls	r2, r2, #2
 80080d8:	3014      	adds	r0, #20
 80080da:	3114      	adds	r1, #20
 80080dc:	1884      	adds	r4, r0, r2
 80080de:	4411      	add	r1, r2
 80080e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080e8:	4295      	cmp	r5, r2
 80080ea:	d003      	beq.n	80080f4 <__mcmp+0x28>
 80080ec:	d305      	bcc.n	80080fa <__mcmp+0x2e>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4618      	mov	r0, r3
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	42a0      	cmp	r0, r4
 80080f6:	d3f3      	bcc.n	80080e0 <__mcmp+0x14>
 80080f8:	e7fa      	b.n	80080f0 <__mcmp+0x24>
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080fe:	e7f7      	b.n	80080f0 <__mcmp+0x24>

08008100 <__mdiff>:
 8008100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	460d      	mov	r5, r1
 8008106:	4607      	mov	r7, r0
 8008108:	4611      	mov	r1, r2
 800810a:	4628      	mov	r0, r5
 800810c:	4614      	mov	r4, r2
 800810e:	f7ff ffdd 	bl	80080cc <__mcmp>
 8008112:	1e06      	subs	r6, r0, #0
 8008114:	d108      	bne.n	8008128 <__mdiff+0x28>
 8008116:	4631      	mov	r1, r6
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff fdc2 	bl	8007ca2 <_Balloc>
 800811e:	2301      	movs	r3, #1
 8008120:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008128:	bfa4      	itt	ge
 800812a:	4623      	movge	r3, r4
 800812c:	462c      	movge	r4, r5
 800812e:	4638      	mov	r0, r7
 8008130:	6861      	ldr	r1, [r4, #4]
 8008132:	bfa6      	itte	ge
 8008134:	461d      	movge	r5, r3
 8008136:	2600      	movge	r6, #0
 8008138:	2601      	movlt	r6, #1
 800813a:	f7ff fdb2 	bl	8007ca2 <_Balloc>
 800813e:	692b      	ldr	r3, [r5, #16]
 8008140:	60c6      	str	r6, [r0, #12]
 8008142:	6926      	ldr	r6, [r4, #16]
 8008144:	f105 0914 	add.w	r9, r5, #20
 8008148:	f104 0214 	add.w	r2, r4, #20
 800814c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008150:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008154:	f100 0514 	add.w	r5, r0, #20
 8008158:	f04f 0e00 	mov.w	lr, #0
 800815c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008160:	f859 4b04 	ldr.w	r4, [r9], #4
 8008164:	fa1e f18a 	uxtah	r1, lr, sl
 8008168:	b2a3      	uxth	r3, r4
 800816a:	1ac9      	subs	r1, r1, r3
 800816c:	0c23      	lsrs	r3, r4, #16
 800816e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008172:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008176:	b289      	uxth	r1, r1
 8008178:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800817c:	45c8      	cmp	r8, r9
 800817e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008182:	4694      	mov	ip, r2
 8008184:	f845 3b04 	str.w	r3, [r5], #4
 8008188:	d8e8      	bhi.n	800815c <__mdiff+0x5c>
 800818a:	45bc      	cmp	ip, r7
 800818c:	d304      	bcc.n	8008198 <__mdiff+0x98>
 800818e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008192:	b183      	cbz	r3, 80081b6 <__mdiff+0xb6>
 8008194:	6106      	str	r6, [r0, #16]
 8008196:	e7c5      	b.n	8008124 <__mdiff+0x24>
 8008198:	f85c 1b04 	ldr.w	r1, [ip], #4
 800819c:	fa1e f381 	uxtah	r3, lr, r1
 80081a0:	141a      	asrs	r2, r3, #16
 80081a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80081b0:	f845 3b04 	str.w	r3, [r5], #4
 80081b4:	e7e9      	b.n	800818a <__mdiff+0x8a>
 80081b6:	3e01      	subs	r6, #1
 80081b8:	e7e9      	b.n	800818e <__mdiff+0x8e>

080081ba <__d2b>:
 80081ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081be:	460e      	mov	r6, r1
 80081c0:	2101      	movs	r1, #1
 80081c2:	ec59 8b10 	vmov	r8, r9, d0
 80081c6:	4615      	mov	r5, r2
 80081c8:	f7ff fd6b 	bl	8007ca2 <_Balloc>
 80081cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80081d0:	4607      	mov	r7, r0
 80081d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081d6:	bb34      	cbnz	r4, 8008226 <__d2b+0x6c>
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	f1b8 0300 	subs.w	r3, r8, #0
 80081de:	d027      	beq.n	8008230 <__d2b+0x76>
 80081e0:	a802      	add	r0, sp, #8
 80081e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80081e6:	f7ff fe01 	bl	8007dec <__lo0bits>
 80081ea:	9900      	ldr	r1, [sp, #0]
 80081ec:	b1f0      	cbz	r0, 800822c <__d2b+0x72>
 80081ee:	9a01      	ldr	r2, [sp, #4]
 80081f0:	f1c0 0320 	rsb	r3, r0, #32
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	430b      	orrs	r3, r1
 80081fa:	40c2      	lsrs	r2, r0
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	9201      	str	r2, [sp, #4]
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2102      	movne	r1, #2
 800820a:	2101      	moveq	r1, #1
 800820c:	6139      	str	r1, [r7, #16]
 800820e:	b1c4      	cbz	r4, 8008242 <__d2b+0x88>
 8008210:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008214:	4404      	add	r4, r0
 8008216:	6034      	str	r4, [r6, #0]
 8008218:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800821c:	6028      	str	r0, [r5, #0]
 800821e:	4638      	mov	r0, r7
 8008220:	b003      	add	sp, #12
 8008222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800822a:	e7d5      	b.n	80081d8 <__d2b+0x1e>
 800822c:	6179      	str	r1, [r7, #20]
 800822e:	e7e7      	b.n	8008200 <__d2b+0x46>
 8008230:	a801      	add	r0, sp, #4
 8008232:	f7ff fddb 	bl	8007dec <__lo0bits>
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	2101      	movs	r1, #1
 800823c:	6139      	str	r1, [r7, #16]
 800823e:	3020      	adds	r0, #32
 8008240:	e7e5      	b.n	800820e <__d2b+0x54>
 8008242:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008246:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800824a:	6030      	str	r0, [r6, #0]
 800824c:	6918      	ldr	r0, [r3, #16]
 800824e:	f7ff fdae 	bl	8007dae <__hi0bits>
 8008252:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008256:	e7e1      	b.n	800821c <__d2b+0x62>

08008258 <_calloc_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	fb02 f401 	mul.w	r4, r2, r1
 800825e:	4621      	mov	r1, r4
 8008260:	f000 f808 	bl	8008274 <_malloc_r>
 8008264:	4605      	mov	r5, r0
 8008266:	b118      	cbz	r0, 8008270 <_calloc_r+0x18>
 8008268:	4622      	mov	r2, r4
 800826a:	2100      	movs	r1, #0
 800826c:	f7fe fb60 	bl	8006930 <memset>
 8008270:	4628      	mov	r0, r5
 8008272:	bd38      	pop	{r3, r4, r5, pc}

08008274 <_malloc_r>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	1ccd      	adds	r5, r1, #3
 8008278:	f025 0503 	bic.w	r5, r5, #3
 800827c:	3508      	adds	r5, #8
 800827e:	2d0c      	cmp	r5, #12
 8008280:	bf38      	it	cc
 8008282:	250c      	movcc	r5, #12
 8008284:	2d00      	cmp	r5, #0
 8008286:	4606      	mov	r6, r0
 8008288:	db01      	blt.n	800828e <_malloc_r+0x1a>
 800828a:	42a9      	cmp	r1, r5
 800828c:	d903      	bls.n	8008296 <_malloc_r+0x22>
 800828e:	230c      	movs	r3, #12
 8008290:	6033      	str	r3, [r6, #0]
 8008292:	2000      	movs	r0, #0
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	f000 f869 	bl	800836c <__malloc_lock>
 800829a:	4a21      	ldr	r2, [pc, #132]	; (8008320 <_malloc_r+0xac>)
 800829c:	6814      	ldr	r4, [r2, #0]
 800829e:	4621      	mov	r1, r4
 80082a0:	b991      	cbnz	r1, 80082c8 <_malloc_r+0x54>
 80082a2:	4c20      	ldr	r4, [pc, #128]	; (8008324 <_malloc_r+0xb0>)
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	b91b      	cbnz	r3, 80082b0 <_malloc_r+0x3c>
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 f83d 	bl	8008328 <_sbrk_r>
 80082ae:	6020      	str	r0, [r4, #0]
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f000 f838 	bl	8008328 <_sbrk_r>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d124      	bne.n	8008306 <_malloc_r+0x92>
 80082bc:	230c      	movs	r3, #12
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f854 	bl	800836e <__malloc_unlock>
 80082c6:	e7e4      	b.n	8008292 <_malloc_r+0x1e>
 80082c8:	680b      	ldr	r3, [r1, #0]
 80082ca:	1b5b      	subs	r3, r3, r5
 80082cc:	d418      	bmi.n	8008300 <_malloc_r+0x8c>
 80082ce:	2b0b      	cmp	r3, #11
 80082d0:	d90f      	bls.n	80082f2 <_malloc_r+0x7e>
 80082d2:	600b      	str	r3, [r1, #0]
 80082d4:	50cd      	str	r5, [r1, r3]
 80082d6:	18cc      	adds	r4, r1, r3
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 f848 	bl	800836e <__malloc_unlock>
 80082de:	f104 000b 	add.w	r0, r4, #11
 80082e2:	1d23      	adds	r3, r4, #4
 80082e4:	f020 0007 	bic.w	r0, r0, #7
 80082e8:	1ac3      	subs	r3, r0, r3
 80082ea:	d0d3      	beq.n	8008294 <_malloc_r+0x20>
 80082ec:	425a      	negs	r2, r3
 80082ee:	50e2      	str	r2, [r4, r3]
 80082f0:	e7d0      	b.n	8008294 <_malloc_r+0x20>
 80082f2:	428c      	cmp	r4, r1
 80082f4:	684b      	ldr	r3, [r1, #4]
 80082f6:	bf16      	itet	ne
 80082f8:	6063      	strne	r3, [r4, #4]
 80082fa:	6013      	streq	r3, [r2, #0]
 80082fc:	460c      	movne	r4, r1
 80082fe:	e7eb      	b.n	80082d8 <_malloc_r+0x64>
 8008300:	460c      	mov	r4, r1
 8008302:	6849      	ldr	r1, [r1, #4]
 8008304:	e7cc      	b.n	80082a0 <_malloc_r+0x2c>
 8008306:	1cc4      	adds	r4, r0, #3
 8008308:	f024 0403 	bic.w	r4, r4, #3
 800830c:	42a0      	cmp	r0, r4
 800830e:	d005      	beq.n	800831c <_malloc_r+0xa8>
 8008310:	1a21      	subs	r1, r4, r0
 8008312:	4630      	mov	r0, r6
 8008314:	f000 f808 	bl	8008328 <_sbrk_r>
 8008318:	3001      	adds	r0, #1
 800831a:	d0cf      	beq.n	80082bc <_malloc_r+0x48>
 800831c:	6025      	str	r5, [r4, #0]
 800831e:	e7db      	b.n	80082d8 <_malloc_r+0x64>
 8008320:	200001fc 	.word	0x200001fc
 8008324:	20000200 	.word	0x20000200

08008328 <_sbrk_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4c06      	ldr	r4, [pc, #24]	; (8008344 <_sbrk_r+0x1c>)
 800832c:	2300      	movs	r3, #0
 800832e:	4605      	mov	r5, r0
 8008330:	4608      	mov	r0, r1
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	f7f9 f8da 	bl	80014ec <_sbrk>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_sbrk_r+0x1a>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	b103      	cbz	r3, 8008342 <_sbrk_r+0x1a>
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200005c4 	.word	0x200005c4

08008348 <__ascii_mbtowc>:
 8008348:	b082      	sub	sp, #8
 800834a:	b901      	cbnz	r1, 800834e <__ascii_mbtowc+0x6>
 800834c:	a901      	add	r1, sp, #4
 800834e:	b142      	cbz	r2, 8008362 <__ascii_mbtowc+0x1a>
 8008350:	b14b      	cbz	r3, 8008366 <__ascii_mbtowc+0x1e>
 8008352:	7813      	ldrb	r3, [r2, #0]
 8008354:	600b      	str	r3, [r1, #0]
 8008356:	7812      	ldrb	r2, [r2, #0]
 8008358:	1c10      	adds	r0, r2, #0
 800835a:	bf18      	it	ne
 800835c:	2001      	movne	r0, #1
 800835e:	b002      	add	sp, #8
 8008360:	4770      	bx	lr
 8008362:	4610      	mov	r0, r2
 8008364:	e7fb      	b.n	800835e <__ascii_mbtowc+0x16>
 8008366:	f06f 0001 	mvn.w	r0, #1
 800836a:	e7f8      	b.n	800835e <__ascii_mbtowc+0x16>

0800836c <__malloc_lock>:
 800836c:	4770      	bx	lr

0800836e <__malloc_unlock>:
 800836e:	4770      	bx	lr

08008370 <__ascii_wctomb>:
 8008370:	b149      	cbz	r1, 8008386 <__ascii_wctomb+0x16>
 8008372:	2aff      	cmp	r2, #255	; 0xff
 8008374:	bf85      	ittet	hi
 8008376:	238a      	movhi	r3, #138	; 0x8a
 8008378:	6003      	strhi	r3, [r0, #0]
 800837a:	700a      	strbls	r2, [r1, #0]
 800837c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008380:	bf98      	it	ls
 8008382:	2001      	movls	r0, #1
 8008384:	4770      	bx	lr
 8008386:	4608      	mov	r0, r1
 8008388:	4770      	bx	lr
	...

0800838c <roundf>:
 800838c:	ee10 0a10 	vmov	r0, s0
 8008390:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008394:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8008398:	2a16      	cmp	r2, #22
 800839a:	dc15      	bgt.n	80083c8 <roundf+0x3c>
 800839c:	2a00      	cmp	r2, #0
 800839e:	da08      	bge.n	80083b2 <roundf+0x26>
 80083a0:	3201      	adds	r2, #1
 80083a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80083a6:	d101      	bne.n	80083ac <roundf+0x20>
 80083a8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80083ac:	ee00 3a10 	vmov	s0, r3
 80083b0:	4770      	bx	lr
 80083b2:	4908      	ldr	r1, [pc, #32]	; (80083d4 <roundf+0x48>)
 80083b4:	4111      	asrs	r1, r2
 80083b6:	4208      	tst	r0, r1
 80083b8:	d0fa      	beq.n	80083b0 <roundf+0x24>
 80083ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80083be:	4113      	asrs	r3, r2
 80083c0:	4403      	add	r3, r0
 80083c2:	ea23 0301 	bic.w	r3, r3, r1
 80083c6:	e7f1      	b.n	80083ac <roundf+0x20>
 80083c8:	2a80      	cmp	r2, #128	; 0x80
 80083ca:	d1f1      	bne.n	80083b0 <roundf+0x24>
 80083cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	007fffff 	.word	0x007fffff

080083d8 <atan2>:
 80083d8:	f000 b802 	b.w	80083e0 <__ieee754_atan2>
 80083dc:	0000      	movs	r0, r0
	...

080083e0 <__ieee754_atan2>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	ec57 6b11 	vmov	r6, r7, d1
 80083e8:	4273      	negs	r3, r6
 80083ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80083ee:	4333      	orrs	r3, r6
 80083f0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008598 <__ieee754_atan2+0x1b8>
 80083f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80083f8:	4573      	cmp	r3, lr
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	ee11 8a10 	vmov	r8, s2
 8008402:	d80a      	bhi.n	800841a <__ieee754_atan2+0x3a>
 8008404:	4244      	negs	r4, r0
 8008406:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800840a:	4304      	orrs	r4, r0
 800840c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008410:	4574      	cmp	r4, lr
 8008412:	468c      	mov	ip, r1
 8008414:	ee10 9a10 	vmov	r9, s0
 8008418:	d907      	bls.n	800842a <__ieee754_atan2+0x4a>
 800841a:	4632      	mov	r2, r6
 800841c:	463b      	mov	r3, r7
 800841e:	f7f7 fee9 	bl	80001f4 <__adddf3>
 8008422:	ec41 0b10 	vmov	d0, r0, r1
 8008426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800842e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008432:	4334      	orrs	r4, r6
 8008434:	d103      	bne.n	800843e <__ieee754_atan2+0x5e>
 8008436:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800843a:	f000 b8b1 	b.w	80085a0 <atan>
 800843e:	17bc      	asrs	r4, r7, #30
 8008440:	f004 0402 	and.w	r4, r4, #2
 8008444:	ea53 0909 	orrs.w	r9, r3, r9
 8008448:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800844c:	d107      	bne.n	800845e <__ieee754_atan2+0x7e>
 800844e:	2c02      	cmp	r4, #2
 8008450:	d073      	beq.n	800853a <__ieee754_atan2+0x15a>
 8008452:	2c03      	cmp	r4, #3
 8008454:	d1e5      	bne.n	8008422 <__ieee754_atan2+0x42>
 8008456:	a13e      	add	r1, pc, #248	; (adr r1, 8008550 <__ieee754_atan2+0x170>)
 8008458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845c:	e7e1      	b.n	8008422 <__ieee754_atan2+0x42>
 800845e:	ea52 0808 	orrs.w	r8, r2, r8
 8008462:	d106      	bne.n	8008472 <__ieee754_atan2+0x92>
 8008464:	f1bc 0f00 	cmp.w	ip, #0
 8008468:	da6b      	bge.n	8008542 <__ieee754_atan2+0x162>
 800846a:	a13b      	add	r1, pc, #236	; (adr r1, 8008558 <__ieee754_atan2+0x178>)
 800846c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008470:	e7d7      	b.n	8008422 <__ieee754_atan2+0x42>
 8008472:	4572      	cmp	r2, lr
 8008474:	d120      	bne.n	80084b8 <__ieee754_atan2+0xd8>
 8008476:	4293      	cmp	r3, r2
 8008478:	d111      	bne.n	800849e <__ieee754_atan2+0xbe>
 800847a:	2c02      	cmp	r4, #2
 800847c:	d007      	beq.n	800848e <__ieee754_atan2+0xae>
 800847e:	2c03      	cmp	r4, #3
 8008480:	d009      	beq.n	8008496 <__ieee754_atan2+0xb6>
 8008482:	2c01      	cmp	r4, #1
 8008484:	d155      	bne.n	8008532 <__ieee754_atan2+0x152>
 8008486:	a136      	add	r1, pc, #216	; (adr r1, 8008560 <__ieee754_atan2+0x180>)
 8008488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800848c:	e7c9      	b.n	8008422 <__ieee754_atan2+0x42>
 800848e:	a136      	add	r1, pc, #216	; (adr r1, 8008568 <__ieee754_atan2+0x188>)
 8008490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008494:	e7c5      	b.n	8008422 <__ieee754_atan2+0x42>
 8008496:	a136      	add	r1, pc, #216	; (adr r1, 8008570 <__ieee754_atan2+0x190>)
 8008498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849c:	e7c1      	b.n	8008422 <__ieee754_atan2+0x42>
 800849e:	2c02      	cmp	r4, #2
 80084a0:	d04b      	beq.n	800853a <__ieee754_atan2+0x15a>
 80084a2:	2c03      	cmp	r4, #3
 80084a4:	d0d7      	beq.n	8008456 <__ieee754_atan2+0x76>
 80084a6:	2c01      	cmp	r4, #1
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	d102      	bne.n	80084b4 <__ieee754_atan2+0xd4>
 80084ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80084b2:	e7b6      	b.n	8008422 <__ieee754_atan2+0x42>
 80084b4:	2100      	movs	r1, #0
 80084b6:	e7b4      	b.n	8008422 <__ieee754_atan2+0x42>
 80084b8:	4573      	cmp	r3, lr
 80084ba:	d0d3      	beq.n	8008464 <__ieee754_atan2+0x84>
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	151b      	asrs	r3, r3, #20
 80084c0:	2b3c      	cmp	r3, #60	; 0x3c
 80084c2:	dc1e      	bgt.n	8008502 <__ieee754_atan2+0x122>
 80084c4:	2f00      	cmp	r7, #0
 80084c6:	da01      	bge.n	80084cc <__ieee754_atan2+0xec>
 80084c8:	333c      	adds	r3, #60	; 0x3c
 80084ca:	db1e      	blt.n	800850a <__ieee754_atan2+0x12a>
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	f7f8 f970 	bl	80007b4 <__aeabi_ddiv>
 80084d4:	ec41 0b10 	vmov	d0, r0, r1
 80084d8:	f000 fa02 	bl	80088e0 <fabs>
 80084dc:	f000 f860 	bl	80085a0 <atan>
 80084e0:	ec51 0b10 	vmov	r0, r1, d0
 80084e4:	2c01      	cmp	r4, #1
 80084e6:	d013      	beq.n	8008510 <__ieee754_atan2+0x130>
 80084e8:	2c02      	cmp	r4, #2
 80084ea:	d015      	beq.n	8008518 <__ieee754_atan2+0x138>
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	d098      	beq.n	8008422 <__ieee754_atan2+0x42>
 80084f0:	a321      	add	r3, pc, #132	; (adr r3, 8008578 <__ieee754_atan2+0x198>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fe7b 	bl	80001f0 <__aeabi_dsub>
 80084fa:	a321      	add	r3, pc, #132	; (adr r3, 8008580 <__ieee754_atan2+0x1a0>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	e014      	b.n	800852c <__ieee754_atan2+0x14c>
 8008502:	a121      	add	r1, pc, #132	; (adr r1, 8008588 <__ieee754_atan2+0x1a8>)
 8008504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008508:	e7ec      	b.n	80084e4 <__ieee754_atan2+0x104>
 800850a:	2000      	movs	r0, #0
 800850c:	2100      	movs	r1, #0
 800850e:	e7e9      	b.n	80084e4 <__ieee754_atan2+0x104>
 8008510:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008514:	4619      	mov	r1, r3
 8008516:	e784      	b.n	8008422 <__ieee754_atan2+0x42>
 8008518:	a317      	add	r3, pc, #92	; (adr r3, 8008578 <__ieee754_atan2+0x198>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f7 fe67 	bl	80001f0 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	a116      	add	r1, pc, #88	; (adr r1, 8008580 <__ieee754_atan2+0x1a0>)
 8008528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800852c:	f7f7 fe60 	bl	80001f0 <__aeabi_dsub>
 8008530:	e777      	b.n	8008422 <__ieee754_atan2+0x42>
 8008532:	a117      	add	r1, pc, #92	; (adr r1, 8008590 <__ieee754_atan2+0x1b0>)
 8008534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008538:	e773      	b.n	8008422 <__ieee754_atan2+0x42>
 800853a:	a111      	add	r1, pc, #68	; (adr r1, 8008580 <__ieee754_atan2+0x1a0>)
 800853c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008540:	e76f      	b.n	8008422 <__ieee754_atan2+0x42>
 8008542:	a111      	add	r1, pc, #68	; (adr r1, 8008588 <__ieee754_atan2+0x1a8>)
 8008544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008548:	e76b      	b.n	8008422 <__ieee754_atan2+0x42>
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w
 8008550:	54442d18 	.word	0x54442d18
 8008554:	c00921fb 	.word	0xc00921fb
 8008558:	54442d18 	.word	0x54442d18
 800855c:	bff921fb 	.word	0xbff921fb
 8008560:	54442d18 	.word	0x54442d18
 8008564:	bfe921fb 	.word	0xbfe921fb
 8008568:	7f3321d2 	.word	0x7f3321d2
 800856c:	4002d97c 	.word	0x4002d97c
 8008570:	7f3321d2 	.word	0x7f3321d2
 8008574:	c002d97c 	.word	0xc002d97c
 8008578:	33145c07 	.word	0x33145c07
 800857c:	3ca1a626 	.word	0x3ca1a626
 8008580:	54442d18 	.word	0x54442d18
 8008584:	400921fb 	.word	0x400921fb
 8008588:	54442d18 	.word	0x54442d18
 800858c:	3ff921fb 	.word	0x3ff921fb
 8008590:	54442d18 	.word	0x54442d18
 8008594:	3fe921fb 	.word	0x3fe921fb
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	00000000 	.word	0x00000000

080085a0 <atan>:
 80085a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	ec55 4b10 	vmov	r4, r5, d0
 80085a8:	4bc3      	ldr	r3, [pc, #780]	; (80088b8 <atan+0x318>)
 80085aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80085ae:	429e      	cmp	r6, r3
 80085b0:	46ab      	mov	fp, r5
 80085b2:	dd18      	ble.n	80085e6 <atan+0x46>
 80085b4:	4bc1      	ldr	r3, [pc, #772]	; (80088bc <atan+0x31c>)
 80085b6:	429e      	cmp	r6, r3
 80085b8:	dc01      	bgt.n	80085be <atan+0x1e>
 80085ba:	d109      	bne.n	80085d0 <atan+0x30>
 80085bc:	b144      	cbz	r4, 80085d0 <atan+0x30>
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	4620      	mov	r0, r4
 80085c4:	4629      	mov	r1, r5
 80085c6:	f7f7 fe15 	bl	80001f4 <__adddf3>
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
 80085ce:	e006      	b.n	80085de <atan+0x3e>
 80085d0:	f1bb 0f00 	cmp.w	fp, #0
 80085d4:	f340 8131 	ble.w	800883a <atan+0x29a>
 80085d8:	a59b      	add	r5, pc, #620	; (adr r5, 8008848 <atan+0x2a8>)
 80085da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085de:	ec45 4b10 	vmov	d0, r4, r5
 80085e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	4bb6      	ldr	r3, [pc, #728]	; (80088c0 <atan+0x320>)
 80085e8:	429e      	cmp	r6, r3
 80085ea:	dc14      	bgt.n	8008616 <atan+0x76>
 80085ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80085f0:	429e      	cmp	r6, r3
 80085f2:	dc0d      	bgt.n	8008610 <atan+0x70>
 80085f4:	a396      	add	r3, pc, #600	; (adr r3, 8008850 <atan+0x2b0>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	ee10 0a10 	vmov	r0, s0
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f7 fdf8 	bl	80001f4 <__adddf3>
 8008604:	2200      	movs	r2, #0
 8008606:	4baf      	ldr	r3, [pc, #700]	; (80088c4 <atan+0x324>)
 8008608:	f7f8 fa3a 	bl	8000a80 <__aeabi_dcmpgt>
 800860c:	2800      	cmp	r0, #0
 800860e:	d1e6      	bne.n	80085de <atan+0x3e>
 8008610:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008614:	e02b      	b.n	800866e <atan+0xce>
 8008616:	f000 f963 	bl	80088e0 <fabs>
 800861a:	4bab      	ldr	r3, [pc, #684]	; (80088c8 <atan+0x328>)
 800861c:	429e      	cmp	r6, r3
 800861e:	ec55 4b10 	vmov	r4, r5, d0
 8008622:	f300 80bf 	bgt.w	80087a4 <atan+0x204>
 8008626:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800862a:	429e      	cmp	r6, r3
 800862c:	f300 80a0 	bgt.w	8008770 <atan+0x1d0>
 8008630:	ee10 2a10 	vmov	r2, s0
 8008634:	ee10 0a10 	vmov	r0, s0
 8008638:	462b      	mov	r3, r5
 800863a:	4629      	mov	r1, r5
 800863c:	f7f7 fdda 	bl	80001f4 <__adddf3>
 8008640:	2200      	movs	r2, #0
 8008642:	4ba0      	ldr	r3, [pc, #640]	; (80088c4 <atan+0x324>)
 8008644:	f7f7 fdd4 	bl	80001f0 <__aeabi_dsub>
 8008648:	2200      	movs	r2, #0
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008652:	4620      	mov	r0, r4
 8008654:	4629      	mov	r1, r5
 8008656:	f7f7 fdcd 	bl	80001f4 <__adddf3>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4630      	mov	r0, r6
 8008660:	4639      	mov	r1, r7
 8008662:	f7f8 f8a7 	bl	80007b4 <__aeabi_ddiv>
 8008666:	f04f 0a00 	mov.w	sl, #0
 800866a:	4604      	mov	r4, r0
 800866c:	460d      	mov	r5, r1
 800866e:	4622      	mov	r2, r4
 8008670:	462b      	mov	r3, r5
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 ff73 	bl	8000560 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4680      	mov	r8, r0
 8008680:	4689      	mov	r9, r1
 8008682:	f7f7 ff6d 	bl	8000560 <__aeabi_dmul>
 8008686:	a374      	add	r3, pc, #464	; (adr r3, 8008858 <atan+0x2b8>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	f7f7 ff66 	bl	8000560 <__aeabi_dmul>
 8008694:	a372      	add	r3, pc, #456	; (adr r3, 8008860 <atan+0x2c0>)
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f7f7 fdab 	bl	80001f4 <__adddf3>
 800869e:	4632      	mov	r2, r6
 80086a0:	463b      	mov	r3, r7
 80086a2:	f7f7 ff5d 	bl	8000560 <__aeabi_dmul>
 80086a6:	a370      	add	r3, pc, #448	; (adr r3, 8008868 <atan+0x2c8>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f7f7 fda2 	bl	80001f4 <__adddf3>
 80086b0:	4632      	mov	r2, r6
 80086b2:	463b      	mov	r3, r7
 80086b4:	f7f7 ff54 	bl	8000560 <__aeabi_dmul>
 80086b8:	a36d      	add	r3, pc, #436	; (adr r3, 8008870 <atan+0x2d0>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f7f7 fd99 	bl	80001f4 <__adddf3>
 80086c2:	4632      	mov	r2, r6
 80086c4:	463b      	mov	r3, r7
 80086c6:	f7f7 ff4b 	bl	8000560 <__aeabi_dmul>
 80086ca:	a36b      	add	r3, pc, #428	; (adr r3, 8008878 <atan+0x2d8>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f7f7 fd90 	bl	80001f4 <__adddf3>
 80086d4:	4632      	mov	r2, r6
 80086d6:	463b      	mov	r3, r7
 80086d8:	f7f7 ff42 	bl	8000560 <__aeabi_dmul>
 80086dc:	a368      	add	r3, pc, #416	; (adr r3, 8008880 <atan+0x2e0>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fd87 	bl	80001f4 <__adddf3>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	f7f7 ff39 	bl	8000560 <__aeabi_dmul>
 80086ee:	a366      	add	r3, pc, #408	; (adr r3, 8008888 <atan+0x2e8>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f7 ff30 	bl	8000560 <__aeabi_dmul>
 8008700:	a363      	add	r3, pc, #396	; (adr r3, 8008890 <atan+0x2f0>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f7f7 fd73 	bl	80001f0 <__aeabi_dsub>
 800870a:	4632      	mov	r2, r6
 800870c:	463b      	mov	r3, r7
 800870e:	f7f7 ff27 	bl	8000560 <__aeabi_dmul>
 8008712:	a361      	add	r3, pc, #388	; (adr r3, 8008898 <atan+0x2f8>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 fd6a 	bl	80001f0 <__aeabi_dsub>
 800871c:	4632      	mov	r2, r6
 800871e:	463b      	mov	r3, r7
 8008720:	f7f7 ff1e 	bl	8000560 <__aeabi_dmul>
 8008724:	a35e      	add	r3, pc, #376	; (adr r3, 80088a0 <atan+0x300>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f7 fd61 	bl	80001f0 <__aeabi_dsub>
 800872e:	4632      	mov	r2, r6
 8008730:	463b      	mov	r3, r7
 8008732:	f7f7 ff15 	bl	8000560 <__aeabi_dmul>
 8008736:	a35c      	add	r3, pc, #368	; (adr r3, 80088a8 <atan+0x308>)
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	f7f7 fd58 	bl	80001f0 <__aeabi_dsub>
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	f7f7 ff0c 	bl	8000560 <__aeabi_dmul>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f7 fd50 	bl	80001f4 <__adddf3>
 8008754:	4622      	mov	r2, r4
 8008756:	462b      	mov	r3, r5
 8008758:	f7f7 ff02 	bl	8000560 <__aeabi_dmul>
 800875c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	d14b      	bne.n	80087fe <atan+0x25e>
 8008766:	4620      	mov	r0, r4
 8008768:	4629      	mov	r1, r5
 800876a:	f7f7 fd41 	bl	80001f0 <__aeabi_dsub>
 800876e:	e72c      	b.n	80085ca <atan+0x2a>
 8008770:	ee10 0a10 	vmov	r0, s0
 8008774:	2200      	movs	r2, #0
 8008776:	4b53      	ldr	r3, [pc, #332]	; (80088c4 <atan+0x324>)
 8008778:	4629      	mov	r1, r5
 800877a:	f7f7 fd39 	bl	80001f0 <__aeabi_dsub>
 800877e:	2200      	movs	r2, #0
 8008780:	4606      	mov	r6, r0
 8008782:	460f      	mov	r7, r1
 8008784:	4b4f      	ldr	r3, [pc, #316]	; (80088c4 <atan+0x324>)
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f7 fd33 	bl	80001f4 <__adddf3>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4630      	mov	r0, r6
 8008794:	4639      	mov	r1, r7
 8008796:	f7f8 f80d 	bl	80007b4 <__aeabi_ddiv>
 800879a:	f04f 0a01 	mov.w	sl, #1
 800879e:	4604      	mov	r4, r0
 80087a0:	460d      	mov	r5, r1
 80087a2:	e764      	b.n	800866e <atan+0xce>
 80087a4:	4b49      	ldr	r3, [pc, #292]	; (80088cc <atan+0x32c>)
 80087a6:	429e      	cmp	r6, r3
 80087a8:	dc1d      	bgt.n	80087e6 <atan+0x246>
 80087aa:	ee10 0a10 	vmov	r0, s0
 80087ae:	2200      	movs	r2, #0
 80087b0:	4b47      	ldr	r3, [pc, #284]	; (80088d0 <atan+0x330>)
 80087b2:	4629      	mov	r1, r5
 80087b4:	f7f7 fd1c 	bl	80001f0 <__aeabi_dsub>
 80087b8:	2200      	movs	r2, #0
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	4b44      	ldr	r3, [pc, #272]	; (80088d0 <atan+0x330>)
 80087c0:	4620      	mov	r0, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	f7f7 fecc 	bl	8000560 <__aeabi_dmul>
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b3e      	ldr	r3, [pc, #248]	; (80088c4 <atan+0x324>)
 80087cc:	f7f7 fd12 	bl	80001f4 <__adddf3>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	f7f7 ffec 	bl	80007b4 <__aeabi_ddiv>
 80087dc:	f04f 0a02 	mov.w	sl, #2
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	e743      	b.n	800866e <atan+0xce>
 80087e6:	462b      	mov	r3, r5
 80087e8:	ee10 2a10 	vmov	r2, s0
 80087ec:	2000      	movs	r0, #0
 80087ee:	4939      	ldr	r1, [pc, #228]	; (80088d4 <atan+0x334>)
 80087f0:	f7f7 ffe0 	bl	80007b4 <__aeabi_ddiv>
 80087f4:	f04f 0a03 	mov.w	sl, #3
 80087f8:	4604      	mov	r4, r0
 80087fa:	460d      	mov	r5, r1
 80087fc:	e737      	b.n	800866e <atan+0xce>
 80087fe:	4b36      	ldr	r3, [pc, #216]	; (80088d8 <atan+0x338>)
 8008800:	4e36      	ldr	r6, [pc, #216]	; (80088dc <atan+0x33c>)
 8008802:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008806:	4456      	add	r6, sl
 8008808:	449a      	add	sl, r3
 800880a:	e9da 2300 	ldrd	r2, r3, [sl]
 800880e:	f7f7 fcef 	bl	80001f0 <__aeabi_dsub>
 8008812:	4622      	mov	r2, r4
 8008814:	462b      	mov	r3, r5
 8008816:	f7f7 fceb 	bl	80001f0 <__aeabi_dsub>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008822:	f7f7 fce5 	bl	80001f0 <__aeabi_dsub>
 8008826:	f1bb 0f00 	cmp.w	fp, #0
 800882a:	4604      	mov	r4, r0
 800882c:	460d      	mov	r5, r1
 800882e:	f6bf aed6 	bge.w	80085de <atan+0x3e>
 8008832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008836:	461d      	mov	r5, r3
 8008838:	e6d1      	b.n	80085de <atan+0x3e>
 800883a:	a51d      	add	r5, pc, #116	; (adr r5, 80088b0 <atan+0x310>)
 800883c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008840:	e6cd      	b.n	80085de <atan+0x3e>
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	54442d18 	.word	0x54442d18
 800884c:	3ff921fb 	.word	0x3ff921fb
 8008850:	8800759c 	.word	0x8800759c
 8008854:	7e37e43c 	.word	0x7e37e43c
 8008858:	e322da11 	.word	0xe322da11
 800885c:	3f90ad3a 	.word	0x3f90ad3a
 8008860:	24760deb 	.word	0x24760deb
 8008864:	3fa97b4b 	.word	0x3fa97b4b
 8008868:	a0d03d51 	.word	0xa0d03d51
 800886c:	3fb10d66 	.word	0x3fb10d66
 8008870:	c54c206e 	.word	0xc54c206e
 8008874:	3fb745cd 	.word	0x3fb745cd
 8008878:	920083ff 	.word	0x920083ff
 800887c:	3fc24924 	.word	0x3fc24924
 8008880:	5555550d 	.word	0x5555550d
 8008884:	3fd55555 	.word	0x3fd55555
 8008888:	2c6a6c2f 	.word	0x2c6a6c2f
 800888c:	bfa2b444 	.word	0xbfa2b444
 8008890:	52defd9a 	.word	0x52defd9a
 8008894:	3fadde2d 	.word	0x3fadde2d
 8008898:	af749a6d 	.word	0xaf749a6d
 800889c:	3fb3b0f2 	.word	0x3fb3b0f2
 80088a0:	fe231671 	.word	0xfe231671
 80088a4:	3fbc71c6 	.word	0x3fbc71c6
 80088a8:	9998ebc4 	.word	0x9998ebc4
 80088ac:	3fc99999 	.word	0x3fc99999
 80088b0:	54442d18 	.word	0x54442d18
 80088b4:	bff921fb 	.word	0xbff921fb
 80088b8:	440fffff 	.word	0x440fffff
 80088bc:	7ff00000 	.word	0x7ff00000
 80088c0:	3fdbffff 	.word	0x3fdbffff
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	3ff2ffff 	.word	0x3ff2ffff
 80088cc:	40037fff 	.word	0x40037fff
 80088d0:	3ff80000 	.word	0x3ff80000
 80088d4:	bff00000 	.word	0xbff00000
 80088d8:	08008b78 	.word	0x08008b78
 80088dc:	08008b58 	.word	0x08008b58

080088e0 <fabs>:
 80088e0:	ec51 0b10 	vmov	r0, r1, d0
 80088e4:	ee10 2a10 	vmov	r2, s0
 80088e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088ec:	ec43 2b10 	vmov	d0, r2, r3
 80088f0:	4770      	bx	lr
	...

080088f4 <_init>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	bf00      	nop
 80088f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fa:	bc08      	pop	{r3}
 80088fc:	469e      	mov	lr, r3
 80088fe:	4770      	bx	lr

08008900 <_fini>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr
