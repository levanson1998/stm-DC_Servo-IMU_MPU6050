
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f74  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008110  08008110  00018110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008358  08008358  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008360  08008360  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001fc  08008564  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  08008564  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013123  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b7  00000000  00000000  0003334f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb0  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00036cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000187f2  00000000  00000000  00037b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcc2  00000000  00000000  0005031a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009341c  00000000  00000000  0005dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f13f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b0  00000000  00000000  000f1474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001fc 	.word	0x200001fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080f4 	.word	0x080080f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000200 	.word	0x20000200
 80001d4:	080080f4 	.word	0x080080f4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_DMA_Init+0x4c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <MX_DMA_Init+0x4c>)
 8000e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <MX_DMA_Init+0x4c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	200b      	movs	r0, #11
 8000e38:	f001 fb6f 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e3c:	200b      	movs	r0, #11
 8000e3e:	f001 fb88 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2010      	movs	r0, #16
 8000e48:	f001 fb67 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e4c:	2010      	movs	r0, #16
 8000e4e:	f001 fb80 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a41      	ldr	r2, [pc, #260]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_GPIO_Init+0x140>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2104      	movs	r1, #4
 8000f22:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_GPIO_Init+0x144>)
 8000f24:	f002 f842 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000f2e:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <MX_GPIO_Init+0x148>)
 8000f30:	f002 f83c 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f3a:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_GPIO_Init+0x148>)
 8000f3c:	f002 f836 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f40:	2304      	movs	r3, #4
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_GPIO_Init+0x144>)
 8000f58:	f001 fea6 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LPWM_R_Pin|RPWM_R_Pin|LPWM_L_Pin|RPWM_L_Pin;
 8000f5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_GPIO_Init+0x148>)
 8000f76:	f001 fe97 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 8000f7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_GPIO_Init+0x148>)
 8000f94:	f001 fe88 	bl	8002ca8 <HAL_GPIO_Init>

}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <MX_I2C1_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_I2C1_Init+0x58>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fea:	f002 f813 	bl	8003014 <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 f998 	bl	8001328 <Error_Handler>
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000224 	.word	0x20000224
 8001000:	40005400 	.word	0x40005400
 8001004:	00061a80 	.word	0x00061a80

08001008 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a31      	ldr	r2, [pc, #196]	; (80010ec <HAL_I2C_MspInit+0xe4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d15c      	bne.n	80010e4 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_I2C_MspInit+0xe8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_I2C_MspInit+0xe8>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_I2C_MspInit+0xe8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IUM_SCL_Pin|IMU_SDA_Pin;
 8001046:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4824      	ldr	r0, [pc, #144]	; (80010f4 <HAL_I2C_MspInit+0xec>)
 8001064:	f001 fe20 	bl	8002ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_I2C_MspInit+0xe8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_I2C_MspInit+0xe8>)
 8001072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_I2C_MspInit+0xe8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_I2C_MspInit+0xf4>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 800108c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001090:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010ca:	f001 fa5d 	bl	8002588 <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80010d4:	f000 f928 	bl	8001328 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_I2C_MspInit+0xf0>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005400 	.word	0x40005400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	20000278 	.word	0x20000278
 80010fc:	40026010 	.word	0x40026010

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f001 f89a 	bl	800223c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f83e 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110c:	f7ff fea8 	bl	8000e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001110:	f7ff fe7e 	bl	8000e10 <MX_DMA_Init>
  MX_TIM1_Init();
 8001114:	f000 f9e8 	bl	80014e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001118:	f000 fa92 	bl	8001640 <MX_TIM2_Init>
  MX_TIM4_Init();
 800111c:	f000 fae4 	bl	80016e8 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001120:	f000 fb84 	bl	800182c <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8001124:	f000 fcf4 	bl	8001b10 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001128:	f000 fb32 	bl	8001790 <MX_TIM5_Init>
  MX_I2C1_Init();
 800112c:	f7ff ff3e 	bl	8000fac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001130:	2100      	movs	r1, #0
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <main+0x6c>)
 8001134:	f003 fc08 	bl	8004948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001138:	2104      	movs	r1, #4
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <main+0x6c>)
 800113c:	f003 fc04 	bl	8004948 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <main+0x70>)
 8001142:	f003 fba8 	bl	8004896 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <main+0x74>)
 8001148:	f003 fba5 	bl	8004896 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800114c:	213c      	movs	r1, #60	; 0x3c
 800114e:	480a      	ldr	r0, [pc, #40]	; (8001178 <main+0x78>)
 8001150:	f003 fcbe 	bl	8004ad0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001154:	213c      	movs	r1, #60	; 0x3c
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <main+0x7c>)
 8001158:	f003 fcba 	bl	8004ad0 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 7);
 800115c:	2207      	movs	r2, #7
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <main+0x80>)
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <main+0x84>)
 8001162:	f004 fb89 	bl	8005878 <HAL_UART_Receive_DMA>

  MPU6050_INIT();
 8001166:	f000 fda9 	bl	8001cbc <MPU6050_INIT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116a:	e7fe      	b.n	800116a <main+0x6a>
 800116c:	2000046c 	.word	0x2000046c
 8001170:	200004ac 	.word	0x200004ac
 8001174:	2000042c 	.word	0x2000042c
 8001178:	200003ec 	.word	0x200003ec
 800117c:	200004ec 	.word	0x200004ec
 8001180:	2000034c 	.word	0x2000034c
 8001184:	2000058c 	.word	0x2000058c

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fa80 	bl	800669c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemClock_Config+0xd0>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011f8:	2308      	movs	r3, #8
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001202:	2304      	movs	r3, #4
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001206:	2304      	movs	r3, #4
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f002 feb4 	bl	8003f7c <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800121a:	f000 f885 	bl	8001328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2102      	movs	r1, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f003 f90d 	bl	800445c <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001248:	f000 f86e 	bl	8001328 <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3750      	adds	r7, #80	; 0x50
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d149      	bne.n	8001304 <HAL_TIM_PeriodElapsedCallback+0xa8>

		float *duty_cycles;

		Get_Velocity();
 8001270:	f000 fe34 	bl	8001edc <Get_Velocity>
		testt[0]=enc[0];
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	b21b      	sxth	r3, r3
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001284:	edc3 7a00 	vstr	s15, [r3]
		testt[1]=enc[1];
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800128a:	885b      	ldrh	r3, [r3, #2]
 800128c:	b21b      	sxth	r3, r3
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001298:	edc3 7a01 	vstr	s15, [r3, #4]

		_motor_dir = 3;
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800129e:	2203      	movs	r2, #3
 80012a0:	601a      	str	r2, [r3, #0]
		_velo[0] = 400;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012a6:	601a      	str	r2, [r3, #0]
		_velo[1] = 400;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012ac:	605a      	str	r2, [r3, #4]

		duty_cycles = PID_Calculate(_velo, _motor_dir, enc);
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80012b4:	4619      	mov	r1, r3
 80012b6:	4819      	ldr	r0, [pc, #100]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012b8:	f000 fe38 	bl	8001f2c <PID_Calculate>
 80012bc:	60f8      	str	r0, [r7, #12]
		Control_Motor(*(duty_cycles), *(duty_cycles+1), *(duty_cycles+2));
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 3a90 	vmov	r3, s15
 80012cc:	b218      	sxth	r0, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3304      	adds	r3, #4
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	b219      	sxth	r1, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ec:	edc7 7a00 	vstr	s15, [r7]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f000 fd8f 	bl	8001e18 <Control_Motor>

//		Control_Motor(*(duty_cycles), *(duty_cycles+1), *(duty_cycles+2));


/*		volatile float *data_Receive;*/
		HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 80012fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001300:	f001 fe6d 	bl	8002fde <HAL_GPIO_TogglePin>
/*
		if(v_target[0] >= 19.0f) vt=-0.5f;
		else if (v_target[0] <= 2.0) vt = 0.5f;
*/
	}
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000042c 	.word	0x2000042c
 8001310:	20000354 	.word	0x20000354
 8001314:	200002e0 	.word	0x200002e0
 8001318:	200003a8 	.word	0x200003a8
 800131c:	20000330 	.word	0x20000330
 8001320:	43c80000 	.word	0x43c80000
 8001324:	40020c00 	.word	0x40020c00

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 ff80 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <DMA1_Stream0_IRQHandler+0x10>)
 80013ea:	f001 f9f5 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000278 	.word	0x20000278

080013f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA1_Stream5_IRQHandler+0x10>)
 80013fe:	f001 f9eb 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000052c 	.word	0x2000052c

0800140c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001412:	f003 fb94 	bl	8004b3e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001418:	f003 fb91 	bl	8004b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000046c 	.word	0x2000046c
 8001424:	200004ac 	.word	0x200004ac

08001428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <USART2_IRQHandler+0x10>)
 800142e:	f004 faa3 	bl	8005978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000058c 	.word	0x2000058c

0800143c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM5_IRQHandler+0x10>)
 8001442:	f003 fb7c 	bl	8004b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000042c 	.word	0x2000042c

08001450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <_sbrk+0x5c>)
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <_sbrk+0x60>)
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <_sbrk+0x64>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <_sbrk+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	d207      	bcs.n	8001490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001480:	f005 f8e2 	bl	8006648 <__errno>
 8001484:	4602      	mov	r2, r0
 8001486:	230c      	movs	r3, #12
 8001488:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148e:	e009      	b.n	80014a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <_sbrk+0x64>)
 80014a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20020000 	.word	0x20020000
 80014b0:	00000400 	.word	0x00000400
 80014b4:	20000218 	.word	0x20000218
 80014b8:	200005d8 	.word	0x200005d8

080014bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <SystemInit+0x28>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <SystemInit+0x28>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SystemInit+0x28>)
 80014d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d6:	609a      	str	r2, [r3, #8]
#endif
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	; 0x58
 80014ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f005 f8bb 	bl	800669c <memset>

  htim1.Instance = TIM1;
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <MX_TIM1_Init+0x150>)
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <MX_TIM1_Init+0x154>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <MX_TIM1_Init+0x150>)
 800152e:	2207      	movs	r2, #7
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_TIM1_Init+0x150>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 599;
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MX_TIM1_Init+0x150>)
 800153a:	f240 2257 	movw	r2, #599	; 0x257
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <MX_TIM1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_TIM1_Init+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_TIM1_Init+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001552:	4839      	ldr	r0, [pc, #228]	; (8001638 <MX_TIM1_Init+0x150>)
 8001554:	f003 f974 	bl	8004840 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155e:	f7ff fee3 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156c:	4619      	mov	r1, r3
 800156e:	4832      	ldr	r0, [pc, #200]	; (8001638 <MX_TIM1_Init+0x150>)
 8001570:	f003 fcb4 	bl	8004edc <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157a:	f7ff fed5 	bl	8001328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157e:	482e      	ldr	r0, [pc, #184]	; (8001638 <MX_TIM1_Init+0x150>)
 8001580:	f003 f9ad 	bl	80048de <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158a:	f7ff fecd 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159a:	4619      	mov	r1, r3
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_TIM1_Init+0x150>)
 800159e:	f004 f849 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f7ff febe 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <MX_TIM1_Init+0x150>)
 80015d2:	f003 fbbd 	bl	8004d50 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f7ff fea4 	bl	8001328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_TIM1_Init+0x150>)
 80015ea:	f003 fbb1 	bl	8004d50 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015f4:	f7ff fe98 	bl	8001328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM1_Init+0x150>)
 800161c:	f004 f878 	bl	8005710 <HAL_TIMEx_ConfigBreakDeadTime>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001626:	f7ff fe7f 	bl	8001328 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM1_Init+0x150>)
 800162c:	f000 fa36 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3758      	adds	r7, #88	; 0x58
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000046c 	.word	0x2000046c
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2224      	movs	r2, #36	; 0x24
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f005 f824 	bl	800669c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_TIM2_Init+0xa4>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_TIM2_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_TIM2_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_TIM2_Init+0xa4>)
 8001672:	f241 7270 	movw	r2, #6000	; 0x1770
 8001676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_TIM2_Init+0xa4>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_TIM2_Init+0xa4>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001684:	2303      	movs	r3, #3
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_TIM2_Init+0xa4>)
 80016b0:	f003 f97c 	bl	80049ac <HAL_TIM_Encoder_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ba:	f7ff fe35 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_TIM2_Init+0xa4>)
 80016cc:	f003 ffb2 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016d6:	f7ff fe27 	bl	8001328 <Error_Handler>
  }

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200004ec 	.word	0x200004ec

080016e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 ffd0 	bl	800669c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_TIM4_Init+0xa4>)
 8001708:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_TIM4_Init+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001718:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800171c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800172a:	2303      	movs	r3, #3
 800172c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001756:	f003 f929 	bl	80049ac <HAL_TIM_Encoder_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001760:	f7ff fde2 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001772:	f003 ff5f 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800177c:	f7ff fdd4 	bl	8001328 <Error_Handler>
  }

}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200003ec 	.word	0x200003ec
 800178c:	40000800 	.word	0x40000800

08001790 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	463b      	mov	r3, r7
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM5_Init+0x94>)
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <MX_TIM5_Init+0x98>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_TIM5_Init+0x94>)
 80017b4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80017b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM5_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM5_Init+0x94>)
 80017c2:	2231      	movs	r2, #49	; 0x31
 80017c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_TIM5_Init+0x94>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM5_Init+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_TIM5_Init+0x94>)
 80017d4:	f003 f834 	bl	8004840 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80017de:	f7ff fda3 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM5_Init+0x94>)
 80017f0:	f003 fb74 	bl	8004edc <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f7ff fd95 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_TIM5_Init+0x94>)
 800180c:	f003 ff12 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001816:	f7ff fd87 	bl	8001328 <Error_Handler>
  }

}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000042c 	.word	0x2000042c
 8001828:	40000c00 	.word	0x40000c00

0800182c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	463b      	mov	r3, r7
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_TIM9_Init+0x6c>)
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <MX_TIM9_Init+0x70>)
 8001842:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_TIM9_Init+0x6c>)
 8001846:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800184a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_TIM9_Init+0x6c>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_TIM9_Init+0x6c>)
 8001854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001858:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_TIM9_Init+0x6c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <MX_TIM9_Init+0x6c>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001866:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_TIM9_Init+0x6c>)
 8001868:	f002 ffea 	bl	8004840 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001872:	f7ff fd59 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_TIM9_Init+0x6c>)
 8001882:	f003 fb2b 	bl	8004edc <HAL_TIM_ConfigClockSource>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800188c:	f7ff fd4c 	bl	8001328 <Error_Handler>
  }

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200004ac 	.word	0x200004ac
 800189c:	40014000 	.word	0x40014000

080018a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d116      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a28      	ldr	r2, [pc, #160]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2018      	movs	r0, #24
 80018d4:	f000 fe21 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018d8:	2018      	movs	r0, #24
 80018da:	f000 fe3a 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80018de:	e036      	b.n	800194e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_TIM_Base_MspInit+0xc0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d116      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2032      	movs	r0, #50	; 0x32
 800190c:	f000 fe05 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001910:	2032      	movs	r0, #50	; 0x32
 8001912:	f000 fe1e 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001916:	e01a      	b.n	800194e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_TIM_Base_MspInit+0xc4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d115      	bne.n	800194e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2018      	movs	r0, #24
 8001944:	f000 fde9 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001948:	2018      	movs	r0, #24
 800194a:	f000 fe02 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40023800 	.word	0x40023800
 8001960:	40000c00 	.word	0x40000c00
 8001964:	40014000 	.word	0x40014000

08001968 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001988:	d14a      	bne.n	8001a20 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a3e      	ldr	r2, [pc, #248]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b3c      	ldr	r3, [pc, #240]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a37      	ldr	r2, [pc, #220]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 80019de:	2320      	movs	r3, #32
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ee:	2301      	movs	r3, #1
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4825      	ldr	r0, [pc, #148]	; (8001a90 <HAL_TIM_Encoder_MspInit+0x128>)
 80019fa:	f001 f955 	bl	8002ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 80019fe:	2308      	movs	r3, #8
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	481e      	ldr	r0, [pc, #120]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001a1a:	f001 f945 	bl	8002ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a1e:	e030      	b.n	8001a82 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x130>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d12b      	bne.n	8001a82 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a72:	2302      	movs	r3, #2
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001a7e:	f001 f913 	bl	8002ca8 <HAL_GPIO_Init>
}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40000800 	.word	0x40000800

08001a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11e      	bne.n	8001afc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8001ada:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_TIM_MspPostInit+0x70>)
 8001af8:	f001 f8d6 	bl	8002ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021000 	.word	0x40021000

08001b10 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <MX_USART2_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_USART2_UART_Init+0x4c>)
 8001b48:	f003 fe48 	bl	80057dc <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b52:	f7ff fbe9 	bl	8001328 <Error_Handler>
  }

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000058c 	.word	0x2000058c
 8001b60:	40004400 	.word	0x40004400

08001b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <HAL_UART_MspInit+0xf0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d162      	bne.n	8001c4c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4820      	ldr	r0, [pc, #128]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bda:	f001 f865 	bl	8002ca8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001be0:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001be2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c20:	480f      	ldr	r0, [pc, #60]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c22:	f000 fcb1 	bl	8002588 <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c2c:	f7ff fb7c 	bl	8001328 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2026      	movs	r0, #38	; 0x26
 8001c42:	f000 fc6a 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c46:	2026      	movs	r0, #38	; 0x26
 8001c48:	f000 fc83 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	2000052c 	.word	0x2000052c
 8001c64:	40026088 	.word	0x40026088

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c6e:	e003      	b.n	8001c78 <LoopCopyDataInit>

08001c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c76:	3104      	adds	r1, #4

08001c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c80:	d3f6      	bcc.n	8001c70 <CopyDataInit>
  ldr  r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c84:	e002      	b.n	8001c8c <LoopFillZerobss>

08001c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c88:	f842 3b04 	str.w	r3, [r2], #4

08001c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c90:	d3f9      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c92:	f7ff fc13 	bl	80014bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f004 fcdd 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7ff fa31 	bl	8001100 <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ca4:	08008368 	.word	0x08008368
  ldr  r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cac:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8001cb0:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8001cb4:	200005d4 	.word	0x200005d4

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>
	...

08001cbc <MPU6050_INIT>:
#include "IMU_MPU6050.h"
#include "i2c.h"
#include "gpio.h"


void MPU6050_INIT(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af04      	add	r7, sp, #16

		// reset mpu6050
	TxBuffer[0] = 0x80;
 8001cc2:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	226b      	movs	r2, #107	; 0x6b
 8001cda:	21d0      	movs	r1, #208	; 0xd0
 8001cdc:	484b      	ldr	r0, [pc, #300]	; (8001e0c <MPU6050_INIT+0x150>)
 8001cde:	f001 fad1 	bl	8003284 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001ce2:	20c8      	movs	r0, #200	; 0xc8
 8001ce4:	f000 fb1c 	bl	8002320 <HAL_Delay>

	// tat sleep mode, tat cycle mode, temp_dis = 8MHZ
	TxBuffer[0] = 0x00;
 8001ce8:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	226b      	movs	r2, #107	; 0x6b
 8001d00:	21d0      	movs	r1, #208	; 0xd0
 8001d02:	4842      	ldr	r0, [pc, #264]	; (8001e0c <MPU6050_INIT+0x150>)
 8001d04:	f001 fabe 	bl	8003284 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001d08:	20c8      	movs	r0, #200	; 0xc8
 8001d0a:	f000 fb09 	bl	8002320 <HAL_Delay>

	// disabled DLPF
	TxBuffer[0] = 0x06;
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d10:	2206      	movs	r2, #6
 8001d12:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_CONFIG, 1, TxBuffer, 1, 1000);
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2301      	movs	r3, #1
 8001d24:	221a      	movs	r2, #26
 8001d26:	21d0      	movs	r1, #208	; 0xd0
 8001d28:	4838      	ldr	r0, [pc, #224]	; (8001e0c <MPU6050_INIT+0x150>)
 8001d2a:	f001 faab 	bl	8003284 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001d2e:	20c8      	movs	r0, #200	; 0xc8
 8001d30:	f000 faf6 	bl	8002320 <HAL_Delay>

	// full scale range mode 3 +-2000do/s
	TxBuffer[0] = 0x18;
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d36:	2218      	movs	r2, #24
 8001d38:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, TxBuffer, 1, 1000);
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	221b      	movs	r2, #27
 8001d4c:	21d0      	movs	r1, #208	; 0xd0
 8001d4e:	482f      	ldr	r0, [pc, #188]	; (8001e0c <MPU6050_INIT+0x150>)
 8001d50:	f001 fa98 	bl	8003284 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001d54:	20c8      	movs	r0, #200	; 0xc8
 8001d56:	f000 fae3 	bl	8002320 <HAL_Delay>

	// full scale range mode 1 +-8g
	TxBuffer[0] = 0x10;
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, TxBuffer, 1, 1000);
 8001d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2301      	movs	r3, #1
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	221c      	movs	r2, #28
 8001d72:	21d0      	movs	r1, #208	; 0xd0
 8001d74:	4825      	ldr	r0, [pc, #148]	; (8001e0c <MPU6050_INIT+0x150>)
 8001d76:	f001 fa85 	bl	8003284 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001d7a:	20c8      	movs	r0, #200	; 0xc8
 8001d7c:	f000 fad0 	bl	8002320 <HAL_Delay>

	// cho phep ngat INT
	TxBuffer[0] = 0x19;
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d82:	2219      	movs	r2, #25
 8001d84:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_INT_ENABLE, 1, TxBuffer, 1, 1000);
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MPU6050_INIT+0x14c>)
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2301      	movs	r3, #1
 8001d96:	2238      	movs	r2, #56	; 0x38
 8001d98:	21d0      	movs	r1, #208	; 0xd0
 8001d9a:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MPU6050_INIT+0x150>)
 8001d9c:	f001 fa72 	bl	8003284 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001da0:	20c8      	movs	r0, #200	; 0xc8
 8001da2:	f000 fabd 	bl	8002320 <HAL_Delay>

	// test MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, RxBuffer, 1, 1000);
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2301      	movs	r3, #1
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MPU6050_INIT+0x154>)
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	2275      	movs	r2, #117	; 0x75
 8001db8:	21d0      	movs	r1, #208	; 0xd0
 8001dba:	4814      	ldr	r0, [pc, #80]	; (8001e0c <MPU6050_INIT+0x150>)
 8001dbc:	f001 fb5c 	bl	8003478 <HAL_I2C_Mem_Read>
	HAL_Delay(300);
 8001dc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dc4:	f000 faac 	bl	8002320 <HAL_Delay>
	if (RxBuffer[0] == 0x68)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MPU6050_INIT+0x154>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b68      	cmp	r3, #104	; 0x68
 8001dce:	d106      	bne.n	8001dde <MPU6050_INIT+0x122>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <MPU6050_INIT+0x158>)
 8001dd8:	f001 f8e8 	bl	8002fac <HAL_GPIO_WritePin>
		for(j=0;j<=11;j++){
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
			HAL_Delay(100);
		}
	}
}
 8001ddc:	e010      	b.n	8001e00 <MPU6050_INIT+0x144>
		for(j=0;j<=11;j++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	e00a      	b.n	8001dfa <MPU6050_INIT+0x13e>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8001de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <MPU6050_INIT+0x158>)
 8001dea:	f001 f8f8 	bl	8002fde <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001dee:	2064      	movs	r0, #100	; 0x64
 8001df0:	f000 fa96 	bl	8002320 <HAL_Delay>
		for(j=0;j<=11;j++){
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	3301      	adds	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b0b      	cmp	r3, #11
 8001dfe:	d9f1      	bls.n	8001de4 <MPU6050_INIT+0x128>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200003b4 	.word	0x200003b4
 8001e0c:	20000224 	.word	0x20000224
 8001e10:	200003ac 	.word	0x200003ac
 8001e14:	40020c00 	.word	0x40020c00

08001e18 <Control_Motor>:
 *		 x1: motor right
 *		 1: tien
 *		 0: lui
 *
*/
void Control_Motor(int16_t duty_r,int16_t duty_l, uint8_t dir_motor){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	80bb      	strh	r3, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	70fb      	strb	r3, [r7, #3]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_r);
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <Control_Motor+0xbc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
	if(dir_motor&2){
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d011      	beq.n	8001e62 <Control_Motor+0x4a>
		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8001e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e42:	4825      	ldr	r0, [pc, #148]	; (8001ed8 <Control_Motor+0xc0>)
 8001e44:	f001 f8cb 	bl	8002fde <HAL_GPIO_TogglePin>
//		tien
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e4e:	4822      	ldr	r0, [pc, #136]	; (8001ed8 <Control_Motor+0xc0>)
 8001e50:	f001 f8ac 	bl	8002fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5a:	481f      	ldr	r0, [pc, #124]	; (8001ed8 <Control_Motor+0xc0>)
 8001e5c:	f001 f8a6 	bl	8002fac <HAL_GPIO_WritePin>
 8001e60:	e00b      	b.n	8001e7a <Control_Motor+0x62>
	}
	else{
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_R_Pin, GPIO_PIN_SET);
 8001e62:	2201      	movs	r2, #1
 8001e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e68:	481b      	ldr	r0, [pc, #108]	; (8001ed8 <Control_Motor+0xc0>)
 8001e6a:	f001 f89f 	bl	8002fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_R_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <Control_Motor+0xc0>)
 8001e76:	f001 f899 	bl	8002fac <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_l);
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <Control_Motor+0xbc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
	if(dir_motor&1){
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d011      	beq.n	8001eb2 <Control_Motor+0x9a>
//		tien
		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 8001e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e92:	4811      	ldr	r0, [pc, #68]	; (8001ed8 <Control_Motor+0xc0>)
 8001e94:	f001 f8a3 	bl	8002fde <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e9e:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <Control_Motor+0xc0>)
 8001ea0:	f001 f884 	bl	8002fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eaa:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <Control_Motor+0xc0>)
 8001eac:	f001 f87e 	bl	8002fac <HAL_GPIO_WritePin>
//		lui
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_RESET);
	}

}
 8001eb0:	e00b      	b.n	8001eca <Control_Motor+0xb2>
		HAL_GPIO_WritePin(GPIOD, RPWM_L_Pin, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <Control_Motor+0xc0>)
 8001eba:	f001 f877 	bl	8002fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LPWM_L_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <Control_Motor+0xc0>)
 8001ec6:	f001 f871 	bl	8002fac <HAL_GPIO_WritePin>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000046c 	.word	0x2000046c
 8001ed8:	40020c00 	.word	0x40020c00

08001edc <Get_Velocity>:
 * GPIO: PB7 -> ENC-L1
 * 		 PB6 -> ENC-L2
 * 		 PA5 -> ENC-R1
 * 		 PB3 -> ENC-R2
*/
volatile int16_t * Get_Velocity(){
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
//	volatile float enc[2];
	enc[0]= (TIM2->CNT)-3000;
 8001ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <Get_Velocity+0x48>)
 8001ef2:	801a      	strh	r2, [r3, #0]
//	if ((TIM2->CNT)>=5000) enc[1]=-1;
//	else enc[1]=1;

	enc[1]= (TIM4->CNT)-3000;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <Get_Velocity+0x4c>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <Get_Velocity+0x48>)
 8001f04:	805a      	strh	r2, [r3, #2]
//	if ((TIM4->CNT)>5000) enc[3]=1;
//	else enc[3]=-1;

	TIM4->CNT=3000;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <Get_Velocity+0x4c>)
 8001f08:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=3000;
 8001f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000354 	.word	0x20000354
 8001f28:	40000800 	.word	0x40000800

08001f2c <PID_Calculate>:
 * PID_in is array 2 value (target L, target R)
 * PID_current is array 2 value (velo L, velo R)
 * return *PID_out is velo of 2 motors Left and Right

*/
float * PID_Calculate(float *PID_in, int PID_dir, volatile int16_t *PID_current){
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
//	float error, PID_P, PID_I, PID_D;
//	volatile float PID_out[2];

	if (!(PID_dir&0x01)){
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <PID_Calculate+0x26>
		*(PID_in+0)=*(PID_in+0)*(-1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	eef1 7a67 	vneg.f32	s15, s15
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (!(PID_dir&0x02)){
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <PID_Calculate+0x44>
		*(PID_in+1)=*(PID_in+1)*(-1);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3304      	adds	r3, #4
 8001f68:	eef1 7a67 	vneg.f32	s15, s15
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
	}

	int dir_= 0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
	for (int i=0;i<2; i++){
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e12a      	b.n	80021d0 <PID_Calculate+0x2a4>
		PID_Test[i] = *(PID_current+i);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8e:	4a9a      	ldr	r2, [pc, #616]	; (80021f8 <PID_Calculate+0x2cc>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	edc3 7a00 	vstr	s15, [r3]
		*(PID_in+i)*=updateVel;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80021fc <PID_Calculate+0x2d0>
 8001fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
		PID_Test[i]=*(PID_in+i);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	498c      	ldr	r1, [pc, #560]	; (80021f8 <PID_Calculate+0x2cc>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	601a      	str	r2, [r3, #0]
		error = *(PID_in+i)-*(PID_current+i)/**enc[i*2+1]*/;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff2:	4b83      	ldr	r3, [pc, #524]	; (8002200 <PID_Calculate+0x2d4>)
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
		PID_P[i] = (float)(PID_Kp[i]*(error-PID_pre_err[i]));
 8001ff8:	4a82      	ldr	r2, [pc, #520]	; (8002204 <PID_Calculate+0x2d8>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	4b7e      	ldr	r3, [pc, #504]	; (8002200 <PID_Calculate+0x2d4>)
 8002006:	edd3 6a00 	vldr	s13, [r3]
 800200a:	4a7f      	ldr	r2, [pc, #508]	; (8002208 <PID_Calculate+0x2dc>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	4a7b      	ldr	r2, [pc, #492]	; (800220c <PID_Calculate+0x2e0>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	edc3 7a00 	vstr	s15, [r3]
		PID_I[i] = (float)(0.5F*PID_Ki[i]*0.005f*(error+PID_pre_err[i]));
 800202a:	4a79      	ldr	r2, [pc, #484]	; (8002210 <PID_Calculate+0x2e4>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800203a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002214 <PID_Calculate+0x2e8>
 8002042:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002046:	4a70      	ldr	r2, [pc, #448]	; (8002208 <PID_Calculate+0x2dc>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	edd3 6a00 	vldr	s13, [r3]
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <PID_Calculate+0x2d4>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002060:	4a6d      	ldr	r2, [pc, #436]	; (8002218 <PID_Calculate+0x2ec>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	edc3 7a00 	vstr	s15, [r3]
		PID_D[i] = (float)(PID_Kd[i]*200.0f*(error-2.0f*PID_pre_err[i]+PID_ppre_err[i]));
 800206c:	4a6b      	ldr	r2, [pc, #428]	; (800221c <PID_Calculate+0x2f0>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002220 <PID_Calculate+0x2f4>
 800207c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <PID_Calculate+0x2d4>)
 8002082:	edd3 6a00 	vldr	s13, [r3]
 8002086:	4a60      	ldr	r2, [pc, #384]	; (8002208 <PID_Calculate+0x2dc>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002096:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800209a:	4a62      	ldr	r2, [pc, #392]	; (8002224 <PID_Calculate+0x2f8>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <PID_Calculate+0x2fc>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	edc3 7a00 	vstr	s15, [r3]

		PID_out[i] = (PID_P[i] + PID_I[i] + PID_D[i]) + PID_out[i];
 80020ba:	4a54      	ldr	r2, [pc, #336]	; (800220c <PID_Calculate+0x2e0>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	4a54      	ldr	r2, [pc, #336]	; (8002218 <PID_Calculate+0x2ec>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d6:	4a54      	ldr	r2, [pc, #336]	; (8002228 <PID_Calculate+0x2fc>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e6:	4a51      	ldr	r2, [pc, #324]	; (800222c <PID_Calculate+0x300>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f6:	4a4d      	ldr	r2, [pc, #308]	; (800222c <PID_Calculate+0x300>)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	edc3 7a00 	vstr	s15, [r3]

		if (PID_out[i]>PID_out_max){
 8002102:	4a4a      	ldr	r2, [pc, #296]	; (800222c <PID_Calculate+0x300>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b48      	ldr	r3, [pc, #288]	; (8002230 <PID_Calculate+0x304>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd07      	ble.n	800212e <PID_Calculate+0x202>
			PID_out[i]=PID_out_max;
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <PID_Calculate+0x304>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4942      	ldr	r1, [pc, #264]	; (800222c <PID_Calculate+0x300>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e014      	b.n	8002158 <PID_Calculate+0x22c>
		}
		else if (PID_out[i]<PID_out_min){
 800212e:	4a3f      	ldr	r2, [pc, #252]	; (800222c <PID_Calculate+0x300>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	ed93 7a00 	vldr	s14, [r3]
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <PID_Calculate+0x308>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d506      	bpl.n	8002158 <PID_Calculate+0x22c>
			PID_out[i]=PID_out_min;
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <PID_Calculate+0x308>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4937      	ldr	r1, [pc, #220]	; (800222c <PID_Calculate+0x300>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	601a      	str	r2, [r3, #0]
		}

		if (PID_out[i]>=0){
 8002158:	4a34      	ldr	r2, [pc, #208]	; (800222c <PID_Calculate+0x300>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	db04      	blt.n	8002178 <PID_Calculate+0x24c>
			dir_=dir_|(i+1);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3301      	adds	r3, #1
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
		}
		PID_out[i]=fabs(PID_out[i]);
 8002178:	4a2c      	ldr	r2, [pc, #176]	; (800222c <PID_Calculate+0x300>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eef0 7ae7 	vabs.f32	s15, s15
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <PID_Calculate+0x300>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	edc3 7a00 	vstr	s15, [r3]

		PID1[i] = PID_out[i];
 8002194:	4a25      	ldr	r2, [pc, #148]	; (800222c <PID_Calculate+0x300>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4926      	ldr	r1, [pc, #152]	; (8002238 <PID_Calculate+0x30c>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	601a      	str	r2, [r3, #0]
		PID_ppre_err[i]=PID_pre_err[i];
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <PID_Calculate+0x2dc>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	491c      	ldr	r1, [pc, #112]	; (8002224 <PID_Calculate+0x2f8>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	601a      	str	r2, [r3, #0]
		PID_pre_err[i]=error;
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <PID_Calculate+0x2d4>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4911      	ldr	r1, [pc, #68]	; (8002208 <PID_Calculate+0x2dc>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	601a      	str	r2, [r3, #0]
	for (int i=0;i<2; i++){
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3301      	adds	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	f77f aed1 	ble.w	8001f7a <PID_Calculate+0x4e>
	}
	PID_out[3]=(float)dir_;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <PID_Calculate+0x300>)
 80021e4:	edc3 7a03 	vstr	s15, [r3, #12]
	PID_out[0] = Aout;
	PID_out[1] = 0;
*/

//	PID_Test[5] += PID_out[0];
	return PID_out;
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <PID_Calculate+0x300>)
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000308 	.word	0x20000308
 80021fc:	42898000 	.word	0x42898000
 8002200:	200003c0 	.word	0x200003c0
 8002204:	20000000 	.word	0x20000000
 8002208:	200002d8 	.word	0x200002d8
 800220c:	200003cc 	.word	0x200003cc
 8002210:	20000008 	.word	0x20000008
 8002214:	3ba3d70a 	.word	0x3ba3d70a
 8002218:	2000035c 	.word	0x2000035c
 800221c:	20000010 	.word	0x20000010
 8002220:	43480000 	.word	0x43480000
 8002224:	200003b8 	.word	0x200003b8
 8002228:	200003e4 	.word	0x200003e4
 800222c:	20000364 	.word	0x20000364
 8002230:	2000001c 	.word	0x2000001c
 8002234:	20000020 	.word	0x20000020
 8002238:	200003c4 	.word	0x200003c4

0800223c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <HAL_Init+0x40>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_Init+0x40>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_Init+0x40>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 f94d 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	2000      	movs	r0, #0
 800226c:	f000 f808 	bl	8002280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f7ff f862 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x54>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x58>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f965 	bl	800256e <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00e      	b.n	80022cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d80a      	bhi.n	80022ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022bc:	f000 f92d 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_InitTick+0x5c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000018 	.word	0x20000018
 80022d8:	20000028 	.word	0x20000028
 80022dc:	20000024 	.word	0x20000024

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000028 	.word	0x20000028
 8002304:	200005cc 	.word	0x200005cc

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200005cc 	.word	0x200005cc

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_Delay+0x40>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffde 	bl	8002308 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000028 	.word	0x20000028

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff feb8 	bl	8002308 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e099      	b.n	80026d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c4:	e00f      	b.n	80025e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c6:	f7ff fe9f 	bl	8002308 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d908      	bls.n	80025e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e078      	b.n	80026d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e8      	bne.n	80025c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_DMA_Init+0x158>)
 8002600:	4013      	ands	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	2b04      	cmp	r3, #4
 800263e:	d107      	bne.n	8002650 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4313      	orrs	r3, r2
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0307 	bic.w	r3, r3, #7
 8002666:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b04      	cmp	r3, #4
 8002678:	d117      	bne.n	80026aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fa91 	bl	8002bb4 <DMA_CheckFifoParam>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2240      	movs	r2, #64	; 0x40
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026a6:	2301      	movs	r3, #1
 80026a8:	e016      	b.n	80026d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa48 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 80026b8:	4603      	mov	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	223f      	movs	r2, #63	; 0x3f
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	f010803f 	.word	0xf010803f

080026e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_DMA_Start_IT+0x26>
 8002706:	2302      	movs	r3, #2
 8002708:	e040      	b.n	800278c <HAL_DMA_Start_IT+0xa8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d12f      	bne.n	800277e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f9da 	bl	8002aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	223f      	movs	r2, #63	; 0x3f
 800273e:	409a      	lsls	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0216 	orr.w	r2, r2, #22
 8002752:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0208 	orr.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e005      	b.n	800278a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00c      	b.n	80027cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e4:	4b92      	ldr	r3, [pc, #584]	; (8002a30 <HAL_DMA_IRQHandler+0x258>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a92      	ldr	r2, [pc, #584]	; (8002a34 <HAL_DMA_IRQHandler+0x25c>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2208      	movs	r2, #8
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2201      	movs	r2, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	2204      	movs	r2, #4
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2204      	movs	r2, #4
 800289e:	409a      	lsls	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2210      	movs	r2, #16
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d043      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2210      	movs	r2, #16
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d024      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e01f      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e016      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0208 	bic.w	r2, r2, #8
 8002936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2220      	movs	r2, #32
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 808e 	beq.w	8002a76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8086 	beq.w	8002a76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	2220      	movs	r2, #32
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b05      	cmp	r3, #5
 8002980:	d136      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x1da>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	223f      	movs	r2, #63	; 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d07d      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
        }
        return;
 80029ee:	e078      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01c      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d108      	bne.n	8002a1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d030      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
 8002a1c:	e02b      	b.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d027      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
 8002a2e:	e022      	b.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
 8002a30:	20000018 	.word	0x20000018
 8002a34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0210 	bic.w	r2, r2, #16
 8002a54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d032      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d307      	bcc.n	8002abe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f2      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x2ca>
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002abe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ae2:	bf00      	nop
    }
  }
}
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d108      	bne.n	8002b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b2a:	e007      	b.n	8002b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d909      	bls.n	8002b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	; 0x58
 8002b88:	e007      	b.n	8002b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	aaaaaaab 	.word	0xaaaaaaab
 8002bb0:	08008128 	.word	0x08008128

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d855      	bhi.n	8002c80 <DMA_CheckFifoParam+0xcc>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c81 	.word	0x08002c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d045      	beq.n	8002c84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e042      	b.n	8002c84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c06:	d13f      	bne.n	8002c88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03c      	b.n	8002c88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d836      	bhi.n	8002c8c <DMA_CheckFifoParam+0xd8>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e02f      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e021      	b.n	8002c90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c54:	d11e      	bne.n	8002c94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01b      	b.n	8002c94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <DMA_CheckFifoParam+0xb4>
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d003      	beq.n	8002c6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c66:	e018      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e015      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7e:	e00b      	b.n	8002c98 <DMA_CheckFifoParam+0xe4>
      break;
 8002c80:	bf00      	nop
 8002c82:	e00a      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c84:	bf00      	nop
 8002c86:	e008      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e006      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e004      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c90:	bf00      	nop
 8002c92:	e002      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;   
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c98:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e159      	b.n	8002f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8148 	bne.w	8002f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d00b      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf6:	2b11      	cmp	r3, #17
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d130      	bne.n	8002d64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 0201 	and.w	r2, r3, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0xfc>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a2 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b56      	ldr	r3, [pc, #344]	; (8002f8c <HAL_GPIO_Init+0x2e4>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4a55      	ldr	r2, [pc, #340]	; (8002f8c <HAL_GPIO_Init+0x2e4>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_GPIO_Init+0x2e4>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a51      	ldr	r2, [pc, #324]	; (8002f90 <HAL_GPIO_Init+0x2e8>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <HAL_GPIO_Init+0x2ec>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d019      	beq.n	8002eaa <HAL_GPIO_Init+0x202>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a47      	ldr	r2, [pc, #284]	; (8002f98 <HAL_GPIO_Init+0x2f0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x1fe>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a46      	ldr	r2, [pc, #280]	; (8002f9c <HAL_GPIO_Init+0x2f4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x1fa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <HAL_GPIO_Init+0x2f8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x1f6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a44      	ldr	r2, [pc, #272]	; (8002fa4 <HAL_GPIO_Init+0x2fc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x1f2>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ebc:	4934      	ldr	r1, [pc, #208]	; (8002f90 <HAL_GPIO_Init+0x2e8>)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eee:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	f67f aea2 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	3724      	adds	r7, #36	; 0x24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d104      	bne.n	8003002 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003000:	e002      	b.n	8003008 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e11f      	b.n	8003266 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd ffe4 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003078:	f001 fbba 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 800307c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a7b      	ldr	r2, [pc, #492]	; (8003270 <HAL_I2C_Init+0x25c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d807      	bhi.n	8003098 <HAL_I2C_Init+0x84>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a7a      	ldr	r2, [pc, #488]	; (8003274 <HAL_I2C_Init+0x260>)
 800308c:	4293      	cmp	r3, r2
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e006      	b.n	80030a6 <HAL_I2C_Init+0x92>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a77      	ldr	r2, [pc, #476]	; (8003278 <HAL_I2C_Init+0x264>)
 800309c:	4293      	cmp	r3, r2
 800309e:	bf94      	ite	ls
 80030a0:	2301      	movls	r3, #1
 80030a2:	2300      	movhi	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0db      	b.n	8003266 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a72      	ldr	r2, [pc, #456]	; (800327c <HAL_I2C_Init+0x268>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a64      	ldr	r2, [pc, #400]	; (8003270 <HAL_I2C_Init+0x25c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d802      	bhi.n	80030e8 <HAL_I2C_Init+0xd4>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e009      	b.n	80030fc <HAL_I2C_Init+0xe8>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	4a63      	ldr	r2, [pc, #396]	; (8003280 <HAL_I2C_Init+0x26c>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	3301      	adds	r3, #1
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800310e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4956      	ldr	r1, [pc, #344]	; (8003270 <HAL_I2C_Init+0x25c>)
 8003118:	428b      	cmp	r3, r1
 800311a:	d80d      	bhi.n	8003138 <HAL_I2C_Init+0x124>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e59      	subs	r1, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fbb1 f3f3 	udiv	r3, r1, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	bf38      	it	cc
 8003134:	2304      	movcc	r3, #4
 8003136:	e04f      	b.n	80031d8 <HAL_I2C_Init+0x1c4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_I2C_Init+0x150>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e012      	b.n	800318a <HAL_I2C_Init+0x176>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x17e>
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_I2C_Init+0x1c4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <HAL_I2C_Init+0x1a4>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e58      	subs	r0, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	440b      	add	r3, r1
 80031a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	e00f      	b.n	80031d8 <HAL_I2C_Init+0x1c4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6809      	ldr	r1, [r1, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6911      	ldr	r1, [r2, #16]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	4311      	orrs	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	000186a0 	.word	0x000186a0
 8003274:	001e847f 	.word	0x001e847f
 8003278:	003d08ff 	.word	0x003d08ff
 800327c:	431bde83 	.word	0x431bde83
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	4603      	mov	r3, r0
 8003294:	817b      	strh	r3, [r7, #10]
 8003296:	460b      	mov	r3, r1
 8003298:	813b      	strh	r3, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329e:	f7ff f833 	bl	8002308 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	f040 80d9 	bne.w	8003464 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2319      	movs	r3, #25
 80032b8:	2201      	movs	r2, #1
 80032ba:	496d      	ldr	r1, [pc, #436]	; (8003470 <HAL_I2C_Mem_Write+0x1ec>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fc7f 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0cc      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_I2C_Mem_Write+0x56>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0c5      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d007      	beq.n	8003300 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2221      	movs	r2, #33	; 0x21
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2240      	movs	r2, #64	; 0x40
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_I2C_Mem_Write+0x1f0>)
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003342:	88f8      	ldrh	r0, [r7, #6]
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	8979      	ldrh	r1, [r7, #10]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4603      	mov	r3, r0
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fab6 	bl	80038c4 <I2C_RequestMemoryWrite>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d052      	beq.n	8003404 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e081      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fd00 	bl	8003d6c <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06b      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d11b      	bne.n	8003404 <HAL_I2C_Mem_Write+0x180>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d017      	beq.n	8003404 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1aa      	bne.n	8003362 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fcec 	bl	8003dee <I2C_WaitOnBTFFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	2b04      	cmp	r3, #4
 8003422:	d107      	bne.n	8003434 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e016      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	00100002 	.word	0x00100002
 8003474:	ffff0000 	.word	0xffff0000

08003478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	817b      	strh	r3, [r7, #10]
 800348a:	460b      	mov	r3, r1
 800348c:	813b      	strh	r3, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003492:	f7fe ff39 	bl	8002308 <HAL_GetTick>
 8003496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f040 8208 	bne.w	80038b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2319      	movs	r3, #25
 80034ac:	2201      	movs	r2, #1
 80034ae:	497b      	ldr	r1, [pc, #492]	; (800369c <HAL_I2C_Mem_Read+0x224>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fb85 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	e1fb      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Mem_Read+0x56>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e1f4      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d007      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2222      	movs	r2, #34	; 0x22
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <HAL_I2C_Mem_Read+0x228>)
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003536:	88f8      	ldrh	r0, [r7, #6]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4603      	mov	r3, r0
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa52 	bl	80039f0 <I2C_RequestMemoryRead>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1b0      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e184      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b01      	cmp	r3, #1
 800358c:	d11b      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e164      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d11b      	bne.n	8003606 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	e144      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800361c:	e138      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b03      	cmp	r3, #3
 8003624:	f200 80f1 	bhi.w	800380a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b01      	cmp	r3, #1
 800362e:	d123      	bne.n	8003678 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc1b 	bl	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e139      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003676:	e10b      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b02      	cmp	r3, #2
 800367e:	d14e      	bne.n	800371e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	2200      	movs	r2, #0
 8003688:	4906      	ldr	r1, [pc, #24]	; (80036a4 <HAL_I2C_Mem_Read+0x22c>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa98 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e10e      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
 800369a:	bf00      	nop
 800369c:	00100002 	.word	0x00100002
 80036a0:	ffff0000 	.word	0xffff0000
 80036a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371c:	e0b8      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	4966      	ldr	r1, [pc, #408]	; (80038c0 <HAL_I2C_Mem_Read+0x448>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fa49 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0bf      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	2200      	movs	r2, #0
 8003782:	494f      	ldr	r1, [pc, #316]	; (80038c0 <HAL_I2C_Mem_Read+0x448>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa1b 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e091      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003808:	e042      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fb2e 	bl	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e04c      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d118      	bne.n	8003890 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f aec2 	bne.w	800361e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00010004 	.word	0x00010004

080038c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	460b      	mov	r3, r1
 80038d8:	813b      	strh	r3, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f960 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003914:	d103      	bne.n	800391e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e05f      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003930:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	492d      	ldr	r1, [pc, #180]	; (80039ec <I2C_RequestMemoryWrite+0x128>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f998 	bl	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e04c      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa02 	bl	8003d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02b      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003990:	893b      	ldrh	r3, [r7, #8]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	611a      	str	r2, [r3, #16]
 800399a:	e021      	b.n	80039e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800399c:	893b      	ldrh	r3, [r7, #8]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	6a39      	ldr	r1, [r7, #32]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f9dc 	bl	8003d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d107      	bne.n	80039d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e005      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d6:	893b      	ldrh	r3, [r7, #8]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	00010002 	.word	0x00010002

080039f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f8c2 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a50:	d103      	bne.n	8003a5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0aa      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	4952      	ldr	r1, [pc, #328]	; (8003bbc <I2C_RequestMemoryRead+0x1cc>)
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f8fa 	bl	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e097      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f964 	bl	8003d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e076      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	e021      	b.n	8003b1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae8:	6a39      	ldr	r1, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f93e 	bl	8003d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e050      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f923 	bl	8003d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d107      	bne.n	8003b44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e035      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f82b 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7e:	d103      	bne.n	8003b88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e013      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b8c:	897b      	ldrh	r3, [r7, #10]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	4906      	ldr	r1, [pc, #24]	; (8003bbc <I2C_RequestMemoryRead+0x1cc>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f863 	bl	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	00010002 	.word	0x00010002

08003bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd0:	e025      	b.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd8:	d021      	beq.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fb95 	bl	8002308 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d116      	bne.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e023      	b.n	8003c66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10d      	bne.n	8003c44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	e00c      	b.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d0b6      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c7c:	e051      	b.n	8003d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8c:	d123      	bne.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0204 	orr.w	r2, r3, #4
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e046      	b.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cdc:	d021      	beq.n	8003d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fb13 	bl	8002308 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e020      	b.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10c      	bne.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e00b      	b.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d18d      	bne.n	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d78:	e02d      	b.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f8ce 	bl	8003f1c <I2C_IsAcknowledgeFailed>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e02d      	b.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d90:	d021      	beq.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7fe fab9 	bl	8002308 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d116      	bne.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e007      	b.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d1ca      	bne.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dfa:	e02d      	b.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f88d 	bl	8003f1c <I2C_IsAcknowledgeFailed>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e02d      	b.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e12:	d021      	beq.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e14:	f7fe fa78 	bl	8002308 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d302      	bcc.n	8003e2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e007      	b.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d1ca      	bne.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e7c:	e042      	b.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d119      	bne.n	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0210 	mvn.w	r2, #16
 8003e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e029      	b.n	8003f14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fe fa22 	bl	8002308 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e007      	b.n	8003f14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d1b5      	bne.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f32:	d11b      	bne.n	8003f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f043 0204 	orr.w	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e25b      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d075      	beq.n	8004086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9a:	4ba3      	ldr	r3, [pc, #652]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa6:	4ba0      	ldr	r3, [pc, #640]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d112      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb2:	4b9d      	ldr	r3, [pc, #628]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	4b99      	ldr	r3, [pc, #612]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05b      	beq.n	8004084 <HAL_RCC_OscConfig+0x108>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d157      	bne.n	8004084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e236      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x74>
 8003fe2:	4b91      	ldr	r3, [pc, #580]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a90      	ldr	r2, [pc, #576]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e01d      	b.n	800402c <HAL_RCC_OscConfig+0xb0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x98>
 8003ffa:	4b8b      	ldr	r3, [pc, #556]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a8a      	ldr	r2, [pc, #552]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a87      	ldr	r2, [pc, #540]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0xb0>
 8004014:	4b84      	ldr	r3, [pc, #528]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a83      	ldr	r2, [pc, #524]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a80      	ldr	r2, [pc, #512]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fe f968 	bl	8002308 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7fe f964 	bl	8002308 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1fb      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0xc0>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fe f954 	bl	8002308 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004064:	f7fe f950 	bl	8002308 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e1e7      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004076:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0xe8>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d063      	beq.n	800415a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004092:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409e:	4b62      	ldr	r3, [pc, #392]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d11c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040aa:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_RCC_OscConfig+0x152>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e1bb      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4952      	ldr	r1, [pc, #328]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	e03a      	b.n	800415a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b4f      	ldr	r3, [pc, #316]	; (800422c <HAL_RCC_OscConfig+0x2b0>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe f909 	bl	8002308 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fe f905 	bl	8002308 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e19c      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4940      	ldr	r1, [pc, #256]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	4313      	orrs	r3, r2
 800412a:	600b      	str	r3, [r1, #0]
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_OscConfig+0x2b0>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe f8e8 	bl	8002308 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413c:	f7fe f8e4 	bl	8002308 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e17b      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d030      	beq.n	80041c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b30      	ldr	r3, [pc, #192]	; (8004230 <HAL_RCC_OscConfig+0x2b4>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fe f8c8 	bl	8002308 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417c:	f7fe f8c4 	bl	8002308 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e15b      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418e:	4b26      	ldr	r3, [pc, #152]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x200>
 800419a:	e015      	b.n	80041c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCC_OscConfig+0x2b4>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fe f8b1 	bl	8002308 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7fe f8ad 	bl	8002308 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e144      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a0 	beq.w	8004316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_OscConfig+0x2b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d121      	bne.n	8004256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_RCC_OscConfig+0x2b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <HAL_RCC_OscConfig+0x2b8>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fe f873 	bl	8002308 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e011      	b.n	800424a <HAL_RCC_OscConfig+0x2ce>
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	42470000 	.word	0x42470000
 8004230:	42470e80 	.word	0x42470e80
 8004234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004238:	f7fe f866 	bl	8002308 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0fd      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	4b81      	ldr	r3, [pc, #516]	; (8004450 <HAL_RCC_OscConfig+0x4d4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d106      	bne.n	800426c <HAL_RCC_OscConfig+0x2f0>
 800425e:	4b7d      	ldr	r3, [pc, #500]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	4a7c      	ldr	r2, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6713      	str	r3, [r2, #112]	; 0x70
 800426a:	e01c      	b.n	80042a6 <HAL_RCC_OscConfig+0x32a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b05      	cmp	r3, #5
 8004272:	d10c      	bne.n	800428e <HAL_RCC_OscConfig+0x312>
 8004274:	4b77      	ldr	r3, [pc, #476]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a76      	ldr	r2, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	4b74      	ldr	r3, [pc, #464]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a73      	ldr	r2, [pc, #460]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	e00b      	b.n	80042a6 <HAL_RCC_OscConfig+0x32a>
 800428e:	4b71      	ldr	r3, [pc, #452]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	4a70      	ldr	r2, [pc, #448]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6713      	str	r3, [r2, #112]	; 0x70
 800429a:	4b6e      	ldr	r3, [pc, #440]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a6d      	ldr	r2, [pc, #436]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d015      	beq.n	80042da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fe f82b 	bl	8002308 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe f827 	bl	8002308 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0bc      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ee      	beq.n	80042b6 <HAL_RCC_OscConfig+0x33a>
 80042d8:	e014      	b.n	8004304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042da:	f7fe f815 	bl	8002308 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fe f811 	bl	8002308 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0a6      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	4b56      	ldr	r3, [pc, #344]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ee      	bne.n	80042e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b52      	ldr	r3, [pc, #328]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4a51      	ldr	r2, [pc, #324]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8092 	beq.w	8004444 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d05c      	beq.n	80043e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d141      	bne.n	80043b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004334:	4b48      	ldr	r3, [pc, #288]	; (8004458 <HAL_RCC_OscConfig+0x4dc>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd ffe5 	bl	8002308 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004342:	f7fd ffe1 	bl	8002308 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e078      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	019b      	lsls	r3, r3, #6
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	3b01      	subs	r3, #1
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	4933      	ldr	r1, [pc, #204]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438a:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_RCC_OscConfig+0x4dc>)
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd ffba 	bl	8002308 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd ffb6 	bl	8002308 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e04d      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x41c>
 80043b6:	e045      	b.n	8004444 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b8:	4b27      	ldr	r3, [pc, #156]	; (8004458 <HAL_RCC_OscConfig+0x4dc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fd ffa3 	bl	8002308 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fd ff9f 	bl	8002308 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e036      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x44a>
 80043e4:	e02e      	b.n	8004444 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e029      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <HAL_RCC_OscConfig+0x4d8>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	429a      	cmp	r2, r3
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d115      	bne.n	8004440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800441a:	4013      	ands	r3, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004420:	4293      	cmp	r3, r2
 8004422:	d10d      	bne.n	8004440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40007000 	.word	0x40007000
 8004454:	40023800 	.word	0x40023800
 8004458:	42470060 	.word	0x42470060

0800445c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0cc      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90c      	bls.n	8004498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b63      	ldr	r3, [pc, #396]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b8      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b0:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a58      	ldr	r2, [pc, #352]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c8:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a52      	ldr	r2, [pc, #328]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	494d      	ldr	r1, [pc, #308]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d044      	beq.n	800457c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d119      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e07f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d003      	beq.n	800451a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	2b03      	cmp	r3, #3
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e067      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4934      	ldr	r1, [pc, #208]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800454c:	f7fd fedc 	bl	8002308 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fd fed8 	bl	8002308 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d20c      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4916      	ldr	r1, [pc, #88]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e2:	f000 f821 	bl	8004628 <HAL_RCC_GetSysClockFreq>
 80045e6:	4601      	mov	r1, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	fa21 f303 	lsr.w	r3, r1, r3
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd fe3c 	bl	8002280 <HAL_InitTick>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00
 8004618:	40023800 	.word	0x40023800
 800461c:	08008110 	.word	0x08008110
 8004620:	20000018 	.word	0x20000018
 8004624:	20000024 	.word	0x20000024

08004628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463e:	4b63      	ldr	r3, [pc, #396]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d007      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x32>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d008      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x38>
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 80b4 	bne.w	80047bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004656:	60bb      	str	r3, [r7, #8]
       break;
 8004658:	e0b3      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800465c:	60bb      	str	r3, [r7, #8]
      break;
 800465e:	e0b0      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b5a      	ldr	r3, [pc, #360]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466a:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d04a      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	ea03 0501 	and.w	r5, r3, r1
 800468c:	ea04 0602 	and.w	r6, r4, r2
 8004690:	4629      	mov	r1, r5
 8004692:	4632      	mov	r2, r6
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	0154      	lsls	r4, r2, #5
 800469e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046a2:	014b      	lsls	r3, r1, #5
 80046a4:	4619      	mov	r1, r3
 80046a6:	4622      	mov	r2, r4
 80046a8:	1b49      	subs	r1, r1, r5
 80046aa:	eb62 0206 	sbc.w	r2, r2, r6
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0194      	lsls	r4, r2, #6
 80046b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046bc:	018b      	lsls	r3, r1, #6
 80046be:	1a5b      	subs	r3, r3, r1
 80046c0:	eb64 0402 	sbc.w	r4, r4, r2
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046d2:	00d9      	lsls	r1, r3, #3
 80046d4:	460b      	mov	r3, r1
 80046d6:	4614      	mov	r4, r2
 80046d8:	195b      	adds	r3, r3, r5
 80046da:	eb44 0406 	adc.w	r4, r4, r6
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	0262      	lsls	r2, r4, #9
 80046e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046ec:	0259      	lsls	r1, r3, #9
 80046ee:	460b      	mov	r3, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	4621      	mov	r1, r4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	f7fc fa06 	bl	8000b10 <__aeabi_uldivmod>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e049      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	f04f 0400 	mov.w	r4, #0
 8004716:	f240 11ff 	movw	r1, #511	; 0x1ff
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	ea03 0501 	and.w	r5, r3, r1
 8004722:	ea04 0602 	and.w	r6, r4, r2
 8004726:	4629      	mov	r1, r5
 8004728:	4632      	mov	r2, r6
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	0154      	lsls	r4, r2, #5
 8004734:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004738:	014b      	lsls	r3, r1, #5
 800473a:	4619      	mov	r1, r3
 800473c:	4622      	mov	r2, r4
 800473e:	1b49      	subs	r1, r1, r5
 8004740:	eb62 0206 	sbc.w	r2, r2, r6
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	0194      	lsls	r4, r2, #6
 800474e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004752:	018b      	lsls	r3, r1, #6
 8004754:	1a5b      	subs	r3, r3, r1
 8004756:	eb64 0402 	sbc.w	r4, r4, r2
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	00e2      	lsls	r2, r4, #3
 8004764:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004768:	00d9      	lsls	r1, r3, #3
 800476a:	460b      	mov	r3, r1
 800476c:	4614      	mov	r4, r2
 800476e:	195b      	adds	r3, r3, r5
 8004770:	eb44 0406 	adc.w	r4, r4, r6
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	02a2      	lsls	r2, r4, #10
 800477e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004782:	0299      	lsls	r1, r3, #10
 8004784:	460b      	mov	r3, r1
 8004786:	4614      	mov	r4, r2
 8004788:	4618      	mov	r0, r3
 800478a:	4621      	mov	r1, r4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	461a      	mov	r2, r3
 8004794:	4623      	mov	r3, r4
 8004796:	f7fc f9bb 	bl	8000b10 <__aeabi_uldivmod>
 800479a:	4603      	mov	r3, r0
 800479c:	460c      	mov	r4, r1
 800479e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	3301      	adds	r3, #1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	60bb      	str	r3, [r7, #8]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047be:	60bb      	str	r3, [r7, #8]
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	68bb      	ldr	r3, [r7, #8]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	007a1200 	.word	0x007a1200

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000018 	.word	0x20000018

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4601      	mov	r1, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	08008120 	.word	0x08008120

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffdc 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 8004820:	4601      	mov	r1, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0b5b      	lsrs	r3, r3, #13
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4a03      	ldr	r2, [pc, #12]	; (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	08008120 	.word	0x08008120

08004840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01d      	b.n	800488e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd f81a 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 fc0c 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d007      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e01d      	b.n	800492c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f815 	bl	8004934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f000 fbbd 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fe44 	bl	80055e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <HAL_TIM_PWM_Start+0x60>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d107      	bne.n	800497a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b06      	cmp	r3, #6
 800498a:	d007      	beq.n	800499c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000

080049ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e083      	b.n	8004ac8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fc ffc7 	bl	8001968 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 fb4b 	bl	800509c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a4c:	f023 030c 	bic.w	r3, r3, #12
 8004a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	011a      	lsls	r2, r3, #4
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_TIM_Encoder_Start+0x16>
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d008      	beq.n	8004af6 <HAL_TIM_Encoder_Start+0x26>
 8004ae4:	e00f      	b.n	8004b06 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fd7a 	bl	80055e8 <TIM_CCxChannelCmd>
      break;
 8004af4:	e016      	b.n	8004b24 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2104      	movs	r1, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fd72 	bl	80055e8 <TIM_CCxChannelCmd>
      break;
 8004b04:	e00e      	b.n	8004b24 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fd6a 	bl	80055e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fd63 	bl	80055e8 <TIM_CCxChannelCmd>
      break;
 8004b22:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d122      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d11b      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f06f 0202 	mvn.w	r2, #2
 8004b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fa6c 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004b86:	e005      	b.n	8004b94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa5e 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa6f 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d122      	bne.n	8004bee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d11b      	bne.n	8004bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0204 	mvn.w	r2, #4
 8004bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa42 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004bda:	e005      	b.n	8004be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa34 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa45 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d122      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d11b      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0208 	mvn.w	r2, #8
 8004c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2204      	movs	r2, #4
 8004c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa18 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004c2e:	e005      	b.n	8004c3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa0a 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fa1b 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d122      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d11b      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0210 	mvn.w	r2, #16
 8004c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f9ee 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004c82:	e005      	b.n	8004c90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f9e0 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9f1 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10e      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f06f 0201 	mvn.w	r2, #1
 8004cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fc facd 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d10e      	bne.n	8004cee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d107      	bne.n	8004cee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fd6d 	bl	80057c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d10e      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f9b6 	bl	8005086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d10e      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d107      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0220 	mvn.w	r2, #32
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fd37 	bl	80057b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0b4      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	f200 809f 	bhi.w	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004ec1 	.word	0x08004ec1
 8004d90:	08004ec1 	.word	0x08004ec1
 8004d94:	08004ec1 	.word	0x08004ec1
 8004d98:	08004dfd 	.word	0x08004dfd
 8004d9c:	08004ec1 	.word	0x08004ec1
 8004da0:	08004ec1 	.word	0x08004ec1
 8004da4:	08004ec1 	.word	0x08004ec1
 8004da8:	08004e3f 	.word	0x08004e3f
 8004dac:	08004ec1 	.word	0x08004ec1
 8004db0:	08004ec1 	.word	0x08004ec1
 8004db4:	08004ec1 	.word	0x08004ec1
 8004db8:	08004e7f 	.word	0x08004e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f9ea 	bl	800519c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0208 	orr.w	r2, r2, #8
 8004dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0204 	bic.w	r2, r2, #4
 8004de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6999      	ldr	r1, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	619a      	str	r2, [r3, #24]
      break;
 8004dfa:	e062      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fa30 	bl	8005268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	619a      	str	r2, [r3, #24]
      break;
 8004e3c:	e041      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fa7b 	bl	8005340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0208 	orr.w	r2, r2, #8
 8004e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0204 	bic.w	r2, r2, #4
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	61da      	str	r2, [r3, #28]
      break;
 8004e7c:	e021      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fac5 	bl	8005414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69d9      	ldr	r1, [r3, #28]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	021a      	lsls	r2, r3, #8
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	61da      	str	r2, [r3, #28]
      break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ec0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_ConfigClockSource+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0a6      	b.n	8005042 <HAL_TIM_ConfigClockSource+0x166>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d067      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x120>
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d80b      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x6c>
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d073      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x140>
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d802      	bhi.n	8004f3e <HAL_TIM_ConfigClockSource+0x62>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d06f      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f3c:	e078      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d06c      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x140>
 8004f42:	2b30      	cmp	r3, #48	; 0x30
 8004f44:	d06a      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f46:	e073      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f48:	2b70      	cmp	r3, #112	; 0x70
 8004f4a:	d00d      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0x8c>
 8004f4c:	2b70      	cmp	r3, #112	; 0x70
 8004f4e:	d804      	bhi.n	8004f5a <HAL_TIM_ConfigClockSource+0x7e>
 8004f50:	2b50      	cmp	r3, #80	; 0x50
 8004f52:	d033      	beq.n	8004fbc <HAL_TIM_ConfigClockSource+0xe0>
 8004f54:	2b60      	cmp	r3, #96	; 0x60
 8004f56:	d041      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f58:	e06a      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d066      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x152>
 8004f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f64:	d017      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f66:	e063      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f000 fb16 	bl	80055a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
      break;
 8004f94:	e04c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f000 faff 	bl	80055a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb8:	609a      	str	r2, [r3, #8]
      break;
 8004fba:	e039      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f000 fa73 	bl	80054b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2150      	movs	r1, #80	; 0x50
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 facc 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8004fda:	e029      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f000 fa92 	bl	8005512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2160      	movs	r1, #96	; 0x60
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fabc 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8004ffa:	e019      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	461a      	mov	r2, r3
 800500a:	f000 fa53 	bl	80054b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2140      	movs	r1, #64	; 0x40
 8005014:	4618      	mov	r0, r3
 8005016:	f000 faac 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 800501a:	e009      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 faa3 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 800502c:	e000      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800502e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <TIM_Base_SetConfig+0xe4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00f      	beq.n	80050d4 <TIM_Base_SetConfig+0x38>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d00b      	beq.n	80050d4 <TIM_Base_SetConfig+0x38>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a31      	ldr	r2, [pc, #196]	; (8005184 <TIM_Base_SetConfig+0xe8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_Base_SetConfig+0x38>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a30      	ldr	r2, [pc, #192]	; (8005188 <TIM_Base_SetConfig+0xec>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0x38>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2f      	ldr	r2, [pc, #188]	; (800518c <TIM_Base_SetConfig+0xf0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a25      	ldr	r2, [pc, #148]	; (8005180 <TIM_Base_SetConfig+0xe4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01b      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d017      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <TIM_Base_SetConfig+0xe8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a21      	ldr	r2, [pc, #132]	; (8005188 <TIM_Base_SetConfig+0xec>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00f      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a20      	ldr	r2, [pc, #128]	; (800518c <TIM_Base_SetConfig+0xf0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1f      	ldr	r2, [pc, #124]	; (8005190 <TIM_Base_SetConfig+0xf4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <TIM_Base_SetConfig+0xf8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <TIM_Base_SetConfig+0xfc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <TIM_Base_SetConfig+0xe4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d103      	bne.n	800516c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	615a      	str	r2, [r3, #20]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40014000 	.word	0x40014000
 8005194:	40014400 	.word	0x40014400
 8005198:	40014800 	.word	0x40014800

0800519c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <TIM_OC1_SetConfig+0xc8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10c      	bne.n	8005212 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0308 	bic.w	r3, r3, #8
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <TIM_OC1_SetConfig+0xc8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d111      	bne.n	800523e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40010000 	.word	0x40010000

08005268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0210 	bic.w	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0320 	bic.w	r3, r3, #32
 80052b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <TIM_OC2_SetConfig+0xd4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10d      	bne.n	80052e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <TIM_OC2_SetConfig+0xd4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d113      	bne.n	8005314 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000

08005340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <TIM_OC3_SetConfig+0xd0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10d      	bne.n	80053ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a14      	ldr	r2, [pc, #80]	; (8005410 <TIM_OC3_SetConfig+0xd0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d113      	bne.n	80053ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40010000 	.word	0x40010000

08005414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <TIM_OC4_SetConfig+0x9c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d109      	bne.n	8005488 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	019b      	lsls	r3, r3, #6
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000

080054b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 030a 	bic.w	r3, r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005512:	b480      	push	{r7}
 8005514:	b087      	sub	sp, #28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0210 	bic.w	r2, r3, #16
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	031b      	lsls	r3, r3, #12
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800554e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	f043 0307 	orr.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	609a      	str	r2, [r3, #8]
}
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2201      	movs	r2, #1
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	43db      	mvns	r3, r3
 800560a:	401a      	ands	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e050      	b.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d013      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a18      	ldr	r2, [pc, #96]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a16      	ldr	r2, [pc, #88]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10c      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40014000 	.word	0x40014000

08005710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005728:	2302      	movs	r3, #2
 800572a:	e03d      	b.n	80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e03f      	b.n	800586e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc f9ae 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800581e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb95 	bl	8005f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b20      	cmp	r3, #32
 8005890:	d166      	bne.n	8005960 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_UART_Receive_DMA+0x26>
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e05f      	b.n	8005962 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Receive_DMA+0x38>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e058      	b.n	8005962 <HAL_UART_Receive_DMA+0xea>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2222      	movs	r2, #34	; 0x22
 80058ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	4a25      	ldr	r2, [pc, #148]	; (800596c <HAL_UART_Receive_DMA+0xf4>)
 80058d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4a24      	ldr	r2, [pc, #144]	; (8005970 <HAL_UART_Receive_DMA+0xf8>)
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	4a23      	ldr	r2, [pc, #140]	; (8005974 <HAL_UART_Receive_DMA+0xfc>)
 80058e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	2200      	movs	r2, #0
 80058f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3304      	adds	r3, #4
 8005902:	4619      	mov	r1, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	f7fc feeb 	bl	80026e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	08005bc9 	.word	0x08005bc9
 8005970:	08005c31 	.word	0x08005c31
 8005974:	08005c4d 	.word	0x08005c4d

08005978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005998:	2300      	movs	r3, #0
 800599a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10d      	bne.n	80059ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_UART_IRQHandler+0x52>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa42 	bl	8005e4c <UART_Receive_IT>
      return;
 80059c8:	e0d1      	b.n	8005b6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80b0 	beq.w	8005b32 <HAL_UART_IRQHandler+0x1ba>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <HAL_UART_IRQHandler+0x70>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80a5 	beq.w	8005b32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_UART_IRQHandler+0x90>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	f043 0201 	orr.w	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_UART_IRQHandler+0xb0>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	f043 0202 	orr.w	r2, r3, #2
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_UART_IRQHandler+0xd0>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a40:	f043 0204 	orr.w	r2, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <HAL_UART_IRQHandler+0xfa>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_UART_IRQHandler+0xee>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	f043 0208 	orr.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d078      	beq.n	8005b6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_UART_IRQHandler+0x11c>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9dc 	bl	8005e4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <HAL_UART_IRQHandler+0x144>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d031      	beq.n	8005b20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f925 	bl	8005d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d123      	bne.n	8005b18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ade:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d013      	beq.n	8005b10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <HAL_UART_IRQHandler+0x1fc>)
 8005aee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fc fe4d 	bl	8002794 <HAL_DMA_Abort_IT>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d016      	beq.n	8005b2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0e:	e00e      	b.n	8005b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f84f 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b16:	e00a      	b.n	8005b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f84b 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1e:	e006      	b.n	8005b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f847 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b2c:	e01e      	b.n	8005b6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2e:	bf00      	nop
    return;
 8005b30:	e01c      	b.n	8005b6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_UART_IRQHandler+0x1d6>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f912 	bl	8005d70 <UART_Transmit_IT>
    return;
 8005b4c:	e00f      	b.n	8005b6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_UART_IRQHandler+0x1f6>
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f95a 	bl	8005e1c <UART_EndTransmit_IT>
    return;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005b6c:	bf00      	nop
  }
}
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08005d49 	.word	0x08005d49

08005b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11e      	bne.n	8005c22 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c18:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff ffb2 	bl	8005b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff ffae 	bl	8005ba0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b21      	cmp	r3, #33	; 0x21
 8005c7e:	d108      	bne.n	8005c92 <UART_DMAError+0x46>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c8c:	68b8      	ldr	r0, [r7, #8]
 8005c8e:	f000 f827 	bl	8005ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b22      	cmp	r3, #34	; 0x22
 8005cb2:	d108      	bne.n	8005cc6 <UART_DMAError+0x7a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005cc0:	68b8      	ldr	r0, [r7, #8]
 8005cc2:	f000 f823 	bl	8005d0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	f043 0210 	orr.w	r2, r3, #16
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd2:	68b8      	ldr	r0, [r7, #8]
 8005cd4:	f7ff ff6e 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cf6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff ff26 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b21      	cmp	r3, #33	; 0x21
 8005d82:	d144      	bne.n	8005e0e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8c:	d11a      	bne.n	8005dc4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]
 8005db6:	e00e      	b.n	8005dd6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	621a      	str	r2, [r3, #32]
 8005dc2:	e008      	b.n	8005dd6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	1c59      	adds	r1, r3, #1
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6211      	str	r1, [r2, #32]
 8005dce:	781a      	ldrb	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e000      	b.n	8005e10 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fe9b 	bl	8005b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b22      	cmp	r3, #34	; 0x22
 8005e5e:	d171      	bne.n	8005f44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e68:	d123      	bne.n	8005eb2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10e      	bne.n	8005e96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28
 8005e94:	e029      	b.n	8005eea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
 8005eb0:	e01b      	b.n	8005eea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6858      	ldr	r0, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6291      	str	r1, [r2, #40]	; 0x28
 8005eca:	b2c2      	uxtb	r2, r0
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e00c      	b.n	8005eea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	1c58      	adds	r0, r3, #1
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	6288      	str	r0, [r1, #40]	; 0x28
 8005ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d120      	bne.n	8005f40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0220 	bic.w	r2, r2, #32
 8005f0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fe28 	bl	8005b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e002      	b.n	8005f46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f92:	f023 030c 	bic.w	r3, r3, #12
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbe:	f040 818b 	bne.w	80062d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4ac1      	ldr	r2, [pc, #772]	; (80062cc <UART_SetConfig+0x37c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d005      	beq.n	8005fd8 <UART_SetConfig+0x88>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4abf      	ldr	r2, [pc, #764]	; (80062d0 <UART_SetConfig+0x380>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f040 80bd 	bne.w	8006152 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fd8:	f7fe fc1e 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005fdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	461d      	mov	r5, r3
 8005fe2:	f04f 0600 	mov.w	r6, #0
 8005fe6:	46a8      	mov	r8, r5
 8005fe8:	46b1      	mov	r9, r6
 8005fea:	eb18 0308 	adds.w	r3, r8, r8
 8005fee:	eb49 0409 	adc.w	r4, r9, r9
 8005ff2:	4698      	mov	r8, r3
 8005ff4:	46a1      	mov	r9, r4
 8005ff6:	eb18 0805 	adds.w	r8, r8, r5
 8005ffa:	eb49 0906 	adc.w	r9, r9, r6
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800600a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800600e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006012:	4688      	mov	r8, r1
 8006014:	4691      	mov	r9, r2
 8006016:	eb18 0005 	adds.w	r0, r8, r5
 800601a:	eb49 0106 	adc.w	r1, r9, r6
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	461d      	mov	r5, r3
 8006024:	f04f 0600 	mov.w	r6, #0
 8006028:	196b      	adds	r3, r5, r5
 800602a:	eb46 0406 	adc.w	r4, r6, r6
 800602e:	461a      	mov	r2, r3
 8006030:	4623      	mov	r3, r4
 8006032:	f7fa fd6d 	bl	8000b10 <__aeabi_uldivmod>
 8006036:	4603      	mov	r3, r0
 8006038:	460c      	mov	r4, r1
 800603a:	461a      	mov	r2, r3
 800603c:	4ba5      	ldr	r3, [pc, #660]	; (80062d4 <UART_SetConfig+0x384>)
 800603e:	fba3 2302 	umull	r2, r3, r3, r2
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	461d      	mov	r5, r3
 800604c:	f04f 0600 	mov.w	r6, #0
 8006050:	46a9      	mov	r9, r5
 8006052:	46b2      	mov	sl, r6
 8006054:	eb19 0309 	adds.w	r3, r9, r9
 8006058:	eb4a 040a 	adc.w	r4, sl, sl
 800605c:	4699      	mov	r9, r3
 800605e:	46a2      	mov	sl, r4
 8006060:	eb19 0905 	adds.w	r9, r9, r5
 8006064:	eb4a 0a06 	adc.w	sl, sl, r6
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006074:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006078:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800607c:	4689      	mov	r9, r1
 800607e:	4692      	mov	sl, r2
 8006080:	eb19 0005 	adds.w	r0, r9, r5
 8006084:	eb4a 0106 	adc.w	r1, sl, r6
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	461d      	mov	r5, r3
 800608e:	f04f 0600 	mov.w	r6, #0
 8006092:	196b      	adds	r3, r5, r5
 8006094:	eb46 0406 	adc.w	r4, r6, r6
 8006098:	461a      	mov	r2, r3
 800609a:	4623      	mov	r3, r4
 800609c:	f7fa fd38 	bl	8000b10 <__aeabi_uldivmod>
 80060a0:	4603      	mov	r3, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b8b      	ldr	r3, [pc, #556]	; (80062d4 <UART_SetConfig+0x384>)
 80060a8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	2164      	movs	r1, #100	; 0x64
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	3332      	adds	r3, #50	; 0x32
 80060ba:	4a86      	ldr	r2, [pc, #536]	; (80062d4 <UART_SetConfig+0x384>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060c8:	4498      	add	r8, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	461d      	mov	r5, r3
 80060ce:	f04f 0600 	mov.w	r6, #0
 80060d2:	46a9      	mov	r9, r5
 80060d4:	46b2      	mov	sl, r6
 80060d6:	eb19 0309 	adds.w	r3, r9, r9
 80060da:	eb4a 040a 	adc.w	r4, sl, sl
 80060de:	4699      	mov	r9, r3
 80060e0:	46a2      	mov	sl, r4
 80060e2:	eb19 0905 	adds.w	r9, r9, r5
 80060e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060fe:	4689      	mov	r9, r1
 8006100:	4692      	mov	sl, r2
 8006102:	eb19 0005 	adds.w	r0, r9, r5
 8006106:	eb4a 0106 	adc.w	r1, sl, r6
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	461d      	mov	r5, r3
 8006110:	f04f 0600 	mov.w	r6, #0
 8006114:	196b      	adds	r3, r5, r5
 8006116:	eb46 0406 	adc.w	r4, r6, r6
 800611a:	461a      	mov	r2, r3
 800611c:	4623      	mov	r3, r4
 800611e:	f7fa fcf7 	bl	8000b10 <__aeabi_uldivmod>
 8006122:	4603      	mov	r3, r0
 8006124:	460c      	mov	r4, r1
 8006126:	461a      	mov	r2, r3
 8006128:	4b6a      	ldr	r3, [pc, #424]	; (80062d4 <UART_SetConfig+0x384>)
 800612a:	fba3 1302 	umull	r1, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	2164      	movs	r1, #100	; 0x64
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	3332      	adds	r3, #50	; 0x32
 800613c:	4a65      	ldr	r2, [pc, #404]	; (80062d4 <UART_SetConfig+0x384>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	f003 0207 	and.w	r2, r3, #7
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4442      	add	r2, r8
 800614e:	609a      	str	r2, [r3, #8]
 8006150:	e26f      	b.n	8006632 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006152:	f7fe fb4d 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8006156:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	461d      	mov	r5, r3
 800615c:	f04f 0600 	mov.w	r6, #0
 8006160:	46a8      	mov	r8, r5
 8006162:	46b1      	mov	r9, r6
 8006164:	eb18 0308 	adds.w	r3, r8, r8
 8006168:	eb49 0409 	adc.w	r4, r9, r9
 800616c:	4698      	mov	r8, r3
 800616e:	46a1      	mov	r9, r4
 8006170:	eb18 0805 	adds.w	r8, r8, r5
 8006174:	eb49 0906 	adc.w	r9, r9, r6
 8006178:	f04f 0100 	mov.w	r1, #0
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006184:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006188:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800618c:	4688      	mov	r8, r1
 800618e:	4691      	mov	r9, r2
 8006190:	eb18 0005 	adds.w	r0, r8, r5
 8006194:	eb49 0106 	adc.w	r1, r9, r6
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	461d      	mov	r5, r3
 800619e:	f04f 0600 	mov.w	r6, #0
 80061a2:	196b      	adds	r3, r5, r5
 80061a4:	eb46 0406 	adc.w	r4, r6, r6
 80061a8:	461a      	mov	r2, r3
 80061aa:	4623      	mov	r3, r4
 80061ac:	f7fa fcb0 	bl	8000b10 <__aeabi_uldivmod>
 80061b0:	4603      	mov	r3, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b47      	ldr	r3, [pc, #284]	; (80062d4 <UART_SetConfig+0x384>)
 80061b8:	fba3 2302 	umull	r2, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	461d      	mov	r5, r3
 80061c6:	f04f 0600 	mov.w	r6, #0
 80061ca:	46a9      	mov	r9, r5
 80061cc:	46b2      	mov	sl, r6
 80061ce:	eb19 0309 	adds.w	r3, r9, r9
 80061d2:	eb4a 040a 	adc.w	r4, sl, sl
 80061d6:	4699      	mov	r9, r3
 80061d8:	46a2      	mov	sl, r4
 80061da:	eb19 0905 	adds.w	r9, r9, r5
 80061de:	eb4a 0a06 	adc.w	sl, sl, r6
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061f6:	4689      	mov	r9, r1
 80061f8:	4692      	mov	sl, r2
 80061fa:	eb19 0005 	adds.w	r0, r9, r5
 80061fe:	eb4a 0106 	adc.w	r1, sl, r6
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	461d      	mov	r5, r3
 8006208:	f04f 0600 	mov.w	r6, #0
 800620c:	196b      	adds	r3, r5, r5
 800620e:	eb46 0406 	adc.w	r4, r6, r6
 8006212:	461a      	mov	r2, r3
 8006214:	4623      	mov	r3, r4
 8006216:	f7fa fc7b 	bl	8000b10 <__aeabi_uldivmod>
 800621a:	4603      	mov	r3, r0
 800621c:	460c      	mov	r4, r1
 800621e:	461a      	mov	r2, r3
 8006220:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <UART_SetConfig+0x384>)
 8006222:	fba3 1302 	umull	r1, r3, r3, r2
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2164      	movs	r1, #100	; 0x64
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	3332      	adds	r3, #50	; 0x32
 8006234:	4a27      	ldr	r2, [pc, #156]	; (80062d4 <UART_SetConfig+0x384>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006242:	4498      	add	r8, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	461d      	mov	r5, r3
 8006248:	f04f 0600 	mov.w	r6, #0
 800624c:	46a9      	mov	r9, r5
 800624e:	46b2      	mov	sl, r6
 8006250:	eb19 0309 	adds.w	r3, r9, r9
 8006254:	eb4a 040a 	adc.w	r4, sl, sl
 8006258:	4699      	mov	r9, r3
 800625a:	46a2      	mov	sl, r4
 800625c:	eb19 0905 	adds.w	r9, r9, r5
 8006260:	eb4a 0a06 	adc.w	sl, sl, r6
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006270:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006274:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006278:	4689      	mov	r9, r1
 800627a:	4692      	mov	sl, r2
 800627c:	eb19 0005 	adds.w	r0, r9, r5
 8006280:	eb4a 0106 	adc.w	r1, sl, r6
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	461d      	mov	r5, r3
 800628a:	f04f 0600 	mov.w	r6, #0
 800628e:	196b      	adds	r3, r5, r5
 8006290:	eb46 0406 	adc.w	r4, r6, r6
 8006294:	461a      	mov	r2, r3
 8006296:	4623      	mov	r3, r4
 8006298:	f7fa fc3a 	bl	8000b10 <__aeabi_uldivmod>
 800629c:	4603      	mov	r3, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <UART_SetConfig+0x384>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	; 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	3332      	adds	r3, #50	; 0x32
 80062b6:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <UART_SetConfig+0x384>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 0207 	and.w	r2, r3, #7
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4442      	add	r2, r8
 80062c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80062ca:	e1b2      	b.n	8006632 <UART_SetConfig+0x6e2>
 80062cc:	40011000 	.word	0x40011000
 80062d0:	40011400 	.word	0x40011400
 80062d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4ad7      	ldr	r2, [pc, #860]	; (800663c <UART_SetConfig+0x6ec>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d005      	beq.n	80062ee <UART_SetConfig+0x39e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4ad6      	ldr	r2, [pc, #856]	; (8006640 <UART_SetConfig+0x6f0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	f040 80d1 	bne.w	8006490 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80062ee:	f7fe fa93 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80062f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	469a      	mov	sl, r3
 80062f8:	f04f 0b00 	mov.w	fp, #0
 80062fc:	46d0      	mov	r8, sl
 80062fe:	46d9      	mov	r9, fp
 8006300:	eb18 0308 	adds.w	r3, r8, r8
 8006304:	eb49 0409 	adc.w	r4, r9, r9
 8006308:	4698      	mov	r8, r3
 800630a:	46a1      	mov	r9, r4
 800630c:	eb18 080a 	adds.w	r8, r8, sl
 8006310:	eb49 090b 	adc.w	r9, r9, fp
 8006314:	f04f 0100 	mov.w	r1, #0
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006320:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006324:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006328:	4688      	mov	r8, r1
 800632a:	4691      	mov	r9, r2
 800632c:	eb1a 0508 	adds.w	r5, sl, r8
 8006330:	eb4b 0609 	adc.w	r6, fp, r9
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4619      	mov	r1, r3
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	f04f 0400 	mov.w	r4, #0
 8006346:	0094      	lsls	r4, r2, #2
 8006348:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800634c:	008b      	lsls	r3, r1, #2
 800634e:	461a      	mov	r2, r3
 8006350:	4623      	mov	r3, r4
 8006352:	4628      	mov	r0, r5
 8006354:	4631      	mov	r1, r6
 8006356:	f7fa fbdb 	bl	8000b10 <__aeabi_uldivmod>
 800635a:	4603      	mov	r3, r0
 800635c:	460c      	mov	r4, r1
 800635e:	461a      	mov	r2, r3
 8006360:	4bb8      	ldr	r3, [pc, #736]	; (8006644 <UART_SetConfig+0x6f4>)
 8006362:	fba3 2302 	umull	r2, r3, r3, r2
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	469b      	mov	fp, r3
 8006370:	f04f 0c00 	mov.w	ip, #0
 8006374:	46d9      	mov	r9, fp
 8006376:	46e2      	mov	sl, ip
 8006378:	eb19 0309 	adds.w	r3, r9, r9
 800637c:	eb4a 040a 	adc.w	r4, sl, sl
 8006380:	4699      	mov	r9, r3
 8006382:	46a2      	mov	sl, r4
 8006384:	eb19 090b 	adds.w	r9, r9, fp
 8006388:	eb4a 0a0c 	adc.w	sl, sl, ip
 800638c:	f04f 0100 	mov.w	r1, #0
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006398:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800639c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063a0:	4689      	mov	r9, r1
 80063a2:	4692      	mov	sl, r2
 80063a4:	eb1b 0509 	adds.w	r5, fp, r9
 80063a8:	eb4c 060a 	adc.w	r6, ip, sl
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4619      	mov	r1, r3
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f04f 0400 	mov.w	r4, #0
 80063be:	0094      	lsls	r4, r2, #2
 80063c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063c4:	008b      	lsls	r3, r1, #2
 80063c6:	461a      	mov	r2, r3
 80063c8:	4623      	mov	r3, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	4631      	mov	r1, r6
 80063ce:	f7fa fb9f 	bl	8000b10 <__aeabi_uldivmod>
 80063d2:	4603      	mov	r3, r0
 80063d4:	460c      	mov	r4, r1
 80063d6:	461a      	mov	r2, r3
 80063d8:	4b9a      	ldr	r3, [pc, #616]	; (8006644 <UART_SetConfig+0x6f4>)
 80063da:	fba3 1302 	umull	r1, r3, r3, r2
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2164      	movs	r1, #100	; 0x64
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	3332      	adds	r3, #50	; 0x32
 80063ec:	4a95      	ldr	r2, [pc, #596]	; (8006644 <UART_SetConfig+0x6f4>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063f8:	4498      	add	r8, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	469b      	mov	fp, r3
 80063fe:	f04f 0c00 	mov.w	ip, #0
 8006402:	46d9      	mov	r9, fp
 8006404:	46e2      	mov	sl, ip
 8006406:	eb19 0309 	adds.w	r3, r9, r9
 800640a:	eb4a 040a 	adc.w	r4, sl, sl
 800640e:	4699      	mov	r9, r3
 8006410:	46a2      	mov	sl, r4
 8006412:	eb19 090b 	adds.w	r9, r9, fp
 8006416:	eb4a 0a0c 	adc.w	sl, sl, ip
 800641a:	f04f 0100 	mov.w	r1, #0
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800642a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800642e:	4689      	mov	r9, r1
 8006430:	4692      	mov	sl, r2
 8006432:	eb1b 0509 	adds.w	r5, fp, r9
 8006436:	eb4c 060a 	adc.w	r6, ip, sl
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4619      	mov	r1, r3
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	f04f 0400 	mov.w	r4, #0
 800644c:	0094      	lsls	r4, r2, #2
 800644e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006452:	008b      	lsls	r3, r1, #2
 8006454:	461a      	mov	r2, r3
 8006456:	4623      	mov	r3, r4
 8006458:	4628      	mov	r0, r5
 800645a:	4631      	mov	r1, r6
 800645c:	f7fa fb58 	bl	8000b10 <__aeabi_uldivmod>
 8006460:	4603      	mov	r3, r0
 8006462:	460c      	mov	r4, r1
 8006464:	461a      	mov	r2, r3
 8006466:	4b77      	ldr	r3, [pc, #476]	; (8006644 <UART_SetConfig+0x6f4>)
 8006468:	fba3 1302 	umull	r1, r3, r3, r2
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	2164      	movs	r1, #100	; 0x64
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	3332      	adds	r3, #50	; 0x32
 800647a:	4a72      	ldr	r2, [pc, #456]	; (8006644 <UART_SetConfig+0x6f4>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f003 020f 	and.w	r2, r3, #15
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4442      	add	r2, r8
 800648c:	609a      	str	r2, [r3, #8]
 800648e:	e0d0      	b.n	8006632 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fe f9ae 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8006494:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	469a      	mov	sl, r3
 800649a:	f04f 0b00 	mov.w	fp, #0
 800649e:	46d0      	mov	r8, sl
 80064a0:	46d9      	mov	r9, fp
 80064a2:	eb18 0308 	adds.w	r3, r8, r8
 80064a6:	eb49 0409 	adc.w	r4, r9, r9
 80064aa:	4698      	mov	r8, r3
 80064ac:	46a1      	mov	r9, r4
 80064ae:	eb18 080a 	adds.w	r8, r8, sl
 80064b2:	eb49 090b 	adc.w	r9, r9, fp
 80064b6:	f04f 0100 	mov.w	r1, #0
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064ca:	4688      	mov	r8, r1
 80064cc:	4691      	mov	r9, r2
 80064ce:	eb1a 0508 	adds.w	r5, sl, r8
 80064d2:	eb4b 0609 	adc.w	r6, fp, r9
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4619      	mov	r1, r3
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	f04f 0400 	mov.w	r4, #0
 80064e8:	0094      	lsls	r4, r2, #2
 80064ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064ee:	008b      	lsls	r3, r1, #2
 80064f0:	461a      	mov	r2, r3
 80064f2:	4623      	mov	r3, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	4631      	mov	r1, r6
 80064f8:	f7fa fb0a 	bl	8000b10 <__aeabi_uldivmod>
 80064fc:	4603      	mov	r3, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	461a      	mov	r2, r3
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <UART_SetConfig+0x6f4>)
 8006504:	fba3 2302 	umull	r2, r3, r3, r2
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	469b      	mov	fp, r3
 8006512:	f04f 0c00 	mov.w	ip, #0
 8006516:	46d9      	mov	r9, fp
 8006518:	46e2      	mov	sl, ip
 800651a:	eb19 0309 	adds.w	r3, r9, r9
 800651e:	eb4a 040a 	adc.w	r4, sl, sl
 8006522:	4699      	mov	r9, r3
 8006524:	46a2      	mov	sl, r4
 8006526:	eb19 090b 	adds.w	r9, r9, fp
 800652a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800652e:	f04f 0100 	mov.w	r1, #0
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800653a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800653e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006542:	4689      	mov	r9, r1
 8006544:	4692      	mov	sl, r2
 8006546:	eb1b 0509 	adds.w	r5, fp, r9
 800654a:	eb4c 060a 	adc.w	r6, ip, sl
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4619      	mov	r1, r3
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	f04f 0400 	mov.w	r4, #0
 8006560:	0094      	lsls	r4, r2, #2
 8006562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006566:	008b      	lsls	r3, r1, #2
 8006568:	461a      	mov	r2, r3
 800656a:	4623      	mov	r3, r4
 800656c:	4628      	mov	r0, r5
 800656e:	4631      	mov	r1, r6
 8006570:	f7fa face 	bl	8000b10 <__aeabi_uldivmod>
 8006574:	4603      	mov	r3, r0
 8006576:	460c      	mov	r4, r1
 8006578:	461a      	mov	r2, r3
 800657a:	4b32      	ldr	r3, [pc, #200]	; (8006644 <UART_SetConfig+0x6f4>)
 800657c:	fba3 1302 	umull	r1, r3, r3, r2
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	2164      	movs	r1, #100	; 0x64
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	3332      	adds	r3, #50	; 0x32
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <UART_SetConfig+0x6f4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800659a:	4498      	add	r8, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	469b      	mov	fp, r3
 80065a0:	f04f 0c00 	mov.w	ip, #0
 80065a4:	46d9      	mov	r9, fp
 80065a6:	46e2      	mov	sl, ip
 80065a8:	eb19 0309 	adds.w	r3, r9, r9
 80065ac:	eb4a 040a 	adc.w	r4, sl, sl
 80065b0:	4699      	mov	r9, r3
 80065b2:	46a2      	mov	sl, r4
 80065b4:	eb19 090b 	adds.w	r9, r9, fp
 80065b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065bc:	f04f 0100 	mov.w	r1, #0
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065d0:	4689      	mov	r9, r1
 80065d2:	4692      	mov	sl, r2
 80065d4:	eb1b 0509 	adds.w	r5, fp, r9
 80065d8:	eb4c 060a 	adc.w	r6, ip, sl
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4619      	mov	r1, r3
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	f04f 0400 	mov.w	r4, #0
 80065ee:	0094      	lsls	r4, r2, #2
 80065f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065f4:	008b      	lsls	r3, r1, #2
 80065f6:	461a      	mov	r2, r3
 80065f8:	4623      	mov	r3, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	4631      	mov	r1, r6
 80065fe:	f7fa fa87 	bl	8000b10 <__aeabi_uldivmod>
 8006602:	4603      	mov	r3, r0
 8006604:	460c      	mov	r4, r1
 8006606:	461a      	mov	r2, r3
 8006608:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <UART_SetConfig+0x6f4>)
 800660a:	fba3 1302 	umull	r1, r3, r3, r2
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	2164      	movs	r1, #100	; 0x64
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	3332      	adds	r3, #50	; 0x32
 800661c:	4a09      	ldr	r2, [pc, #36]	; (8006644 <UART_SetConfig+0x6f4>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	f003 020f 	and.w	r2, r3, #15
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4442      	add	r2, r8
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	e7ff      	b.n	8006632 <UART_SetConfig+0x6e2>
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	40011000 	.word	0x40011000
 8006640:	40011400 	.word	0x40011400
 8006644:	51eb851f 	.word	0x51eb851f

08006648 <__errno>:
 8006648:	4b01      	ldr	r3, [pc, #4]	; (8006650 <__errno+0x8>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	2000002c 	.word	0x2000002c

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4e0d      	ldr	r6, [pc, #52]	; (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	; (8006690 <__libc_init_array+0x3c>)
 800665a:	1ba4      	subs	r4, r4, r6
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2500      	movs	r5, #0
 8006660:	42a5      	cmp	r5, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4e0b      	ldr	r6, [pc, #44]	; (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	; (8006698 <__libc_init_array+0x44>)
 8006668:	f001 fd44 	bl	80080f4 <_init>
 800666c:	1ba4      	subs	r4, r4, r6
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2500      	movs	r5, #0
 8006672:	42a5      	cmp	r5, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800667c:	4798      	blx	r3
 800667e:	3501      	adds	r5, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006686:	4798      	blx	r3
 8006688:	3501      	adds	r5, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08008360 	.word	0x08008360
 8006690:	08008360 	.word	0x08008360
 8006694:	08008360 	.word	0x08008360
 8006698:	08008364 	.word	0x08008364

0800669c <memset>:
 800669c:	4402      	add	r2, r0
 800669e:	4603      	mov	r3, r0
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d100      	bne.n	80066a6 <memset+0xa>
 80066a4:	4770      	bx	lr
 80066a6:	f803 1b01 	strb.w	r1, [r3], #1
 80066aa:	e7f9      	b.n	80066a0 <memset+0x4>

080066ac <__cvt>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	ec55 4b10 	vmov	r4, r5, d0
 80066b4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	460e      	mov	r6, r1
 80066be:	4691      	mov	r9, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	bfb8      	it	lt
 80066c4:	4622      	movlt	r2, r4
 80066c6:	462b      	mov	r3, r5
 80066c8:	f027 0720 	bic.w	r7, r7, #32
 80066cc:	bfbb      	ittet	lt
 80066ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066d2:	461d      	movlt	r5, r3
 80066d4:	2300      	movge	r3, #0
 80066d6:	232d      	movlt	r3, #45	; 0x2d
 80066d8:	bfb8      	it	lt
 80066da:	4614      	movlt	r4, r2
 80066dc:	2f46      	cmp	r7, #70	; 0x46
 80066de:	700b      	strb	r3, [r1, #0]
 80066e0:	d004      	beq.n	80066ec <__cvt+0x40>
 80066e2:	2f45      	cmp	r7, #69	; 0x45
 80066e4:	d100      	bne.n	80066e8 <__cvt+0x3c>
 80066e6:	3601      	adds	r6, #1
 80066e8:	2102      	movs	r1, #2
 80066ea:	e000      	b.n	80066ee <__cvt+0x42>
 80066ec:	2103      	movs	r1, #3
 80066ee:	ab03      	add	r3, sp, #12
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	ab02      	add	r3, sp, #8
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4632      	mov	r2, r6
 80066f8:	4653      	mov	r3, sl
 80066fa:	ec45 4b10 	vmov	d0, r4, r5
 80066fe:	f000 fbab 	bl	8006e58 <_dtoa_r>
 8006702:	2f47      	cmp	r7, #71	; 0x47
 8006704:	4680      	mov	r8, r0
 8006706:	d102      	bne.n	800670e <__cvt+0x62>
 8006708:	f019 0f01 	tst.w	r9, #1
 800670c:	d026      	beq.n	800675c <__cvt+0xb0>
 800670e:	2f46      	cmp	r7, #70	; 0x46
 8006710:	eb08 0906 	add.w	r9, r8, r6
 8006714:	d111      	bne.n	800673a <__cvt+0x8e>
 8006716:	f898 3000 	ldrb.w	r3, [r8]
 800671a:	2b30      	cmp	r3, #48	; 0x30
 800671c:	d10a      	bne.n	8006734 <__cvt+0x88>
 800671e:	2200      	movs	r2, #0
 8006720:	2300      	movs	r3, #0
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	f7fa f983 	bl	8000a30 <__aeabi_dcmpeq>
 800672a:	b918      	cbnz	r0, 8006734 <__cvt+0x88>
 800672c:	f1c6 0601 	rsb	r6, r6, #1
 8006730:	f8ca 6000 	str.w	r6, [sl]
 8006734:	f8da 3000 	ldr.w	r3, [sl]
 8006738:	4499      	add	r9, r3
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7fa f975 	bl	8000a30 <__aeabi_dcmpeq>
 8006746:	b938      	cbnz	r0, 8006758 <__cvt+0xac>
 8006748:	2230      	movs	r2, #48	; 0x30
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	454b      	cmp	r3, r9
 800674e:	d205      	bcs.n	800675c <__cvt+0xb0>
 8006750:	1c59      	adds	r1, r3, #1
 8006752:	9103      	str	r1, [sp, #12]
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e7f8      	b.n	800674a <__cvt+0x9e>
 8006758:	f8cd 900c 	str.w	r9, [sp, #12]
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006760:	eba3 0308 	sub.w	r3, r3, r8
 8006764:	4640      	mov	r0, r8
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	b004      	add	sp, #16
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800676e <__exponent>:
 800676e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006770:	2900      	cmp	r1, #0
 8006772:	4604      	mov	r4, r0
 8006774:	bfba      	itte	lt
 8006776:	4249      	neglt	r1, r1
 8006778:	232d      	movlt	r3, #45	; 0x2d
 800677a:	232b      	movge	r3, #43	; 0x2b
 800677c:	2909      	cmp	r1, #9
 800677e:	f804 2b02 	strb.w	r2, [r4], #2
 8006782:	7043      	strb	r3, [r0, #1]
 8006784:	dd20      	ble.n	80067c8 <__exponent+0x5a>
 8006786:	f10d 0307 	add.w	r3, sp, #7
 800678a:	461f      	mov	r7, r3
 800678c:	260a      	movs	r6, #10
 800678e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006792:	fb06 1115 	mls	r1, r6, r5, r1
 8006796:	3130      	adds	r1, #48	; 0x30
 8006798:	2d09      	cmp	r5, #9
 800679a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800679e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80067a2:	4629      	mov	r1, r5
 80067a4:	dc09      	bgt.n	80067ba <__exponent+0x4c>
 80067a6:	3130      	adds	r1, #48	; 0x30
 80067a8:	3b02      	subs	r3, #2
 80067aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80067ae:	42bb      	cmp	r3, r7
 80067b0:	4622      	mov	r2, r4
 80067b2:	d304      	bcc.n	80067be <__exponent+0x50>
 80067b4:	1a10      	subs	r0, r2, r0
 80067b6:	b003      	add	sp, #12
 80067b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ba:	4613      	mov	r3, r2
 80067bc:	e7e7      	b.n	800678e <__exponent+0x20>
 80067be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c2:	f804 2b01 	strb.w	r2, [r4], #1
 80067c6:	e7f2      	b.n	80067ae <__exponent+0x40>
 80067c8:	2330      	movs	r3, #48	; 0x30
 80067ca:	4419      	add	r1, r3
 80067cc:	7083      	strb	r3, [r0, #2]
 80067ce:	1d02      	adds	r2, r0, #4
 80067d0:	70c1      	strb	r1, [r0, #3]
 80067d2:	e7ef      	b.n	80067b4 <__exponent+0x46>

080067d4 <_printf_float>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	b08d      	sub	sp, #52	; 0x34
 80067da:	460c      	mov	r4, r1
 80067dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80067e0:	4616      	mov	r6, r2
 80067e2:	461f      	mov	r7, r3
 80067e4:	4605      	mov	r5, r0
 80067e6:	f001 f8ef 	bl	80079c8 <_localeconv_r>
 80067ea:	6803      	ldr	r3, [r0, #0]
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7f9 fcf2 	bl	80001d8 <strlen>
 80067f4:	2300      	movs	r3, #0
 80067f6:	930a      	str	r3, [sp, #40]	; 0x28
 80067f8:	f8d8 3000 	ldr.w	r3, [r8]
 80067fc:	9005      	str	r0, [sp, #20]
 80067fe:	3307      	adds	r3, #7
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	f103 0208 	add.w	r2, r3, #8
 8006808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800680c:	f8d4 b000 	ldr.w	fp, [r4]
 8006810:	f8c8 2000 	str.w	r2, [r8]
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800681c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006820:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006824:	9307      	str	r3, [sp, #28]
 8006826:	f8cd 8018 	str.w	r8, [sp, #24]
 800682a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800682e:	4ba7      	ldr	r3, [pc, #668]	; (8006acc <_printf_float+0x2f8>)
 8006830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006834:	f7fa f92e 	bl	8000a94 <__aeabi_dcmpun>
 8006838:	bb70      	cbnz	r0, 8006898 <_printf_float+0xc4>
 800683a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800683e:	4ba3      	ldr	r3, [pc, #652]	; (8006acc <_printf_float+0x2f8>)
 8006840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006844:	f7fa f908 	bl	8000a58 <__aeabi_dcmple>
 8006848:	bb30      	cbnz	r0, 8006898 <_printf_float+0xc4>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f8f7 	bl	8000a44 <__aeabi_dcmplt>
 8006856:	b110      	cbz	r0, 800685e <_printf_float+0x8a>
 8006858:	232d      	movs	r3, #45	; 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	4a9c      	ldr	r2, [pc, #624]	; (8006ad0 <_printf_float+0x2fc>)
 8006860:	4b9c      	ldr	r3, [pc, #624]	; (8006ad4 <_printf_float+0x300>)
 8006862:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006866:	bf8c      	ite	hi
 8006868:	4690      	movhi	r8, r2
 800686a:	4698      	movls	r8, r3
 800686c:	2303      	movs	r3, #3
 800686e:	f02b 0204 	bic.w	r2, fp, #4
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	9700      	str	r7, [sp, #0]
 800687c:	4633      	mov	r3, r6
 800687e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f9e6 	bl	8006c54 <_printf_common>
 8006888:	3001      	adds	r0, #1
 800688a:	f040 808d 	bne.w	80069a8 <_printf_float+0x1d4>
 800688e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006892:	b00d      	add	sp, #52	; 0x34
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f8f8 	bl	8000a94 <__aeabi_dcmpun>
 80068a4:	b110      	cbz	r0, 80068ac <_printf_float+0xd8>
 80068a6:	4a8c      	ldr	r2, [pc, #560]	; (8006ad8 <_printf_float+0x304>)
 80068a8:	4b8c      	ldr	r3, [pc, #560]	; (8006adc <_printf_float+0x308>)
 80068aa:	e7da      	b.n	8006862 <_printf_float+0x8e>
 80068ac:	6861      	ldr	r1, [r4, #4]
 80068ae:	1c4b      	adds	r3, r1, #1
 80068b0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80068b4:	a80a      	add	r0, sp, #40	; 0x28
 80068b6:	d13e      	bne.n	8006936 <_printf_float+0x162>
 80068b8:	2306      	movs	r3, #6
 80068ba:	6063      	str	r3, [r4, #4]
 80068bc:	2300      	movs	r3, #0
 80068be:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80068c2:	ab09      	add	r3, sp, #36	; 0x24
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	ec49 8b10 	vmov	d0, r8, r9
 80068ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	f8cd a004 	str.w	sl, [sp, #4]
 80068d4:	6861      	ldr	r1, [r4, #4]
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7ff fee8 	bl	80066ac <__cvt>
 80068dc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80068e0:	2b47      	cmp	r3, #71	; 0x47
 80068e2:	4680      	mov	r8, r0
 80068e4:	d109      	bne.n	80068fa <_printf_float+0x126>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	1cd8      	adds	r0, r3, #3
 80068ea:	db02      	blt.n	80068f2 <_printf_float+0x11e>
 80068ec:	6862      	ldr	r2, [r4, #4]
 80068ee:	4293      	cmp	r3, r2
 80068f0:	dd47      	ble.n	8006982 <_printf_float+0x1ae>
 80068f2:	f1aa 0a02 	sub.w	sl, sl, #2
 80068f6:	fa5f fa8a 	uxtb.w	sl, sl
 80068fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006900:	d824      	bhi.n	800694c <_printf_float+0x178>
 8006902:	3901      	subs	r1, #1
 8006904:	4652      	mov	r2, sl
 8006906:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800690a:	9109      	str	r1, [sp, #36]	; 0x24
 800690c:	f7ff ff2f 	bl	800676e <__exponent>
 8006910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006912:	1813      	adds	r3, r2, r0
 8006914:	2a01      	cmp	r2, #1
 8006916:	4681      	mov	r9, r0
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	dc02      	bgt.n	8006922 <_printf_float+0x14e>
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	07d1      	lsls	r1, r2, #31
 8006920:	d501      	bpl.n	8006926 <_printf_float+0x152>
 8006922:	3301      	adds	r3, #1
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0a5      	beq.n	800687a <_printf_float+0xa6>
 800692e:	232d      	movs	r3, #45	; 0x2d
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006934:	e7a1      	b.n	800687a <_printf_float+0xa6>
 8006936:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800693a:	f000 8177 	beq.w	8006c2c <_printf_float+0x458>
 800693e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006942:	d1bb      	bne.n	80068bc <_printf_float+0xe8>
 8006944:	2900      	cmp	r1, #0
 8006946:	d1b9      	bne.n	80068bc <_printf_float+0xe8>
 8006948:	2301      	movs	r3, #1
 800694a:	e7b6      	b.n	80068ba <_printf_float+0xe6>
 800694c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006950:	d119      	bne.n	8006986 <_printf_float+0x1b2>
 8006952:	2900      	cmp	r1, #0
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	dd0c      	ble.n	8006972 <_printf_float+0x19e>
 8006958:	6121      	str	r1, [r4, #16]
 800695a:	b913      	cbnz	r3, 8006962 <_printf_float+0x18e>
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	07d2      	lsls	r2, r2, #31
 8006960:	d502      	bpl.n	8006968 <_printf_float+0x194>
 8006962:	3301      	adds	r3, #1
 8006964:	440b      	add	r3, r1
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	65a3      	str	r3, [r4, #88]	; 0x58
 800696c:	f04f 0900 	mov.w	r9, #0
 8006970:	e7d9      	b.n	8006926 <_printf_float+0x152>
 8006972:	b913      	cbnz	r3, 800697a <_printf_float+0x1a6>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	07d0      	lsls	r0, r2, #31
 8006978:	d501      	bpl.n	800697e <_printf_float+0x1aa>
 800697a:	3302      	adds	r3, #2
 800697c:	e7f3      	b.n	8006966 <_printf_float+0x192>
 800697e:	2301      	movs	r3, #1
 8006980:	e7f1      	b.n	8006966 <_printf_float+0x192>
 8006982:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006986:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800698a:	4293      	cmp	r3, r2
 800698c:	db05      	blt.n	800699a <_printf_float+0x1c6>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	07d1      	lsls	r1, r2, #31
 8006994:	d5e8      	bpl.n	8006968 <_printf_float+0x194>
 8006996:	3301      	adds	r3, #1
 8006998:	e7e5      	b.n	8006966 <_printf_float+0x192>
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfd4      	ite	le
 800699e:	f1c3 0302 	rsble	r3, r3, #2
 80069a2:	2301      	movgt	r3, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	e7de      	b.n	8006966 <_printf_float+0x192>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	055a      	lsls	r2, r3, #21
 80069ac:	d407      	bmi.n	80069be <_printf_float+0x1ea>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	4642      	mov	r2, r8
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d12b      	bne.n	8006a14 <_printf_float+0x240>
 80069bc:	e767      	b.n	800688e <_printf_float+0xba>
 80069be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80069c2:	f240 80dc 	bls.w	8006b7e <_printf_float+0x3aa>
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069ce:	f7fa f82f 	bl	8000a30 <__aeabi_dcmpeq>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d033      	beq.n	8006a3e <_printf_float+0x26a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4a41      	ldr	r2, [pc, #260]	; (8006ae0 <_printf_float+0x30c>)
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f af54 	beq.w	800688e <_printf_float+0xba>
 80069e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069ea:	429a      	cmp	r2, r3
 80069ec:	db02      	blt.n	80069f4 <_printf_float+0x220>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07d8      	lsls	r0, r3, #31
 80069f2:	d50f      	bpl.n	8006a14 <_printf_float+0x240>
 80069f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f af45 	beq.w	800688e <_printf_float+0xba>
 8006a04:	f04f 0800 	mov.w	r8, #0
 8006a08:	f104 091a 	add.w	r9, r4, #26
 8006a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4543      	cmp	r3, r8
 8006a12:	dc09      	bgt.n	8006a28 <_printf_float+0x254>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	f100 8103 	bmi.w	8006c22 <_printf_float+0x44e>
 8006a1c:	68e0      	ldr	r0, [r4, #12]
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a20:	4298      	cmp	r0, r3
 8006a22:	bfb8      	it	lt
 8006a24:	4618      	movlt	r0, r3
 8006a26:	e734      	b.n	8006892 <_printf_float+0xbe>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	464a      	mov	r2, r9
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f af2b 	beq.w	800688e <_printf_float+0xba>
 8006a38:	f108 0801 	add.w	r8, r8, #1
 8006a3c:	e7e6      	b.n	8006a0c <_printf_float+0x238>
 8006a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc2b      	bgt.n	8006a9c <_printf_float+0x2c8>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <_printf_float+0x30c>)
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af1d 	beq.w	800688e <_printf_float+0xba>
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	b923      	cbnz	r3, 8006a62 <_printf_float+0x28e>
 8006a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5a:	b913      	cbnz	r3, 8006a62 <_printf_float+0x28e>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07d9      	lsls	r1, r3, #31
 8006a60:	d5d8      	bpl.n	8006a14 <_printf_float+0x240>
 8006a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f af0e 	beq.w	800688e <_printf_float+0xba>
 8006a72:	f04f 0900 	mov.w	r9, #0
 8006a76:	f104 0a1a 	add.w	sl, r4, #26
 8006a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	454b      	cmp	r3, r9
 8006a80:	dc01      	bgt.n	8006a86 <_printf_float+0x2b2>
 8006a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a84:	e794      	b.n	80069b0 <_printf_float+0x1dc>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f aefc 	beq.w	800688e <_printf_float+0xba>
 8006a96:	f109 0901 	add.w	r9, r9, #1
 8006a9a:	e7ee      	b.n	8006a7a <_printf_float+0x2a6>
 8006a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bfa8      	it	ge
 8006aa4:	461a      	movge	r2, r3
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	dd07      	ble.n	8006abc <_printf_float+0x2e8>
 8006aac:	4613      	mov	r3, r2
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f aee9 	beq.w	800688e <_printf_float+0xba>
 8006abc:	f104 031a 	add.w	r3, r4, #26
 8006ac0:	f04f 0b00 	mov.w	fp, #0
 8006ac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ac8:	9306      	str	r3, [sp, #24]
 8006aca:	e015      	b.n	8006af8 <_printf_float+0x324>
 8006acc:	7fefffff 	.word	0x7fefffff
 8006ad0:	08008134 	.word	0x08008134
 8006ad4:	08008130 	.word	0x08008130
 8006ad8:	0800813c 	.word	0x0800813c
 8006adc:	08008138 	.word	0x08008138
 8006ae0:	08008140 	.word	0x08008140
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	9a06      	ldr	r2, [sp, #24]
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f aecd 	beq.w	800688e <_printf_float+0xba>
 8006af4:	f10b 0b01 	add.w	fp, fp, #1
 8006af8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006afc:	ebaa 0309 	sub.w	r3, sl, r9
 8006b00:	455b      	cmp	r3, fp
 8006b02:	dcef      	bgt.n	8006ae4 <_printf_float+0x310>
 8006b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	44d0      	add	r8, sl
 8006b0c:	db15      	blt.n	8006b3a <_printf_float+0x366>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07da      	lsls	r2, r3, #31
 8006b12:	d412      	bmi.n	8006b3a <_printf_float+0x366>
 8006b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b18:	eba3 020a 	sub.w	r2, r3, sl
 8006b1c:	eba3 0a01 	sub.w	sl, r3, r1
 8006b20:	4592      	cmp	sl, r2
 8006b22:	bfa8      	it	ge
 8006b24:	4692      	movge	sl, r2
 8006b26:	f1ba 0f00 	cmp.w	sl, #0
 8006b2a:	dc0e      	bgt.n	8006b4a <_printf_float+0x376>
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b34:	f104 091a 	add.w	r9, r4, #26
 8006b38:	e019      	b.n	8006b6e <_printf_float+0x39a>
 8006b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	d1e5      	bne.n	8006b14 <_printf_float+0x340>
 8006b48:	e6a1      	b.n	800688e <_printf_float+0xba>
 8006b4a:	4653      	mov	r3, sl
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	d1e9      	bne.n	8006b2c <_printf_float+0x358>
 8006b58:	e699      	b.n	800688e <_printf_float+0xba>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	464a      	mov	r2, r9
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f ae92 	beq.w	800688e <_printf_float+0xba>
 8006b6a:	f108 0801 	add.w	r8, r8, #1
 8006b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	eba3 030a 	sub.w	r3, r3, sl
 8006b78:	4543      	cmp	r3, r8
 8006b7a:	dcee      	bgt.n	8006b5a <_printf_float+0x386>
 8006b7c:	e74a      	b.n	8006a14 <_printf_float+0x240>
 8006b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b80:	2a01      	cmp	r2, #1
 8006b82:	dc01      	bgt.n	8006b88 <_printf_float+0x3b4>
 8006b84:	07db      	lsls	r3, r3, #31
 8006b86:	d53a      	bpl.n	8006bfe <_printf_float+0x42a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f ae7b 	beq.w	800688e <_printf_float+0xba>
 8006b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f108 0801 	add.w	r8, r8, #1
 8006ba8:	f43f ae71 	beq.w	800688e <_printf_float+0xba>
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f7f9 ff39 	bl	8000a30 <__aeabi_dcmpeq>
 8006bbe:	b9c8      	cbnz	r0, 8006bf4 <_printf_float+0x420>
 8006bc0:	4653      	mov	r3, sl
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d10e      	bne.n	8006bec <_printf_float+0x418>
 8006bce:	e65e      	b.n	800688e <_printf_float+0xba>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4652      	mov	r2, sl
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f ae57 	beq.w	800688e <_printf_float+0xba>
 8006be0:	f108 0801 	add.w	r8, r8, #1
 8006be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4543      	cmp	r3, r8
 8006bea:	dcf1      	bgt.n	8006bd0 <_printf_float+0x3fc>
 8006bec:	464b      	mov	r3, r9
 8006bee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bf2:	e6de      	b.n	80069b2 <_printf_float+0x1de>
 8006bf4:	f04f 0800 	mov.w	r8, #0
 8006bf8:	f104 0a1a 	add.w	sl, r4, #26
 8006bfc:	e7f2      	b.n	8006be4 <_printf_float+0x410>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e7df      	b.n	8006bc2 <_printf_float+0x3ee>
 8006c02:	2301      	movs	r3, #1
 8006c04:	464a      	mov	r2, r9
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae3e 	beq.w	800688e <_printf_float+0xba>
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	dcf0      	bgt.n	8006c02 <_printf_float+0x42e>
 8006c20:	e6fc      	b.n	8006a1c <_printf_float+0x248>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	f104 0919 	add.w	r9, r4, #25
 8006c2a:	e7f4      	b.n	8006c16 <_printf_float+0x442>
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	f43f ae8b 	beq.w	8006948 <_printf_float+0x174>
 8006c32:	2300      	movs	r3, #0
 8006c34:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c38:	ab09      	add	r3, sp, #36	; 0x24
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	ec49 8b10 	vmov	d0, r8, r9
 8006c40:	6022      	str	r2, [r4, #0]
 8006c42:	f8cd a004 	str.w	sl, [sp, #4]
 8006c46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7ff fd2e 	bl	80066ac <__cvt>
 8006c50:	4680      	mov	r8, r0
 8006c52:	e648      	b.n	80068e6 <_printf_float+0x112>

08006c54 <_printf_common>:
 8006c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	4691      	mov	r9, r2
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	688a      	ldr	r2, [r1, #8]
 8006c5e:	690b      	ldr	r3, [r1, #16]
 8006c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c64:	4293      	cmp	r3, r2
 8006c66:	bfb8      	it	lt
 8006c68:	4613      	movlt	r3, r2
 8006c6a:	f8c9 3000 	str.w	r3, [r9]
 8006c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c72:	4606      	mov	r6, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	b112      	cbz	r2, 8006c7e <_printf_common+0x2a>
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f8c9 3000 	str.w	r3, [r9]
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	0699      	lsls	r1, r3, #26
 8006c82:	bf42      	ittt	mi
 8006c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c88:	3302      	addmi	r3, #2
 8006c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	f015 0506 	ands.w	r5, r5, #6
 8006c94:	d107      	bne.n	8006ca6 <_printf_common+0x52>
 8006c96:	f104 0a19 	add.w	sl, r4, #25
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	42ab      	cmp	r3, r5
 8006ca4:	dc28      	bgt.n	8006cf8 <_printf_common+0xa4>
 8006ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	3300      	adds	r3, #0
 8006cae:	bf18      	it	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	0692      	lsls	r2, r2, #26
 8006cb4:	d42d      	bmi.n	8006d12 <_printf_common+0xbe>
 8006cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cba:	4639      	mov	r1, r7
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	47c0      	blx	r8
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d020      	beq.n	8006d06 <_printf_common+0xb2>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	68e5      	ldr	r5, [r4, #12]
 8006cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ccc:	f003 0306 	and.w	r3, r3, #6
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	bf08      	it	eq
 8006cd4:	1aad      	subeq	r5, r5, r2
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	6922      	ldr	r2, [r4, #16]
 8006cda:	bf0c      	ite	eq
 8006cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce0:	2500      	movne	r5, #0
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	bfc4      	itt	gt
 8006ce6:	1a9b      	subgt	r3, r3, r2
 8006ce8:	18ed      	addgt	r5, r5, r3
 8006cea:	f04f 0900 	mov.w	r9, #0
 8006cee:	341a      	adds	r4, #26
 8006cf0:	454d      	cmp	r5, r9
 8006cf2:	d11a      	bne.n	8006d2a <_printf_common+0xd6>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e008      	b.n	8006d0a <_printf_common+0xb6>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	4630      	mov	r0, r6
 8006d00:	47c0      	blx	r8
 8006d02:	3001      	adds	r0, #1
 8006d04:	d103      	bne.n	8006d0e <_printf_common+0xba>
 8006d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0e:	3501      	adds	r5, #1
 8006d10:	e7c3      	b.n	8006c9a <_printf_common+0x46>
 8006d12:	18e1      	adds	r1, r4, r3
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	2030      	movs	r0, #48	; 0x30
 8006d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d1c:	4422      	add	r2, r4
 8006d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d26:	3302      	adds	r3, #2
 8006d28:	e7c5      	b.n	8006cb6 <_printf_common+0x62>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4630      	mov	r0, r6
 8006d32:	47c0      	blx	r8
 8006d34:	3001      	adds	r0, #1
 8006d36:	d0e6      	beq.n	8006d06 <_printf_common+0xb2>
 8006d38:	f109 0901 	add.w	r9, r9, #1
 8006d3c:	e7d8      	b.n	8006cf0 <_printf_common+0x9c>

08006d3e <quorem>:
 8006d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d42:	6903      	ldr	r3, [r0, #16]
 8006d44:	690c      	ldr	r4, [r1, #16]
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	4680      	mov	r8, r0
 8006d4a:	f2c0 8082 	blt.w	8006e52 <quorem+0x114>
 8006d4e:	3c01      	subs	r4, #1
 8006d50:	f101 0714 	add.w	r7, r1, #20
 8006d54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006d58:	f100 0614 	add.w	r6, r0, #20
 8006d5c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006d60:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006d64:	eb06 030c 	add.w	r3, r6, ip
 8006d68:	3501      	adds	r5, #1
 8006d6a:	eb07 090c 	add.w	r9, r7, ip
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	fbb0 f5f5 	udiv	r5, r0, r5
 8006d74:	b395      	cbz	r5, 8006ddc <quorem+0x9e>
 8006d76:	f04f 0a00 	mov.w	sl, #0
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	46b6      	mov	lr, r6
 8006d7e:	46d3      	mov	fp, sl
 8006d80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d84:	b293      	uxth	r3, r2
 8006d86:	fb05 a303 	mla	r3, r5, r3, sl
 8006d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ebab 0303 	sub.w	r3, fp, r3
 8006d94:	0c12      	lsrs	r2, r2, #16
 8006d96:	f8de b000 	ldr.w	fp, [lr]
 8006d9a:	fb05 a202 	mla	r2, r5, r2, sl
 8006d9e:	fa13 f38b 	uxtah	r3, r3, fp
 8006da2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006da6:	fa1f fb82 	uxth.w	fp, r2
 8006daa:	f8de 2000 	ldr.w	r2, [lr]
 8006dae:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006db2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dbc:	4581      	cmp	r9, r0
 8006dbe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006dc2:	f84e 3b04 	str.w	r3, [lr], #4
 8006dc6:	d2db      	bcs.n	8006d80 <quorem+0x42>
 8006dc8:	f856 300c 	ldr.w	r3, [r6, ip]
 8006dcc:	b933      	cbnz	r3, 8006ddc <quorem+0x9e>
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	3b04      	subs	r3, #4
 8006dd2:	429e      	cmp	r6, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	d330      	bcc.n	8006e3a <quorem+0xfc>
 8006dd8:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ddc:	4640      	mov	r0, r8
 8006dde:	f001 f829 	bl	8007e34 <__mcmp>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	db25      	blt.n	8006e32 <quorem+0xf4>
 8006de6:	3501      	adds	r5, #1
 8006de8:	4630      	mov	r0, r6
 8006dea:	f04f 0c00 	mov.w	ip, #0
 8006dee:	f857 2b04 	ldr.w	r2, [r7], #4
 8006df2:	f8d0 e000 	ldr.w	lr, [r0]
 8006df6:	b293      	uxth	r3, r2
 8006df8:	ebac 0303 	sub.w	r3, ip, r3
 8006dfc:	0c12      	lsrs	r2, r2, #16
 8006dfe:	fa13 f38e 	uxtah	r3, r3, lr
 8006e02:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e10:	45b9      	cmp	r9, r7
 8006e12:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e16:	f840 3b04 	str.w	r3, [r0], #4
 8006e1a:	d2e8      	bcs.n	8006dee <quorem+0xb0>
 8006e1c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006e20:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006e24:	b92a      	cbnz	r2, 8006e32 <quorem+0xf4>
 8006e26:	3b04      	subs	r3, #4
 8006e28:	429e      	cmp	r6, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	d30b      	bcc.n	8006e46 <quorem+0x108>
 8006e2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e32:	4628      	mov	r0, r5
 8006e34:	b003      	add	sp, #12
 8006e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	3b04      	subs	r3, #4
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d1ca      	bne.n	8006dd8 <quorem+0x9a>
 8006e42:	3c01      	subs	r4, #1
 8006e44:	e7c5      	b.n	8006dd2 <quorem+0x94>
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	3b04      	subs	r3, #4
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d1ef      	bne.n	8006e2e <quorem+0xf0>
 8006e4e:	3c01      	subs	r4, #1
 8006e50:	e7ea      	b.n	8006e28 <quorem+0xea>
 8006e52:	2000      	movs	r0, #0
 8006e54:	e7ee      	b.n	8006e34 <quorem+0xf6>
	...

08006e58 <_dtoa_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	ec57 6b10 	vmov	r6, r7, d0
 8006e60:	b097      	sub	sp, #92	; 0x5c
 8006e62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e64:	9106      	str	r1, [sp, #24]
 8006e66:	4604      	mov	r4, r0
 8006e68:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e6a:	9312      	str	r3, [sp, #72]	; 0x48
 8006e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e70:	e9cd 6700 	strd	r6, r7, [sp]
 8006e74:	b93d      	cbnz	r5, 8006e86 <_dtoa_r+0x2e>
 8006e76:	2010      	movs	r0, #16
 8006e78:	f000 fdb4 	bl	80079e4 <malloc>
 8006e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8006e7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e82:	6005      	str	r5, [r0, #0]
 8006e84:	60c5      	str	r5, [r0, #12]
 8006e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	b151      	cbz	r1, 8006ea2 <_dtoa_r+0x4a>
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	604a      	str	r2, [r1, #4]
 8006e90:	2301      	movs	r3, #1
 8006e92:	4093      	lsls	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 fdeb 	bl	8007a72 <_Bfree>
 8006e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	1e3b      	subs	r3, r7, #0
 8006ea4:	bfbb      	ittet	lt
 8006ea6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eaa:	9301      	strlt	r3, [sp, #4]
 8006eac:	2300      	movge	r3, #0
 8006eae:	2201      	movlt	r2, #1
 8006eb0:	bfac      	ite	ge
 8006eb2:	f8c8 3000 	strge.w	r3, [r8]
 8006eb6:	f8c8 2000 	strlt.w	r2, [r8]
 8006eba:	4baf      	ldr	r3, [pc, #700]	; (8007178 <_dtoa_r+0x320>)
 8006ebc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ec0:	ea33 0308 	bics.w	r3, r3, r8
 8006ec4:	d114      	bne.n	8006ef0 <_dtoa_r+0x98>
 8006ec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	b923      	cbnz	r3, 8006edc <_dtoa_r+0x84>
 8006ed2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f000 8542 	beq.w	8007960 <_dtoa_r+0xb08>
 8006edc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ede:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800718c <_dtoa_r+0x334>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8544 	beq.w	8007970 <_dtoa_r+0xb18>
 8006ee8:	f10b 0303 	add.w	r3, fp, #3
 8006eec:	f000 bd3e 	b.w	800796c <_dtoa_r+0xb14>
 8006ef0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 fd98 	bl	8000a30 <__aeabi_dcmpeq>
 8006f00:	4681      	mov	r9, r0
 8006f02:	b168      	cbz	r0, 8006f20 <_dtoa_r+0xc8>
 8006f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f06:	2301      	movs	r3, #1
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8524 	beq.w	800795a <_dtoa_r+0xb02>
 8006f12:	4b9a      	ldr	r3, [pc, #616]	; (800717c <_dtoa_r+0x324>)
 8006f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f16:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	f000 bd28 	b.w	8007970 <_dtoa_r+0xb18>
 8006f20:	aa14      	add	r2, sp, #80	; 0x50
 8006f22:	a915      	add	r1, sp, #84	; 0x54
 8006f24:	ec47 6b10 	vmov	d0, r6, r7
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fffa 	bl	8007f22 <__d2b>
 8006f2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f32:	9004      	str	r0, [sp, #16]
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	d07c      	beq.n	8007032 <_dtoa_r+0x1da>
 8006f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006f40:	46b2      	mov	sl, r6
 8006f42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006f4e:	2200      	movs	r2, #0
 8006f50:	4b8b      	ldr	r3, [pc, #556]	; (8007180 <_dtoa_r+0x328>)
 8006f52:	4650      	mov	r0, sl
 8006f54:	4659      	mov	r1, fp
 8006f56:	f7f9 f94b 	bl	80001f0 <__aeabi_dsub>
 8006f5a:	a381      	add	r3, pc, #516	; (adr r3, 8007160 <_dtoa_r+0x308>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f7f9 fafe 	bl	8000560 <__aeabi_dmul>
 8006f64:	a380      	add	r3, pc, #512	; (adr r3, 8007168 <_dtoa_r+0x310>)
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	f7f9 f943 	bl	80001f4 <__adddf3>
 8006f6e:	4606      	mov	r6, r0
 8006f70:	4628      	mov	r0, r5
 8006f72:	460f      	mov	r7, r1
 8006f74:	f7f9 fa8a 	bl	800048c <__aeabi_i2d>
 8006f78:	a37d      	add	r3, pc, #500	; (adr r3, 8007170 <_dtoa_r+0x318>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f7f9 faef 	bl	8000560 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 f933 	bl	80001f4 <__adddf3>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	460f      	mov	r7, r1
 8006f92:	f7f9 fd95 	bl	8000ac0 <__aeabi_d2iz>
 8006f96:	2200      	movs	r2, #0
 8006f98:	4682      	mov	sl, r0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 fd50 	bl	8000a44 <__aeabi_dcmplt>
 8006fa4:	b148      	cbz	r0, 8006fba <_dtoa_r+0x162>
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	f7f9 fa70 	bl	800048c <__aeabi_i2d>
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	f7f9 fd3e 	bl	8000a30 <__aeabi_dcmpeq>
 8006fb4:	b908      	cbnz	r0, 8006fba <_dtoa_r+0x162>
 8006fb6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fba:	f1ba 0f16 	cmp.w	sl, #22
 8006fbe:	d859      	bhi.n	8007074 <_dtoa_r+0x21c>
 8006fc0:	4970      	ldr	r1, [pc, #448]	; (8007184 <_dtoa_r+0x32c>)
 8006fc2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fce:	f7f9 fd57 	bl	8000a80 <__aeabi_dcmpgt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d050      	beq.n	8007078 <_dtoa_r+0x220>
 8006fd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fda:	2300      	movs	r3, #0
 8006fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fe0:	1b5d      	subs	r5, r3, r5
 8006fe2:	f1b5 0801 	subs.w	r8, r5, #1
 8006fe6:	bf49      	itett	mi
 8006fe8:	f1c5 0301 	rsbmi	r3, r5, #1
 8006fec:	2300      	movpl	r3, #0
 8006fee:	9305      	strmi	r3, [sp, #20]
 8006ff0:	f04f 0800 	movmi.w	r8, #0
 8006ff4:	bf58      	it	pl
 8006ff6:	9305      	strpl	r3, [sp, #20]
 8006ff8:	f1ba 0f00 	cmp.w	sl, #0
 8006ffc:	db3e      	blt.n	800707c <_dtoa_r+0x224>
 8006ffe:	2300      	movs	r3, #0
 8007000:	44d0      	add	r8, sl
 8007002:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	9b06      	ldr	r3, [sp, #24]
 800700a:	2b09      	cmp	r3, #9
 800700c:	f200 8090 	bhi.w	8007130 <_dtoa_r+0x2d8>
 8007010:	2b05      	cmp	r3, #5
 8007012:	bfc4      	itt	gt
 8007014:	3b04      	subgt	r3, #4
 8007016:	9306      	strgt	r3, [sp, #24]
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	f1a3 0302 	sub.w	r3, r3, #2
 800701e:	bfcc      	ite	gt
 8007020:	2500      	movgt	r5, #0
 8007022:	2501      	movle	r5, #1
 8007024:	2b03      	cmp	r3, #3
 8007026:	f200 808f 	bhi.w	8007148 <_dtoa_r+0x2f0>
 800702a:	e8df f003 	tbb	[pc, r3]
 800702e:	7f7d      	.short	0x7f7d
 8007030:	7131      	.short	0x7131
 8007032:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007036:	441d      	add	r5, r3
 8007038:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800703c:	2820      	cmp	r0, #32
 800703e:	dd13      	ble.n	8007068 <_dtoa_r+0x210>
 8007040:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	fa08 f800 	lsl.w	r8, r8, r0
 800704a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800704e:	fa23 f000 	lsr.w	r0, r3, r0
 8007052:	ea48 0000 	orr.w	r0, r8, r0
 8007056:	f7f9 fa09 	bl	800046c <__aeabi_ui2d>
 800705a:	2301      	movs	r3, #1
 800705c:	4682      	mov	sl, r0
 800705e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007062:	3d01      	subs	r5, #1
 8007064:	9313      	str	r3, [sp, #76]	; 0x4c
 8007066:	e772      	b.n	8006f4e <_dtoa_r+0xf6>
 8007068:	9b00      	ldr	r3, [sp, #0]
 800706a:	f1c0 0020 	rsb	r0, r0, #32
 800706e:	fa03 f000 	lsl.w	r0, r3, r0
 8007072:	e7f0      	b.n	8007056 <_dtoa_r+0x1fe>
 8007074:	2301      	movs	r3, #1
 8007076:	e7b1      	b.n	8006fdc <_dtoa_r+0x184>
 8007078:	900f      	str	r0, [sp, #60]	; 0x3c
 800707a:	e7b0      	b.n	8006fde <_dtoa_r+0x186>
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	eba3 030a 	sub.w	r3, r3, sl
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	f1ca 0300 	rsb	r3, sl, #0
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	2300      	movs	r3, #0
 800708c:	930e      	str	r3, [sp, #56]	; 0x38
 800708e:	e7bb      	b.n	8007008 <_dtoa_r+0x1b0>
 8007090:	2301      	movs	r3, #1
 8007092:	930a      	str	r3, [sp, #40]	; 0x28
 8007094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	dd59      	ble.n	800714e <_dtoa_r+0x2f6>
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	4699      	mov	r9, r3
 800709e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070a0:	2200      	movs	r2, #0
 80070a2:	6072      	str	r2, [r6, #4]
 80070a4:	2204      	movs	r2, #4
 80070a6:	f102 0014 	add.w	r0, r2, #20
 80070aa:	4298      	cmp	r0, r3
 80070ac:	6871      	ldr	r1, [r6, #4]
 80070ae:	d953      	bls.n	8007158 <_dtoa_r+0x300>
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fcaa 	bl	8007a0a <_Balloc>
 80070b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b8:	6030      	str	r0, [r6, #0]
 80070ba:	f1b9 0f0e 	cmp.w	r9, #14
 80070be:	f8d3 b000 	ldr.w	fp, [r3]
 80070c2:	f200 80e6 	bhi.w	8007292 <_dtoa_r+0x43a>
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	f000 80e3 	beq.w	8007292 <_dtoa_r+0x43a>
 80070cc:	ed9d 7b00 	vldr	d7, [sp]
 80070d0:	f1ba 0f00 	cmp.w	sl, #0
 80070d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80070d8:	dd74      	ble.n	80071c4 <_dtoa_r+0x36c>
 80070da:	4a2a      	ldr	r2, [pc, #168]	; (8007184 <_dtoa_r+0x32c>)
 80070dc:	f00a 030f 	and.w	r3, sl, #15
 80070e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070e4:	ed93 7b00 	vldr	d7, [r3]
 80070e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80070ec:	06f0      	lsls	r0, r6, #27
 80070ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80070f2:	d565      	bpl.n	80071c0 <_dtoa_r+0x368>
 80070f4:	4b24      	ldr	r3, [pc, #144]	; (8007188 <_dtoa_r+0x330>)
 80070f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070fe:	f7f9 fb59 	bl	80007b4 <__aeabi_ddiv>
 8007102:	e9cd 0100 	strd	r0, r1, [sp]
 8007106:	f006 060f 	and.w	r6, r6, #15
 800710a:	2503      	movs	r5, #3
 800710c:	4f1e      	ldr	r7, [pc, #120]	; (8007188 <_dtoa_r+0x330>)
 800710e:	e04c      	b.n	80071aa <_dtoa_r+0x352>
 8007110:	2301      	movs	r3, #1
 8007112:	930a      	str	r3, [sp, #40]	; 0x28
 8007114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007116:	4453      	add	r3, sl
 8007118:	f103 0901 	add.w	r9, r3, #1
 800711c:	9302      	str	r3, [sp, #8]
 800711e:	464b      	mov	r3, r9
 8007120:	2b01      	cmp	r3, #1
 8007122:	bfb8      	it	lt
 8007124:	2301      	movlt	r3, #1
 8007126:	e7ba      	b.n	800709e <_dtoa_r+0x246>
 8007128:	2300      	movs	r3, #0
 800712a:	e7b2      	b.n	8007092 <_dtoa_r+0x23a>
 800712c:	2300      	movs	r3, #0
 800712e:	e7f0      	b.n	8007112 <_dtoa_r+0x2ba>
 8007130:	2501      	movs	r5, #1
 8007132:	2300      	movs	r3, #0
 8007134:	9306      	str	r3, [sp, #24]
 8007136:	950a      	str	r5, [sp, #40]	; 0x28
 8007138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800713c:	9302      	str	r3, [sp, #8]
 800713e:	4699      	mov	r9, r3
 8007140:	2200      	movs	r2, #0
 8007142:	2312      	movs	r3, #18
 8007144:	920b      	str	r2, [sp, #44]	; 0x2c
 8007146:	e7aa      	b.n	800709e <_dtoa_r+0x246>
 8007148:	2301      	movs	r3, #1
 800714a:	930a      	str	r3, [sp, #40]	; 0x28
 800714c:	e7f4      	b.n	8007138 <_dtoa_r+0x2e0>
 800714e:	2301      	movs	r3, #1
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	4699      	mov	r9, r3
 8007154:	461a      	mov	r2, r3
 8007156:	e7f5      	b.n	8007144 <_dtoa_r+0x2ec>
 8007158:	3101      	adds	r1, #1
 800715a:	6071      	str	r1, [r6, #4]
 800715c:	0052      	lsls	r2, r2, #1
 800715e:	e7a2      	b.n	80070a6 <_dtoa_r+0x24e>
 8007160:	636f4361 	.word	0x636f4361
 8007164:	3fd287a7 	.word	0x3fd287a7
 8007168:	8b60c8b3 	.word	0x8b60c8b3
 800716c:	3fc68a28 	.word	0x3fc68a28
 8007170:	509f79fb 	.word	0x509f79fb
 8007174:	3fd34413 	.word	0x3fd34413
 8007178:	7ff00000 	.word	0x7ff00000
 800717c:	08008141 	.word	0x08008141
 8007180:	3ff80000 	.word	0x3ff80000
 8007184:	08008178 	.word	0x08008178
 8007188:	08008150 	.word	0x08008150
 800718c:	0800814b 	.word	0x0800814b
 8007190:	07f1      	lsls	r1, r6, #31
 8007192:	d508      	bpl.n	80071a6 <_dtoa_r+0x34e>
 8007194:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800719c:	f7f9 f9e0 	bl	8000560 <__aeabi_dmul>
 80071a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071a4:	3501      	adds	r5, #1
 80071a6:	1076      	asrs	r6, r6, #1
 80071a8:	3708      	adds	r7, #8
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	d1f0      	bne.n	8007190 <_dtoa_r+0x338>
 80071ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071b6:	f7f9 fafd 	bl	80007b4 <__aeabi_ddiv>
 80071ba:	e9cd 0100 	strd	r0, r1, [sp]
 80071be:	e01a      	b.n	80071f6 <_dtoa_r+0x39e>
 80071c0:	2502      	movs	r5, #2
 80071c2:	e7a3      	b.n	800710c <_dtoa_r+0x2b4>
 80071c4:	f000 80a0 	beq.w	8007308 <_dtoa_r+0x4b0>
 80071c8:	f1ca 0600 	rsb	r6, sl, #0
 80071cc:	4b9f      	ldr	r3, [pc, #636]	; (800744c <_dtoa_r+0x5f4>)
 80071ce:	4fa0      	ldr	r7, [pc, #640]	; (8007450 <_dtoa_r+0x5f8>)
 80071d0:	f006 020f 	and.w	r2, r6, #15
 80071d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071e0:	f7f9 f9be 	bl	8000560 <__aeabi_dmul>
 80071e4:	e9cd 0100 	strd	r0, r1, [sp]
 80071e8:	1136      	asrs	r6, r6, #4
 80071ea:	2300      	movs	r3, #0
 80071ec:	2502      	movs	r5, #2
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d17f      	bne.n	80072f2 <_dtoa_r+0x49a>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e1      	bne.n	80071ba <_dtoa_r+0x362>
 80071f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8087 	beq.w	800730c <_dtoa_r+0x4b4>
 80071fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007202:	2200      	movs	r2, #0
 8007204:	4b93      	ldr	r3, [pc, #588]	; (8007454 <_dtoa_r+0x5fc>)
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	f7f9 fc1b 	bl	8000a44 <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	d07c      	beq.n	800730c <_dtoa_r+0x4b4>
 8007212:	f1b9 0f00 	cmp.w	r9, #0
 8007216:	d079      	beq.n	800730c <_dtoa_r+0x4b4>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	dd35      	ble.n	800728a <_dtoa_r+0x432>
 800721e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007222:	9308      	str	r3, [sp, #32]
 8007224:	4639      	mov	r1, r7
 8007226:	2200      	movs	r2, #0
 8007228:	4b8b      	ldr	r3, [pc, #556]	; (8007458 <_dtoa_r+0x600>)
 800722a:	4630      	mov	r0, r6
 800722c:	f7f9 f998 	bl	8000560 <__aeabi_dmul>
 8007230:	e9cd 0100 	strd	r0, r1, [sp]
 8007234:	9f02      	ldr	r7, [sp, #8]
 8007236:	3501      	adds	r5, #1
 8007238:	4628      	mov	r0, r5
 800723a:	f7f9 f927 	bl	800048c <__aeabi_i2d>
 800723e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007242:	f7f9 f98d 	bl	8000560 <__aeabi_dmul>
 8007246:	2200      	movs	r2, #0
 8007248:	4b84      	ldr	r3, [pc, #528]	; (800745c <_dtoa_r+0x604>)
 800724a:	f7f8 ffd3 	bl	80001f4 <__adddf3>
 800724e:	4605      	mov	r5, r0
 8007250:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007254:	2f00      	cmp	r7, #0
 8007256:	d15d      	bne.n	8007314 <_dtoa_r+0x4bc>
 8007258:	2200      	movs	r2, #0
 800725a:	4b81      	ldr	r3, [pc, #516]	; (8007460 <_dtoa_r+0x608>)
 800725c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007260:	f7f8 ffc6 	bl	80001f0 <__aeabi_dsub>
 8007264:	462a      	mov	r2, r5
 8007266:	4633      	mov	r3, r6
 8007268:	e9cd 0100 	strd	r0, r1, [sp]
 800726c:	f7f9 fc08 	bl	8000a80 <__aeabi_dcmpgt>
 8007270:	2800      	cmp	r0, #0
 8007272:	f040 8288 	bne.w	8007786 <_dtoa_r+0x92e>
 8007276:	462a      	mov	r2, r5
 8007278:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800727c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007280:	f7f9 fbe0 	bl	8000a44 <__aeabi_dcmplt>
 8007284:	2800      	cmp	r0, #0
 8007286:	f040 827c 	bne.w	8007782 <_dtoa_r+0x92a>
 800728a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800728e:	e9cd 2300 	strd	r2, r3, [sp]
 8007292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007294:	2b00      	cmp	r3, #0
 8007296:	f2c0 8150 	blt.w	800753a <_dtoa_r+0x6e2>
 800729a:	f1ba 0f0e 	cmp.w	sl, #14
 800729e:	f300 814c 	bgt.w	800753a <_dtoa_r+0x6e2>
 80072a2:	4b6a      	ldr	r3, [pc, #424]	; (800744c <_dtoa_r+0x5f4>)
 80072a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072a8:	ed93 7b00 	vldr	d7, [r3]
 80072ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072b4:	f280 80d8 	bge.w	8007468 <_dtoa_r+0x610>
 80072b8:	f1b9 0f00 	cmp.w	r9, #0
 80072bc:	f300 80d4 	bgt.w	8007468 <_dtoa_r+0x610>
 80072c0:	f040 825e 	bne.w	8007780 <_dtoa_r+0x928>
 80072c4:	2200      	movs	r2, #0
 80072c6:	4b66      	ldr	r3, [pc, #408]	; (8007460 <_dtoa_r+0x608>)
 80072c8:	ec51 0b17 	vmov	r0, r1, d7
 80072cc:	f7f9 f948 	bl	8000560 <__aeabi_dmul>
 80072d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072d4:	f7f9 fbca 	bl	8000a6c <__aeabi_dcmpge>
 80072d8:	464f      	mov	r7, r9
 80072da:	464e      	mov	r6, r9
 80072dc:	2800      	cmp	r0, #0
 80072de:	f040 8234 	bne.w	800774a <_dtoa_r+0x8f2>
 80072e2:	2331      	movs	r3, #49	; 0x31
 80072e4:	f10b 0501 	add.w	r5, fp, #1
 80072e8:	f88b 3000 	strb.w	r3, [fp]
 80072ec:	f10a 0a01 	add.w	sl, sl, #1
 80072f0:	e22f      	b.n	8007752 <_dtoa_r+0x8fa>
 80072f2:	07f2      	lsls	r2, r6, #31
 80072f4:	d505      	bpl.n	8007302 <_dtoa_r+0x4aa>
 80072f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fa:	f7f9 f931 	bl	8000560 <__aeabi_dmul>
 80072fe:	3501      	adds	r5, #1
 8007300:	2301      	movs	r3, #1
 8007302:	1076      	asrs	r6, r6, #1
 8007304:	3708      	adds	r7, #8
 8007306:	e772      	b.n	80071ee <_dtoa_r+0x396>
 8007308:	2502      	movs	r5, #2
 800730a:	e774      	b.n	80071f6 <_dtoa_r+0x39e>
 800730c:	f8cd a020 	str.w	sl, [sp, #32]
 8007310:	464f      	mov	r7, r9
 8007312:	e791      	b.n	8007238 <_dtoa_r+0x3e0>
 8007314:	4b4d      	ldr	r3, [pc, #308]	; (800744c <_dtoa_r+0x5f4>)
 8007316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800731a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	2b00      	cmp	r3, #0
 8007322:	d047      	beq.n	80073b4 <_dtoa_r+0x55c>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	2000      	movs	r0, #0
 800732a:	494e      	ldr	r1, [pc, #312]	; (8007464 <_dtoa_r+0x60c>)
 800732c:	f7f9 fa42 	bl	80007b4 <__aeabi_ddiv>
 8007330:	462a      	mov	r2, r5
 8007332:	4633      	mov	r3, r6
 8007334:	f7f8 ff5c 	bl	80001f0 <__aeabi_dsub>
 8007338:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800733c:	465d      	mov	r5, fp
 800733e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007342:	f7f9 fbbd 	bl	8000ac0 <__aeabi_d2iz>
 8007346:	4606      	mov	r6, r0
 8007348:	f7f9 f8a0 	bl	800048c <__aeabi_i2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007354:	f7f8 ff4c 	bl	80001f0 <__aeabi_dsub>
 8007358:	3630      	adds	r6, #48	; 0x30
 800735a:	f805 6b01 	strb.w	r6, [r5], #1
 800735e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007362:	e9cd 0100 	strd	r0, r1, [sp]
 8007366:	f7f9 fb6d 	bl	8000a44 <__aeabi_dcmplt>
 800736a:	2800      	cmp	r0, #0
 800736c:	d163      	bne.n	8007436 <_dtoa_r+0x5de>
 800736e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007372:	2000      	movs	r0, #0
 8007374:	4937      	ldr	r1, [pc, #220]	; (8007454 <_dtoa_r+0x5fc>)
 8007376:	f7f8 ff3b 	bl	80001f0 <__aeabi_dsub>
 800737a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800737e:	f7f9 fb61 	bl	8000a44 <__aeabi_dcmplt>
 8007382:	2800      	cmp	r0, #0
 8007384:	f040 80b7 	bne.w	80074f6 <_dtoa_r+0x69e>
 8007388:	eba5 030b 	sub.w	r3, r5, fp
 800738c:	429f      	cmp	r7, r3
 800738e:	f77f af7c 	ble.w	800728a <_dtoa_r+0x432>
 8007392:	2200      	movs	r2, #0
 8007394:	4b30      	ldr	r3, [pc, #192]	; (8007458 <_dtoa_r+0x600>)
 8007396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800739a:	f7f9 f8e1 	bl	8000560 <__aeabi_dmul>
 800739e:	2200      	movs	r2, #0
 80073a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073a4:	4b2c      	ldr	r3, [pc, #176]	; (8007458 <_dtoa_r+0x600>)
 80073a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073aa:	f7f9 f8d9 	bl	8000560 <__aeabi_dmul>
 80073ae:	e9cd 0100 	strd	r0, r1, [sp]
 80073b2:	e7c4      	b.n	800733e <_dtoa_r+0x4e6>
 80073b4:	462a      	mov	r2, r5
 80073b6:	4633      	mov	r3, r6
 80073b8:	f7f9 f8d2 	bl	8000560 <__aeabi_dmul>
 80073bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073c0:	eb0b 0507 	add.w	r5, fp, r7
 80073c4:	465e      	mov	r6, fp
 80073c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073ca:	f7f9 fb79 	bl	8000ac0 <__aeabi_d2iz>
 80073ce:	4607      	mov	r7, r0
 80073d0:	f7f9 f85c 	bl	800048c <__aeabi_i2d>
 80073d4:	3730      	adds	r7, #48	; 0x30
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073de:	f7f8 ff07 	bl	80001f0 <__aeabi_dsub>
 80073e2:	f806 7b01 	strb.w	r7, [r6], #1
 80073e6:	42ae      	cmp	r6, r5
 80073e8:	e9cd 0100 	strd	r0, r1, [sp]
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	d126      	bne.n	8007440 <_dtoa_r+0x5e8>
 80073f2:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <_dtoa_r+0x60c>)
 80073f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073f8:	f7f8 fefc 	bl	80001f4 <__adddf3>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007404:	f7f9 fb3c 	bl	8000a80 <__aeabi_dcmpgt>
 8007408:	2800      	cmp	r0, #0
 800740a:	d174      	bne.n	80074f6 <_dtoa_r+0x69e>
 800740c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007410:	2000      	movs	r0, #0
 8007412:	4914      	ldr	r1, [pc, #80]	; (8007464 <_dtoa_r+0x60c>)
 8007414:	f7f8 feec 	bl	80001f0 <__aeabi_dsub>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007420:	f7f9 fb10 	bl	8000a44 <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f af30 	beq.w	800728a <_dtoa_r+0x432>
 800742a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800742e:	2b30      	cmp	r3, #48	; 0x30
 8007430:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007434:	d002      	beq.n	800743c <_dtoa_r+0x5e4>
 8007436:	f8dd a020 	ldr.w	sl, [sp, #32]
 800743a:	e04a      	b.n	80074d2 <_dtoa_r+0x67a>
 800743c:	4615      	mov	r5, r2
 800743e:	e7f4      	b.n	800742a <_dtoa_r+0x5d2>
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <_dtoa_r+0x600>)
 8007442:	f7f9 f88d 	bl	8000560 <__aeabi_dmul>
 8007446:	e9cd 0100 	strd	r0, r1, [sp]
 800744a:	e7bc      	b.n	80073c6 <_dtoa_r+0x56e>
 800744c:	08008178 	.word	0x08008178
 8007450:	08008150 	.word	0x08008150
 8007454:	3ff00000 	.word	0x3ff00000
 8007458:	40240000 	.word	0x40240000
 800745c:	401c0000 	.word	0x401c0000
 8007460:	40140000 	.word	0x40140000
 8007464:	3fe00000 	.word	0x3fe00000
 8007468:	e9dd 6700 	ldrd	r6, r7, [sp]
 800746c:	465d      	mov	r5, fp
 800746e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007472:	4630      	mov	r0, r6
 8007474:	4639      	mov	r1, r7
 8007476:	f7f9 f99d 	bl	80007b4 <__aeabi_ddiv>
 800747a:	f7f9 fb21 	bl	8000ac0 <__aeabi_d2iz>
 800747e:	4680      	mov	r8, r0
 8007480:	f7f9 f804 	bl	800048c <__aeabi_i2d>
 8007484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007488:	f7f9 f86a 	bl	8000560 <__aeabi_dmul>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007498:	f7f8 feaa 	bl	80001f0 <__aeabi_dsub>
 800749c:	f805 6b01 	strb.w	r6, [r5], #1
 80074a0:	eba5 060b 	sub.w	r6, r5, fp
 80074a4:	45b1      	cmp	r9, r6
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	d139      	bne.n	8007520 <_dtoa_r+0x6c8>
 80074ac:	f7f8 fea2 	bl	80001f4 <__adddf3>
 80074b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074b4:	4606      	mov	r6, r0
 80074b6:	460f      	mov	r7, r1
 80074b8:	f7f9 fae2 	bl	8000a80 <__aeabi_dcmpgt>
 80074bc:	b9c8      	cbnz	r0, 80074f2 <_dtoa_r+0x69a>
 80074be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 fab3 	bl	8000a30 <__aeabi_dcmpeq>
 80074ca:	b110      	cbz	r0, 80074d2 <_dtoa_r+0x67a>
 80074cc:	f018 0f01 	tst.w	r8, #1
 80074d0:	d10f      	bne.n	80074f2 <_dtoa_r+0x69a>
 80074d2:	9904      	ldr	r1, [sp, #16]
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 facc 	bl	8007a72 <_Bfree>
 80074da:	2300      	movs	r3, #0
 80074dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074de:	702b      	strb	r3, [r5, #0]
 80074e0:	f10a 0301 	add.w	r3, sl, #1
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8241 	beq.w	8007970 <_dtoa_r+0xb18>
 80074ee:	601d      	str	r5, [r3, #0]
 80074f0:	e23e      	b.n	8007970 <_dtoa_r+0xb18>
 80074f2:	f8cd a020 	str.w	sl, [sp, #32]
 80074f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074fa:	2a39      	cmp	r2, #57	; 0x39
 80074fc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007500:	d108      	bne.n	8007514 <_dtoa_r+0x6bc>
 8007502:	459b      	cmp	fp, r3
 8007504:	d10a      	bne.n	800751c <_dtoa_r+0x6c4>
 8007506:	9b08      	ldr	r3, [sp, #32]
 8007508:	3301      	adds	r3, #1
 800750a:	9308      	str	r3, [sp, #32]
 800750c:	2330      	movs	r3, #48	; 0x30
 800750e:	f88b 3000 	strb.w	r3, [fp]
 8007512:	465b      	mov	r3, fp
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	3201      	adds	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e78c      	b.n	8007436 <_dtoa_r+0x5de>
 800751c:	461d      	mov	r5, r3
 800751e:	e7ea      	b.n	80074f6 <_dtoa_r+0x69e>
 8007520:	2200      	movs	r2, #0
 8007522:	4b9b      	ldr	r3, [pc, #620]	; (8007790 <_dtoa_r+0x938>)
 8007524:	f7f9 f81c 	bl	8000560 <__aeabi_dmul>
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	f7f9 fa7e 	bl	8000a30 <__aeabi_dcmpeq>
 8007534:	2800      	cmp	r0, #0
 8007536:	d09a      	beq.n	800746e <_dtoa_r+0x616>
 8007538:	e7cb      	b.n	80074d2 <_dtoa_r+0x67a>
 800753a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800753c:	2a00      	cmp	r2, #0
 800753e:	f000 808b 	beq.w	8007658 <_dtoa_r+0x800>
 8007542:	9a06      	ldr	r2, [sp, #24]
 8007544:	2a01      	cmp	r2, #1
 8007546:	dc6e      	bgt.n	8007626 <_dtoa_r+0x7ce>
 8007548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800754a:	2a00      	cmp	r2, #0
 800754c:	d067      	beq.n	800761e <_dtoa_r+0x7c6>
 800754e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007552:	9f07      	ldr	r7, [sp, #28]
 8007554:	9d05      	ldr	r5, [sp, #20]
 8007556:	9a05      	ldr	r2, [sp, #20]
 8007558:	2101      	movs	r1, #1
 800755a:	441a      	add	r2, r3
 800755c:	4620      	mov	r0, r4
 800755e:	9205      	str	r2, [sp, #20]
 8007560:	4498      	add	r8, r3
 8007562:	f000 fb26 	bl	8007bb2 <__i2b>
 8007566:	4606      	mov	r6, r0
 8007568:	2d00      	cmp	r5, #0
 800756a:	dd0c      	ble.n	8007586 <_dtoa_r+0x72e>
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	dd09      	ble.n	8007586 <_dtoa_r+0x72e>
 8007572:	4545      	cmp	r5, r8
 8007574:	9a05      	ldr	r2, [sp, #20]
 8007576:	462b      	mov	r3, r5
 8007578:	bfa8      	it	ge
 800757a:	4643      	movge	r3, r8
 800757c:	1ad2      	subs	r2, r2, r3
 800757e:	9205      	str	r2, [sp, #20]
 8007580:	1aed      	subs	r5, r5, r3
 8007582:	eba8 0803 	sub.w	r8, r8, r3
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	b1eb      	cbz	r3, 80075c6 <_dtoa_r+0x76e>
 800758a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d067      	beq.n	8007660 <_dtoa_r+0x808>
 8007590:	b18f      	cbz	r7, 80075b6 <_dtoa_r+0x75e>
 8007592:	4631      	mov	r1, r6
 8007594:	463a      	mov	r2, r7
 8007596:	4620      	mov	r0, r4
 8007598:	f000 fbaa 	bl	8007cf0 <__pow5mult>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	4601      	mov	r1, r0
 80075a0:	4606      	mov	r6, r0
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 fb0e 	bl	8007bc4 <__multiply>
 80075a8:	9904      	ldr	r1, [sp, #16]
 80075aa:	9008      	str	r0, [sp, #32]
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fa60 	bl	8007a72 <_Bfree>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	9b07      	ldr	r3, [sp, #28]
 80075b8:	1bda      	subs	r2, r3, r7
 80075ba:	d004      	beq.n	80075c6 <_dtoa_r+0x76e>
 80075bc:	9904      	ldr	r1, [sp, #16]
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 fb96 	bl	8007cf0 <__pow5mult>
 80075c4:	9004      	str	r0, [sp, #16]
 80075c6:	2101      	movs	r1, #1
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 faf2 	bl	8007bb2 <__i2b>
 80075ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d0:	4607      	mov	r7, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 81d0 	beq.w	8007978 <_dtoa_r+0xb20>
 80075d8:	461a      	mov	r2, r3
 80075da:	4601      	mov	r1, r0
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 fb87 	bl	8007cf0 <__pow5mult>
 80075e2:	9b06      	ldr	r3, [sp, #24]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	4607      	mov	r7, r0
 80075e8:	dc40      	bgt.n	800766c <_dtoa_r+0x814>
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d139      	bne.n	8007664 <_dtoa_r+0x80c>
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d136      	bne.n	8007668 <_dtoa_r+0x810>
 80075fa:	9b01      	ldr	r3, [sp, #4]
 80075fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007600:	0d1b      	lsrs	r3, r3, #20
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	b12b      	cbz	r3, 8007612 <_dtoa_r+0x7ba>
 8007606:	9b05      	ldr	r3, [sp, #20]
 8007608:	3301      	adds	r3, #1
 800760a:	9305      	str	r3, [sp, #20]
 800760c:	f108 0801 	add.w	r8, r8, #1
 8007610:	2301      	movs	r3, #1
 8007612:	9307      	str	r3, [sp, #28]
 8007614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d12a      	bne.n	8007670 <_dtoa_r+0x818>
 800761a:	2001      	movs	r0, #1
 800761c:	e030      	b.n	8007680 <_dtoa_r+0x828>
 800761e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007620:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007624:	e795      	b.n	8007552 <_dtoa_r+0x6fa>
 8007626:	9b07      	ldr	r3, [sp, #28]
 8007628:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800762c:	42bb      	cmp	r3, r7
 800762e:	bfbf      	itttt	lt
 8007630:	9b07      	ldrlt	r3, [sp, #28]
 8007632:	9707      	strlt	r7, [sp, #28]
 8007634:	1afa      	sublt	r2, r7, r3
 8007636:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007638:	bfbb      	ittet	lt
 800763a:	189b      	addlt	r3, r3, r2
 800763c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800763e:	1bdf      	subge	r7, r3, r7
 8007640:	2700      	movlt	r7, #0
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	bfb5      	itete	lt
 8007648:	9b05      	ldrlt	r3, [sp, #20]
 800764a:	9d05      	ldrge	r5, [sp, #20]
 800764c:	eba3 0509 	sublt.w	r5, r3, r9
 8007650:	464b      	movge	r3, r9
 8007652:	bfb8      	it	lt
 8007654:	2300      	movlt	r3, #0
 8007656:	e77e      	b.n	8007556 <_dtoa_r+0x6fe>
 8007658:	9f07      	ldr	r7, [sp, #28]
 800765a:	9d05      	ldr	r5, [sp, #20]
 800765c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800765e:	e783      	b.n	8007568 <_dtoa_r+0x710>
 8007660:	9a07      	ldr	r2, [sp, #28]
 8007662:	e7ab      	b.n	80075bc <_dtoa_r+0x764>
 8007664:	2300      	movs	r3, #0
 8007666:	e7d4      	b.n	8007612 <_dtoa_r+0x7ba>
 8007668:	9b00      	ldr	r3, [sp, #0]
 800766a:	e7d2      	b.n	8007612 <_dtoa_r+0x7ba>
 800766c:	2300      	movs	r3, #0
 800766e:	9307      	str	r3, [sp, #28]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007676:	6918      	ldr	r0, [r3, #16]
 8007678:	f000 fa4d 	bl	8007b16 <__hi0bits>
 800767c:	f1c0 0020 	rsb	r0, r0, #32
 8007680:	4440      	add	r0, r8
 8007682:	f010 001f 	ands.w	r0, r0, #31
 8007686:	d047      	beq.n	8007718 <_dtoa_r+0x8c0>
 8007688:	f1c0 0320 	rsb	r3, r0, #32
 800768c:	2b04      	cmp	r3, #4
 800768e:	dd3b      	ble.n	8007708 <_dtoa_r+0x8b0>
 8007690:	9b05      	ldr	r3, [sp, #20]
 8007692:	f1c0 001c 	rsb	r0, r0, #28
 8007696:	4403      	add	r3, r0
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	4405      	add	r5, r0
 800769c:	4480      	add	r8, r0
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dd05      	ble.n	80076b0 <_dtoa_r+0x858>
 80076a4:	461a      	mov	r2, r3
 80076a6:	9904      	ldr	r1, [sp, #16]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fb6f 	bl	8007d8c <__lshift>
 80076ae:	9004      	str	r0, [sp, #16]
 80076b0:	f1b8 0f00 	cmp.w	r8, #0
 80076b4:	dd05      	ble.n	80076c2 <_dtoa_r+0x86a>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4642      	mov	r2, r8
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fb66 	bl	8007d8c <__lshift>
 80076c0:	4607      	mov	r7, r0
 80076c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076c4:	b353      	cbz	r3, 800771c <_dtoa_r+0x8c4>
 80076c6:	4639      	mov	r1, r7
 80076c8:	9804      	ldr	r0, [sp, #16]
 80076ca:	f000 fbb3 	bl	8007e34 <__mcmp>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	da24      	bge.n	800771c <_dtoa_r+0x8c4>
 80076d2:	2300      	movs	r3, #0
 80076d4:	220a      	movs	r2, #10
 80076d6:	9904      	ldr	r1, [sp, #16]
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 f9e1 	bl	8007aa0 <__multadd>
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	9004      	str	r0, [sp, #16]
 80076e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 814d 	beq.w	8007986 <_dtoa_r+0xb2e>
 80076ec:	2300      	movs	r3, #0
 80076ee:	4631      	mov	r1, r6
 80076f0:	220a      	movs	r2, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f9d4 	bl	8007aa0 <__multadd>
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	4606      	mov	r6, r0
 80076fe:	dc4f      	bgt.n	80077a0 <_dtoa_r+0x948>
 8007700:	9b06      	ldr	r3, [sp, #24]
 8007702:	2b02      	cmp	r3, #2
 8007704:	dd4c      	ble.n	80077a0 <_dtoa_r+0x948>
 8007706:	e011      	b.n	800772c <_dtoa_r+0x8d4>
 8007708:	d0c9      	beq.n	800769e <_dtoa_r+0x846>
 800770a:	9a05      	ldr	r2, [sp, #20]
 800770c:	331c      	adds	r3, #28
 800770e:	441a      	add	r2, r3
 8007710:	9205      	str	r2, [sp, #20]
 8007712:	441d      	add	r5, r3
 8007714:	4498      	add	r8, r3
 8007716:	e7c2      	b.n	800769e <_dtoa_r+0x846>
 8007718:	4603      	mov	r3, r0
 800771a:	e7f6      	b.n	800770a <_dtoa_r+0x8b2>
 800771c:	f1b9 0f00 	cmp.w	r9, #0
 8007720:	dc38      	bgt.n	8007794 <_dtoa_r+0x93c>
 8007722:	9b06      	ldr	r3, [sp, #24]
 8007724:	2b02      	cmp	r3, #2
 8007726:	dd35      	ble.n	8007794 <_dtoa_r+0x93c>
 8007728:	f8cd 9008 	str.w	r9, [sp, #8]
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	b963      	cbnz	r3, 800774a <_dtoa_r+0x8f2>
 8007730:	4639      	mov	r1, r7
 8007732:	2205      	movs	r2, #5
 8007734:	4620      	mov	r0, r4
 8007736:	f000 f9b3 	bl	8007aa0 <__multadd>
 800773a:	4601      	mov	r1, r0
 800773c:	4607      	mov	r7, r0
 800773e:	9804      	ldr	r0, [sp, #16]
 8007740:	f000 fb78 	bl	8007e34 <__mcmp>
 8007744:	2800      	cmp	r0, #0
 8007746:	f73f adcc 	bgt.w	80072e2 <_dtoa_r+0x48a>
 800774a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800774c:	465d      	mov	r5, fp
 800774e:	ea6f 0a03 	mvn.w	sl, r3
 8007752:	f04f 0900 	mov.w	r9, #0
 8007756:	4639      	mov	r1, r7
 8007758:	4620      	mov	r0, r4
 800775a:	f000 f98a 	bl	8007a72 <_Bfree>
 800775e:	2e00      	cmp	r6, #0
 8007760:	f43f aeb7 	beq.w	80074d2 <_dtoa_r+0x67a>
 8007764:	f1b9 0f00 	cmp.w	r9, #0
 8007768:	d005      	beq.n	8007776 <_dtoa_r+0x91e>
 800776a:	45b1      	cmp	r9, r6
 800776c:	d003      	beq.n	8007776 <_dtoa_r+0x91e>
 800776e:	4649      	mov	r1, r9
 8007770:	4620      	mov	r0, r4
 8007772:	f000 f97e 	bl	8007a72 <_Bfree>
 8007776:	4631      	mov	r1, r6
 8007778:	4620      	mov	r0, r4
 800777a:	f000 f97a 	bl	8007a72 <_Bfree>
 800777e:	e6a8      	b.n	80074d2 <_dtoa_r+0x67a>
 8007780:	2700      	movs	r7, #0
 8007782:	463e      	mov	r6, r7
 8007784:	e7e1      	b.n	800774a <_dtoa_r+0x8f2>
 8007786:	f8dd a020 	ldr.w	sl, [sp, #32]
 800778a:	463e      	mov	r6, r7
 800778c:	e5a9      	b.n	80072e2 <_dtoa_r+0x48a>
 800778e:	bf00      	nop
 8007790:	40240000 	.word	0x40240000
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	f8cd 9008 	str.w	r9, [sp, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 80fa 	beq.w	8007994 <_dtoa_r+0xb3c>
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	dd05      	ble.n	80077b0 <_dtoa_r+0x958>
 80077a4:	4631      	mov	r1, r6
 80077a6:	462a      	mov	r2, r5
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 faef 	bl	8007d8c <__lshift>
 80077ae:	4606      	mov	r6, r0
 80077b0:	9b07      	ldr	r3, [sp, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d04c      	beq.n	8007850 <_dtoa_r+0x9f8>
 80077b6:	6871      	ldr	r1, [r6, #4]
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 f926 	bl	8007a0a <_Balloc>
 80077be:	6932      	ldr	r2, [r6, #16]
 80077c0:	3202      	adds	r2, #2
 80077c2:	4605      	mov	r5, r0
 80077c4:	0092      	lsls	r2, r2, #2
 80077c6:	f106 010c 	add.w	r1, r6, #12
 80077ca:	300c      	adds	r0, #12
 80077cc:	f000 f912 	bl	80079f4 <memcpy>
 80077d0:	2201      	movs	r2, #1
 80077d2:	4629      	mov	r1, r5
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fad9 	bl	8007d8c <__lshift>
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	f8cd b014 	str.w	fp, [sp, #20]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	46b1      	mov	r9, r6
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	4606      	mov	r6, r0
 80077ea:	4639      	mov	r1, r7
 80077ec:	9804      	ldr	r0, [sp, #16]
 80077ee:	f7ff faa6 	bl	8006d3e <quorem>
 80077f2:	4649      	mov	r1, r9
 80077f4:	4605      	mov	r5, r0
 80077f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80077fa:	9804      	ldr	r0, [sp, #16]
 80077fc:	f000 fb1a 	bl	8007e34 <__mcmp>
 8007800:	4632      	mov	r2, r6
 8007802:	9000      	str	r0, [sp, #0]
 8007804:	4639      	mov	r1, r7
 8007806:	4620      	mov	r0, r4
 8007808:	f000 fb2e 	bl	8007e68 <__mdiff>
 800780c:	68c3      	ldr	r3, [r0, #12]
 800780e:	4602      	mov	r2, r0
 8007810:	bb03      	cbnz	r3, 8007854 <_dtoa_r+0x9fc>
 8007812:	4601      	mov	r1, r0
 8007814:	9008      	str	r0, [sp, #32]
 8007816:	9804      	ldr	r0, [sp, #16]
 8007818:	f000 fb0c 	bl	8007e34 <__mcmp>
 800781c:	9a08      	ldr	r2, [sp, #32]
 800781e:	4603      	mov	r3, r0
 8007820:	4611      	mov	r1, r2
 8007822:	4620      	mov	r0, r4
 8007824:	9308      	str	r3, [sp, #32]
 8007826:	f000 f924 	bl	8007a72 <_Bfree>
 800782a:	9b08      	ldr	r3, [sp, #32]
 800782c:	b9a3      	cbnz	r3, 8007858 <_dtoa_r+0xa00>
 800782e:	9a06      	ldr	r2, [sp, #24]
 8007830:	b992      	cbnz	r2, 8007858 <_dtoa_r+0xa00>
 8007832:	9a07      	ldr	r2, [sp, #28]
 8007834:	b982      	cbnz	r2, 8007858 <_dtoa_r+0xa00>
 8007836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800783a:	d029      	beq.n	8007890 <_dtoa_r+0xa38>
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dd01      	ble.n	8007846 <_dtoa_r+0x9ee>
 8007842:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007846:	9b05      	ldr	r3, [sp, #20]
 8007848:	1c5d      	adds	r5, r3, #1
 800784a:	f883 8000 	strb.w	r8, [r3]
 800784e:	e782      	b.n	8007756 <_dtoa_r+0x8fe>
 8007850:	4630      	mov	r0, r6
 8007852:	e7c2      	b.n	80077da <_dtoa_r+0x982>
 8007854:	2301      	movs	r3, #1
 8007856:	e7e3      	b.n	8007820 <_dtoa_r+0x9c8>
 8007858:	9a00      	ldr	r2, [sp, #0]
 800785a:	2a00      	cmp	r2, #0
 800785c:	db04      	blt.n	8007868 <_dtoa_r+0xa10>
 800785e:	d125      	bne.n	80078ac <_dtoa_r+0xa54>
 8007860:	9a06      	ldr	r2, [sp, #24]
 8007862:	bb1a      	cbnz	r2, 80078ac <_dtoa_r+0xa54>
 8007864:	9a07      	ldr	r2, [sp, #28]
 8007866:	bb0a      	cbnz	r2, 80078ac <_dtoa_r+0xa54>
 8007868:	2b00      	cmp	r3, #0
 800786a:	ddec      	ble.n	8007846 <_dtoa_r+0x9ee>
 800786c:	2201      	movs	r2, #1
 800786e:	9904      	ldr	r1, [sp, #16]
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fa8b 	bl	8007d8c <__lshift>
 8007876:	4639      	mov	r1, r7
 8007878:	9004      	str	r0, [sp, #16]
 800787a:	f000 fadb 	bl	8007e34 <__mcmp>
 800787e:	2800      	cmp	r0, #0
 8007880:	dc03      	bgt.n	800788a <_dtoa_r+0xa32>
 8007882:	d1e0      	bne.n	8007846 <_dtoa_r+0x9ee>
 8007884:	f018 0f01 	tst.w	r8, #1
 8007888:	d0dd      	beq.n	8007846 <_dtoa_r+0x9ee>
 800788a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800788e:	d1d8      	bne.n	8007842 <_dtoa_r+0x9ea>
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	9a05      	ldr	r2, [sp, #20]
 8007894:	1c5d      	adds	r5, r3, #1
 8007896:	2339      	movs	r3, #57	; 0x39
 8007898:	7013      	strb	r3, [r2, #0]
 800789a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800789e:	2b39      	cmp	r3, #57	; 0x39
 80078a0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80078a4:	d04f      	beq.n	8007946 <_dtoa_r+0xaee>
 80078a6:	3301      	adds	r3, #1
 80078a8:	7013      	strb	r3, [r2, #0]
 80078aa:	e754      	b.n	8007756 <_dtoa_r+0x8fe>
 80078ac:	9a05      	ldr	r2, [sp, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f102 0501 	add.w	r5, r2, #1
 80078b4:	dd06      	ble.n	80078c4 <_dtoa_r+0xa6c>
 80078b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078ba:	d0e9      	beq.n	8007890 <_dtoa_r+0xa38>
 80078bc:	f108 0801 	add.w	r8, r8, #1
 80078c0:	9b05      	ldr	r3, [sp, #20]
 80078c2:	e7c2      	b.n	800784a <_dtoa_r+0x9f2>
 80078c4:	9a02      	ldr	r2, [sp, #8]
 80078c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80078ca:	eba5 030b 	sub.w	r3, r5, fp
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d021      	beq.n	8007916 <_dtoa_r+0xabe>
 80078d2:	2300      	movs	r3, #0
 80078d4:	220a      	movs	r2, #10
 80078d6:	9904      	ldr	r1, [sp, #16]
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 f8e1 	bl	8007aa0 <__multadd>
 80078de:	45b1      	cmp	r9, r6
 80078e0:	9004      	str	r0, [sp, #16]
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	f04f 020a 	mov.w	r2, #10
 80078ea:	4649      	mov	r1, r9
 80078ec:	4620      	mov	r0, r4
 80078ee:	d105      	bne.n	80078fc <_dtoa_r+0xaa4>
 80078f0:	f000 f8d6 	bl	8007aa0 <__multadd>
 80078f4:	4681      	mov	r9, r0
 80078f6:	4606      	mov	r6, r0
 80078f8:	9505      	str	r5, [sp, #20]
 80078fa:	e776      	b.n	80077ea <_dtoa_r+0x992>
 80078fc:	f000 f8d0 	bl	8007aa0 <__multadd>
 8007900:	4631      	mov	r1, r6
 8007902:	4681      	mov	r9, r0
 8007904:	2300      	movs	r3, #0
 8007906:	220a      	movs	r2, #10
 8007908:	4620      	mov	r0, r4
 800790a:	f000 f8c9 	bl	8007aa0 <__multadd>
 800790e:	4606      	mov	r6, r0
 8007910:	e7f2      	b.n	80078f8 <_dtoa_r+0xaa0>
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	2201      	movs	r2, #1
 8007918:	9904      	ldr	r1, [sp, #16]
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fa36 	bl	8007d8c <__lshift>
 8007920:	4639      	mov	r1, r7
 8007922:	9004      	str	r0, [sp, #16]
 8007924:	f000 fa86 	bl	8007e34 <__mcmp>
 8007928:	2800      	cmp	r0, #0
 800792a:	dcb6      	bgt.n	800789a <_dtoa_r+0xa42>
 800792c:	d102      	bne.n	8007934 <_dtoa_r+0xadc>
 800792e:	f018 0f01 	tst.w	r8, #1
 8007932:	d1b2      	bne.n	800789a <_dtoa_r+0xa42>
 8007934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007938:	2b30      	cmp	r3, #48	; 0x30
 800793a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800793e:	f47f af0a 	bne.w	8007756 <_dtoa_r+0x8fe>
 8007942:	4615      	mov	r5, r2
 8007944:	e7f6      	b.n	8007934 <_dtoa_r+0xadc>
 8007946:	4593      	cmp	fp, r2
 8007948:	d105      	bne.n	8007956 <_dtoa_r+0xafe>
 800794a:	2331      	movs	r3, #49	; 0x31
 800794c:	f10a 0a01 	add.w	sl, sl, #1
 8007950:	f88b 3000 	strb.w	r3, [fp]
 8007954:	e6ff      	b.n	8007756 <_dtoa_r+0x8fe>
 8007956:	4615      	mov	r5, r2
 8007958:	e79f      	b.n	800789a <_dtoa_r+0xa42>
 800795a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80079c0 <_dtoa_r+0xb68>
 800795e:	e007      	b.n	8007970 <_dtoa_r+0xb18>
 8007960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007962:	f8df b060 	ldr.w	fp, [pc, #96]	; 80079c4 <_dtoa_r+0xb6c>
 8007966:	b11b      	cbz	r3, 8007970 <_dtoa_r+0xb18>
 8007968:	f10b 0308 	add.w	r3, fp, #8
 800796c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	4658      	mov	r0, fp
 8007972:	b017      	add	sp, #92	; 0x5c
 8007974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007978:	9b06      	ldr	r3, [sp, #24]
 800797a:	2b01      	cmp	r3, #1
 800797c:	f77f ae35 	ble.w	80075ea <_dtoa_r+0x792>
 8007980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007982:	9307      	str	r3, [sp, #28]
 8007984:	e649      	b.n	800761a <_dtoa_r+0x7c2>
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	dc03      	bgt.n	8007994 <_dtoa_r+0xb3c>
 800798c:	9b06      	ldr	r3, [sp, #24]
 800798e:	2b02      	cmp	r3, #2
 8007990:	f73f aecc 	bgt.w	800772c <_dtoa_r+0x8d4>
 8007994:	465d      	mov	r5, fp
 8007996:	4639      	mov	r1, r7
 8007998:	9804      	ldr	r0, [sp, #16]
 800799a:	f7ff f9d0 	bl	8006d3e <quorem>
 800799e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80079a2:	f805 8b01 	strb.w	r8, [r5], #1
 80079a6:	9a02      	ldr	r2, [sp, #8]
 80079a8:	eba5 030b 	sub.w	r3, r5, fp
 80079ac:	429a      	cmp	r2, r3
 80079ae:	ddb0      	ble.n	8007912 <_dtoa_r+0xaba>
 80079b0:	2300      	movs	r3, #0
 80079b2:	220a      	movs	r2, #10
 80079b4:	9904      	ldr	r1, [sp, #16]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f872 	bl	8007aa0 <__multadd>
 80079bc:	9004      	str	r0, [sp, #16]
 80079be:	e7ea      	b.n	8007996 <_dtoa_r+0xb3e>
 80079c0:	08008140 	.word	0x08008140
 80079c4:	08008142 	.word	0x08008142

080079c8 <_localeconv_r>:
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <_localeconv_r+0x14>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a18      	ldr	r0, [r3, #32]
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <_localeconv_r+0x18>)
 80079d0:	2800      	cmp	r0, #0
 80079d2:	bf08      	it	eq
 80079d4:	4618      	moveq	r0, r3
 80079d6:	30f0      	adds	r0, #240	; 0xf0
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	2000002c 	.word	0x2000002c
 80079e0:	20000090 	.word	0x20000090

080079e4 <malloc>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <malloc+0xc>)
 80079e6:	4601      	mov	r1, r0
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f000 baf7 	b.w	8007fdc <_malloc_r>
 80079ee:	bf00      	nop
 80079f0:	2000002c 	.word	0x2000002c

080079f4 <memcpy>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	1e43      	subs	r3, r0, #1
 80079f8:	440a      	add	r2, r1
 80079fa:	4291      	cmp	r1, r2
 80079fc:	d100      	bne.n	8007a00 <memcpy+0xc>
 80079fe:	bd10      	pop	{r4, pc}
 8007a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a08:	e7f7      	b.n	80079fa <memcpy+0x6>

08007a0a <_Balloc>:
 8007a0a:	b570      	push	{r4, r5, r6, lr}
 8007a0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a0e:	4604      	mov	r4, r0
 8007a10:	460e      	mov	r6, r1
 8007a12:	b93d      	cbnz	r5, 8007a24 <_Balloc+0x1a>
 8007a14:	2010      	movs	r0, #16
 8007a16:	f7ff ffe5 	bl	80079e4 <malloc>
 8007a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a1c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a20:	6005      	str	r5, [r0, #0]
 8007a22:	60c5      	str	r5, [r0, #12]
 8007a24:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007a26:	68eb      	ldr	r3, [r5, #12]
 8007a28:	b183      	cbz	r3, 8007a4c <_Balloc+0x42>
 8007a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007a32:	b9b8      	cbnz	r0, 8007a64 <_Balloc+0x5a>
 8007a34:	2101      	movs	r1, #1
 8007a36:	fa01 f506 	lsl.w	r5, r1, r6
 8007a3a:	1d6a      	adds	r2, r5, #5
 8007a3c:	0092      	lsls	r2, r2, #2
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fabe 	bl	8007fc0 <_calloc_r>
 8007a44:	b160      	cbz	r0, 8007a60 <_Balloc+0x56>
 8007a46:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007a4a:	e00e      	b.n	8007a6a <_Balloc+0x60>
 8007a4c:	2221      	movs	r2, #33	; 0x21
 8007a4e:	2104      	movs	r1, #4
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 fab5 	bl	8007fc0 <_calloc_r>
 8007a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a58:	60e8      	str	r0, [r5, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e4      	bne.n	8007a2a <_Balloc+0x20>
 8007a60:	2000      	movs	r0, #0
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	6802      	ldr	r2, [r0, #0]
 8007a66:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a70:	e7f7      	b.n	8007a62 <_Balloc+0x58>

08007a72 <_Bfree>:
 8007a72:	b570      	push	{r4, r5, r6, lr}
 8007a74:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a76:	4606      	mov	r6, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b93c      	cbnz	r4, 8007a8c <_Bfree+0x1a>
 8007a7c:	2010      	movs	r0, #16
 8007a7e:	f7ff ffb1 	bl	80079e4 <malloc>
 8007a82:	6270      	str	r0, [r6, #36]	; 0x24
 8007a84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a88:	6004      	str	r4, [r0, #0]
 8007a8a:	60c4      	str	r4, [r0, #12]
 8007a8c:	b13d      	cbz	r5, 8007a9e <_Bfree+0x2c>
 8007a8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a90:	686a      	ldr	r2, [r5, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a98:	6029      	str	r1, [r5, #0]
 8007a9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}

08007aa0 <__multadd>:
 8007aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa4:	690d      	ldr	r5, [r1, #16]
 8007aa6:	461f      	mov	r7, r3
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	f101 0c14 	add.w	ip, r1, #20
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8dc 0000 	ldr.w	r0, [ip]
 8007ab6:	b281      	uxth	r1, r0
 8007ab8:	fb02 7101 	mla	r1, r2, r1, r7
 8007abc:	0c0f      	lsrs	r7, r1, #16
 8007abe:	0c00      	lsrs	r0, r0, #16
 8007ac0:	fb02 7000 	mla	r0, r2, r0, r7
 8007ac4:	b289      	uxth	r1, r1
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007acc:	429d      	cmp	r5, r3
 8007ace:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ad6:	dcec      	bgt.n	8007ab2 <__multadd+0x12>
 8007ad8:	b1d7      	cbz	r7, 8007b10 <__multadd+0x70>
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dc12      	bgt.n	8007b06 <__multadd+0x66>
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	3101      	adds	r1, #1
 8007ae6:	f7ff ff90 	bl	8007a0a <_Balloc>
 8007aea:	6922      	ldr	r2, [r4, #16]
 8007aec:	3202      	adds	r2, #2
 8007aee:	f104 010c 	add.w	r1, r4, #12
 8007af2:	4680      	mov	r8, r0
 8007af4:	0092      	lsls	r2, r2, #2
 8007af6:	300c      	adds	r0, #12
 8007af8:	f7ff ff7c 	bl	80079f4 <memcpy>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ffb7 	bl	8007a72 <_Bfree>
 8007b04:	4644      	mov	r4, r8
 8007b06:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b0a:	3501      	adds	r5, #1
 8007b0c:	615f      	str	r7, [r3, #20]
 8007b0e:	6125      	str	r5, [r4, #16]
 8007b10:	4620      	mov	r0, r4
 8007b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b16 <__hi0bits>:
 8007b16:	0c02      	lsrs	r2, r0, #16
 8007b18:	0412      	lsls	r2, r2, #16
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	b9b2      	cbnz	r2, 8007b4c <__hi0bits+0x36>
 8007b1e:	0403      	lsls	r3, r0, #16
 8007b20:	2010      	movs	r0, #16
 8007b22:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b26:	bf04      	itt	eq
 8007b28:	021b      	lsleq	r3, r3, #8
 8007b2a:	3008      	addeq	r0, #8
 8007b2c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b30:	bf04      	itt	eq
 8007b32:	011b      	lsleq	r3, r3, #4
 8007b34:	3004      	addeq	r0, #4
 8007b36:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b3a:	bf04      	itt	eq
 8007b3c:	009b      	lsleq	r3, r3, #2
 8007b3e:	3002      	addeq	r0, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	db06      	blt.n	8007b52 <__hi0bits+0x3c>
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	d503      	bpl.n	8007b50 <__hi0bits+0x3a>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	4770      	bx	lr
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e7e8      	b.n	8007b22 <__hi0bits+0xc>
 8007b50:	2020      	movs	r0, #32
 8007b52:	4770      	bx	lr

08007b54 <__lo0bits>:
 8007b54:	6803      	ldr	r3, [r0, #0]
 8007b56:	f013 0207 	ands.w	r2, r3, #7
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	d00b      	beq.n	8007b76 <__lo0bits+0x22>
 8007b5e:	07da      	lsls	r2, r3, #31
 8007b60:	d423      	bmi.n	8007baa <__lo0bits+0x56>
 8007b62:	0798      	lsls	r0, r3, #30
 8007b64:	bf49      	itett	mi
 8007b66:	085b      	lsrmi	r3, r3, #1
 8007b68:	089b      	lsrpl	r3, r3, #2
 8007b6a:	2001      	movmi	r0, #1
 8007b6c:	600b      	strmi	r3, [r1, #0]
 8007b6e:	bf5c      	itt	pl
 8007b70:	600b      	strpl	r3, [r1, #0]
 8007b72:	2002      	movpl	r0, #2
 8007b74:	4770      	bx	lr
 8007b76:	b298      	uxth	r0, r3
 8007b78:	b9a8      	cbnz	r0, 8007ba6 <__lo0bits+0x52>
 8007b7a:	0c1b      	lsrs	r3, r3, #16
 8007b7c:	2010      	movs	r0, #16
 8007b7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b82:	bf04      	itt	eq
 8007b84:	0a1b      	lsreq	r3, r3, #8
 8007b86:	3008      	addeq	r0, #8
 8007b88:	071a      	lsls	r2, r3, #28
 8007b8a:	bf04      	itt	eq
 8007b8c:	091b      	lsreq	r3, r3, #4
 8007b8e:	3004      	addeq	r0, #4
 8007b90:	079a      	lsls	r2, r3, #30
 8007b92:	bf04      	itt	eq
 8007b94:	089b      	lsreq	r3, r3, #2
 8007b96:	3002      	addeq	r0, #2
 8007b98:	07da      	lsls	r2, r3, #31
 8007b9a:	d402      	bmi.n	8007ba2 <__lo0bits+0x4e>
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	d006      	beq.n	8007bae <__lo0bits+0x5a>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	600b      	str	r3, [r1, #0]
 8007ba4:	4770      	bx	lr
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	e7e9      	b.n	8007b7e <__lo0bits+0x2a>
 8007baa:	2000      	movs	r0, #0
 8007bac:	4770      	bx	lr
 8007bae:	2020      	movs	r0, #32
 8007bb0:	4770      	bx	lr

08007bb2 <__i2b>:
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	f7ff ff27 	bl	8007a0a <_Balloc>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	6144      	str	r4, [r0, #20]
 8007bc0:	6102      	str	r2, [r0, #16]
 8007bc2:	bd10      	pop	{r4, pc}

08007bc4 <__multiply>:
 8007bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	4614      	mov	r4, r2
 8007bca:	690a      	ldr	r2, [r1, #16]
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	bfb8      	it	lt
 8007bd2:	460b      	movlt	r3, r1
 8007bd4:	4688      	mov	r8, r1
 8007bd6:	bfbc      	itt	lt
 8007bd8:	46a0      	movlt	r8, r4
 8007bda:	461c      	movlt	r4, r3
 8007bdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007be0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007be4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007be8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bec:	eb07 0609 	add.w	r6, r7, r9
 8007bf0:	42b3      	cmp	r3, r6
 8007bf2:	bfb8      	it	lt
 8007bf4:	3101      	addlt	r1, #1
 8007bf6:	f7ff ff08 	bl	8007a0a <_Balloc>
 8007bfa:	f100 0514 	add.w	r5, r0, #20
 8007bfe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007c02:	462b      	mov	r3, r5
 8007c04:	2200      	movs	r2, #0
 8007c06:	4573      	cmp	r3, lr
 8007c08:	d316      	bcc.n	8007c38 <__multiply+0x74>
 8007c0a:	f104 0214 	add.w	r2, r4, #20
 8007c0e:	f108 0114 	add.w	r1, r8, #20
 8007c12:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007c16:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	9201      	str	r2, [sp, #4]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d80c      	bhi.n	8007c3e <__multiply+0x7a>
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	dd03      	ble.n	8007c30 <__multiply+0x6c>
 8007c28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d05d      	beq.n	8007cec <__multiply+0x128>
 8007c30:	6106      	str	r6, [r0, #16]
 8007c32:	b003      	add	sp, #12
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	f843 2b04 	str.w	r2, [r3], #4
 8007c3c:	e7e3      	b.n	8007c06 <__multiply+0x42>
 8007c3e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007c42:	f1bb 0f00 	cmp.w	fp, #0
 8007c46:	d023      	beq.n	8007c90 <__multiply+0xcc>
 8007c48:	4689      	mov	r9, r1
 8007c4a:	46ac      	mov	ip, r5
 8007c4c:	f04f 0800 	mov.w	r8, #0
 8007c50:	f859 4b04 	ldr.w	r4, [r9], #4
 8007c54:	f8dc a000 	ldr.w	sl, [ip]
 8007c58:	b2a3      	uxth	r3, r4
 8007c5a:	fa1f fa8a 	uxth.w	sl, sl
 8007c5e:	fb0b a303 	mla	r3, fp, r3, sl
 8007c62:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c66:	f8dc 4000 	ldr.w	r4, [ip]
 8007c6a:	4443      	add	r3, r8
 8007c6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c70:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c74:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c78:	46e2      	mov	sl, ip
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c80:	454f      	cmp	r7, r9
 8007c82:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c86:	f84a 3b04 	str.w	r3, [sl], #4
 8007c8a:	d82b      	bhi.n	8007ce4 <__multiply+0x120>
 8007c8c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c96:	3204      	adds	r2, #4
 8007c98:	f1ba 0f00 	cmp.w	sl, #0
 8007c9c:	d020      	beq.n	8007ce0 <__multiply+0x11c>
 8007c9e:	682b      	ldr	r3, [r5, #0]
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	46a8      	mov	r8, r5
 8007ca4:	f04f 0b00 	mov.w	fp, #0
 8007ca8:	f8b9 c000 	ldrh.w	ip, [r9]
 8007cac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007cb0:	fb0a 440c 	mla	r4, sl, ip, r4
 8007cb4:	445c      	add	r4, fp
 8007cb6:	46c4      	mov	ip, r8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8007cc2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cc6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	fb0a b303 	mla	r3, sl, r3, fp
 8007cd0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007cd4:	454f      	cmp	r7, r9
 8007cd6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007cda:	d805      	bhi.n	8007ce8 <__multiply+0x124>
 8007cdc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ce0:	3504      	adds	r5, #4
 8007ce2:	e79b      	b.n	8007c1c <__multiply+0x58>
 8007ce4:	46d4      	mov	ip, sl
 8007ce6:	e7b3      	b.n	8007c50 <__multiply+0x8c>
 8007ce8:	46e0      	mov	r8, ip
 8007cea:	e7dd      	b.n	8007ca8 <__multiply+0xe4>
 8007cec:	3e01      	subs	r6, #1
 8007cee:	e799      	b.n	8007c24 <__multiply+0x60>

08007cf0 <__pow5mult>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4615      	mov	r5, r2
 8007cf6:	f012 0203 	ands.w	r2, r2, #3
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	d007      	beq.n	8007d10 <__pow5mult+0x20>
 8007d00:	3a01      	subs	r2, #1
 8007d02:	4c21      	ldr	r4, [pc, #132]	; (8007d88 <__pow5mult+0x98>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d0a:	f7ff fec9 	bl	8007aa0 <__multadd>
 8007d0e:	4607      	mov	r7, r0
 8007d10:	10ad      	asrs	r5, r5, #2
 8007d12:	d035      	beq.n	8007d80 <__pow5mult+0x90>
 8007d14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d16:	b93c      	cbnz	r4, 8007d28 <__pow5mult+0x38>
 8007d18:	2010      	movs	r0, #16
 8007d1a:	f7ff fe63 	bl	80079e4 <malloc>
 8007d1e:	6270      	str	r0, [r6, #36]	; 0x24
 8007d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d24:	6004      	str	r4, [r0, #0]
 8007d26:	60c4      	str	r4, [r0, #12]
 8007d28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d30:	b94c      	cbnz	r4, 8007d46 <__pow5mult+0x56>
 8007d32:	f240 2171 	movw	r1, #625	; 0x271
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ff3b 	bl	8007bb2 <__i2b>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d42:	4604      	mov	r4, r0
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	f04f 0800 	mov.w	r8, #0
 8007d4a:	07eb      	lsls	r3, r5, #31
 8007d4c:	d50a      	bpl.n	8007d64 <__pow5mult+0x74>
 8007d4e:	4639      	mov	r1, r7
 8007d50:	4622      	mov	r2, r4
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7ff ff36 	bl	8007bc4 <__multiply>
 8007d58:	4639      	mov	r1, r7
 8007d5a:	4681      	mov	r9, r0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fe88 	bl	8007a72 <_Bfree>
 8007d62:	464f      	mov	r7, r9
 8007d64:	106d      	asrs	r5, r5, #1
 8007d66:	d00b      	beq.n	8007d80 <__pow5mult+0x90>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	b938      	cbnz	r0, 8007d7c <__pow5mult+0x8c>
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ff27 	bl	8007bc4 <__multiply>
 8007d76:	6020      	str	r0, [r4, #0]
 8007d78:	f8c0 8000 	str.w	r8, [r0]
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e7e4      	b.n	8007d4a <__pow5mult+0x5a>
 8007d80:	4638      	mov	r0, r7
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	bf00      	nop
 8007d88:	08008240 	.word	0x08008240

08007d8c <__lshift>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d96:	6923      	ldr	r3, [r4, #16]
 8007d98:	6849      	ldr	r1, [r1, #4]
 8007d9a:	eb0a 0903 	add.w	r9, sl, r3
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	4607      	mov	r7, r0
 8007da2:	4616      	mov	r6, r2
 8007da4:	f109 0501 	add.w	r5, r9, #1
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	db32      	blt.n	8007e12 <__lshift+0x86>
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff fe2c 	bl	8007a0a <_Balloc>
 8007db2:	2300      	movs	r3, #0
 8007db4:	4680      	mov	r8, r0
 8007db6:	f100 0114 	add.w	r1, r0, #20
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4553      	cmp	r3, sl
 8007dbe:	db2b      	blt.n	8007e18 <__lshift+0x8c>
 8007dc0:	6920      	ldr	r0, [r4, #16]
 8007dc2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dc6:	f104 0314 	add.w	r3, r4, #20
 8007dca:	f016 021f 	ands.w	r2, r6, #31
 8007dce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dd2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dd6:	d025      	beq.n	8007e24 <__lshift+0x98>
 8007dd8:	f1c2 0e20 	rsb	lr, r2, #32
 8007ddc:	2000      	movs	r0, #0
 8007dde:	681e      	ldr	r6, [r3, #0]
 8007de0:	468a      	mov	sl, r1
 8007de2:	4096      	lsls	r6, r2
 8007de4:	4330      	orrs	r0, r6
 8007de6:	f84a 0b04 	str.w	r0, [sl], #4
 8007dea:	f853 0b04 	ldr.w	r0, [r3], #4
 8007dee:	459c      	cmp	ip, r3
 8007df0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007df4:	d814      	bhi.n	8007e20 <__lshift+0x94>
 8007df6:	6048      	str	r0, [r1, #4]
 8007df8:	b108      	cbz	r0, 8007dfe <__lshift+0x72>
 8007dfa:	f109 0502 	add.w	r5, r9, #2
 8007dfe:	3d01      	subs	r5, #1
 8007e00:	4638      	mov	r0, r7
 8007e02:	f8c8 5010 	str.w	r5, [r8, #16]
 8007e06:	4621      	mov	r1, r4
 8007e08:	f7ff fe33 	bl	8007a72 <_Bfree>
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	3101      	adds	r1, #1
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	e7c7      	b.n	8007da8 <__lshift+0x1c>
 8007e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	e7cd      	b.n	8007dbc <__lshift+0x30>
 8007e20:	4651      	mov	r1, sl
 8007e22:	e7dc      	b.n	8007dde <__lshift+0x52>
 8007e24:	3904      	subs	r1, #4
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e2e:	459c      	cmp	ip, r3
 8007e30:	d8f9      	bhi.n	8007e26 <__lshift+0x9a>
 8007e32:	e7e4      	b.n	8007dfe <__lshift+0x72>

08007e34 <__mcmp>:
 8007e34:	6903      	ldr	r3, [r0, #16]
 8007e36:	690a      	ldr	r2, [r1, #16]
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	b530      	push	{r4, r5, lr}
 8007e3c:	d10c      	bne.n	8007e58 <__mcmp+0x24>
 8007e3e:	0092      	lsls	r2, r2, #2
 8007e40:	3014      	adds	r0, #20
 8007e42:	3114      	adds	r1, #20
 8007e44:	1884      	adds	r4, r0, r2
 8007e46:	4411      	add	r1, r2
 8007e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e50:	4295      	cmp	r5, r2
 8007e52:	d003      	beq.n	8007e5c <__mcmp+0x28>
 8007e54:	d305      	bcc.n	8007e62 <__mcmp+0x2e>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4618      	mov	r0, r3
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	42a0      	cmp	r0, r4
 8007e5e:	d3f3      	bcc.n	8007e48 <__mcmp+0x14>
 8007e60:	e7fa      	b.n	8007e58 <__mcmp+0x24>
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e66:	e7f7      	b.n	8007e58 <__mcmp+0x24>

08007e68 <__mdiff>:
 8007e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	460d      	mov	r5, r1
 8007e6e:	4607      	mov	r7, r0
 8007e70:	4611      	mov	r1, r2
 8007e72:	4628      	mov	r0, r5
 8007e74:	4614      	mov	r4, r2
 8007e76:	f7ff ffdd 	bl	8007e34 <__mcmp>
 8007e7a:	1e06      	subs	r6, r0, #0
 8007e7c:	d108      	bne.n	8007e90 <__mdiff+0x28>
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff fdc2 	bl	8007a0a <_Balloc>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e90:	bfa4      	itt	ge
 8007e92:	4623      	movge	r3, r4
 8007e94:	462c      	movge	r4, r5
 8007e96:	4638      	mov	r0, r7
 8007e98:	6861      	ldr	r1, [r4, #4]
 8007e9a:	bfa6      	itte	ge
 8007e9c:	461d      	movge	r5, r3
 8007e9e:	2600      	movge	r6, #0
 8007ea0:	2601      	movlt	r6, #1
 8007ea2:	f7ff fdb2 	bl	8007a0a <_Balloc>
 8007ea6:	692b      	ldr	r3, [r5, #16]
 8007ea8:	60c6      	str	r6, [r0, #12]
 8007eaa:	6926      	ldr	r6, [r4, #16]
 8007eac:	f105 0914 	add.w	r9, r5, #20
 8007eb0:	f104 0214 	add.w	r2, r4, #20
 8007eb4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007eb8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ebc:	f100 0514 	add.w	r5, r0, #20
 8007ec0:	f04f 0e00 	mov.w	lr, #0
 8007ec4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ec8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ecc:	fa1e f18a 	uxtah	r1, lr, sl
 8007ed0:	b2a3      	uxth	r3, r4
 8007ed2:	1ac9      	subs	r1, r1, r3
 8007ed4:	0c23      	lsrs	r3, r4, #16
 8007ed6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007eda:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ede:	b289      	uxth	r1, r1
 8007ee0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007ee4:	45c8      	cmp	r8, r9
 8007ee6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007eea:	4694      	mov	ip, r2
 8007eec:	f845 3b04 	str.w	r3, [r5], #4
 8007ef0:	d8e8      	bhi.n	8007ec4 <__mdiff+0x5c>
 8007ef2:	45bc      	cmp	ip, r7
 8007ef4:	d304      	bcc.n	8007f00 <__mdiff+0x98>
 8007ef6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007efa:	b183      	cbz	r3, 8007f1e <__mdiff+0xb6>
 8007efc:	6106      	str	r6, [r0, #16]
 8007efe:	e7c5      	b.n	8007e8c <__mdiff+0x24>
 8007f00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007f04:	fa1e f381 	uxtah	r3, lr, r1
 8007f08:	141a      	asrs	r2, r3, #16
 8007f0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007f18:	f845 3b04 	str.w	r3, [r5], #4
 8007f1c:	e7e9      	b.n	8007ef2 <__mdiff+0x8a>
 8007f1e:	3e01      	subs	r6, #1
 8007f20:	e7e9      	b.n	8007ef6 <__mdiff+0x8e>

08007f22 <__d2b>:
 8007f22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f26:	460e      	mov	r6, r1
 8007f28:	2101      	movs	r1, #1
 8007f2a:	ec59 8b10 	vmov	r8, r9, d0
 8007f2e:	4615      	mov	r5, r2
 8007f30:	f7ff fd6b 	bl	8007a0a <_Balloc>
 8007f34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f38:	4607      	mov	r7, r0
 8007f3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f3e:	bb34      	cbnz	r4, 8007f8e <__d2b+0x6c>
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	f1b8 0300 	subs.w	r3, r8, #0
 8007f46:	d027      	beq.n	8007f98 <__d2b+0x76>
 8007f48:	a802      	add	r0, sp, #8
 8007f4a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007f4e:	f7ff fe01 	bl	8007b54 <__lo0bits>
 8007f52:	9900      	ldr	r1, [sp, #0]
 8007f54:	b1f0      	cbz	r0, 8007f94 <__d2b+0x72>
 8007f56:	9a01      	ldr	r2, [sp, #4]
 8007f58:	f1c0 0320 	rsb	r3, r0, #32
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	430b      	orrs	r3, r1
 8007f62:	40c2      	lsrs	r2, r0
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	9201      	str	r2, [sp, #4]
 8007f68:	9b01      	ldr	r3, [sp, #4]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf14      	ite	ne
 8007f70:	2102      	movne	r1, #2
 8007f72:	2101      	moveq	r1, #1
 8007f74:	6139      	str	r1, [r7, #16]
 8007f76:	b1c4      	cbz	r4, 8007faa <__d2b+0x88>
 8007f78:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f7c:	4404      	add	r4, r0
 8007f7e:	6034      	str	r4, [r6, #0]
 8007f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f84:	6028      	str	r0, [r5, #0]
 8007f86:	4638      	mov	r0, r7
 8007f88:	b003      	add	sp, #12
 8007f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f92:	e7d5      	b.n	8007f40 <__d2b+0x1e>
 8007f94:	6179      	str	r1, [r7, #20]
 8007f96:	e7e7      	b.n	8007f68 <__d2b+0x46>
 8007f98:	a801      	add	r0, sp, #4
 8007f9a:	f7ff fddb 	bl	8007b54 <__lo0bits>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	6139      	str	r1, [r7, #16]
 8007fa6:	3020      	adds	r0, #32
 8007fa8:	e7e5      	b.n	8007f76 <__d2b+0x54>
 8007faa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007fae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fb2:	6030      	str	r0, [r6, #0]
 8007fb4:	6918      	ldr	r0, [r3, #16]
 8007fb6:	f7ff fdae 	bl	8007b16 <__hi0bits>
 8007fba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007fbe:	e7e1      	b.n	8007f84 <__d2b+0x62>

08007fc0 <_calloc_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	fb02 f401 	mul.w	r4, r2, r1
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	f000 f808 	bl	8007fdc <_malloc_r>
 8007fcc:	4605      	mov	r5, r0
 8007fce:	b118      	cbz	r0, 8007fd8 <_calloc_r+0x18>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	f7fe fb62 	bl	800669c <memset>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	bd38      	pop	{r3, r4, r5, pc}

08007fdc <_malloc_r>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	1ccd      	adds	r5, r1, #3
 8007fe0:	f025 0503 	bic.w	r5, r5, #3
 8007fe4:	3508      	adds	r5, #8
 8007fe6:	2d0c      	cmp	r5, #12
 8007fe8:	bf38      	it	cc
 8007fea:	250c      	movcc	r5, #12
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	4606      	mov	r6, r0
 8007ff0:	db01      	blt.n	8007ff6 <_malloc_r+0x1a>
 8007ff2:	42a9      	cmp	r1, r5
 8007ff4:	d903      	bls.n	8007ffe <_malloc_r+0x22>
 8007ff6:	230c      	movs	r3, #12
 8007ff8:	6033      	str	r3, [r6, #0]
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	bd70      	pop	{r4, r5, r6, pc}
 8007ffe:	f000 f869 	bl	80080d4 <__malloc_lock>
 8008002:	4a21      	ldr	r2, [pc, #132]	; (8008088 <_malloc_r+0xac>)
 8008004:	6814      	ldr	r4, [r2, #0]
 8008006:	4621      	mov	r1, r4
 8008008:	b991      	cbnz	r1, 8008030 <_malloc_r+0x54>
 800800a:	4c20      	ldr	r4, [pc, #128]	; (800808c <_malloc_r+0xb0>)
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	b91b      	cbnz	r3, 8008018 <_malloc_r+0x3c>
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f83d 	bl	8008090 <_sbrk_r>
 8008016:	6020      	str	r0, [r4, #0]
 8008018:	4629      	mov	r1, r5
 800801a:	4630      	mov	r0, r6
 800801c:	f000 f838 	bl	8008090 <_sbrk_r>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d124      	bne.n	800806e <_malloc_r+0x92>
 8008024:	230c      	movs	r3, #12
 8008026:	6033      	str	r3, [r6, #0]
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f854 	bl	80080d6 <__malloc_unlock>
 800802e:	e7e4      	b.n	8007ffa <_malloc_r+0x1e>
 8008030:	680b      	ldr	r3, [r1, #0]
 8008032:	1b5b      	subs	r3, r3, r5
 8008034:	d418      	bmi.n	8008068 <_malloc_r+0x8c>
 8008036:	2b0b      	cmp	r3, #11
 8008038:	d90f      	bls.n	800805a <_malloc_r+0x7e>
 800803a:	600b      	str	r3, [r1, #0]
 800803c:	50cd      	str	r5, [r1, r3]
 800803e:	18cc      	adds	r4, r1, r3
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f848 	bl	80080d6 <__malloc_unlock>
 8008046:	f104 000b 	add.w	r0, r4, #11
 800804a:	1d23      	adds	r3, r4, #4
 800804c:	f020 0007 	bic.w	r0, r0, #7
 8008050:	1ac3      	subs	r3, r0, r3
 8008052:	d0d3      	beq.n	8007ffc <_malloc_r+0x20>
 8008054:	425a      	negs	r2, r3
 8008056:	50e2      	str	r2, [r4, r3]
 8008058:	e7d0      	b.n	8007ffc <_malloc_r+0x20>
 800805a:	428c      	cmp	r4, r1
 800805c:	684b      	ldr	r3, [r1, #4]
 800805e:	bf16      	itet	ne
 8008060:	6063      	strne	r3, [r4, #4]
 8008062:	6013      	streq	r3, [r2, #0]
 8008064:	460c      	movne	r4, r1
 8008066:	e7eb      	b.n	8008040 <_malloc_r+0x64>
 8008068:	460c      	mov	r4, r1
 800806a:	6849      	ldr	r1, [r1, #4]
 800806c:	e7cc      	b.n	8008008 <_malloc_r+0x2c>
 800806e:	1cc4      	adds	r4, r0, #3
 8008070:	f024 0403 	bic.w	r4, r4, #3
 8008074:	42a0      	cmp	r0, r4
 8008076:	d005      	beq.n	8008084 <_malloc_r+0xa8>
 8008078:	1a21      	subs	r1, r4, r0
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f808 	bl	8008090 <_sbrk_r>
 8008080:	3001      	adds	r0, #1
 8008082:	d0cf      	beq.n	8008024 <_malloc_r+0x48>
 8008084:	6025      	str	r5, [r4, #0]
 8008086:	e7db      	b.n	8008040 <_malloc_r+0x64>
 8008088:	2000021c 	.word	0x2000021c
 800808c:	20000220 	.word	0x20000220

08008090 <_sbrk_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4c06      	ldr	r4, [pc, #24]	; (80080ac <_sbrk_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4605      	mov	r5, r0
 8008098:	4608      	mov	r0, r1
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	f7f9 f9d8 	bl	8001450 <_sbrk>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_sbrk_r+0x1a>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_sbrk_r+0x1a>
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	200005d0 	.word	0x200005d0

080080b0 <__ascii_mbtowc>:
 80080b0:	b082      	sub	sp, #8
 80080b2:	b901      	cbnz	r1, 80080b6 <__ascii_mbtowc+0x6>
 80080b4:	a901      	add	r1, sp, #4
 80080b6:	b142      	cbz	r2, 80080ca <__ascii_mbtowc+0x1a>
 80080b8:	b14b      	cbz	r3, 80080ce <__ascii_mbtowc+0x1e>
 80080ba:	7813      	ldrb	r3, [r2, #0]
 80080bc:	600b      	str	r3, [r1, #0]
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	1c10      	adds	r0, r2, #0
 80080c2:	bf18      	it	ne
 80080c4:	2001      	movne	r0, #1
 80080c6:	b002      	add	sp, #8
 80080c8:	4770      	bx	lr
 80080ca:	4610      	mov	r0, r2
 80080cc:	e7fb      	b.n	80080c6 <__ascii_mbtowc+0x16>
 80080ce:	f06f 0001 	mvn.w	r0, #1
 80080d2:	e7f8      	b.n	80080c6 <__ascii_mbtowc+0x16>

080080d4 <__malloc_lock>:
 80080d4:	4770      	bx	lr

080080d6 <__malloc_unlock>:
 80080d6:	4770      	bx	lr

080080d8 <__ascii_wctomb>:
 80080d8:	b149      	cbz	r1, 80080ee <__ascii_wctomb+0x16>
 80080da:	2aff      	cmp	r2, #255	; 0xff
 80080dc:	bf85      	ittet	hi
 80080de:	238a      	movhi	r3, #138	; 0x8a
 80080e0:	6003      	strhi	r3, [r0, #0]
 80080e2:	700a      	strbls	r2, [r1, #0]
 80080e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80080e8:	bf98      	it	ls
 80080ea:	2001      	movls	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	4608      	mov	r0, r1
 80080f0:	4770      	bx	lr
	...

080080f4 <_init>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	bf00      	nop
 80080f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fa:	bc08      	pop	{r3}
 80080fc:	469e      	mov	lr, r3
 80080fe:	4770      	bx	lr

08008100 <_fini>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr
