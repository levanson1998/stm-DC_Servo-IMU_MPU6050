
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f74  08007f74  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000002c  08007fa8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08007fa8  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c03  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002675  00000000  00000000  00031c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  000342d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00035268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018041  00000000  00000000  000360d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf18  00000000  00000000  0004e119  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091c3e  00000000  00000000  0005b031  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ecc6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  000eccec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f34 	.word	0x08007f34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08007f34 	.word	0x08007f34

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_DMA_Init+0x4c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <MX_DMA_Init+0x4c>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_DMA_Init+0x4c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200b      	movs	r0, #11
 8000500:	f001 fd43 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000504:	200b      	movs	r0, #11
 8000506:	f001 fd5c 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2010      	movs	r0, #16
 8000510:	f001 fd3b 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000514:	2010      	movs	r0, #16
 8000516:	f001 fd54 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800

08000528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
 8000542:	4b49      	ldr	r3, [pc, #292]	; (8000668 <MX_GPIO_Init+0x140>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a48      	ldr	r2, [pc, #288]	; (8000668 <MX_GPIO_Init+0x140>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b46      	ldr	r3, [pc, #280]	; (8000668 <MX_GPIO_Init+0x140>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	4b42      	ldr	r3, [pc, #264]	; (8000668 <MX_GPIO_Init+0x140>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a41      	ldr	r2, [pc, #260]	; (8000668 <MX_GPIO_Init+0x140>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b3f      	ldr	r3, [pc, #252]	; (8000668 <MX_GPIO_Init+0x140>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <MX_GPIO_Init+0x140>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <MX_GPIO_Init+0x140>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <MX_GPIO_Init+0x140>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_GPIO_Init+0x140>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a33      	ldr	r2, [pc, #204]	; (8000668 <MX_GPIO_Init+0x140>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_GPIO_Init+0x140>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <MX_GPIO_Init+0x140>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a2c      	ldr	r2, [pc, #176]	; (8000668 <MX_GPIO_Init+0x140>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <MX_GPIO_Init+0x140>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0310 	and.w	r3, r3, #16
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_GPIO_Init+0x140>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a25      	ldr	r2, [pc, #148]	; (8000668 <MX_GPIO_Init+0x140>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_GPIO_Init+0x140>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2104      	movs	r1, #4
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <MX_GPIO_Init+0x144>)
 80005ec:	f002 fa30 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_R_Pin|MOTOR_DIR_L_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <MX_GPIO_Init+0x148>)
 80005f8:	f002 fa2a 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000602:	481b      	ldr	r0, [pc, #108]	; (8000670 <MX_GPIO_Init+0x148>)
 8000604:	f002 fa24 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000608:	2304      	movs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <MX_GPIO_Init+0x144>)
 8000620:	f002 f894 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_R_Pin|MOTOR_DIR_L_Pin;
 8000624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_GPIO_Init+0x148>)
 800063e:	f002 f885 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 8000642:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_GPIO_Init+0x148>)
 800065c:	f002 f876 	bl	800274c <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3730      	adds	r7, #48	; 0x30
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40020400 	.word	0x40020400
 8000670:	40020c00 	.word	0x40020c00

08000674 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f002 fa01 	bl	8002ab8 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fc3e 	bl	8000f3c <Error_Handler>
  }

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000050 	.word	0x20000050
 80006c8:	40005400 	.word	0x40005400
 80006cc:	00061a80 	.word	0x00061a80

080006d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <HAL_I2C_MspInit+0xf4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d163      	bne.n	80007ba <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a33      	ldr	r2, [pc, #204]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IUM_SCL_Pin|IMU_SDA_Pin;
 800070e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000714:	2312      	movs	r3, #18
 8000716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000720:	2304      	movs	r3, #4
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4828      	ldr	r0, [pc, #160]	; (80007cc <HAL_I2C_MspInit+0xfc>)
 800072c:	f002 f80e 	bl	800274c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 800073a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <HAL_I2C_MspInit+0x104>)
 8000750:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000758:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800077c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000780:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000790:	f001 fc32 	bl	8001ff8 <HAL_DMA_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800079a:	f000 fbcf 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	201f      	movs	r0, #31
 80007b0:	f001 fbeb 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007b4:	201f      	movs	r0, #31
 80007b6:	f001 fc04 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400
 80007d0:	200000a4 	.word	0x200000a4
 80007d4:	40026010 	.word	0x40026010

080007d8 <Control_Motor>:
float * Get_Velocity();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Control_Motor(int16_t duty_r,int16_t duty_l){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	80bb      	strh	r3, [r7, #4]
	test[0]=duty_r;
 80007e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <Control_Motor+0x70>)
 80007f6:	edc3 7a00 	vstr	s15, [r3]
	test[1]=duty_l;
 80007fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <Control_Motor+0x70>)
 8000808:	edc3 7a01 	vstr	s15, [r3, #4]



	HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_R_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <Control_Motor+0x74>)
 8000814:	f002 f91c 	bl	8002a50 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_r);
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <Control_Motor+0x78>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000820:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_L_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <Control_Motor+0x74>)
 800082a:	f002 f911 	bl	8002a50 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <Control_Motor+0x78>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	635a      	str	r2, [r3, #52]	; 0x34


	HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <Control_Motor+0x74>)
 800083c:	f002 f921 	bl	8002a82 <HAL_GPIO_TogglePin>
	else{
		HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_R_Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim1, MOTOR_R_Pin, duty_r);
	}
*/
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000015c 	.word	0x2000015c
 800084c:	40020c00 	.word	0x40020c00
 8000850:	2000024c 	.word	0x2000024c

08000854 <Get_Velocity>:

float * Get_Velocity(){
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
//	volatile float enc[2];
	enc[0]= fabs((TIM2->CNT)-5000.0F);
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000866:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80008f0 <Get_Velocity+0x9c>
 800086a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800086e:	eef0 7ae7 	vabs.f32	s15, s15
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <Get_Velocity+0xa0>)
 8000874:	edc3 7a00 	vstr	s15, [r3]
	if ((TIM2->CNT)>=5000) enc[1]=-1;
 8000878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000882:	4293      	cmp	r3, r2
 8000884:	d903      	bls.n	800088e <Get_Velocity+0x3a>
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <Get_Velocity+0xa0>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <Get_Velocity+0xa4>)
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	e003      	b.n	8000896 <Get_Velocity+0x42>
	else enc[1]=1;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <Get_Velocity+0xa0>)
 8000890:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000894:	605a      	str	r2, [r3, #4]

	enc[2]= fabs((TIM4->CNT)-5000.0F);
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <Get_Velocity+0xa8>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80008f0 <Get_Velocity+0x9c>
 80008a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008aa:	eef0 7ae7 	vabs.f32	s15, s15
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <Get_Velocity+0xa0>)
 80008b0:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((TIM4->CNT)>5000) enc[3]=1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <Get_Velocity+0xa8>)
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80008bc:	4293      	cmp	r3, r2
 80008be:	d904      	bls.n	80008ca <Get_Velocity+0x76>
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <Get_Velocity+0xa0>)
 80008c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	e002      	b.n	80008d0 <Get_Velocity+0x7c>
	else enc[3]=-1;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Get_Velocity+0xa0>)
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <Get_Velocity+0xa4>)
 80008ce:	60da      	str	r2, [r3, #12]

	TIM4->CNT=5000;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <Get_Velocity+0xa8>)
 80008d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=5000;
 80008d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24

	return enc;
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <Get_Velocity+0xa0>)
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	459c4000 	.word	0x459c4000
 80008f4:	20000128 	.word	0x20000128
 80008f8:	bf800000 	.word	0xbf800000
 80008fc:	40000800 	.word	0x40000800

08000900 <Transmit_Uart>:

// data1: x, data2: y, Kpid
void Transmit_Uart(float x, float y, float v_l, int dir_l, float v_r, int dir_r){
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	ed87 0a07 	vstr	s0, [r7, #28]
 800090a:	edc7 0a06 	vstr	s1, [r7, #24]
 800090e:	ed87 1a05 	vstr	s2, [r7, #20]
 8000912:	6138      	str	r0, [r7, #16]
 8000914:	edc7 1a03 	vstr	s3, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]


	dataTransmit[0]=(uint8_t)((((uint16_t)x)|0x00FF)>>8); // 8 bit H
 800091a:	edd7 7a07 	vldr	s15, [r7, #28]
 800091e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000922:	ee17 3a90 	vmov	r3, s15
 8000926:	b29b      	uxth	r3, r3
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b94      	ldr	r3, [pc, #592]	; (8000b80 <Transmit_Uart+0x280>)
 8000930:	701a      	strb	r2, [r3, #0]
	dataTransmit[1]=(uint8_t)((((uint16_t)x)|0xFF00)); 	      // 8 bit L
 8000932:	edd7 7a07 	vldr	s15, [r7, #28]
 8000936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093a:	ee17 3a90 	vmov	r3, s15
 800093e:	b29b      	uxth	r3, r3
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <Transmit_Uart+0x280>)
 8000944:	705a      	strb	r2, [r3, #1]
	dataTransmit[2]=(uint8_t)((((uint16_t)((x-(uint16_t)x)*10000.0f))|0x00FF)>>8); // 8 bit H
 8000946:	edd7 7a07 	vldr	s15, [r7, #28]
 800094a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	b29b      	uxth	r3, r3
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000964:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000b84 <Transmit_Uart+0x284>
 8000968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800096c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000970:	ee17 3a90 	vmov	r3, s15
 8000974:	b29b      	uxth	r3, r3
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b80      	ldr	r3, [pc, #512]	; (8000b80 <Transmit_Uart+0x280>)
 800097e:	709a      	strb	r2, [r3, #2]
	dataTransmit[3]=(uint8_t)((((uint16_t)((x-(uint16_t)x)*10000.0f))|0xFF00));    // 8 bit L
 8000980:	edd7 7a07 	vldr	s15, [r7, #28]
 8000984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000988:	ee17 3a90 	vmov	r3, s15
 800098c:	b29b      	uxth	r3, r3
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ed97 7a07 	vldr	s14, [r7, #28]
 800099a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800099e:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000b84 <Transmit_Uart+0x284>
 80009a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009aa:	ee17 3a90 	vmov	r3, s15
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b73      	ldr	r3, [pc, #460]	; (8000b80 <Transmit_Uart+0x280>)
 80009b4:	70da      	strb	r2, [r3, #3]

	dataTransmit[4]=(uint8_t)((((uint16_t)y)|0x00FF)>>8); // 8 bit H
 80009b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80009ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009be:	ee17 3a90 	vmov	r3, s15
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b6d      	ldr	r3, [pc, #436]	; (8000b80 <Transmit_Uart+0x280>)
 80009cc:	711a      	strb	r2, [r3, #4]
	dataTransmit[5]=(uint8_t)((((uint16_t)y)|0xFF00)); 	      // 8 bit L
 80009ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80009d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d6:	ee17 3a90 	vmov	r3, s15
 80009da:	b29b      	uxth	r3, r3
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b68      	ldr	r3, [pc, #416]	; (8000b80 <Transmit_Uart+0x280>)
 80009e0:	715a      	strb	r2, [r3, #5]
	dataTransmit[6]=(uint8_t)((((uint16_t)((y-(uint16_t)y)*10000.0f))|0x00FF)>>8); // 8 bit H
 80009e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80009e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ea:	ee17 3a90 	vmov	r3, s15
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a00:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000b84 <Transmit_Uart+0x284>
 8000a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a0c:	ee17 3a90 	vmov	r3, s15
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b59      	ldr	r3, [pc, #356]	; (8000b80 <Transmit_Uart+0x280>)
 8000a1a:	719a      	strb	r2, [r3, #6]
	dataTransmit[7]=(uint8_t)((((uint16_t)((y-(uint16_t)y)*10000.0f))|0xFF00));    // 8 bit L
 8000a1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a24:	ee17 3a90 	vmov	r3, s15
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a32:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000b84 <Transmit_Uart+0x284>
 8000a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a46:	ee17 3a90 	vmov	r3, s15
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <Transmit_Uart+0x280>)
 8000a50:	71da      	strb	r2, [r3, #7]

	dataTransmit[8]=(uint8_t)v_l; // 8 bit truoc dau .
 8000a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a5e:	793b      	ldrb	r3, [r7, #4]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <Transmit_Uart+0x280>)
 8000a64:	721a      	strb	r2, [r3, #8]
	dataTransmit[9]=(uint8_t)((((uint16_t)((v_l-(uint16_t)v_l)*10000.0f))|0x00FF)>>8); // 8 bit H
 8000a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a6e:	ee17 3a90 	vmov	r3, s15
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a84:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000b84 <Transmit_Uart+0x284>
 8000a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a90:	ee17 3a90 	vmov	r3, s15
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <Transmit_Uart+0x280>)
 8000a9e:	725a      	strb	r2, [r3, #9]
	dataTransmit[10]=(uint8_t)((((uint16_t)((v_l-(uint16_t)v_l)*10000.0f))|0xFF00));    // 8 bit L
 8000aa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa8:	ee17 3a90 	vmov	r3, s15
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000b84 <Transmit_Uart+0x284>
 8000ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aca:	ee17 3a90 	vmov	r3, s15
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <Transmit_Uart+0x280>)
 8000ad4:	729a      	strb	r2, [r3, #10]

	dataTransmit[11]=(uint8_t)dir_l;
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <Transmit_Uart+0x280>)
 8000adc:	72da      	strb	r2, [r3, #11]

	dataTransmit[12]=(uint8_t)v_r; // 8 bit truoc dau .
 8000ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aea:	793b      	ldrb	r3, [r7, #4]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <Transmit_Uart+0x280>)
 8000af0:	731a      	strb	r2, [r3, #12]
	dataTransmit[13]=(uint8_t)((((uint16_t)((v_r-(uint16_t)v_r)*10000.0f))|0x00FF)>>8); // 8 bit H
 8000af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afa:	ee17 3a90 	vmov	r3, s15
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b10:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000b84 <Transmit_Uart+0x284>
 8000b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b1c:	ee17 3a90 	vmov	r3, s15
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <Transmit_Uart+0x280>)
 8000b2a:	735a      	strb	r2, [r3, #13]
	dataTransmit[14]=(uint8_t)((((uint16_t)((v_r-(uint16_t)v_r)*10000.0f))|0xFF00));    // 8 bit L
 8000b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b34:	ee17 3a90 	vmov	r3, s15
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	ee07 3a90 	vmov	s15, r3
 8000b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b42:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000b84 <Transmit_Uart+0x284>
 8000b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b56:	ee17 3a90 	vmov	r3, s15
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <Transmit_Uart+0x280>)
 8000b60:	739a      	strb	r2, [r3, #14]

	dataTransmit[15]=(uint8_t)dir_r;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <Transmit_Uart+0x280>)
 8000b68:	73da      	strb	r2, [r3, #15]
//	for(int i=0;i<14;i++){
//		dataTransmit[i]=0xF3;
//	}

	HAL_UART_Transmit(&huart2, &dataTransmit[0], sizeof(dataTransmit), 1);
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	4904      	ldr	r1, [pc, #16]	; (8000b80 <Transmit_Uart+0x280>)
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <Transmit_Uart+0x288>)
 8000b72:	f006 f9e8 	bl	8006f46 <HAL_UART_Transmit>
//	dataTransmit[8]=(int8_t)v_l; // 8 bit truoc dau .
//	dataTransmit[9]=(int8_t)((((int16_t)((x-(int16_t)v_l)*10000))|0xF0)>>8); // 8 bit H
//	dataTransmit[10]=(int8_t)((((int16_t)((x-(int16_t)v_l)*10000))|0x0F));    // 8 bit L
}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001a8 	.word	0x200001a8
 8000b84:	461c4000 	.word	0x461c4000
 8000b88:	2000036c 	.word	0x2000036c

08000b8c <Receive_Uart>:

float *Receive_Uart(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	data_Receive[0]=(float)(receivebuffer[0]+(float)(((uint16_t)((receivebuffer[1]<<8)|receivebuffer[2])/10000.0f)));
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <Receive_Uart+0x84>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <Receive_Uart+0x84>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <Receive_Uart+0x84>)
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb8:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8000c14 <Receive_Uart+0x88>
 8000bbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <Receive_Uart+0x8c>)
 8000bc6:	edc3 7a00 	vstr	s15, [r3]
	data_Receive[1]=(float)(receivebuffer[3]+(float)(((uint16_t)((receivebuffer[4]<<8)|receivebuffer[5])/10000.0f)));
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <Receive_Uart+0x84>)
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <Receive_Uart+0x84>)
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <Receive_Uart+0x84>)
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf2:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8000c14 <Receive_Uart+0x88>
 8000bf6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <Receive_Uart+0x8c>)
 8000c00:	edc3 7a01 	vstr	s15, [r3, #4]

	return data_Receive;
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <Receive_Uart+0x8c>)
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000120 	.word	0x20000120
 8000c14:	461c4000 	.word	0x461c4000
 8000c18:	200001c0 	.word	0x200001c0

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f001 f843 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f86d 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f7ff fc7d 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2e:	f7ff fc53 	bl	80004d8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c32:	f000 fa37 	bl	80010a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c36:	f000 fae1 	bl	80011fc <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c3a:	f000 fb33 	bl	80012a4 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000c3e:	f000 fbd3 	bl	80013e8 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000c42:	f000 fd43 	bl	80016cc <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000c46:	f000 fb81 	bl	800134c <MX_TIM5_Init>
  MX_I2C1_Init();
 8000c4a:	f7ff fd13 	bl	8000674 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <main+0xb0>)
 8000c52:	f005 f9e1 	bl	8006018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c56:	2104      	movs	r1, #4
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <main+0xb0>)
 8000c5a:	f005 f9dd 	bl	8006018 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 8000c5e:	481c      	ldr	r0, [pc, #112]	; (8000cd0 <main+0xb4>)
 8000c60:	f005 f981 	bl	8005f66 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000c64:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <main+0xb8>)
 8000c66:	f005 f97e 	bl	8005f66 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c6a:	213c      	movs	r1, #60	; 0x3c
 8000c6c:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <main+0xbc>)
 8000c6e:	f005 fa97 	bl	80061a0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c72:	213c      	movs	r1, #60	; 0x3c
 8000c74:	4819      	ldr	r0, [pc, #100]	; (8000cdc <main+0xc0>)
 8000c76:	f005 fa93 	bl	80061a0 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 6);
 8000c7a:	2206      	movs	r2, #6
 8000c7c:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <main+0xc4>)
 8000c7e:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <main+0xc8>)
 8000c80:	f006 f9fa 	bl	8007078 <HAL_UART_Receive_DMA>

  PID_Init(Kp, Ki, Kd, Ts);
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <main+0xcc>)
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <main+0xd0>)
 8000c90:	4917      	ldr	r1, [pc, #92]	; (8000cf0 <main+0xd4>)
 8000c92:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <main+0xd8>)
 8000c94:	f000 fea2 	bl	80019dc <PID_Init>
  MPU6050_INIT();
 8000c98:	f000 fdee 	bl	8001878 <MPU6050_INIT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  test1++;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <main+0xdc>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <main+0xdc>)
 8000ca6:	801a      	strh	r2, [r3, #0]
	  HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, DataBuffer[0], 14);
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <main+0xe0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	230e      	movs	r3, #14
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	9200      	str	r2, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	223b      	movs	r2, #59	; 0x3b
 8000cb8:	21d0      	movs	r1, #208	; 0xd0
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <main+0xe4>)
 8000cbc:	f002 fb54 	bl	8003368 <HAL_I2C_Mem_Read_DMA>
	  HAL_Delay(1000);
 8000cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc4:	f001 f864 	bl	8001d90 <HAL_Delay>
	  test1++;
 8000cc8:	e7e8      	b.n	8000c9c <main+0x80>
 8000cca:	bf00      	nop
 8000ccc:	2000024c 	.word	0x2000024c
 8000cd0:	2000028c 	.word	0x2000028c
 8000cd4:	2000020c 	.word	0x2000020c
 8000cd8:	200001cc 	.word	0x200001cc
 8000cdc:	200002cc 	.word	0x200002cc
 8000ce0:	20000120 	.word	0x20000120
 8000ce4:	2000036c 	.word	0x2000036c
 8000ce8:	20000018 	.word	0x20000018
 8000cec:	20000010 	.word	0x20000010
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000048 	.word	0x20000048
 8000cfc:	2000014c 	.word	0x2000014c
 8000d00:	20000050 	.word	0x20000050

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2230      	movs	r2, #48	; 0x30
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f007 f906 	bl	8007f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <SystemClock_Config+0xcc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <SystemClock_Config+0xcc>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <SystemClock_Config+0xcc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d78:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 fc5e 	bl	800564c <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d96:	f000 f8d1 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2102      	movs	r1, #2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 feb7 	bl	8005b2c <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dc4:	f000 f8ba 	bl	8000f3c <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3750      	adds	r7, #80	; 0x50
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d14e      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0xb2>
		volatile float *data_Receive;
		t1++;
 8000dec:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a42      	ldr	r2, [pc, #264]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000df4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8000df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfa:	4841      	ldr	r0, [pc, #260]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000dfc:	f001 fe41 	bl	8002a82 <HAL_GPIO_TogglePin>
		velo = Get_Velocity();
 8000e00:	f7ff fd28 	bl	8000854 <Get_Velocity>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e08:	601a      	str	r2, [r3, #0]
		data_Receive = Receive_Uart();
 8000e0a:	f7ff febf 	bl	8000b8c <Receive_Uart>
 8000e0e:	60b8      	str	r0, [r7, #8]
		for(int i=0;i<2;i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e00d      	b.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x5a>
			PID_current[i]=*(velo+i*2);
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	00d2      	lsls	r2, r2, #3
 8000e1e:	4413      	add	r3, r2
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4939      	ldr	r1, [pc, #228]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	601a      	str	r2, [r3, #0]
		for(int i=0;i<2;i++){
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	ddee      	ble.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x3e>
//			v_target[i]=*(data_Receive+i);
//			v_target[i] = 10.0f;
		}

		duty_cycle = PID_Calculate(v_target, PID_current);
 8000e38:	4933      	ldr	r1, [pc, #204]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000e3a:	4834      	ldr	r0, [pc, #208]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e3c:	f000 fe16 	bl	8001a6c <PID_Calculate>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e44:	601a      	str	r2, [r3, #0]
		test[2]=*(duty_cycle);
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e4e:	6093      	str	r3, [r2, #8]
		test[3]=*(duty_cycle+1);
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e58:	60d3      	str	r3, [r2, #12]
		Control_Motor(*(duty_cycle), *(duty_cycle+1));
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	edd3 7a00 	vldr	s15, [r3]
 8000e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e66:	ee17 3a90 	vmov	r3, s15
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3304      	adds	r3, #4
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	4610      	mov	r0, r2
 8000e84:	f7ff fca8 	bl	80007d8 <Control_Motor>
/*		if(v_target[0] >= 19.0f) vt=-0.5f;
		else if (v_target[0] <= 2.0) vt = 0.5f;*/
		Transmit_Uart(523.456, 321.654,*(velo), *(velo+1), *(velo+2), *(velo+3));
//		Transmit_Uart(523.456, 321.654,12.356,1,20.214,3);
	}
}
 8000e88:	e032      	b.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x118>
	else if(htim->Instance==htim9.Instance){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d12c      	bne.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x118>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 8000e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9a:	4819      	ldr	r0, [pc, #100]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e9c:	f001 fdf1 	bl	8002a82 <HAL_GPIO_TogglePin>
		v_target[0] = 15.0;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ea4:	601a      	str	r2, [r3, #0]
		Transmit_Uart(523.456, 321.654,*(velo), *(velo+1), *(velo+2), *(velo+3));
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	ed93 7a00 	vldr	s14, [r3]
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	edd3 6a00 	vldr	s13, [r3]
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	330c      	adds	r3, #12
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed4:	ee17 1a90 	vmov	r1, s15
 8000ed8:	eef0 1a66 	vmov.f32	s3, s13
 8000edc:	ee16 0a10 	vmov	r0, s12
 8000ee0:	eeb0 1a47 	vmov.f32	s2, s14
 8000ee4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000f20 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000ee8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000f24 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8000eec:	f7ff fd08 	bl	8000900 <Transmit_Uart>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000020c 	.word	0x2000020c
 8000efc:	20000190 	.word	0x20000190
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	20000144 	.word	0x20000144
 8000f08:	200001b8 	.word	0x200001b8
 8000f0c:	20000108 	.word	0x20000108
 8000f10:	200001a4 	.word	0x200001a4
 8000f14:	2000015c 	.word	0x2000015c
 8000f18:	2000028c 	.word	0x2000028c
 8000f1c:	41700000 	.word	0x41700000
 8000f20:	43a0d3b6 	.word	0x43a0d3b6
 8000f24:	4402dd2f 	.word	0x4402dd2f

08000f28 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==hi2c1.Instance){

	}
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 feae 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <DMA1_Stream0_IRQHandler+0x10>)
 8000ffe:	f001 f923 	bl	8002248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000a4 	.word	0x200000a4

0800100c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Stream5_IRQHandler+0x10>)
 8001012:	f001 f919 	bl	8002248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000030c 	.word	0x2000030c

08001020 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001026:	f005 f8f2 	bl	800620e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800102c:	f005 f8ef 	bl	800620e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000024c 	.word	0x2000024c
 8001038:	2000028c 	.word	0x2000028c

0800103c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <I2C1_EV_IRQHandler+0x10>)
 8001042:	f002 fb03 	bl	800364c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000050 	.word	0x20000050

08001050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <USART2_IRQHandler+0x10>)
 8001056:	f006 f88f 	bl	8007178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000036c 	.word	0x2000036c

08001064 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM5_IRQHandler+0x10>)
 800106a:	f005 f8d0 	bl	800620e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000020c 	.word	0x2000020c

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <SystemInit+0x28>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <SystemInit+0x28>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SystemInit+0x28>)
 800108e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001092:	609a      	str	r2, [r3, #8]
#endif
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b096      	sub	sp, #88	; 0x58
 80010a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2220      	movs	r2, #32
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 ff21 	bl	8007f24 <memset>

  htim1.Instance = TIM1;
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <MX_TIM1_Init+0x150>)
 80010e4:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <MX_TIM1_Init+0x154>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <MX_TIM1_Init+0x150>)
 80010ea:	220e      	movs	r2, #14
 80010ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <MX_TIM1_Init+0x150>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 299;
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_TIM1_Init+0x150>)
 80010f6:	f240 122b 	movw	r2, #299	; 0x12b
 80010fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <MX_TIM1_Init+0x150>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <MX_TIM1_Init+0x150>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <MX_TIM1_Init+0x150>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800110e:	4839      	ldr	r0, [pc, #228]	; (80011f4 <MX_TIM1_Init+0x150>)
 8001110:	f004 fefe 	bl	8005f10 <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800111a:	f7ff ff0f 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001128:	4619      	mov	r1, r3
 800112a:	4832      	ldr	r0, [pc, #200]	; (80011f4 <MX_TIM1_Init+0x150>)
 800112c:	f005 fa3e 	bl	80065ac <HAL_TIM_ConfigClockSource>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001136:	f7ff ff01 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800113a:	482e      	ldr	r0, [pc, #184]	; (80011f4 <MX_TIM1_Init+0x150>)
 800113c:	f004 ff37 	bl	8005fae <HAL_TIM_PWM_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001146:	f7ff fef9 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001156:	4619      	mov	r1, r3
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <MX_TIM1_Init+0x150>)
 800115a:	f005 fdd3 	bl	8006d04 <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001164:	f7ff feea 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001168:	2360      	movs	r3, #96	; 0x60
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	4819      	ldr	r0, [pc, #100]	; (80011f4 <MX_TIM1_Init+0x150>)
 800118e:	f005 f947 	bl	8006420 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001198:	f7ff fed0 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	2204      	movs	r2, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_TIM1_Init+0x150>)
 80011a6:	f005 f93b 	bl	8006420 <HAL_TIM_PWM_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80011b0:	f7ff fec4 	bl	8000f3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_TIM1_Init+0x150>)
 80011d8:	f005 fe02 	bl	8006de0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011e2:	f7ff feab 	bl	8000f3c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <MX_TIM1_Init+0x150>)
 80011e8:	f000 fa36 	bl	8001658 <HAL_TIM_MspPostInit>

}
 80011ec:	bf00      	nop
 80011ee:	3758      	adds	r7, #88	; 0x58
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000024c 	.word	0x2000024c
 80011f8:	40010000 	.word	0x40010000

080011fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2224      	movs	r2, #36	; 0x24
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f006 fe8a 	bl	8007f24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_TIM2_Init+0xa4>)
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_TIM2_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_TIM2_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM2_Init+0xa4>)
 800122e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM2_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_TIM2_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001240:	2303      	movs	r3, #3
 8001242:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001248:	2301      	movs	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001258:	2301      	movs	r3, #1
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM2_Init+0xa4>)
 800126c:	f004 ff06 	bl	800607c <HAL_TIM_Encoder_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001276:	f7ff fe61 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM2_Init+0xa4>)
 8001288:	f005 fd3c 	bl	8006d04 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001292:	f7ff fe53 	bl	8000f3c <Error_Handler>
  }

}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	; 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002cc 	.word	0x200002cc

080012a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 fe36 	bl	8007f24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_TIM4_Init+0xa0>)
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_TIM4_Init+0xa4>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM4_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM4_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM4_Init+0xa0>)
 80012d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80012d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM4_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM4_Init+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e6:	2303      	movs	r3, #3
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fe:	2301      	movs	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM4_Init+0xa0>)
 8001312:	f004 feb3 	bl	800607c <HAL_TIM_Encoder_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800131c:	f7ff fe0e 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM4_Init+0xa0>)
 800132e:	f005 fce9 	bl	8006d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001338:	f7ff fe00 	bl	8000f3c <Error_Handler>
  }

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001cc 	.word	0x200001cc
 8001348:	40000800 	.word	0x40000800

0800134c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_TIM5_Init+0x94>)
 800136a:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <MX_TIM5_Init+0x98>)
 800136c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM5_Init+0x94>)
 8001370:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001374:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM5_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_TIM5_Init+0x94>)
 800137e:	2231      	movs	r2, #49	; 0x31
 8001380:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_TIM5_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM5_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_TIM5_Init+0x94>)
 8001390:	f004 fdbe 	bl	8005f10 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800139a:	f7ff fdcf 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM5_Init+0x94>)
 80013ac:	f005 f8fe 	bl	80065ac <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f7ff fdc1 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM5_Init+0x94>)
 80013c8:	f005 fc9c 	bl	8006d04 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80013d2:	f7ff fdb3 	bl	8000f3c <Error_Handler>
  }

}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000020c 	.word	0x2000020c
 80013e4:	40000c00 	.word	0x40000c00

080013e8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM9_Init+0x6c>)
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <MX_TIM9_Init+0x70>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_TIM9_Init+0x6c>)
 8001402:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001406:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_TIM9_Init+0x6c>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_TIM9_Init+0x6c>)
 8001410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001414:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_TIM9_Init+0x6c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MX_TIM9_Init+0x6c>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM9_Init+0x6c>)
 8001424:	f004 fd74 	bl	8005f10 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800142e:	f7ff fd85 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM9_Init+0x6c>)
 800143e:	f005 f8b5 	bl	80065ac <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001448:	f7ff fd78 	bl	8000f3c <Error_Handler>
  }

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000028c 	.word	0x2000028c
 8001458:	40014000 	.word	0x40014000

0800145c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <HAL_TIM_Base_MspInit+0xb8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d116      	bne.n	800149c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2018      	movs	r0, #24
 8001490:	f000 fd7b 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001494:	2018      	movs	r0, #24
 8001496:	f000 fd94 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800149a:	e036      	b.n	800150a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_TIM_Base_MspInit+0xc0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d116      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2032      	movs	r0, #50	; 0x32
 80014c8:	f000 fd5f 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014cc:	2032      	movs	r0, #50	; 0x32
 80014ce:	f000 fd78 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
}
 80014d2:	e01a      	b.n	800150a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_TIM_Base_MspInit+0xc4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d115      	bne.n	800150a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0xbc>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2018      	movs	r0, #24
 8001500:	f000 fd43 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001504:	2018      	movs	r0, #24
 8001506:	f000 fd5c 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010000 	.word	0x40010000
 8001518:	40023800 	.word	0x40023800
 800151c:	40000c00 	.word	0x40000c00
 8001520:	40014000 	.word	0x40014000

08001524 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d14a      	bne.n	80015dc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a3e      	ldr	r2, [pc, #248]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a37      	ldr	r2, [pc, #220]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b35      	ldr	r3, [pc, #212]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 800159a:	2320      	movs	r3, #32
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	4825      	ldr	r0, [pc, #148]	; (800164c <HAL_TIM_Encoder_MspInit+0x128>)
 80015b6:	f001 f8c9 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 80015ba:	2308      	movs	r3, #8
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	481e      	ldr	r0, [pc, #120]	; (8001650 <HAL_TIM_Encoder_MspInit+0x12c>)
 80015d6:	f001 f8b9 	bl	800274c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015da:	e030      	b.n	800163e <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_TIM_Encoder_MspInit+0x130>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12b      	bne.n	800163e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_TIM_Encoder_MspInit+0x124>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800162e:	2302      	movs	r3, #2
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_TIM_Encoder_MspInit+0x12c>)
 800163a:	f001 f887 	bl	800274c <HAL_GPIO_Init>
}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40000800 	.word	0x40000800

08001658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_TIM_MspPostInit+0x68>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11e      	bne.n	80016b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_TIM_MspPostInit+0x6c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_TIM_MspPostInit+0x6c>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_TIM_MspPostInit+0x6c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_L_Pin|MOTOR_R_Pin;
 8001696:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800169a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_TIM_MspPostInit+0x70>)
 80016b4:	f001 f84a 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40021000 	.word	0x40021000

080016cc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <MX_USART2_UART_Init+0x50>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USART2_UART_Init+0x4c>)
 8001704:	f005 fbd2 	bl	8006eac <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800170e:	f7ff fc15 	bl	8000f3c <Error_Handler>
  }

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000036c 	.word	0x2000036c
 800171c:	40004400 	.word	0x40004400

08001720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a34      	ldr	r2, [pc, #208]	; (8001810 <HAL_UART_MspInit+0xf0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d162      	bne.n	8001808 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_UART_MspInit+0xf4>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177a:	230c      	movs	r3, #12
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178a:	2307      	movs	r3, #7
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4820      	ldr	r0, [pc, #128]	; (8001818 <HAL_UART_MspInit+0xf8>)
 8001796:	f000 ffd9 	bl	800274c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_UART_MspInit+0xfc>)
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <HAL_UART_MspInit+0x100>)
 800179e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017de:	f000 fc0b 	bl	8001ff8 <HAL_DMA_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80017e8:	f7ff fba8 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017f0:	635a      	str	r2, [r3, #52]	; 0x34
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2026      	movs	r0, #38	; 0x26
 80017fe:	f000 fbc4 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001802:	2026      	movs	r0, #38	; 0x26
 8001804:	f000 fbdd 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40004400 	.word	0x40004400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	2000030c 	.word	0x2000030c
 8001820:	40026088 	.word	0x40026088

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001828:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800182a:	e003      	b.n	8001834 <LoopCopyDataInit>

0800182c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800182e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001830:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001832:	3104      	adds	r1, #4

08001834 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001838:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800183c:	d3f6      	bcc.n	800182c <CopyDataInit>
  ldr  r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001840:	e002      	b.n	8001848 <LoopFillZerobss>

08001842 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001842:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001844:	f842 3b04 	str.w	r3, [r2], #4

08001848 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800184c:	d3f9      	bcc.n	8001842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff fc13 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f006 fb43 	bl	8007edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff f9e1 	bl	8000c1c <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001860:	08007f7c 	.word	0x08007f7c
  ldr  r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001868:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 800186c:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8001870:	20000430 	.word	0x20000430

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <MPU6050_INIT>:
#include "IMU_MPU6050.h"
#include "i2c.h"
#include "gpio.h"


void MPU6050_INIT(){
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af04      	add	r7, sp, #16

		// reset mpu6050
	TxBuffer[0] = 0x80;
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <MPU6050_INIT+0x154>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 8001884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <MPU6050_INIT+0x154>)
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	226b      	movs	r2, #107	; 0x6b
 8001896:	21d0      	movs	r1, #208	; 0xd0
 8001898:	484d      	ldr	r0, [pc, #308]	; (80019d0 <MPU6050_INIT+0x158>)
 800189a:	f001 fa45 	bl	8002d28 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800189e:	20c8      	movs	r0, #200	; 0xc8
 80018a0:	f000 fa76 	bl	8001d90 <HAL_Delay>

	// tat sleep mode, tat cycle mode, temp_dis = 8MHZ
	TxBuffer[0] = 0x00;
 80018a4:	4b49      	ldr	r3, [pc, #292]	; (80019cc <MPU6050_INIT+0x154>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, TxBuffer, 1, 1000);
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2301      	movs	r3, #1
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <MPU6050_INIT+0x154>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	226b      	movs	r2, #107	; 0x6b
 80018bc:	21d0      	movs	r1, #208	; 0xd0
 80018be:	4844      	ldr	r0, [pc, #272]	; (80019d0 <MPU6050_INIT+0x158>)
 80018c0:	f001 fa32 	bl	8002d28 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80018c4:	20c8      	movs	r0, #200	; 0xc8
 80018c6:	f000 fa63 	bl	8001d90 <HAL_Delay>

	// disabled DLPF
	TxBuffer[0] = 0x06;
 80018ca:	4b40      	ldr	r3, [pc, #256]	; (80019cc <MPU6050_INIT+0x154>)
 80018cc:	2206      	movs	r2, #6
 80018ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_CONFIG, 1, TxBuffer, 1, 1000);
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2301      	movs	r3, #1
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <MPU6050_INIT+0x154>)
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	221a      	movs	r2, #26
 80018e2:	21d0      	movs	r1, #208	; 0xd0
 80018e4:	483a      	ldr	r0, [pc, #232]	; (80019d0 <MPU6050_INIT+0x158>)
 80018e6:	f001 fa1f 	bl	8002d28 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80018ea:	20c8      	movs	r0, #200	; 0xc8
 80018ec:	f000 fa50 	bl	8001d90 <HAL_Delay>

	// full scale range mode 3 +-2000do/s
	TxBuffer[0] = 0x18;
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <MPU6050_INIT+0x154>)
 80018f2:	2218      	movs	r2, #24
 80018f4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, TxBuffer, 1, 1000);
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	2301      	movs	r3, #1
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <MPU6050_INIT+0x154>)
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2301      	movs	r3, #1
 8001906:	221b      	movs	r2, #27
 8001908:	21d0      	movs	r1, #208	; 0xd0
 800190a:	4831      	ldr	r0, [pc, #196]	; (80019d0 <MPU6050_INIT+0x158>)
 800190c:	f001 fa0c 	bl	8002d28 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001910:	20c8      	movs	r0, #200	; 0xc8
 8001912:	f000 fa3d 	bl	8001d90 <HAL_Delay>

	// full scale range mode 1 +-8g
	TxBuffer[0] = 0x10;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <MPU6050_INIT+0x154>)
 8001918:	2210      	movs	r2, #16
 800191a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, TxBuffer, 1, 1000);
 800191c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <MPU6050_INIT+0x154>)
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	221c      	movs	r2, #28
 800192e:	21d0      	movs	r1, #208	; 0xd0
 8001930:	4827      	ldr	r0, [pc, #156]	; (80019d0 <MPU6050_INIT+0x158>)
 8001932:	f001 f9f9 	bl	8002d28 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001936:	20c8      	movs	r0, #200	; 0xc8
 8001938:	f000 fa2a 	bl	8001d90 <HAL_Delay>

	// cho phep ngat INT
	TxBuffer[0] = 0x19;
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <MPU6050_INIT+0x154>)
 800193e:	2219      	movs	r2, #25
 8001940:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_INT_ENABLE, 1, TxBuffer, 1, 1000);
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2301      	movs	r3, #1
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <MPU6050_INIT+0x154>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	2238      	movs	r2, #56	; 0x38
 8001954:	21d0      	movs	r1, #208	; 0xd0
 8001956:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MPU6050_INIT+0x158>)
 8001958:	f001 f9e6 	bl	8002d28 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800195c:	20c8      	movs	r0, #200	; 0xc8
 800195e:	f000 fa17 	bl	8001d90 <HAL_Delay>

	// test MPU6050
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, RxBuffer, 1, 1000);
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	2301      	movs	r3, #1
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MPU6050_INIT+0x15c>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	2275      	movs	r2, #117	; 0x75
 8001974:	21d0      	movs	r1, #208	; 0xd0
 8001976:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MPU6050_INIT+0x158>)
 8001978:	f001 fad0 	bl	8002f1c <HAL_I2C_Mem_Read>
	HAL_Delay(300);
 800197c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001980:	f000 fa06 	bl	8001d90 <HAL_Delay>
	if (RxBuffer[0] == 0x68)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MPU6050_INIT+0x15c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b68      	cmp	r3, #104	; 0x68
 800198a:	d10a      	bne.n	80019a2 <MPU6050_INIT+0x12a>
	{
		// neu MPU6050 hoat dong binh thuong thi den sang
		HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001992:	4811      	ldr	r0, [pc, #68]	; (80019d8 <MPU6050_INIT+0x160>)
 8001994:	f001 f85c 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8001998:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800199c:	f000 f9f8 	bl	8001d90 <HAL_Delay>
		for(j=0;j<=11;j++){
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
			HAL_Delay(100);
		}
	}
}
 80019a0:	e010      	b.n	80019c4 <MPU6050_INIT+0x14c>
		for(j=0;j<=11;j++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
 80019a6:	e00a      	b.n	80019be <MPU6050_INIT+0x146>
			HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 80019a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <MPU6050_INIT+0x160>)
 80019ae:	f001 f868 	bl	8002a82 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80019b2:	2064      	movs	r0, #100	; 0x64
 80019b4:	f000 f9ec 	bl	8001d90 <HAL_Delay>
		for(j=0;j<=11;j++){
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	3301      	adds	r3, #1
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b0b      	cmp	r3, #11
 80019c2:	d9f1      	bls.n	80019a8 <MPU6050_INIT+0x130>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001a0 	.word	0x200001a0
 80019d0:	20000050 	.word	0x20000050
 80019d4:	20000194 	.word	0x20000194
 80019d8:	40020c00 	.word	0x40020c00

080019dc <PID_Init>:

float error, PID_P[2], PID_I[2], PID_D[2];

uint8_t TxBuffer[2], RxBuffer[7];

void PID_Init(float *Kp, float *Ki, float *Kd, float Ts) {
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0; i < 2; i++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e020      	b.n	8001a34 <PID_Init+0x58>
		PID_Kp[i] = *(Kp+i);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <PID_Init+0x7c>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	601a      	str	r2, [r3, #0]
		PID_Ki[i] = *(Ki+i);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4912      	ldr	r1, [pc, #72]	; (8001a5c <PID_Init+0x80>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	601a      	str	r2, [r3, #0]
		PID_Kd[i] = *(Kd+i);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <PID_Init+0x84>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	dddb      	ble.n	80019f2 <PID_Init+0x16>
	}
	PID_T = Ts/1000.0f;
 8001a3a:	ed97 7a00 	vldr	s14, [r7]
 8001a3e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001a64 <PID_Init+0x88>
 8001a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <PID_Init+0x8c>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
}
 8001a4c:	bf00      	nop
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000400 	.word	0x20000400
 8001a5c:	200003ac 	.word	0x200003ac
 8001a60:	200003e8 	.word	0x200003e8
 8001a64:	447a0000 	.word	0x447a0000
 8001a68:	200003b4 	.word	0x200003b4

08001a6c <PID_Calculate>:

float * PID_Calculate(float *PID_in, float *PID_current){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
//	float error, PID_P, PID_I, PID_D;
//	volatile float PID_out[2];
	PID_Test[2] = *(PID_current);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7c      	ldr	r2, [pc, #496]	; (8001c6c <PID_Calculate+0x200>)
 8001a7c:	6093      	str	r3, [r2, #8]

	for (int i=0;i<2; i++){
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e0e8      	b.n	8001c56 <PID_Calculate+0x1ea>
		PID_Test[i]=*(PID_in+i);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4977      	ldr	r1, [pc, #476]	; (8001c6c <PID_Calculate+0x200>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	601a      	str	r2, [r3, #0]
		error = *(PID_in+i)-*(PID_current+i)/**enc[i*2+1]*/;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	ed93 7a00 	vldr	s14, [r3]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <PID_Calculate+0x204>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
		PID_P[i] = (float)(PID_Kp[i]*(error-PID_pre_err[i]));
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <PID_Calculate+0x208>)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <PID_Calculate+0x204>)
 8001ac8:	edd3 6a00 	vldr	s13, [r3]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <PID_Calculate+0x20c>)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae0:	4a66      	ldr	r2, [pc, #408]	; (8001c7c <PID_Calculate+0x210>)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
		PID_I[i] = (float)(0.5F*PID_Ki[i]*0.005f*(error+PID_pre_err[i]));
 8001aec:	4a64      	ldr	r2, [pc, #400]	; (8001c80 <PID_Calculate+0x214>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b00:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001c84 <PID_Calculate+0x218>
 8001b04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b08:	4a5b      	ldr	r2, [pc, #364]	; (8001c78 <PID_Calculate+0x20c>)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	edd3 6a00 	vldr	s13, [r3]
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <PID_Calculate+0x204>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	4a59      	ldr	r2, [pc, #356]	; (8001c88 <PID_Calculate+0x21c>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
		PID_D[i] = (float)(PID_Kd[i]*200.0f*(error-2.0f*PID_pre_err[i]+PID_ppre_err[i]));
 8001b2e:	4a57      	ldr	r2, [pc, #348]	; (8001c8c <PID_Calculate+0x220>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001c90 <PID_Calculate+0x224>
 8001b3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <PID_Calculate+0x204>)
 8001b44:	edd3 6a00 	vldr	s13, [r3]
 8001b48:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <PID_Calculate+0x20c>)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <PID_Calculate+0x228>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	4a49      	ldr	r2, [pc, #292]	; (8001c98 <PID_Calculate+0x22c>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	edc3 7a00 	vstr	s15, [r3]

		PID_out[i] = (PID_P[i] + PID_I[i] + PID_D[i]) + PID_out[i];
 8001b7c:	4a3f      	ldr	r2, [pc, #252]	; (8001c7c <PID_Calculate+0x210>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4a3f      	ldr	r2, [pc, #252]	; (8001c88 <PID_Calculate+0x21c>)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b98:	4a3f      	ldr	r2, [pc, #252]	; (8001c98 <PID_Calculate+0x22c>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba8:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <PID_Calculate+0x230>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb8:	4a38      	ldr	r2, [pc, #224]	; (8001c9c <PID_Calculate+0x230>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	edc3 7a00 	vstr	s15, [r3]

		if (PID_out[i]>PID_out_max){
 8001bc4:	4a35      	ldr	r2, [pc, #212]	; (8001c9c <PID_Calculate+0x230>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <PID_Calculate+0x234>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	dd07      	ble.n	8001bf0 <PID_Calculate+0x184>
			PID_out[i]=PID_out_max;
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <PID_Calculate+0x234>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	492d      	ldr	r1, [pc, #180]	; (8001c9c <PID_Calculate+0x230>)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e014      	b.n	8001c1a <PID_Calculate+0x1ae>
		}
		else if (PID_out[i]<PID_out_min){
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <PID_Calculate+0x230>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	ed93 7a00 	vldr	s14, [r3]
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <PID_Calculate+0x238>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d506      	bpl.n	8001c1a <PID_Calculate+0x1ae>
			PID_out[i]=PID_out_min;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <PID_Calculate+0x238>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4922      	ldr	r1, [pc, #136]	; (8001c9c <PID_Calculate+0x230>)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	601a      	str	r2, [r3, #0]
		}
		PID1[i] = PID_out[i];
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <PID_Calculate+0x230>)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4920      	ldr	r1, [pc, #128]	; (8001ca8 <PID_Calculate+0x23c>)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	601a      	str	r2, [r3, #0]
		PID_ppre_err[i]=PID_pre_err[i];
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <PID_Calculate+0x20c>)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <PID_Calculate+0x228>)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	601a      	str	r2, [r3, #0]
		PID_pre_err[i]=error;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <PID_Calculate+0x204>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <PID_Calculate+0x20c>)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	601a      	str	r2, [r3, #0]
	for (int i=0;i<2; i++){
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	f77f af13 	ble.w	8001a84 <PID_Calculate+0x18>
	PID_out[0] = Aout;
	PID_out[1] = 0;
*/

//	PID_Test[5] += PID_out[0];
	return PID_out;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <PID_Calculate+0x230>)
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	200003c0 	.word	0x200003c0
 8001c70:	20000410 	.word	0x20000410
 8001c74:	20000400 	.word	0x20000400
 8001c78:	200003b8 	.word	0x200003b8
 8001c7c:	2000041c 	.word	0x2000041c
 8001c80:	200003ac 	.word	0x200003ac
 8001c84:	3ba3d70a 	.word	0x3ba3d70a
 8001c88:	200003f0 	.word	0x200003f0
 8001c8c:	200003e8 	.word	0x200003e8
 8001c90:	43480000 	.word	0x43480000
 8001c94:	20000408 	.word	0x20000408
 8001c98:	20000424 	.word	0x20000424
 8001c9c:	200003f8 	.word	0x200003f8
 8001ca0:	20000020 	.word	0x20000020
 8001ca4:	2000004c 	.word	0x2000004c
 8001ca8:	20000414 	.word	0x20000414

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_Init+0x40>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_Init+0x40>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_Init+0x40>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 f94d 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff f934 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f965 	bl	8001fde <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d2c:	f000 f92d 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000001c 	.word	0x2000001c
 8001d48:	20000028 	.word	0x20000028
 8001d4c:	20000024 	.word	0x20000024

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000028 	.word	0x20000028
 8001d74:	2000042c 	.word	0x2000042c

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000042c 	.word	0x2000042c

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff ffee 	bl	8001d78 <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_Delay+0x40>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffde 	bl	8001d78 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000028 	.word	0x20000028

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff feb8 	bl	8001d78 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e099      	b.n	8002148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002034:	e00f      	b.n	8002056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002036:	f7ff fe9f 	bl	8001d78 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b05      	cmp	r3, #5
 8002042:	d908      	bls.n	8002056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e078      	b.n	8002148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e8      	bne.n	8002036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_DMA_Init+0x158>)
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d107      	bne.n	80020c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4313      	orrs	r3, r2
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f023 0307 	bic.w	r3, r3, #7
 80020d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d117      	bne.n	800211a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 faab 	bl	8002658 <DMA_CheckFifoParam>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002116:	2301      	movs	r3, #1
 8002118:	e016      	b.n	8002148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fa62 	bl	80025ec <DMA_CalcBaseAndBitshift>
 8002128:	4603      	mov	r3, r0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	223f      	movs	r2, #63	; 0x3f
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	f010803f 	.word	0xf010803f

08002154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_DMA_Start_IT+0x26>
 8002176:	2302      	movs	r3, #2
 8002178:	e040      	b.n	80021fc <HAL_DMA_Start_IT+0xa8>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d12f      	bne.n	80021ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f9f4 	bl	8002590 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	409a      	lsls	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0216 	orr.w	r2, r2, #22
 80021c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0208 	orr.w	r2, r2, #8
 80021da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e005      	b.n	80021fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
 80021f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d004      	beq.n	8002222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00c      	b.n	800223c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2205      	movs	r2, #5
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_DMA_IRQHandler+0x258>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a92      	ldr	r2, [pc, #584]	; (80024a4 <HAL_DMA_IRQHandler+0x25c>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0a9b      	lsrs	r3, r3, #10
 8002260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2208      	movs	r2, #8
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01a      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0204 	bic.w	r2, r2, #4
 800229a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	2208      	movs	r2, #8
 80022a2:	409a      	lsls	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d012      	beq.n	80022ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2201      	movs	r2, #1
 80022d8:	409a      	lsls	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2204      	movs	r2, #4
 80022f0:	409a      	lsls	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00b      	beq.n	8002320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2204      	movs	r2, #4
 800230e:	409a      	lsls	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f043 0204 	orr.w	r2, r3, #4
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2210      	movs	r2, #16
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d043      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03c      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2210      	movs	r2, #16
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d018      	beq.n	800238a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d108      	bne.n	8002378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d024      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
 8002376:	e01f      	b.n	80023b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01b      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e016      	b.n	80023b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0208 	bic.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2220      	movs	r2, #32
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 808e 	beq.w	80024e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8086 	beq.w	80024e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2220      	movs	r2, #32
 80023e0:	409a      	lsls	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d136      	bne.n	8002460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0216 	bic.w	r2, r2, #22
 8002400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_DMA_IRQHandler+0x1da>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0208 	bic.w	r2, r2, #8
 8002430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	223f      	movs	r2, #63	; 0x3f
 8002438:	409a      	lsls	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002452:	2b00      	cmp	r3, #0
 8002454:	d07d      	beq.n	8002552 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
        }
        return;
 800245e:	e078      	b.n	8002552 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01c      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	2b00      	cmp	r3, #0
 8002482:	d030      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e02b      	b.n	80024e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d027      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
 800249e:	e022      	b.n	80024e6 <HAL_DMA_IRQHandler+0x29e>
 80024a0:	2000001c 	.word	0x2000001c
 80024a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0210 	bic.w	r2, r2, #16
 80024c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d032      	beq.n	8002554 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d022      	beq.n	8002540 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2205      	movs	r2, #5
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3301      	adds	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	429a      	cmp	r2, r3
 800251c:	d307      	bcc.n	800252e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f2      	bne.n	8002512 <HAL_DMA_IRQHandler+0x2ca>
 800252c:	e000      	b.n	8002530 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800252e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
 8002550:	e000      	b.n	8002554 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002552:	bf00      	nop
    }
  }
}
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop

0800255c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256a:	b2db      	uxtb	r3, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d108      	bne.n	80025d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ce:	e007      	b.n	80025e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3b10      	subs	r3, #16
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <DMA_CalcBaseAndBitshift+0x64>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <DMA_CalcBaseAndBitshift+0x68>)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d909      	bls.n	800262e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	1d1a      	adds	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	659a      	str	r2, [r3, #88]	; 0x58
 800262c:	e007      	b.n	800263e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	aaaaaaab 	.word	0xaaaaaaab
 8002654:	08007f64 	.word	0x08007f64

08002658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11f      	bne.n	80026b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d855      	bhi.n	8002724 <DMA_CheckFifoParam+0xcc>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <DMA_CheckFifoParam+0x28>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002691 	.word	0x08002691
 8002684:	080026a3 	.word	0x080026a3
 8002688:	08002691 	.word	0x08002691
 800268c:	08002725 	.word	0x08002725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d045      	beq.n	8002728 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a0:	e042      	b.n	8002728 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026aa:	d13f      	bne.n	800272c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b0:	e03c      	b.n	800272c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ba:	d121      	bne.n	8002700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d836      	bhi.n	8002730 <DMA_CheckFifoParam+0xd8>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <DMA_CheckFifoParam+0x70>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	080026df 	.word	0x080026df
 80026d0:	080026d9 	.word	0x080026d9
 80026d4:	080026f1 	.word	0x080026f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e02f      	b.n	800273e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d024      	beq.n	8002734 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ee:	e021      	b.n	8002734 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f8:	d11e      	bne.n	8002738 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026fe:	e01b      	b.n	8002738 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d902      	bls.n	800270c <DMA_CheckFifoParam+0xb4>
 8002706:	2b03      	cmp	r3, #3
 8002708:	d003      	beq.n	8002712 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800270a:	e018      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e015      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00e      	beq.n	800273c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      break;
 8002722:	e00b      	b.n	800273c <DMA_CheckFifoParam+0xe4>
      break;
 8002724:	bf00      	nop
 8002726:	e00a      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;
 8002728:	bf00      	nop
 800272a:	e008      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;
 800272c:	bf00      	nop
 800272e:	e006      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;
 8002730:	bf00      	nop
 8002732:	e004      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;
 8002734:	bf00      	nop
 8002736:	e002      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;   
 8002738:	bf00      	nop
 800273a:	e000      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;
 800273c:	bf00      	nop
    }
  } 
  
  return status; 
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	e159      	b.n	8002a1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 8148 	bne.w	8002a16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d00b      	beq.n	80027a6 <HAL_GPIO_Init+0x5a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d007      	beq.n	80027a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800279a:	2b11      	cmp	r3, #17
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b12      	cmp	r3, #18
 80027a4:	d130      	bne.n	8002808 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0xfc>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d123      	bne.n	8002890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	08da      	lsrs	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3208      	adds	r2, #8
 8002850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	220f      	movs	r2, #15
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0203 	and.w	r2, r3, #3
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a2 	beq.w	8002a16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <HAL_GPIO_Init+0x2e4>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a55      	ldr	r2, [pc, #340]	; (8002a30 <HAL_GPIO_Init+0x2e4>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_GPIO_Init+0x2e4>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ee:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <HAL_GPIO_Init+0x2e8>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_GPIO_Init+0x2ec>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x202>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a47      	ldr	r2, [pc, #284]	; (8002a3c <HAL_GPIO_Init+0x2f0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x1fe>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a46      	ldr	r2, [pc, #280]	; (8002a40 <HAL_GPIO_Init+0x2f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x1fa>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a45      	ldr	r2, [pc, #276]	; (8002a44 <HAL_GPIO_Init+0x2f8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x1f6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a44      	ldr	r2, [pc, #272]	; (8002a48 <HAL_GPIO_Init+0x2fc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x1f2>
 800293a:	2304      	movs	r3, #4
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x204>
 800293e:	2307      	movs	r3, #7
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x204>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x204>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x204>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x204>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002960:	4934      	ldr	r1, [pc, #208]	; (8002a34 <HAL_GPIO_Init+0x2e8>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296e:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_GPIO_Init+0x300>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002992:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <HAL_GPIO_Init+0x300>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_GPIO_Init+0x300>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029bc:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_GPIO_Init+0x300>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f aea2 	bls.w	8002768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	3724      	adds	r7, #36	; 0x24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40013800 	.word	0x40013800
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40020400 	.word	0x40020400
 8002a40:	40020800 	.word	0x40020800
 8002a44:	40020c00 	.word	0x40020c00
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	401a      	ands	r2, r3
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d104      	bne.n	8002aa6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	041a      	lsls	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e11f      	b.n	8002d0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fd fdf6 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f003 f9d0 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8002b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a7b      	ldr	r2, [pc, #492]	; (8002d14 <HAL_I2C_Init+0x25c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d807      	bhi.n	8002b3c <HAL_I2C_Init+0x84>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <HAL_I2C_Init+0x260>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e006      	b.n	8002b4a <HAL_I2C_Init+0x92>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a77      	ldr	r2, [pc, #476]	; (8002d1c <HAL_I2C_Init+0x264>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	bf94      	ite	ls
 8002b44:	2301      	movls	r3, #1
 8002b46:	2300      	movhi	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0db      	b.n	8002d0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <HAL_I2C_Init+0x268>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9b      	lsrs	r3, r3, #18
 8002b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a64      	ldr	r2, [pc, #400]	; (8002d14 <HAL_I2C_Init+0x25c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d802      	bhi.n	8002b8c <HAL_I2C_Init+0xd4>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	e009      	b.n	8002ba0 <HAL_I2C_Init+0xe8>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	4a63      	ldr	r2, [pc, #396]	; (8002d24 <HAL_I2C_Init+0x26c>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4956      	ldr	r1, [pc, #344]	; (8002d14 <HAL_I2C_Init+0x25c>)
 8002bbc:	428b      	cmp	r3, r1
 8002bbe:	d80d      	bhi.n	8002bdc <HAL_I2C_Init+0x124>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e59      	subs	r1, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	bf38      	it	cc
 8002bd8:	2304      	movcc	r3, #4
 8002bda:	e04f      	b.n	8002c7c <HAL_I2C_Init+0x1c4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d111      	bne.n	8002c08 <HAL_I2C_Init+0x150>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e58      	subs	r0, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e012      	b.n	8002c2e <HAL_I2C_Init+0x176>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Init+0x17e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e022      	b.n	8002c7c <HAL_I2C_Init+0x1c4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10e      	bne.n	8002c5c <HAL_I2C_Init+0x1a4>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1e58      	subs	r0, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	440b      	add	r3, r1
 8002c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5a:	e00f      	b.n	8002c7c <HAL_I2C_Init+0x1c4>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1e58      	subs	r0, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	0099      	lsls	r1, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	6809      	ldr	r1, [r1, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6911      	ldr	r1, [r2, #16]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	000186a0 	.word	0x000186a0
 8002d18:	001e847f 	.word	0x001e847f
 8002d1c:	003d08ff 	.word	0x003d08ff
 8002d20:	431bde83 	.word	0x431bde83
 8002d24:	10624dd3 	.word	0x10624dd3

08002d28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d42:	f7ff f819 	bl	8001d78 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	f040 80d9 	bne.w	8002f08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2319      	movs	r3, #25
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	496d      	ldr	r1, [pc, #436]	; (8002f14 <HAL_I2C_Mem_Write+0x1ec>)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f002 fa49 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0cc      	b.n	8002f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Mem_Write+0x56>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0c5      	b.n	8002f0a <HAL_I2C_Mem_Write+0x1e2>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d007      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2221      	movs	r2, #33	; 0x21
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a4d      	ldr	r2, [pc, #308]	; (8002f18 <HAL_I2C_Mem_Write+0x1f0>)
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de6:	88f8      	ldrh	r0, [r7, #6]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	8979      	ldrh	r1, [r7, #10]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	4603      	mov	r3, r0
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f001 fec6 	bl	8004b88 <I2C_RequestMemoryWrite>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d052      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e081      	b.n	8002f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f002 faca 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06b      	b.n	8002f0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_I2C_Mem_Write+0x180>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1aa      	bne.n	8002e06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f002 fab6 	bl	8005426 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00d      	beq.n	8002edc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d107      	bne.n	8002ed8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e016      	b.n	8002f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	00100002 	.word	0x00100002
 8002f18:	ffff0000 	.word	0xffff0000

08002f1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f36:	f7fe ff1f 	bl	8001d78 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	f040 8208 	bne.w	800335a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2319      	movs	r3, #25
 8002f50:	2201      	movs	r2, #1
 8002f52:	497b      	ldr	r1, [pc, #492]	; (8003140 <HAL_I2C_Mem_Read+0x224>)
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f002 f94f 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
 8002f62:	e1fb      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Mem_Read+0x56>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e1f4      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d007      	beq.n	8002f98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2222      	movs	r2, #34	; 0x22
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a5b      	ldr	r2, [pc, #364]	; (8003144 <HAL_I2C_Mem_Read+0x228>)
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fda:	88f8      	ldrh	r0, [r7, #6]
 8002fdc:	893a      	ldrh	r2, [r7, #8]
 8002fde:	8979      	ldrh	r1, [r7, #10]
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4603      	mov	r3, r0
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f001 fe62 	bl	8004cb4 <I2C_RequestMemoryRead>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1b0      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e184      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b01      	cmp	r3, #1
 8003030:	d11b      	bne.n	800306a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e164      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b02      	cmp	r3, #2
 8003070:	d11b      	bne.n	80030aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	e144      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030c0:	e138      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	f200 80f1 	bhi.w	80032ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d123      	bne.n	800311c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f002 fa17 	bl	800550c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e139      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311a:	e10b      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b02      	cmp	r3, #2
 8003122:	d14e      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	2200      	movs	r2, #0
 800312c:	4906      	ldr	r1, [pc, #24]	; (8003148 <HAL_I2C_Mem_Read+0x22c>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f002 f862 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e10e      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000
 8003148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c0:	e0b8      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	2200      	movs	r2, #0
 80031ca:	4966      	ldr	r1, [pc, #408]	; (8003364 <HAL_I2C_Mem_Read+0x448>)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f002 f813 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0bf      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2200      	movs	r2, #0
 8003226:	494f      	ldr	r1, [pc, #316]	; (8003364 <HAL_I2C_Mem_Read+0x448>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f001 ffe5 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e091      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ac:	e042      	b.n	8003334 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f002 f92a 	bl	800550c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e04c      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d118      	bne.n	8003334 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f aec2 	bne.w	80030c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	00010004 	.word	0x00010004

08003368 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08c      	sub	sp, #48	; 0x30
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	460b      	mov	r3, r1
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003382:	f7fe fcf9 	bl	8001d78 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	f040 8154 	bne.w	8003642 <HAL_I2C_Mem_Read_DMA+0x2da>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800339a:	4b96      	ldr	r3, [pc, #600]	; (80035f4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	4a95      	ldr	r2, [pc, #596]	; (80035f8 <HAL_I2C_Mem_Read_DMA+0x290>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0a1a      	lsrs	r2, r3, #8
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009a      	lsls	r2, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e12a      	b.n	8003644 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d0db      	beq.n	80033b4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_I2C_Mem_Read_DMA+0xa2>
 8003406:	2302      	movs	r3, #2
 8003408:	e11c      	b.n	8003644 <HAL_I2C_Mem_Read_DMA+0x2dc>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d007      	beq.n	8003430 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2222      	movs	r2, #34	; 0x22
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_I2C_Mem_Read_DMA+0x294>)
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80ab 	beq.w	80035d2 <HAL_I2C_Mem_Read_DMA+0x26a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	4a5f      	ldr	r2, [pc, #380]	; (8003600 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	4a5e      	ldr	r2, [pc, #376]	; (8003604 <HAL_I2C_Mem_Read_DMA+0x29c>)
 800348a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	2200      	movs	r2, #0
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2200      	movs	r2, #0
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	2200      	movs	r2, #0
 80034a2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	2200      	movs	r2, #0
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3310      	adds	r3, #16
 80034b6:	4619      	mov	r1, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	f7fe fe47 	bl	8002154 <HAL_DMA_Start_IT>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 80034cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d16a      	bne.n	80035aa <HAL_I2C_Mem_Read_DMA+0x242>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80034d4:	88f8      	ldrh	r0, [r7, #6]
 80034d6:	893a      	ldrh	r2, [r7, #8]
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	2323      	movs	r3, #35	; 0x23
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4603      	mov	r3, r0
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f001 fbe5 	bl	8004cb4 <I2C_RequestMemoryRead>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d027      	beq.n	8003540 <HAL_I2C_Mem_Read_DMA+0x1d8>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fe85 	bl	8002204 <HAL_DMA_Abort_IT>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Clear directly Complete callback as no XferAbortCallback is used to finalize Abort treatment */
          if (hi2c->hdmarx != NULL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_I2C_Mem_Read_DMA+0x1a8>
          {
            hi2c->hdmarx->XferCpltCallback = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e081      	b.n	8003644 <HAL_I2C_Mem_Read_DMA+0x2dc>
        }

        if (hi2c->XferSize == 1U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	2b01      	cmp	r3, #1
 8003546:	d108      	bne.n	800355a <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e007      	b.n	800356a <HAL_I2C_Mem_Read_DMA+0x202>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003568:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003596:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	e049      	b.n	800363e <HAL_I2C_Mem_Read_DMA+0x2d6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e038      	b.n	8003644 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80035d2:	88f8      	ldrh	r0, [r7, #6]
 80035d4:	893a      	ldrh	r2, [r7, #8]
 80035d6:	8979      	ldrh	r1, [r7, #10]
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2323      	movs	r3, #35	; 0x23
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4603      	mov	r3, r0
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f001 fb66 	bl	8004cb4 <I2C_RequestMemoryRead>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <HAL_I2C_Mem_Read_DMA+0x2a0>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e028      	b.n	8003644 <HAL_I2C_Mem_Read_DMA+0x2dc>
 80035f2:	bf00      	nop
 80035f4:	2000001c 	.word	0x2000001c
 80035f8:	14f8b589 	.word	0x14f8b589
 80035fc:	ffff0000 	.word	0xffff0000
 8003600:	08004e85 	.word	0x08004e85
 8003604:	0800502f 	.word	0x0800502f
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2C_Mem_Read_DMA+0x2dc>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800366c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b10      	cmp	r3, #16
 800367a:	d003      	beq.n	8003684 <HAL_I2C_EV_IRQHandler+0x38>
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	f040 80bd 	bne.w	80037fe <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <HAL_I2C_EV_IRQHandler+0x6e>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036a4:	d003      	beq.n	80036ae <HAL_I2C_EV_IRQHandler+0x62>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_EV_IRQHandler+0x66>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x68>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	f000 812e 	beq.w	8003916 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_I2C_EV_IRQHandler+0x92>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 ffa0 	bl	8005616 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fcb1 	bl	800403e <I2C_Master_SB>
 80036dc:	e08e      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_I2C_EV_IRQHandler+0xb2>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	0a5b      	lsrs	r3, r3, #9
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd27 	bl	800414a <I2C_Master_ADD10>
 80036fc:	e07e      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0xd2>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	0a5b      	lsrs	r3, r3, #9
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fd41 	bl	800419e <I2C_Master_ADDR>
 800371c:	e06e      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d037      	beq.n	800379a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003738:	f000 80ef 	beq.w	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	09db      	lsrs	r3, r3, #7
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00f      	beq.n	8003768 <HAL_I2C_EV_IRQHandler+0x11c>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_I2C_EV_IRQHandler+0x11c>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f93e 	bl	80039e2 <I2C_MasterTransmit_TXE>
 8003766:	e049      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80d2 	beq.w	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	0a5b      	lsrs	r3, r3, #9
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80cb 	beq.w	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b10      	cmp	r3, #16
 8003788:	d103      	bne.n	8003792 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9c5 	bl	8003b1a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003790:	e0c3      	b.n	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa29 	bl	8003bea <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003798:	e0bf      	b.n	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a8:	f000 80b7 	beq.w	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00f      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa99 	bl	8003d08 <I2C_MasterReceive_RXNE>
 80037d6:	e011      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 809a 	beq.w	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8093 	beq.w	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fb38 	bl	8003e6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037fa:	e08e      	b.n	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
 80037fc:	e08d      	b.n	800391a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e007      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <HAL_I2C_EV_IRQHandler+0x206>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	0a5b      	lsrs	r3, r3, #9
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00c      	beq.n	8003852 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fef6 	bl	800463c <I2C_Slave_ADDR>
 8003850:	e066      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_I2C_EV_IRQHandler+0x226>
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	0a5b      	lsrs	r3, r3, #9
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 ff2a 	bl	80046c4 <I2C_Slave_STOPF>
 8003870:	e056      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	2b21      	cmp	r3, #33	; 0x21
 8003876:	d002      	beq.n	800387e <HAL_I2C_EV_IRQHandler+0x232>
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	2b29      	cmp	r3, #41	; 0x29
 800387c:	d125      	bne.n	80038ca <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	09db      	lsrs	r3, r3, #7
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00f      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0x25e>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	0a9b      	lsrs	r3, r3, #10
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0x25e>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fe0c 	bl	80044c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038a8:	e039      	b.n	800391e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d033      	beq.n	800391e <HAL_I2C_EV_IRQHandler+0x2d2>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02d      	beq.n	800391e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fe39 	bl	800453a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038c8:	e029      	b.n	800391e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00f      	beq.n	80038f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	0a9b      	lsrs	r3, r3, #10
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fe44 	bl	800457c <I2C_SlaveReceive_RXNE>
 80038f4:	e014      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00e      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	0a5b      	lsrs	r3, r3, #9
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fe72 	bl	80045f8 <I2C_SlaveReceive_BTF>
 8003914:	e004      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800391e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
 8003982:	4613      	mov	r3, r2
 8003984:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d150      	bne.n	8003aaa <I2C_MasterTransmit_TXE+0xc8>
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b21      	cmp	r3, #33	; 0x21
 8003a0c:	d14d      	bne.n	8003aaa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d01d      	beq.n	8003a50 <I2C_MasterTransmit_TXE+0x6e>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d01a      	beq.n	8003a50 <I2C_MasterTransmit_TXE+0x6e>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a20:	d016      	beq.n	8003a50 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a30:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2211      	movs	r2, #17
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff6c 	bl	8003926 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a4e:	e060      	b.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a5e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d107      	bne.n	8003a9a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff87 	bl	80039a6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a98:	e03b      	b.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff3f 	bl	8003926 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aa8:	e033      	b.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b21      	cmp	r3, #33	; 0x21
 8003aae:	d005      	beq.n	8003abc <I2C_MasterTransmit_TXE+0xda>
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d12d      	bne.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	2b22      	cmp	r3, #34	; 0x22
 8003aba:	d12a      	bne.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ad6:	e01c      	b.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d103      	bne.n	8003aec <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f880 	bl	8003bea <I2C_MemoryTransmit_TXE_BTF>
}
 8003aea:	e012      	b.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b10:	e7ff      	b.n	8003b12 <I2C_MasterTransmit_TXE+0x130>
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b21      	cmp	r3, #33	; 0x21
 8003b32:	d156      	bne.n	8003be2 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b62:	e03e      	b.n	8003be2 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d01d      	beq.n	8003ba6 <I2C_MasterTransmit_BTF+0x8c>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d01a      	beq.n	8003ba6 <I2C_MasterTransmit_BTF+0x8c>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b76:	d016      	beq.n	8003ba6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b86:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2211      	movs	r2, #17
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fec1 	bl	8003926 <HAL_I2C_MasterTxCpltCallback>
}
 8003ba4:	e01d      	b.n	8003be2 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fea2 	bl	8003926 <HAL_I2C_MasterTxCpltCallback>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11d      	bne.n	8003c3e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10b      	bne.n	8003c22 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c20:	e06e      	b.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	121b      	asrs	r3, r3, #8
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c3c:	e060      	b.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10b      	bne.n	8003c5e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c5c:	e050      	b.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d14c      	bne.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b22      	cmp	r3, #34	; 0x22
 8003c6a:	d108      	bne.n	8003c7e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	e040      	b.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b21      	cmp	r3, #33	; 0x21
 8003c8c:	d112      	bne.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cb2:	e025      	b.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d120      	bne.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b21      	cmp	r3, #33	; 0x21
 8003cc2:	d11d      	bne.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fe53 	bl	80039a6 <HAL_I2C_MemTxCpltCallback>
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b22      	cmp	r3, #34	; 0x22
 8003d1a:	f040 80a2 	bne.w	8003e62 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d921      	bls.n	8003d70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	f040 8082 	bne.w	8003e62 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003d6e:	e078      	b.n	8003e62 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d074      	beq.n	8003e62 <I2C_MasterReceive_RXNE+0x15a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d002      	beq.n	8003d84 <I2C_MasterReceive_RXNE+0x7c>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d16e      	bne.n	8003e62 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f001 fb8f 	bl	80054a8 <I2C_WaitOnSTOPRequestThroughIT>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d142      	bne.n	8003e16 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d10a      	bne.n	8003e00 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd f895 	bl	8000f28 <HAL_I2C_MemRxCpltCallback>
}
 8003dfe:	e030      	b.n	8003e62 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2212      	movs	r2, #18
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fd93 	bl	800393a <HAL_I2C_MasterRxCpltCallback>
}
 8003e14:	e025      	b.n	8003e62 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fdac 	bl	80039ba <HAL_I2C_ErrorCallback>
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d11b      	bne.n	8003eba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003eb8:	e0bd      	b.n	8004036 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d129      	bne.n	8003f18 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00a      	beq.n	8003ef0 <I2C_MasterReceive_BTF+0x86>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d007      	beq.n	8003ef0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f16:	e08e      	b.n	8004036 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d176      	bne.n	8004010 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d002      	beq.n	8003f2e <I2C_MasterReceive_BTF+0xc4>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d108      	bne.n	8003f40 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e019      	b.n	8003f74 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d002      	beq.n	8003f4c <I2C_MasterReceive_BTF+0xe2>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d108      	bne.n	8003f5e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e00a      	b.n	8003f74 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d007      	beq.n	8003f74 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d10a      	bne.n	8003ffa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc ff98 	bl	8000f28 <HAL_I2C_MemRxCpltCallback>
}
 8003ff8:	e01d      	b.n	8004036 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2212      	movs	r2, #18
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fc96 	bl	800393a <HAL_I2C_MasterRxCpltCallback>
}
 800400e:	e012      	b.n	8004036 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d117      	bne.n	8004082 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800406a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800406c:	e067      	b.n	800413e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	b2da      	uxtb	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
}
 8004080:	e05d      	b.n	800413e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408a:	d133      	bne.n	80040f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b21      	cmp	r3, #33	; 0x21
 8004096:	d109      	bne.n	80040ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	e008      	b.n	80040be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <I2C_Master_SB+0x92>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d032      	beq.n	800413e <I2C_Master_SB+0x100>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d02d      	beq.n	800413e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f0:	605a      	str	r2, [r3, #4]
}
 80040f2:	e024      	b.n	800413e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	b29b      	uxth	r3, r3
 8004102:	11db      	asrs	r3, r3, #7
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0306 	and.w	r3, r3, #6
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f063 030f 	orn	r3, r3, #15
 8004110:	b2da      	uxtb	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]
}
 8004118:	e011      	b.n	800413e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411e:	2b01      	cmp	r3, #1
 8004120:	d10d      	bne.n	800413e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	b29b      	uxth	r3, r3
 8004128:	11db      	asrs	r3, r3, #7
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0306 	and.w	r3, r3, #6
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f063 030e 	orn	r3, r3, #14
 8004136:	b2da      	uxtb	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	611a      	str	r2, [r3, #16]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <I2C_Master_ADD10+0x24>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <I2C_Master_ADD10+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004190:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b091      	sub	sp, #68	; 0x44
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b22      	cmp	r3, #34	; 0x22
 80041c6:	f040 8169 	bne.w	800449c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <I2C_Master_ADDR+0x54>
 80041d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d10b      	bne.n	80041f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	e160      	b.n	80044b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11d      	bne.n	8004236 <I2C_Master_ADDR+0x98>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004202:	d118      	bne.n	8004236 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004228:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
 8004234:	e13e      	b.n	80044b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e115      	b.n	8004494 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	f040 808a 	bne.w	8004388 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800427a:	d137      	bne.n	80042ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d113      	bne.n	80042c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	e0e7      	b.n	8004494 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e0d3      	b.n	8004494 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d02e      	beq.n	8004350 <I2C_Master_ADDR+0x1b2>
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d02b      	beq.n	8004350 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	2b12      	cmp	r3, #18
 80042fc:	d102      	bne.n	8004304 <I2C_Master_ADDR+0x166>
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	2b01      	cmp	r3, #1
 8004302:	d125      	bne.n	8004350 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00e      	beq.n	8004328 <I2C_Master_ADDR+0x18a>
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	2b02      	cmp	r3, #2
 800430e:	d00b      	beq.n	8004328 <I2C_Master_ADDR+0x18a>
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	2b10      	cmp	r3, #16
 8004314:	d008      	beq.n	8004328 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e007      	b.n	8004338 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004336:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	2300      	movs	r3, #0
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	e0a1      	b.n	8004494 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e085      	b.n	8004494 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d14d      	bne.n	800442e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b04      	cmp	r3, #4
 8004396:	d016      	beq.n	80043c6 <I2C_Master_ADDR+0x228>
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b02      	cmp	r3, #2
 800439c:	d013      	beq.n	80043c6 <I2C_Master_ADDR+0x228>
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d010      	beq.n	80043c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e007      	b.n	80043d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e4:	d117      	bne.n	8004416 <I2C_Master_ADDR+0x278>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043ec:	d00b      	beq.n	8004406 <I2C_Master_ADDR+0x268>
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d008      	beq.n	8004406 <I2C_Master_ADDR+0x268>
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d005      	beq.n	8004406 <I2C_Master_ADDR+0x268>
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d002      	beq.n	8004406 <I2C_Master_ADDR+0x268>
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	2b20      	cmp	r3, #32
 8004404:	d107      	bne.n	8004416 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004414:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	e032      	b.n	8004494 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800443c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444c:	d117      	bne.n	800447e <I2C_Master_ADDR+0x2e0>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004454:	d00b      	beq.n	800446e <I2C_Master_ADDR+0x2d0>
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2b01      	cmp	r3, #1
 800445a:	d008      	beq.n	800446e <I2C_Master_ADDR+0x2d0>
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	2b08      	cmp	r3, #8
 8004460:	d005      	beq.n	800446e <I2C_Master_ADDR+0x2d0>
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2b10      	cmp	r3, #16
 8004466:	d002      	beq.n	800446e <I2C_Master_ADDR+0x2d0>
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	2b20      	cmp	r3, #32
 800446c:	d107      	bne.n	800447e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800447c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800449a:	e00b      	b.n	80044b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	e7ff      	b.n	80044b4 <I2C_Master_ADDR+0x316>
 80044b4:	bf00      	nop
 80044b6:	3744      	adds	r7, #68	; 0x44
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d02b      	beq.n	8004532 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <I2C_SlaveTransmit_TXE+0x72>
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b29      	cmp	r3, #41	; 0x29
 800450c:	d111      	bne.n	8004532 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2221      	movs	r2, #33	; 0x21
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2228      	movs	r2, #40	; 0x28
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fa0e 	bl	800394e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d011      	beq.n	8004570 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d02c      	beq.n	80045f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d114      	bne.n	80045f0 <I2C_SlaveReceive_RXNE+0x74>
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ca:	d111      	bne.n	80045f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2222      	movs	r2, #34	; 0x22
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2228      	movs	r2, #40	; 0x28
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff f9b9 	bl	8003962 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004656:	2b28      	cmp	r3, #40	; 0x28
 8004658:	d127      	bne.n	80046aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004668:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	089b      	lsrs	r3, r3, #2
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	09db      	lsrs	r3, r3, #7
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	81bb      	strh	r3, [r7, #12]
 800468c:	e002      	b.n	8004694 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800469c:	89ba      	ldrh	r2, [r7, #12]
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff f967 	bl	8003976 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80046a8:	e008      	b.n	80046bc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0202 	mvn.w	r2, #2
 80046b2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	d172      	bne.n	8004808 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b22      	cmp	r3, #34	; 0x22
 8004726:	d002      	beq.n	800472e <I2C_Slave_STOPF+0x6a>
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b2a      	cmp	r3, #42	; 0x2a
 800472c:	d135      	bne.n	800479a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004760:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fef8 	bl	800255c <HAL_DMA_GetState>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d049      	beq.n	8004806 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	4a69      	ldr	r2, [pc, #420]	; (800491c <I2C_Slave_STOPF+0x258>)
 8004778:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fd40 	bl	8002204 <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03d      	beq.n	8004806 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004798:	e035      	b.n	8004806 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0204 	orr.w	r2, r3, #4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd fec2 	bl	800255c <HAL_DMA_GetState>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d014      	beq.n	8004808 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	4a4e      	ldr	r2, [pc, #312]	; (800491c <I2C_Slave_STOPF+0x258>)
 80047e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd fd0a 	bl	8002204 <HAL_DMA_Abort_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
 8004804:	e000      	b.n	8004808 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004806:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d03e      	beq.n	8004890 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d112      	bne.n	8004846 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d112      	bne.n	800487a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f043 0204 	orr.w	r2, r3, #4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f843 	bl	8004924 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800489e:	e039      	b.n	8004914 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b2a      	cmp	r3, #42	; 0x2a
 80048a4:	d109      	bne.n	80048ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2228      	movs	r2, #40	; 0x28
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff f854 	bl	8003962 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b28      	cmp	r3, #40	; 0x28
 80048c4:	d111      	bne.n	80048ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <I2C_Slave_STOPF+0x25c>)
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff f855 	bl	8003992 <HAL_I2C_ListenCpltCallback>
}
 80048e8:	e014      	b.n	8004914 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	2b22      	cmp	r3, #34	; 0x22
 80048f0:	d002      	beq.n	80048f8 <I2C_Slave_STOPF+0x234>
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b22      	cmp	r3, #34	; 0x22
 80048f6:	d10d      	bne.n	8004914 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f827 	bl	8003962 <HAL_I2C_SlaveRxCpltCallback>
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	080050a9 	.word	0x080050a9
 8004920:	ffff0000 	.word	0xffff0000

08004924 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d002      	beq.n	8004948 <I2C_ITError+0x24>
 8004942:	7bbb      	ldrb	r3, [r7, #14]
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d10a      	bne.n	800495e <I2C_ITError+0x3a>
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b22      	cmp	r3, #34	; 0x22
 800494c:	d107      	bne.n	800495e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004964:	2b28      	cmp	r3, #40	; 0x28
 8004966:	d107      	bne.n	8004978 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2228      	movs	r2, #40	; 0x28
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004976:	e015      	b.n	80049a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004986:	d00a      	beq.n	800499e <I2C_ITError+0x7a>
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b60      	cmp	r3, #96	; 0x60
 800498c:	d007      	beq.n	800499e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d162      	bne.n	8004a7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d020      	beq.n	8004a14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	4a6a      	ldr	r2, [pc, #424]	; (8004b80 <I2C_ITError+0x25c>)
 80049d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd fc10 	bl	8002204 <HAL_DMA_Abort_IT>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8089 	beq.w	8004afe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4798      	blx	r3
 8004a12:	e074      	b.n	8004afe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	4a59      	ldr	r2, [pc, #356]	; (8004b80 <I2C_ITError+0x25c>)
 8004a1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd fbef 	bl	8002204 <HAL_DMA_Abort_IT>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d068      	beq.n	8004afe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d10b      	bne.n	8004a52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a74:	4610      	mov	r0, r2
 8004a76:	4798      	blx	r3
 8004a78:	e041      	b.n	8004afe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b60      	cmp	r3, #96	; 0x60
 8004a84:	d125      	bne.n	8004ad2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d10b      	bne.n	8004aba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fe ff7f 	bl	80039ce <HAL_I2C_AbortCpltCallback>
 8004ad0:	e015      	b.n	8004afe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d10b      	bne.n	8004af8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fe ff5e 	bl	80039ba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d113      	bne.n	8004b78 <I2C_ITError+0x254>
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b28      	cmp	r3, #40	; 0x28
 8004b54:	d110      	bne.n	8004b78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <I2C_ITError+0x260>)
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fe ff0d 	bl	8003992 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	080050a9 	.word	0x080050a9
 8004b84:	ffff0000 	.word	0xffff0000

08004b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	817b      	strh	r3, [r7, #10]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	813b      	strh	r3, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fb1a 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd8:	d103      	bne.n	8004be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e05f      	b.n	8004ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	6a3a      	ldr	r2, [r7, #32]
 8004bfa:	492d      	ldr	r1, [pc, #180]	; (8004cb0 <I2C_RequestMemoryWrite+0x128>)
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fb52 	bl	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e04c      	b.n	8004ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fbbc 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d107      	bne.n	8004c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e02b      	b.n	8004ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c54:	893b      	ldrh	r3, [r7, #8]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
 8004c5e:	e021      	b.n	8004ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c60:	893b      	ldrh	r3, [r7, #8]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fb96 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e005      	b.n	8004ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9a:	893b      	ldrh	r3, [r7, #8]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	00010002 	.word	0x00010002

08004cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	813b      	strh	r3, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fa7c 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d14:	d103      	bne.n	8004d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0aa      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d22:	897b      	ldrh	r3, [r7, #10]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	4952      	ldr	r1, [pc, #328]	; (8004e80 <I2C_RequestMemoryRead+0x1cc>)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fab4 	bl	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e097      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d60:	6a39      	ldr	r1, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fb1e 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e076      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d90:	893b      	ldrh	r3, [r7, #8]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e021      	b.n	8004de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 faf8 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00d      	beq.n	8004dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d107      	bne.n	8004dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e050      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	6a39      	ldr	r1, [r7, #32]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fadd 	bl	80053a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00d      	beq.n	8004e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d107      	bne.n	8004e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e035      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f9e5 	bl	80051f8 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	d103      	bne.n	8004e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e013      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e50:	897b      	ldrh	r3, [r7, #10]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	6a3a      	ldr	r2, [r7, #32]
 8004e64:	4906      	ldr	r1, [pc, #24]	; (8004e80 <I2C_RequestMemoryRead+0x1cc>)
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa1d 	bl	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	00010002 	.word	0x00010002

08004e84 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ede:	2b21      	cmp	r3, #33	; 0x21
 8004ee0:	d007      	beq.n	8004ef2 <I2C_DMAXferCplt+0x6e>
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004ee8:	2b22      	cmp	r3, #34	; 0x22
 8004eea:	d131      	bne.n	8004f50 <I2C_DMAXferCplt+0xcc>
 8004eec:	7cbb      	ldrb	r3, [r7, #18]
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d12e      	bne.n	8004f50 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f00:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b29      	cmp	r3, #41	; 0x29
 8004f0c:	d10a      	bne.n	8004f24 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2221      	movs	r2, #33	; 0x21
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2228      	movs	r2, #40	; 0x28
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f7fe fd16 	bl	800394e <HAL_I2C_SlaveTxCpltCallback>
 8004f22:	e00c      	b.n	8004f3e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	2b2a      	cmp	r3, #42	; 0x2a
 8004f28:	d109      	bne.n	8004f3e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2222      	movs	r2, #34	; 0x22
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2228      	movs	r2, #40	; 0x28
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f38:	6978      	ldr	r0, [r7, #20]
 8004f3a:	f7fe fd12 	bl	8003962 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f4c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004f4e:	e06a      	b.n	8005026 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d064      	beq.n	8005026 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d107      	bne.n	8004f76 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f84:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f8c:	d009      	beq.n	8004fa2 <I2C_DMAXferCplt+0x11e>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d006      	beq.n	8004fa2 <I2C_DMAXferCplt+0x11e>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f9a:	d002      	beq.n	8004fa2 <I2C_DMAXferCplt+0x11e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d107      	bne.n	8004fb2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fc0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004fe0:	6978      	ldr	r0, [r7, #20]
 8004fe2:	f7fe fcea 	bl	80039ba <HAL_I2C_ErrorCallback>
}
 8004fe6:	e01e      	b.n	8005026 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d10a      	bne.n	8005012 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800500a:	6978      	ldr	r0, [r7, #20]
 800500c:	f7fb ff8c 	bl	8000f28 <HAL_I2C_MemRxCpltCallback>
}
 8005010:	e009      	b.n	8005026 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2212      	movs	r2, #18
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005020:	6978      	ldr	r0, [r7, #20]
 8005022:	f7fe fc8a 	bl	800393a <HAL_I2C_MasterRxCpltCallback>
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	2200      	movs	r2, #0
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2200      	movs	r2, #0
 800505a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fd fa8b 	bl	8002578 <HAL_DMA_GetError>
 8005062:	4603      	mov	r3, r0
 8005064:	2b02      	cmp	r3, #2
 8005066:	d01b      	beq.n	80050a0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005076:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0210 	orr.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7fe fc8d 	bl	80039ba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050c2:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <I2C_DMAAbort+0x148>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	08db      	lsrs	r3, r3, #3
 80050c8:	4a4a      	ldr	r2, [pc, #296]	; (80051f4 <I2C_DMAAbort+0x14c>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0a1a      	lsrs	r2, r3, #8
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00da      	lsls	r2, r3, #3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80050ee:	e00a      	b.n	8005106 <I2C_DMAAbort+0x5e>
    }
    count--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d0ea      	beq.n	80050dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	2200      	movs	r2, #0
 8005114:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	2200      	movs	r2, #0
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2200      	movs	r2, #0
 800513a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	2200      	movs	r2, #0
 800514a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	2200      	movs	r2, #0
 800515a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b60      	cmp	r3, #96	; 0x60
 8005176:	d10e      	bne.n	8005196 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800518e:	6978      	ldr	r0, [r7, #20]
 8005190:	f7fe fc1d 	bl	80039ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005194:	e027      	b.n	80051e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800519c:	2b28      	cmp	r3, #40	; 0x28
 800519e:	d117      	bne.n	80051d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2228      	movs	r2, #40	; 0x28
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051ce:	e007      	b.n	80051e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80051e0:	6978      	ldr	r0, [r7, #20]
 80051e2:	f7fe fbea 	bl	80039ba <HAL_I2C_ErrorCallback>
}
 80051e6:	bf00      	nop
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000001c 	.word	0x2000001c
 80051f4:	14f8b589 	.word	0x14f8b589

080051f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005208:	e025      	b.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005210:	d021      	beq.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fc fdb1 	bl	8001d78 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d116      	bne.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e023      	b.n	800529e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10d      	bne.n	800527c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	43da      	mvns	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	e00c      	b.n	8005296 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	43da      	mvns	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4013      	ands	r3, r2
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	bf0c      	ite	eq
 800528e:	2301      	moveq	r3, #1
 8005290:	2300      	movne	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	429a      	cmp	r2, r3
 800529a:	d0b6      	beq.n	800520a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b4:	e051      	b.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d123      	bne.n	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e046      	b.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005314:	d021      	beq.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fc fd2f 	bl	8001d78 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e020      	b.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d10c      	bne.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	43da      	mvns	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4013      	ands	r3, r2
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf14      	ite	ne
 8005376:	2301      	movne	r3, #1
 8005378:	2300      	moveq	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	e00b      	b.n	8005396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	43da      	mvns	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d18d      	bne.n	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b0:	e02d      	b.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f900 	bl	80055b8 <I2C_IsAcknowledgeFailed>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e02d      	b.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c8:	d021      	beq.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fc fcd5 	bl	8001d78 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d116      	bne.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e007      	b.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d1ca      	bne.n	80053b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005432:	e02d      	b.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f8bf 	bl	80055b8 <I2C_IsAcknowledgeFailed>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e02d      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800544a:	d021      	beq.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544c:	f7fc fc94 	bl	8001d78 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d116      	bne.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d1ca      	bne.n	8005434 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	4a13      	ldr	r2, [pc, #76]	; (8005508 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	0a1a      	lsrs	r2, r3, #8
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e008      	b.n	80054f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f4:	d0e9      	beq.n	80054ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	2000001c 	.word	0x2000001c
 8005508:	14f8b589 	.word	0x14f8b589

0800550c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005518:	e042      	b.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d119      	bne.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0210 	mvn.w	r2, #16
 8005530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e029      	b.n	80055b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fc fc0c 	bl	8001d78 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d116      	bne.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0220 	orr.w	r2, r3, #32
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e007      	b.n	80055b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d1b5      	bne.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ce:	d11b      	bne.n	8005608 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0204 	orr.w	r2, r3, #4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005626:	d103      	bne.n	8005630 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800562e:	e007      	b.n	8005640 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005638:	d102      	bne.n	8005640 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e25b      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d075      	beq.n	8005756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800566a:	4ba3      	ldr	r3, [pc, #652]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d00c      	beq.n	8005690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005676:	4ba0      	ldr	r3, [pc, #640]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800567e:	2b08      	cmp	r3, #8
 8005680:	d112      	bne.n	80056a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005682:	4b9d      	ldr	r3, [pc, #628]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568e:	d10b      	bne.n	80056a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005690:	4b99      	ldr	r3, [pc, #612]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d05b      	beq.n	8005754 <HAL_RCC_OscConfig+0x108>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d157      	bne.n	8005754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e236      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b0:	d106      	bne.n	80056c0 <HAL_RCC_OscConfig+0x74>
 80056b2:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a90      	ldr	r2, [pc, #576]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e01d      	b.n	80056fc <HAL_RCC_OscConfig+0xb0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x98>
 80056ca:	4b8b      	ldr	r3, [pc, #556]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a8a      	ldr	r2, [pc, #552]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a87      	ldr	r2, [pc, #540]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e00b      	b.n	80056fc <HAL_RCC_OscConfig+0xb0>
 80056e4:	4b84      	ldr	r3, [pc, #528]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a83      	ldr	r2, [pc, #524]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	4b81      	ldr	r3, [pc, #516]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a80      	ldr	r2, [pc, #512]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fc fb38 	bl	8001d78 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800570c:	f7fc fb34 	bl	8001d78 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b64      	cmp	r3, #100	; 0x64
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1fb      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0xc0>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fc fb24 	bl	8001d78 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005734:	f7fc fb20 	bl	8001d78 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e1e7      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0xe8>
 8005752:	e000      	b.n	8005756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d063      	beq.n	800582a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576e:	4b62      	ldr	r3, [pc, #392]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005776:	2b08      	cmp	r3, #8
 8005778:	d11c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577a:	4b5f      	ldr	r3, [pc, #380]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d116      	bne.n	80057b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	4b5c      	ldr	r3, [pc, #368]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_RCC_OscConfig+0x152>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e1bb      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579e:	4b56      	ldr	r3, [pc, #344]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4952      	ldr	r1, [pc, #328]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b2:	e03a      	b.n	800582a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d020      	beq.n	80057fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057bc:	4b4f      	ldr	r3, [pc, #316]	; (80058fc <HAL_RCC_OscConfig+0x2b0>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fc fad9 	bl	8001d78 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ca:	f7fc fad5 	bl	8001d78 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e19c      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4940      	ldr	r1, [pc, #256]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]
 80057fc:	e015      	b.n	800582a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057fe:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <HAL_RCC_OscConfig+0x2b0>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fc fab8 	bl	8001d78 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800580c:	f7fc fab4 	bl	8001d78 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e17b      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581e:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d030      	beq.n	8005898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d016      	beq.n	800586c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800583e:	4b30      	ldr	r3, [pc, #192]	; (8005900 <HAL_RCC_OscConfig+0x2b4>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fa98 	bl	8001d78 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584c:	f7fc fa94 	bl	8001d78 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e15b      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0x200>
 800586a:	e015      	b.n	8005898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800586c:	4b24      	ldr	r3, [pc, #144]	; (8005900 <HAL_RCC_OscConfig+0x2b4>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005872:	f7fc fa81 	bl	8001d78 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800587a:	f7fc fa7d 	bl	8001d78 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e144      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 800588e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a0 	beq.w	80059e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10f      	bne.n	80058d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HAL_RCC_OscConfig+0x2b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d121      	bne.n	8005926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <HAL_RCC_OscConfig+0x2b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a07      	ldr	r2, [pc, #28]	; (8005904 <HAL_RCC_OscConfig+0x2b8>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ee:	f7fc fa43 	bl	8001d78 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	e011      	b.n	800591a <HAL_RCC_OscConfig+0x2ce>
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	42470000 	.word	0x42470000
 8005900:	42470e80 	.word	0x42470e80
 8005904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005908:	f7fc fa36 	bl	8001d78 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0fd      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <HAL_RCC_OscConfig+0x4d4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x2f0>
 800592e:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	4a7c      	ldr	r2, [pc, #496]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6713      	str	r3, [r2, #112]	; 0x70
 800593a:	e01c      	b.n	8005976 <HAL_RCC_OscConfig+0x32a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b05      	cmp	r3, #5
 8005942:	d10c      	bne.n	800595e <HAL_RCC_OscConfig+0x312>
 8005944:	4b77      	ldr	r3, [pc, #476]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	4a76      	ldr	r2, [pc, #472]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	6713      	str	r3, [r2, #112]	; 0x70
 8005950:	4b74      	ldr	r3, [pc, #464]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	4a73      	ldr	r2, [pc, #460]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	e00b      	b.n	8005976 <HAL_RCC_OscConfig+0x32a>
 800595e:	4b71      	ldr	r3, [pc, #452]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a70      	ldr	r2, [pc, #448]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
 800596a:	4b6e      	ldr	r3, [pc, #440]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	4a6d      	ldr	r2, [pc, #436]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005970:	f023 0304 	bic.w	r3, r3, #4
 8005974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d015      	beq.n	80059aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597e:	f7fc f9fb 	bl	8001d78 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fc f9f7 	bl	8001d78 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e0bc      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599c:	4b61      	ldr	r3, [pc, #388]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ee      	beq.n	8005986 <HAL_RCC_OscConfig+0x33a>
 80059a8:	e014      	b.n	80059d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fc f9e5 	bl	8001d78 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fc f9e1 	bl	8001d78 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e0a6      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c8:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ee      	bne.n	80059b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059da:	4b52      	ldr	r3, [pc, #328]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	4a51      	ldr	r2, [pc, #324]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8092 	beq.w	8005b14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f0:	4b4c      	ldr	r3, [pc, #304]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d05c      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d141      	bne.n	8005a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a04:	4b48      	ldr	r3, [pc, #288]	; (8005b28 <HAL_RCC_OscConfig+0x4dc>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0a:	f7fc f9b5 	bl	8001d78 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a12:	f7fc f9b1 	bl	8001d78 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e078      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a24:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f0      	bne.n	8005a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	019b      	lsls	r3, r3, #6
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	4933      	ldr	r1, [pc, #204]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a5a:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <HAL_RCC_OscConfig+0x4dc>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fc f98a 	bl	8001d78 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fc f986 	bl	8001d78 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e04d      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7a:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x41c>
 8005a86:	e045      	b.n	8005b14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a88:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_RCC_OscConfig+0x4dc>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fc f973 	bl	8001d78 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a96:	f7fc f96f 	bl	8001d78 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e036      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x44a>
 8005ab4:	e02e      	b.n	8005b14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e029      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ac2:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <HAL_RCC_OscConfig+0x4d8>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d11c      	bne.n	8005b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d115      	bne.n	8005b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005aea:	4013      	ands	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d106      	bne.n	8005b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40007000 	.word	0x40007000
 8005b24:	40023800 	.word	0x40023800
 8005b28:	42470060 	.word	0x42470060

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0cc      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b68      	ldr	r3, [pc, #416]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90c      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b63      	ldr	r3, [pc, #396]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b8      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b80:	4b59      	ldr	r3, [pc, #356]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a52      	ldr	r2, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	494d      	ldr	r1, [pc, #308]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d044      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e07f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e067      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4934      	ldr	r1, [pc, #208]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c1c:	f7fc f8ac 	bl	8001d78 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fc f8a8 	bl	8001d78 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e04f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20c      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e032      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c80:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4916      	ldr	r1, [pc, #88]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb2:	f000 f821 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005cb6:	4601      	mov	r1, r0
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fc f80c 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	08007f4c 	.word	0x08007f4c
 8005cf0:	2000001c 	.word	0x2000001c
 8005cf4:	20000024 	.word	0x20000024

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0e:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d007      	beq.n	8005d2a <HAL_RCC_GetSysClockFreq+0x32>
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d008      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x38>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 80b4 	bne.w	8005e8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b5e      	ldr	r3, [pc, #376]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d26:	60bb      	str	r3, [r7, #8]
       break;
 8005d28:	e0b3      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d2a:	4b5e      	ldr	r3, [pc, #376]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d2c:	60bb      	str	r3, [r7, #8]
      break;
 8005d2e:	e0b0      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d30:	4b5a      	ldr	r3, [pc, #360]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d3a:	4b58      	ldr	r3, [pc, #352]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d04a      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d46:	4b55      	ldr	r3, [pc, #340]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	099b      	lsrs	r3, r3, #6
 8005d4c:	f04f 0400 	mov.w	r4, #0
 8005d50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	ea03 0501 	and.w	r5, r3, r1
 8005d5c:	ea04 0602 	and.w	r6, r4, r2
 8005d60:	4629      	mov	r1, r5
 8005d62:	4632      	mov	r2, r6
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	f04f 0400 	mov.w	r4, #0
 8005d6c:	0154      	lsls	r4, r2, #5
 8005d6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d72:	014b      	lsls	r3, r1, #5
 8005d74:	4619      	mov	r1, r3
 8005d76:	4622      	mov	r2, r4
 8005d78:	1b49      	subs	r1, r1, r5
 8005d7a:	eb62 0206 	sbc.w	r2, r2, r6
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	f04f 0400 	mov.w	r4, #0
 8005d86:	0194      	lsls	r4, r2, #6
 8005d88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d8c:	018b      	lsls	r3, r1, #6
 8005d8e:	1a5b      	subs	r3, r3, r1
 8005d90:	eb64 0402 	sbc.w	r4, r4, r2
 8005d94:	f04f 0100 	mov.w	r1, #0
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	00e2      	lsls	r2, r4, #3
 8005d9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005da2:	00d9      	lsls	r1, r3, #3
 8005da4:	460b      	mov	r3, r1
 8005da6:	4614      	mov	r4, r2
 8005da8:	195b      	adds	r3, r3, r5
 8005daa:	eb44 0406 	adc.w	r4, r4, r6
 8005dae:	f04f 0100 	mov.w	r1, #0
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	0262      	lsls	r2, r4, #9
 8005db8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005dbc:	0259      	lsls	r1, r3, #9
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f04f 0400 	mov.w	r4, #0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	f7fa fa02 	bl	80001d8 <__aeabi_uldivmod>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e049      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ddc:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	099b      	lsrs	r3, r3, #6
 8005de2:	f04f 0400 	mov.w	r4, #0
 8005de6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	ea03 0501 	and.w	r5, r3, r1
 8005df2:	ea04 0602 	and.w	r6, r4, r2
 8005df6:	4629      	mov	r1, r5
 8005df8:	4632      	mov	r2, r6
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	f04f 0400 	mov.w	r4, #0
 8005e02:	0154      	lsls	r4, r2, #5
 8005e04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e08:	014b      	lsls	r3, r1, #5
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	1b49      	subs	r1, r1, r5
 8005e10:	eb62 0206 	sbc.w	r2, r2, r6
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	f04f 0400 	mov.w	r4, #0
 8005e1c:	0194      	lsls	r4, r2, #6
 8005e1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e22:	018b      	lsls	r3, r1, #6
 8005e24:	1a5b      	subs	r3, r3, r1
 8005e26:	eb64 0402 	sbc.w	r4, r4, r2
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	00e2      	lsls	r2, r4, #3
 8005e34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e38:	00d9      	lsls	r1, r3, #3
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	195b      	adds	r3, r3, r5
 8005e40:	eb44 0406 	adc.w	r4, r4, r6
 8005e44:	f04f 0100 	mov.w	r1, #0
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	02a2      	lsls	r2, r4, #10
 8005e4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e52:	0299      	lsls	r1, r3, #10
 8005e54:	460b      	mov	r3, r1
 8005e56:	4614      	mov	r4, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f04f 0400 	mov.w	r4, #0
 8005e62:	461a      	mov	r2, r3
 8005e64:	4623      	mov	r3, r4
 8005e66:	f7fa f9b7 	bl	80001d8 <__aeabi_uldivmod>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	60bb      	str	r3, [r7, #8]
      break;
 8005e8a:	e002      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e8e:	60bb      	str	r3, [r7, #8]
      break;
 8005e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e92:	68bb      	ldr	r3, [r7, #8]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	2000001c 	.word	0x2000001c

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ec4:	f7ff fff0 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0a9b      	lsrs	r3, r3, #10
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4a03      	ldr	r2, [pc, #12]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	08007f5c 	.word	0x08007f5c

08005ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005eec:	f7ff ffdc 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	0b5b      	lsrs	r3, r3, #13
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	4a03      	ldr	r2, [pc, #12]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	08007f5c 	.word	0x08007f5c

08005f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e01d      	b.n	8005f5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fa90 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 fc0c 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b06      	cmp	r3, #6
 8005f8e:	d007      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e01d      	b.n	8005ffc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f815 	bl	8006004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f000 fbbd 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fe44 	bl	8006cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a10      	ldr	r2, [pc, #64]	; (8006078 <HAL_TIM_PWM_Start+0x60>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d107      	bne.n	800604a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b06      	cmp	r3, #6
 800605a:	d007      	beq.n	800606c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40010000 	.word	0x40010000

0800607c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e083      	b.n	8006198 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fb fa3d 	bl	8001524 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c0:	f023 0307 	bic.w	r3, r3, #7
 80060c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f000 fb4b 	bl	800676c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	4313      	orrs	r3, r2
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800611c:	f023 030c 	bic.w	r3, r3, #12
 8006120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	4313      	orrs	r3, r2
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	031b      	lsls	r3, r3, #12
 800614c:	4313      	orrs	r3, r2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	4313      	orrs	r3, r2
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_TIM_Encoder_Start+0x16>
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d008      	beq.n	80061c6 <HAL_TIM_Encoder_Start+0x26>
 80061b4:	e00f      	b.n	80061d6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2201      	movs	r2, #1
 80061bc:	2100      	movs	r1, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fd7a 	bl	8006cb8 <TIM_CCxChannelCmd>
      break;
 80061c4:	e016      	b.n	80061f4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2201      	movs	r2, #1
 80061cc:	2104      	movs	r1, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fd72 	bl	8006cb8 <TIM_CCxChannelCmd>
      break;
 80061d4:	e00e      	b.n	80061f4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2201      	movs	r2, #1
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fd6a 	bl	8006cb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2201      	movs	r2, #1
 80061ea:	2104      	movs	r1, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fd63 	bl	8006cb8 <TIM_CCxChannelCmd>
      break;
 80061f2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d122      	bne.n	800626a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d11b      	bne.n	800626a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0202 	mvn.w	r2, #2
 800623a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fa6c 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 8006256:	e005      	b.n	8006264 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa5e 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa6f 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b04      	cmp	r3, #4
 8006276:	d122      	bne.n	80062be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d11b      	bne.n	80062be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0204 	mvn.w	r2, #4
 800628e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa42 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 80062aa:	e005      	b.n	80062b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa34 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa45 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d122      	bne.n	8006312 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d11b      	bne.n	8006312 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0208 	mvn.w	r2, #8
 80062e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2204      	movs	r2, #4
 80062e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa18 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 80062fe:	e005      	b.n	800630c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa0a 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa1b 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b10      	cmp	r3, #16
 800631e:	d122      	bne.n	8006366 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	2b10      	cmp	r3, #16
 800632c:	d11b      	bne.n	8006366 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f06f 0210 	mvn.w	r2, #16
 8006336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2208      	movs	r2, #8
 800633c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f9ee 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 8006352:	e005      	b.n	8006360 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f9e0 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f9f1 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10e      	bne.n	8006392 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f06f 0201 	mvn.w	r2, #1
 800638a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fa fd23 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d10e      	bne.n	80063be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d107      	bne.n	80063be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fd6d 	bl	8006e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d10e      	bne.n	80063ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d107      	bne.n	80063ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9b6 	bl	8006756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d10e      	bne.n	8006416 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b20      	cmp	r3, #32
 8006404:	d107      	bne.n	8006416 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f06f 0220 	mvn.w	r2, #32
 800640e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fd37 	bl	8006e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006436:	2302      	movs	r3, #2
 8006438:	e0b4      	b.n	80065a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b0c      	cmp	r3, #12
 800644e:	f200 809f 	bhi.w	8006590 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	0800648d 	.word	0x0800648d
 800645c:	08006591 	.word	0x08006591
 8006460:	08006591 	.word	0x08006591
 8006464:	08006591 	.word	0x08006591
 8006468:	080064cd 	.word	0x080064cd
 800646c:	08006591 	.word	0x08006591
 8006470:	08006591 	.word	0x08006591
 8006474:	08006591 	.word	0x08006591
 8006478:	0800650f 	.word	0x0800650f
 800647c:	08006591 	.word	0x08006591
 8006480:	08006591 	.word	0x08006591
 8006484:	08006591 	.word	0x08006591
 8006488:	0800654f 	.word	0x0800654f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f9ea 	bl	800686c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0208 	orr.w	r2, r2, #8
 80064a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0204 	bic.w	r2, r2, #4
 80064b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6999      	ldr	r1, [r3, #24]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	619a      	str	r2, [r3, #24]
      break;
 80064ca:	e062      	b.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fa30 	bl	8006938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6999      	ldr	r1, [r3, #24]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	021a      	lsls	r2, r3, #8
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	619a      	str	r2, [r3, #24]
      break;
 800650c:	e041      	b.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fa7b 	bl	8006a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0208 	orr.w	r2, r2, #8
 8006528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0204 	bic.w	r2, r2, #4
 8006538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69d9      	ldr	r1, [r3, #28]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	61da      	str	r2, [r3, #28]
      break;
 800654c:	e021      	b.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fac5 	bl	8006ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69d9      	ldr	r1, [r3, #28]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	021a      	lsls	r2, r3, #8
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	61da      	str	r2, [r3, #28]
      break;
 800658e:	e000      	b.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006590:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_TIM_ConfigClockSource+0x18>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e0a6      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x166>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d067      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0x120>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d80b      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x6c>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d073      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0x140>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d802      	bhi.n	800660e <HAL_TIM_ConfigClockSource+0x62>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d06f      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800660c:	e078      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800660e:	2b20      	cmp	r3, #32
 8006610:	d06c      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0x140>
 8006612:	2b30      	cmp	r3, #48	; 0x30
 8006614:	d06a      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006616:	e073      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006618:	2b70      	cmp	r3, #112	; 0x70
 800661a:	d00d      	beq.n	8006638 <HAL_TIM_ConfigClockSource+0x8c>
 800661c:	2b70      	cmp	r3, #112	; 0x70
 800661e:	d804      	bhi.n	800662a <HAL_TIM_ConfigClockSource+0x7e>
 8006620:	2b50      	cmp	r3, #80	; 0x50
 8006622:	d033      	beq.n	800668c <HAL_TIM_ConfigClockSource+0xe0>
 8006624:	2b60      	cmp	r3, #96	; 0x60
 8006626:	d041      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006628:	e06a      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d066      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x152>
 8006630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006634:	d017      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006636:	e063      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6899      	ldr	r1, [r3, #8]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f000 fb16 	bl	8006c78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800665a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	609a      	str	r2, [r3, #8]
      break;
 8006664:	e04c      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6899      	ldr	r1, [r3, #8]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f000 faff 	bl	8006c78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006688:	609a      	str	r2, [r3, #8]
      break;
 800668a:	e039      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	461a      	mov	r2, r3
 800669a:	f000 fa73 	bl	8006b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2150      	movs	r1, #80	; 0x50
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 facc 	bl	8006c42 <TIM_ITRx_SetConfig>
      break;
 80066aa:	e029      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	461a      	mov	r2, r3
 80066ba:	f000 fa92 	bl	8006be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2160      	movs	r1, #96	; 0x60
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fabc 	bl	8006c42 <TIM_ITRx_SetConfig>
      break;
 80066ca:	e019      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6859      	ldr	r1, [r3, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	461a      	mov	r2, r3
 80066da:	f000 fa53 	bl	8006b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2140      	movs	r1, #64	; 0x40
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 faac 	bl	8006c42 <TIM_ITRx_SetConfig>
      break;
 80066ea:	e009      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f000 faa3 	bl	8006c42 <TIM_ITRx_SetConfig>
      break;
 80066fc:	e000      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80066fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a34      	ldr	r2, [pc, #208]	; (8006850 <TIM_Base_SetConfig+0xe4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00f      	beq.n	80067a4 <TIM_Base_SetConfig+0x38>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678a:	d00b      	beq.n	80067a4 <TIM_Base_SetConfig+0x38>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a31      	ldr	r2, [pc, #196]	; (8006854 <TIM_Base_SetConfig+0xe8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d007      	beq.n	80067a4 <TIM_Base_SetConfig+0x38>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a30      	ldr	r2, [pc, #192]	; (8006858 <TIM_Base_SetConfig+0xec>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <TIM_Base_SetConfig+0x38>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2f      	ldr	r2, [pc, #188]	; (800685c <TIM_Base_SetConfig+0xf0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d108      	bne.n	80067b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a25      	ldr	r2, [pc, #148]	; (8006850 <TIM_Base_SetConfig+0xe4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01b      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c4:	d017      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a22      	ldr	r2, [pc, #136]	; (8006854 <TIM_Base_SetConfig+0xe8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a21      	ldr	r2, [pc, #132]	; (8006858 <TIM_Base_SetConfig+0xec>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00f      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a20      	ldr	r2, [pc, #128]	; (800685c <TIM_Base_SetConfig+0xf0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <TIM_Base_SetConfig+0xf4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <TIM_Base_SetConfig+0xf8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_Base_SetConfig+0x8a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <TIM_Base_SetConfig+0xfc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a08      	ldr	r2, [pc, #32]	; (8006850 <TIM_Base_SetConfig+0xe4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d103      	bne.n	800683c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	615a      	str	r2, [r3, #20]
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800

0800686c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f023 0201 	bic.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 0302 	bic.w	r3, r3, #2
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <TIM_OC1_SetConfig+0xc8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10c      	bne.n	80068e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0308 	bic.w	r3, r3, #8
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a13      	ldr	r2, [pc, #76]	; (8006934 <TIM_OC1_SetConfig+0xc8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d111      	bne.n	800690e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	621a      	str	r2, [r3, #32]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	40010000 	.word	0x40010000

08006938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f023 0210 	bic.w	r2, r3, #16
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0320 	bic.w	r3, r3, #32
 8006982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <TIM_OC2_SetConfig+0xd4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d10d      	bne.n	80069b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800699e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <TIM_OC2_SetConfig+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000

08006a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a1d      	ldr	r2, [pc, #116]	; (8006ae0 <TIM_OC3_SetConfig+0xd0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10d      	bne.n	8006a8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <TIM_OC3_SetConfig+0xd0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d113      	bne.n	8006aba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40010000 	.word	0x40010000

08006ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	031b      	lsls	r3, r3, #12
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <TIM_OC4_SetConfig+0x9c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000

08006b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0201 	bic.w	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 030a 	bic.w	r3, r3, #10
 8006bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b087      	sub	sp, #28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f023 0210 	bic.w	r2, r3, #16
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f043 0307 	orr.w	r3, r3, #7
 8006c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	609a      	str	r2, [r3, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	021a      	lsls	r2, r3, #8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2201      	movs	r2, #1
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	401a      	ands	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e050      	b.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d68:	d013      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10c      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40014000 	.word	0x40014000

08006de0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e03d      	b.n	8006e78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e03f      	b.n	8006f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa fc24 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2224      	movs	r2, #36	; 0x24
 8006edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fc77 	bl	80077e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b088      	sub	sp, #32
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 8083 	bne.w	800706e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Transmit+0x2e>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e07b      	b.n	8007070 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Transmit+0x40>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e074      	b.n	8007070 <HAL_UART_Transmit+0x12a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2221      	movs	r2, #33	; 0x21
 8006f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006f9c:	f7fa feec 	bl	8001d78 <HAL_GetTick>
 8006fa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006fb6:	e042      	b.n	800703e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fce:	d122      	bne.n	8007016 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fa80 	bl	80074e0 <UART_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e042      	b.n	8007070 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ffc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3302      	adds	r3, #2
 800700a:	60bb      	str	r3, [r7, #8]
 800700c:	e017      	b.n	800703e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	3301      	adds	r3, #1
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	e013      	b.n	800703e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fa5d 	bl	80074e0 <UART_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e01f      	b.n	8007070 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	60ba      	str	r2, [r7, #8]
 8007036:	781a      	ldrb	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1b7      	bne.n	8006fb8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2200      	movs	r2, #0
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fa44 	bl	80074e0 <UART_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e006      	b.n	8007070 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	e000      	b.n	8007070 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800706e:	2302      	movs	r3, #2
  }
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b20      	cmp	r3, #32
 8007090:	d166      	bne.n	8007160 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <HAL_UART_Receive_DMA+0x26>
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e05f      	b.n	8007162 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_UART_Receive_DMA+0x38>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e058      	b.n	8007162 <HAL_UART_Receive_DMA+0xea>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	88fa      	ldrh	r2, [r7, #6]
 80070c2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2222      	movs	r2, #34	; 0x22
 80070ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	4a25      	ldr	r2, [pc, #148]	; (800716c <HAL_UART_Receive_DMA+0xf4>)
 80070d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	4a24      	ldr	r2, [pc, #144]	; (8007170 <HAL_UART_Receive_DMA+0xf8>)
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e6:	4a23      	ldr	r2, [pc, #140]	; (8007174 <HAL_UART_Receive_DMA+0xfc>)
 80070e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	2200      	movs	r2, #0
 80070f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80070f2:	f107 0308 	add.w	r3, r7, #8
 80070f6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	f7fb f823 	bl	8002154 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800713a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695a      	ldr	r2, [r3, #20]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800715a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	e000      	b.n	8007162 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007160:	2302      	movs	r3, #2
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	080073c9 	.word	0x080073c9
 8007170:	08007431 	.word	0x08007431
 8007174:	0800744d 	.word	0x0800744d

08007178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_UART_IRQHandler+0x52>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa8c 	bl	80076e0 <UART_Receive_IT>
      return;
 80071c8:	e0d1      	b.n	800736e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80b0 	beq.w	8007332 <HAL_UART_IRQHandler+0x1ba>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <HAL_UART_IRQHandler+0x70>
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 80a5 	beq.w	8007332 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_UART_IRQHandler+0x90>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007200:	f043 0201 	orr.w	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_UART_IRQHandler+0xb0>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007220:	f043 0202 	orr.w	r2, r3, #2
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <HAL_UART_IRQHandler+0xd0>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007240:	f043 0204 	orr.w	r2, r3, #4
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00f      	beq.n	8007272 <HAL_UART_IRQHandler+0xfa>
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <HAL_UART_IRQHandler+0xee>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	f043 0208 	orr.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d078      	beq.n	800736c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_UART_IRQHandler+0x11c>
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa26 	bl	80076e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	bf0c      	ite	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	2300      	movne	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d102      	bne.n	80072bc <HAL_UART_IRQHandler+0x144>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d031      	beq.n	8007320 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f96f 	bl	80075a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d123      	bne.n	8007318 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d013      	beq.n	8007310 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_UART_IRQHandler+0x1fc>)
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fa ff85 	bl	8002204 <HAL_DMA_Abort_IT>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d016      	beq.n	800732e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800730a:	4610      	mov	r0, r2
 800730c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730e:	e00e      	b.n	800732e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f84f 	bl	80073b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007316:	e00a      	b.n	800732e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f84b 	bl	80073b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731e:	e006      	b.n	800732e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f847 	bl	80073b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800732c:	e01e      	b.n	800736c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732e:	bf00      	nop
    return;
 8007330:	e01c      	b.n	800736c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <HAL_UART_IRQHandler+0x1d6>
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f95c 	bl	8007604 <UART_Transmit_IT>
    return;
 800734c:	e00f      	b.n	800736e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <HAL_UART_IRQHandler+0x1f6>
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9a4 	bl	80076b0 <UART_EndTransmit_IT>
    return;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <HAL_UART_IRQHandler+0x1f6>
    return;
 800736c:	bf00      	nop
  }
}
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	080075dd 	.word	0x080075dd

08007378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11e      	bne.n	8007422 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695a      	ldr	r2, [r3, #20]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007418:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff ffb2 	bl	800738c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff ffae 	bl	80073a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	bf0c      	ite	eq
 800746c:	2301      	moveq	r3, #1
 800746e:	2300      	movne	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b21      	cmp	r3, #33	; 0x21
 800747e:	d108      	bne.n	8007492 <UART_DMAError+0x46>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2200      	movs	r2, #0
 800748a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800748c:	68b8      	ldr	r0, [r7, #8]
 800748e:	f000 f871 	bl	8007574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	bf0c      	ite	eq
 80074a0:	2301      	moveq	r3, #1
 80074a2:	2300      	movne	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b22      	cmp	r3, #34	; 0x22
 80074b2:	d108      	bne.n	80074c6 <UART_DMAError+0x7a>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074c0:	68b8      	ldr	r0, [r7, #8]
 80074c2:	f000 f86d 	bl	80075a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	f043 0210 	orr.w	r2, r3, #16
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074d2:	68b8      	ldr	r0, [r7, #8]
 80074d4:	f7ff ff6e 	bl	80073b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f0:	e02c      	b.n	800754c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f8:	d028      	beq.n	800754c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <UART_WaitOnFlagUntilTimeout+0x30>
 8007500:	f7fa fc3a 	bl	8001d78 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d21d      	bcs.n	800754c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800751e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695a      	ldr	r2, [r3, #20]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0201 	bic.w	r2, r2, #1
 800752e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e00f      	b.n	800756c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4013      	ands	r3, r2
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	429a      	cmp	r2, r3
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	429a      	cmp	r2, r3
 8007568:	d0c3      	beq.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800758a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fedc 	bl	80073b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b21      	cmp	r3, #33	; 0x21
 8007616:	d144      	bne.n	80076a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007620:	d11a      	bne.n	8007658 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007636:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	621a      	str	r2, [r3, #32]
 800764a:	e00e      	b.n	800766a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	621a      	str	r2, [r3, #32]
 8007656:	e008      	b.n	800766a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6211      	str	r1, [r2, #32]
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29b      	uxth	r3, r3
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4619      	mov	r1, r3
 8007678:	84d1      	strh	r1, [r2, #38]	; 0x26
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800768c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800769c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fe51 	bl	8007378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b22      	cmp	r3, #34	; 0x22
 80076f2:	d171      	bne.n	80077d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fc:	d123      	bne.n	8007746 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10e      	bne.n	800772a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	1c9a      	adds	r2, r3, #2
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28
 8007728:	e029      	b.n	800777e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	b29b      	uxth	r3, r3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
 8007744:	e01b      	b.n	800777e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6858      	ldr	r0, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	1c59      	adds	r1, r3, #1
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6291      	str	r1, [r2, #40]	; 0x28
 800775e:	b2c2      	uxtb	r2, r0
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	e00c      	b.n	800777e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	1c58      	adds	r0, r3, #1
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	6288      	str	r0, [r1, #40]	; 0x28
 8007776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4619      	mov	r1, r3
 800778c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800778e:	2b00      	cmp	r3, #0
 8007790:	d120      	bne.n	80077d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0220 	bic.w	r2, r2, #32
 80077a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fdde 	bl	800738c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e002      	b.n	80077da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e000      	b.n	80077da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80077d8:	2302      	movs	r3, #2
  }
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007826:	f023 030c 	bic.w	r3, r3, #12
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	430b      	orrs	r3, r1
 8007832:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007852:	f040 818b 	bne.w	8007b6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4ac1      	ldr	r2, [pc, #772]	; (8007b60 <UART_SetConfig+0x37c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d005      	beq.n	800786c <UART_SetConfig+0x88>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4abf      	ldr	r2, [pc, #764]	; (8007b64 <UART_SetConfig+0x380>)
 8007866:	4293      	cmp	r3, r2
 8007868:	f040 80bd 	bne.w	80079e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800786c:	f7fe fb3c 	bl	8005ee8 <HAL_RCC_GetPCLK2Freq>
 8007870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	461d      	mov	r5, r3
 8007876:	f04f 0600 	mov.w	r6, #0
 800787a:	46a8      	mov	r8, r5
 800787c:	46b1      	mov	r9, r6
 800787e:	eb18 0308 	adds.w	r3, r8, r8
 8007882:	eb49 0409 	adc.w	r4, r9, r9
 8007886:	4698      	mov	r8, r3
 8007888:	46a1      	mov	r9, r4
 800788a:	eb18 0805 	adds.w	r8, r8, r5
 800788e:	eb49 0906 	adc.w	r9, r9, r6
 8007892:	f04f 0100 	mov.w	r1, #0
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800789e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078a6:	4688      	mov	r8, r1
 80078a8:	4691      	mov	r9, r2
 80078aa:	eb18 0005 	adds.w	r0, r8, r5
 80078ae:	eb49 0106 	adc.w	r1, r9, r6
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	461d      	mov	r5, r3
 80078b8:	f04f 0600 	mov.w	r6, #0
 80078bc:	196b      	adds	r3, r5, r5
 80078be:	eb46 0406 	adc.w	r4, r6, r6
 80078c2:	461a      	mov	r2, r3
 80078c4:	4623      	mov	r3, r4
 80078c6:	f7f8 fc87 	bl	80001d8 <__aeabi_uldivmod>
 80078ca:	4603      	mov	r3, r0
 80078cc:	460c      	mov	r4, r1
 80078ce:	461a      	mov	r2, r3
 80078d0:	4ba5      	ldr	r3, [pc, #660]	; (8007b68 <UART_SetConfig+0x384>)
 80078d2:	fba3 2302 	umull	r2, r3, r3, r2
 80078d6:	095b      	lsrs	r3, r3, #5
 80078d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	461d      	mov	r5, r3
 80078e0:	f04f 0600 	mov.w	r6, #0
 80078e4:	46a9      	mov	r9, r5
 80078e6:	46b2      	mov	sl, r6
 80078e8:	eb19 0309 	adds.w	r3, r9, r9
 80078ec:	eb4a 040a 	adc.w	r4, sl, sl
 80078f0:	4699      	mov	r9, r3
 80078f2:	46a2      	mov	sl, r4
 80078f4:	eb19 0905 	adds.w	r9, r9, r5
 80078f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80078fc:	f04f 0100 	mov.w	r1, #0
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800790c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007910:	4689      	mov	r9, r1
 8007912:	4692      	mov	sl, r2
 8007914:	eb19 0005 	adds.w	r0, r9, r5
 8007918:	eb4a 0106 	adc.w	r1, sl, r6
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	461d      	mov	r5, r3
 8007922:	f04f 0600 	mov.w	r6, #0
 8007926:	196b      	adds	r3, r5, r5
 8007928:	eb46 0406 	adc.w	r4, r6, r6
 800792c:	461a      	mov	r2, r3
 800792e:	4623      	mov	r3, r4
 8007930:	f7f8 fc52 	bl	80001d8 <__aeabi_uldivmod>
 8007934:	4603      	mov	r3, r0
 8007936:	460c      	mov	r4, r1
 8007938:	461a      	mov	r2, r3
 800793a:	4b8b      	ldr	r3, [pc, #556]	; (8007b68 <UART_SetConfig+0x384>)
 800793c:	fba3 1302 	umull	r1, r3, r3, r2
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	2164      	movs	r1, #100	; 0x64
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	3332      	adds	r3, #50	; 0x32
 800794e:	4a86      	ldr	r2, [pc, #536]	; (8007b68 <UART_SetConfig+0x384>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800795c:	4498      	add	r8, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	461d      	mov	r5, r3
 8007962:	f04f 0600 	mov.w	r6, #0
 8007966:	46a9      	mov	r9, r5
 8007968:	46b2      	mov	sl, r6
 800796a:	eb19 0309 	adds.w	r3, r9, r9
 800796e:	eb4a 040a 	adc.w	r4, sl, sl
 8007972:	4699      	mov	r9, r3
 8007974:	46a2      	mov	sl, r4
 8007976:	eb19 0905 	adds.w	r9, r9, r5
 800797a:	eb4a 0a06 	adc.w	sl, sl, r6
 800797e:	f04f 0100 	mov.w	r1, #0
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800798a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800798e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007992:	4689      	mov	r9, r1
 8007994:	4692      	mov	sl, r2
 8007996:	eb19 0005 	adds.w	r0, r9, r5
 800799a:	eb4a 0106 	adc.w	r1, sl, r6
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	461d      	mov	r5, r3
 80079a4:	f04f 0600 	mov.w	r6, #0
 80079a8:	196b      	adds	r3, r5, r5
 80079aa:	eb46 0406 	adc.w	r4, r6, r6
 80079ae:	461a      	mov	r2, r3
 80079b0:	4623      	mov	r3, r4
 80079b2:	f7f8 fc11 	bl	80001d8 <__aeabi_uldivmod>
 80079b6:	4603      	mov	r3, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	461a      	mov	r2, r3
 80079bc:	4b6a      	ldr	r3, [pc, #424]	; (8007b68 <UART_SetConfig+0x384>)
 80079be:	fba3 1302 	umull	r1, r3, r3, r2
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	2164      	movs	r1, #100	; 0x64
 80079c6:	fb01 f303 	mul.w	r3, r1, r3
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	3332      	adds	r3, #50	; 0x32
 80079d0:	4a65      	ldr	r2, [pc, #404]	; (8007b68 <UART_SetConfig+0x384>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	f003 0207 	and.w	r2, r3, #7
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4442      	add	r2, r8
 80079e2:	609a      	str	r2, [r3, #8]
 80079e4:	e26f      	b.n	8007ec6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079e6:	f7fe fa6b 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80079ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	461d      	mov	r5, r3
 80079f0:	f04f 0600 	mov.w	r6, #0
 80079f4:	46a8      	mov	r8, r5
 80079f6:	46b1      	mov	r9, r6
 80079f8:	eb18 0308 	adds.w	r3, r8, r8
 80079fc:	eb49 0409 	adc.w	r4, r9, r9
 8007a00:	4698      	mov	r8, r3
 8007a02:	46a1      	mov	r9, r4
 8007a04:	eb18 0805 	adds.w	r8, r8, r5
 8007a08:	eb49 0906 	adc.w	r9, r9, r6
 8007a0c:	f04f 0100 	mov.w	r1, #0
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a20:	4688      	mov	r8, r1
 8007a22:	4691      	mov	r9, r2
 8007a24:	eb18 0005 	adds.w	r0, r8, r5
 8007a28:	eb49 0106 	adc.w	r1, r9, r6
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	461d      	mov	r5, r3
 8007a32:	f04f 0600 	mov.w	r6, #0
 8007a36:	196b      	adds	r3, r5, r5
 8007a38:	eb46 0406 	adc.w	r4, r6, r6
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4623      	mov	r3, r4
 8007a40:	f7f8 fbca 	bl	80001d8 <__aeabi_uldivmod>
 8007a44:	4603      	mov	r3, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4b47      	ldr	r3, [pc, #284]	; (8007b68 <UART_SetConfig+0x384>)
 8007a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	461d      	mov	r5, r3
 8007a5a:	f04f 0600 	mov.w	r6, #0
 8007a5e:	46a9      	mov	r9, r5
 8007a60:	46b2      	mov	sl, r6
 8007a62:	eb19 0309 	adds.w	r3, r9, r9
 8007a66:	eb4a 040a 	adc.w	r4, sl, sl
 8007a6a:	4699      	mov	r9, r3
 8007a6c:	46a2      	mov	sl, r4
 8007a6e:	eb19 0905 	adds.w	r9, r9, r5
 8007a72:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a8a:	4689      	mov	r9, r1
 8007a8c:	4692      	mov	sl, r2
 8007a8e:	eb19 0005 	adds.w	r0, r9, r5
 8007a92:	eb4a 0106 	adc.w	r1, sl, r6
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	461d      	mov	r5, r3
 8007a9c:	f04f 0600 	mov.w	r6, #0
 8007aa0:	196b      	adds	r3, r5, r5
 8007aa2:	eb46 0406 	adc.w	r4, r6, r6
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	f7f8 fb95 	bl	80001d8 <__aeabi_uldivmod>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b2c      	ldr	r3, [pc, #176]	; (8007b68 <UART_SetConfig+0x384>)
 8007ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	2164      	movs	r1, #100	; 0x64
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	3332      	adds	r3, #50	; 0x32
 8007ac8:	4a27      	ldr	r2, [pc, #156]	; (8007b68 <UART_SetConfig+0x384>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ad6:	4498      	add	r8, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	461d      	mov	r5, r3
 8007adc:	f04f 0600 	mov.w	r6, #0
 8007ae0:	46a9      	mov	r9, r5
 8007ae2:	46b2      	mov	sl, r6
 8007ae4:	eb19 0309 	adds.w	r3, r9, r9
 8007ae8:	eb4a 040a 	adc.w	r4, sl, sl
 8007aec:	4699      	mov	r9, r3
 8007aee:	46a2      	mov	sl, r4
 8007af0:	eb19 0905 	adds.w	r9, r9, r5
 8007af4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007af8:	f04f 0100 	mov.w	r1, #0
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	4692      	mov	sl, r2
 8007b10:	eb19 0005 	adds.w	r0, r9, r5
 8007b14:	eb4a 0106 	adc.w	r1, sl, r6
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	461d      	mov	r5, r3
 8007b1e:	f04f 0600 	mov.w	r6, #0
 8007b22:	196b      	adds	r3, r5, r5
 8007b24:	eb46 0406 	adc.w	r4, r6, r6
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	f7f8 fb54 	bl	80001d8 <__aeabi_uldivmod>
 8007b30:	4603      	mov	r3, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	461a      	mov	r2, r3
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <UART_SetConfig+0x384>)
 8007b38:	fba3 1302 	umull	r1, r3, r3, r2
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	2164      	movs	r1, #100	; 0x64
 8007b40:	fb01 f303 	mul.w	r3, r1, r3
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	3332      	adds	r3, #50	; 0x32
 8007b4a:	4a07      	ldr	r2, [pc, #28]	; (8007b68 <UART_SetConfig+0x384>)
 8007b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	f003 0207 	and.w	r2, r3, #7
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4442      	add	r2, r8
 8007b5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b5e:	e1b2      	b.n	8007ec6 <UART_SetConfig+0x6e2>
 8007b60:	40011000 	.word	0x40011000
 8007b64:	40011400 	.word	0x40011400
 8007b68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4ad7      	ldr	r2, [pc, #860]	; (8007ed0 <UART_SetConfig+0x6ec>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d005      	beq.n	8007b82 <UART_SetConfig+0x39e>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4ad6      	ldr	r2, [pc, #856]	; (8007ed4 <UART_SetConfig+0x6f0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	f040 80d1 	bne.w	8007d24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b82:	f7fe f9b1 	bl	8005ee8 <HAL_RCC_GetPCLK2Freq>
 8007b86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	469a      	mov	sl, r3
 8007b8c:	f04f 0b00 	mov.w	fp, #0
 8007b90:	46d0      	mov	r8, sl
 8007b92:	46d9      	mov	r9, fp
 8007b94:	eb18 0308 	adds.w	r3, r8, r8
 8007b98:	eb49 0409 	adc.w	r4, r9, r9
 8007b9c:	4698      	mov	r8, r3
 8007b9e:	46a1      	mov	r9, r4
 8007ba0:	eb18 080a 	adds.w	r8, r8, sl
 8007ba4:	eb49 090b 	adc.w	r9, r9, fp
 8007ba8:	f04f 0100 	mov.w	r1, #0
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bbc:	4688      	mov	r8, r1
 8007bbe:	4691      	mov	r9, r2
 8007bc0:	eb1a 0508 	adds.w	r5, sl, r8
 8007bc4:	eb4b 0609 	adc.w	r6, fp, r9
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	f04f 0400 	mov.w	r4, #0
 8007bda:	0094      	lsls	r4, r2, #2
 8007bdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007be0:	008b      	lsls	r3, r1, #2
 8007be2:	461a      	mov	r2, r3
 8007be4:	4623      	mov	r3, r4
 8007be6:	4628      	mov	r0, r5
 8007be8:	4631      	mov	r1, r6
 8007bea:	f7f8 faf5 	bl	80001d8 <__aeabi_uldivmod>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4bb8      	ldr	r3, [pc, #736]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	469b      	mov	fp, r3
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	46d9      	mov	r9, fp
 8007c0a:	46e2      	mov	sl, ip
 8007c0c:	eb19 0309 	adds.w	r3, r9, r9
 8007c10:	eb4a 040a 	adc.w	r4, sl, sl
 8007c14:	4699      	mov	r9, r3
 8007c16:	46a2      	mov	sl, r4
 8007c18:	eb19 090b 	adds.w	r9, r9, fp
 8007c1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c20:	f04f 0100 	mov.w	r1, #0
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c34:	4689      	mov	r9, r1
 8007c36:	4692      	mov	sl, r2
 8007c38:	eb1b 0509 	adds.w	r5, fp, r9
 8007c3c:	eb4c 060a 	adc.w	r6, ip, sl
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	4619      	mov	r1, r3
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	f04f 0300 	mov.w	r3, #0
 8007c4e:	f04f 0400 	mov.w	r4, #0
 8007c52:	0094      	lsls	r4, r2, #2
 8007c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c58:	008b      	lsls	r3, r1, #2
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4623      	mov	r3, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	4631      	mov	r1, r6
 8007c62:	f7f8 fab9 	bl	80001d8 <__aeabi_uldivmod>
 8007c66:	4603      	mov	r3, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4b9a      	ldr	r3, [pc, #616]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	2164      	movs	r1, #100	; 0x64
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	3332      	adds	r3, #50	; 0x32
 8007c80:	4a95      	ldr	r2, [pc, #596]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c8c:	4498      	add	r8, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	469b      	mov	fp, r3
 8007c92:	f04f 0c00 	mov.w	ip, #0
 8007c96:	46d9      	mov	r9, fp
 8007c98:	46e2      	mov	sl, ip
 8007c9a:	eb19 0309 	adds.w	r3, r9, r9
 8007c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8007ca2:	4699      	mov	r9, r3
 8007ca4:	46a2      	mov	sl, r4
 8007ca6:	eb19 090b 	adds.w	r9, r9, fp
 8007caa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cae:	f04f 0100 	mov.w	r1, #0
 8007cb2:	f04f 0200 	mov.w	r2, #0
 8007cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cc2:	4689      	mov	r9, r1
 8007cc4:	4692      	mov	sl, r2
 8007cc6:	eb1b 0509 	adds.w	r5, fp, r9
 8007cca:	eb4c 060a 	adc.w	r6, ip, sl
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	f04f 0400 	mov.w	r4, #0
 8007ce0:	0094      	lsls	r4, r2, #2
 8007ce2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ce6:	008b      	lsls	r3, r1, #2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4623      	mov	r3, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	4631      	mov	r1, r6
 8007cf0:	f7f8 fa72 	bl	80001d8 <__aeabi_uldivmod>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4b77      	ldr	r3, [pc, #476]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	2164      	movs	r1, #100	; 0x64
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	3332      	adds	r3, #50	; 0x32
 8007d0e:	4a72      	ldr	r2, [pc, #456]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f003 020f 	and.w	r2, r3, #15
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4442      	add	r2, r8
 8007d20:	609a      	str	r2, [r3, #8]
 8007d22:	e0d0      	b.n	8007ec6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d24:	f7fe f8cc 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8007d28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f04f 0b00 	mov.w	fp, #0
 8007d32:	46d0      	mov	r8, sl
 8007d34:	46d9      	mov	r9, fp
 8007d36:	eb18 0308 	adds.w	r3, r8, r8
 8007d3a:	eb49 0409 	adc.w	r4, r9, r9
 8007d3e:	4698      	mov	r8, r3
 8007d40:	46a1      	mov	r9, r4
 8007d42:	eb18 080a 	adds.w	r8, r8, sl
 8007d46:	eb49 090b 	adc.w	r9, r9, fp
 8007d4a:	f04f 0100 	mov.w	r1, #0
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d5e:	4688      	mov	r8, r1
 8007d60:	4691      	mov	r9, r2
 8007d62:	eb1a 0508 	adds.w	r5, sl, r8
 8007d66:	eb4b 0609 	adc.w	r6, fp, r9
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	f04f 0400 	mov.w	r4, #0
 8007d7c:	0094      	lsls	r4, r2, #2
 8007d7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d82:	008b      	lsls	r3, r1, #2
 8007d84:	461a      	mov	r2, r3
 8007d86:	4623      	mov	r3, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	f7f8 fa24 	bl	80001d8 <__aeabi_uldivmod>
 8007d90:	4603      	mov	r3, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	461a      	mov	r2, r3
 8007d96:	4b50      	ldr	r3, [pc, #320]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007d98:	fba3 2302 	umull	r2, r3, r3, r2
 8007d9c:	095b      	lsrs	r3, r3, #5
 8007d9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	469b      	mov	fp, r3
 8007da6:	f04f 0c00 	mov.w	ip, #0
 8007daa:	46d9      	mov	r9, fp
 8007dac:	46e2      	mov	sl, ip
 8007dae:	eb19 0309 	adds.w	r3, r9, r9
 8007db2:	eb4a 040a 	adc.w	r4, sl, sl
 8007db6:	4699      	mov	r9, r3
 8007db8:	46a2      	mov	sl, r4
 8007dba:	eb19 090b 	adds.w	r9, r9, fp
 8007dbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dd6:	4689      	mov	r9, r1
 8007dd8:	4692      	mov	sl, r2
 8007dda:	eb1b 0509 	adds.w	r5, fp, r9
 8007dde:	eb4c 060a 	adc.w	r6, ip, sl
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	4619      	mov	r1, r3
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	f04f 0400 	mov.w	r4, #0
 8007df4:	0094      	lsls	r4, r2, #2
 8007df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dfa:	008b      	lsls	r3, r1, #2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4623      	mov	r3, r4
 8007e00:	4628      	mov	r0, r5
 8007e02:	4631      	mov	r1, r6
 8007e04:	f7f8 f9e8 	bl	80001d8 <__aeabi_uldivmod>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b32      	ldr	r3, [pc, #200]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007e10:	fba3 1302 	umull	r1, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	2164      	movs	r1, #100	; 0x64
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	3332      	adds	r3, #50	; 0x32
 8007e22:	4a2d      	ldr	r2, [pc, #180]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007e24:	fba2 2303 	umull	r2, r3, r2, r3
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e2e:	4498      	add	r8, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	469b      	mov	fp, r3
 8007e34:	f04f 0c00 	mov.w	ip, #0
 8007e38:	46d9      	mov	r9, fp
 8007e3a:	46e2      	mov	sl, ip
 8007e3c:	eb19 0309 	adds.w	r3, r9, r9
 8007e40:	eb4a 040a 	adc.w	r4, sl, sl
 8007e44:	4699      	mov	r9, r3
 8007e46:	46a2      	mov	sl, r4
 8007e48:	eb19 090b 	adds.w	r9, r9, fp
 8007e4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e50:	f04f 0100 	mov.w	r1, #0
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e64:	4689      	mov	r9, r1
 8007e66:	4692      	mov	sl, r2
 8007e68:	eb1b 0509 	adds.w	r5, fp, r9
 8007e6c:	eb4c 060a 	adc.w	r6, ip, sl
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	4619      	mov	r1, r3
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	f04f 0400 	mov.w	r4, #0
 8007e82:	0094      	lsls	r4, r2, #2
 8007e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e88:	008b      	lsls	r3, r1, #2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4623      	mov	r3, r4
 8007e8e:	4628      	mov	r0, r5
 8007e90:	4631      	mov	r1, r6
 8007e92:	f7f8 f9a1 	bl	80001d8 <__aeabi_uldivmod>
 8007e96:	4603      	mov	r3, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	2164      	movs	r1, #100	; 0x64
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	3332      	adds	r3, #50	; 0x32
 8007eb0:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <UART_SetConfig+0x6f4>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f003 020f 	and.w	r2, r3, #15
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4442      	add	r2, r8
 8007ec2:	609a      	str	r2, [r3, #8]
}
 8007ec4:	e7ff      	b.n	8007ec6 <UART_SetConfig+0x6e2>
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	40011000 	.word	0x40011000
 8007ed4:	40011400 	.word	0x40011400
 8007ed8:	51eb851f 	.word	0x51eb851f

08007edc <__libc_init_array>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	4e0d      	ldr	r6, [pc, #52]	; (8007f14 <__libc_init_array+0x38>)
 8007ee0:	4c0d      	ldr	r4, [pc, #52]	; (8007f18 <__libc_init_array+0x3c>)
 8007ee2:	1ba4      	subs	r4, r4, r6
 8007ee4:	10a4      	asrs	r4, r4, #2
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	42a5      	cmp	r5, r4
 8007eea:	d109      	bne.n	8007f00 <__libc_init_array+0x24>
 8007eec:	4e0b      	ldr	r6, [pc, #44]	; (8007f1c <__libc_init_array+0x40>)
 8007eee:	4c0c      	ldr	r4, [pc, #48]	; (8007f20 <__libc_init_array+0x44>)
 8007ef0:	f000 f820 	bl	8007f34 <_init>
 8007ef4:	1ba4      	subs	r4, r4, r6
 8007ef6:	10a4      	asrs	r4, r4, #2
 8007ef8:	2500      	movs	r5, #0
 8007efa:	42a5      	cmp	r5, r4
 8007efc:	d105      	bne.n	8007f0a <__libc_init_array+0x2e>
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f04:	4798      	blx	r3
 8007f06:	3501      	adds	r5, #1
 8007f08:	e7ee      	b.n	8007ee8 <__libc_init_array+0xc>
 8007f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f0e:	4798      	blx	r3
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7f2      	b.n	8007efa <__libc_init_array+0x1e>
 8007f14:	08007f74 	.word	0x08007f74
 8007f18:	08007f74 	.word	0x08007f74
 8007f1c:	08007f74 	.word	0x08007f74
 8007f20:	08007f78 	.word	0x08007f78

08007f24 <memset>:
 8007f24:	4402      	add	r2, r0
 8007f26:	4603      	mov	r3, r0
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d100      	bne.n	8007f2e <memset+0xa>
 8007f2c:	4770      	bx	lr
 8007f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f32:	e7f9      	b.n	8007f28 <memset+0x4>

08007f34 <_init>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr

08007f40 <_fini>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr
