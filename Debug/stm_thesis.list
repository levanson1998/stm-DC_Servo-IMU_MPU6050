
stm_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b78  08006b78  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000002c  08006bac  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08006bac  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bbb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002485  00000000  00000000  00030c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00034008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c4d  00000000  00000000  00034e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c671  00000000  00000000  0004caad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091ba8  00000000  00000000  0005911e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eacc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  000ead44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006b38 	.word	0x08006b38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08006b38 	.word	0x08006b38

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_DMA_Init+0x4c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <MX_DMA_Init+0x4c>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_DMA_Init+0x4c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200b      	movs	r0, #11
 8000500:	f001 fc45 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000504:	200b      	movs	r0, #11
 8000506:	f001 fc5e 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2010      	movs	r0, #16
 8000510:	f001 fc3d 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000514:	2010      	movs	r0, #16
 8000516:	f001 fc56 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800

08000528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
 8000542:	4b49      	ldr	r3, [pc, #292]	; (8000668 <MX_GPIO_Init+0x140>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a48      	ldr	r2, [pc, #288]	; (8000668 <MX_GPIO_Init+0x140>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b46      	ldr	r3, [pc, #280]	; (8000668 <MX_GPIO_Init+0x140>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	4b42      	ldr	r3, [pc, #264]	; (8000668 <MX_GPIO_Init+0x140>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a41      	ldr	r2, [pc, #260]	; (8000668 <MX_GPIO_Init+0x140>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b3f      	ldr	r3, [pc, #252]	; (8000668 <MX_GPIO_Init+0x140>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <MX_GPIO_Init+0x140>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <MX_GPIO_Init+0x140>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <MX_GPIO_Init+0x140>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_GPIO_Init+0x140>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a33      	ldr	r2, [pc, #204]	; (8000668 <MX_GPIO_Init+0x140>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_GPIO_Init+0x140>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <MX_GPIO_Init+0x140>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a2c      	ldr	r2, [pc, #176]	; (8000668 <MX_GPIO_Init+0x140>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <MX_GPIO_Init+0x140>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0310 	and.w	r3, r3, #16
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_GPIO_Init+0x140>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a25      	ldr	r2, [pc, #148]	; (8000668 <MX_GPIO_Init+0x140>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_GPIO_Init+0x140>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2104      	movs	r1, #4
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <MX_GPIO_Init+0x144>)
 80005ec:	f002 f926 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_R_Pin|MOTOR_DIR_L_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <MX_GPIO_Init+0x148>)
 80005f8:	f002 f920 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000602:	481b      	ldr	r0, [pc, #108]	; (8000670 <MX_GPIO_Init+0x148>)
 8000604:	f002 f91a 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000608:	2304      	movs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <MX_GPIO_Init+0x144>)
 8000620:	f001 ff8a 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_R_Pin|MOTOR_DIR_L_Pin;
 8000624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_GPIO_Init+0x148>)
 800063e:	f001 ff7b 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GRE_Pin|LED_ORG_Pin|LED_RED_Pin|LED_BLU_Pin;
 8000642:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_GPIO_Init+0x148>)
 800065c:	f001 ff6c 	bl	8002538 <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3730      	adds	r7, #48	; 0x30
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40020400 	.word	0x40020400
 8000670:	40020c00 	.word	0x40020c00

08000674 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f002 f8f7 	bl	80028a4 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fc14 	bl	8000ee8 <Error_Handler>
  }

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000004c 	.word	0x2000004c
 80006c8:	40005400 	.word	0x40005400
 80006cc:	00061a80 	.word	0x00061a80

080006d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <HAL_I2C_MspInit+0xf4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d163      	bne.n	80007ba <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a33      	ldr	r2, [pc, #204]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000714:	2312      	movs	r3, #18
 8000716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000720:	2304      	movs	r3, #4
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4828      	ldr	r0, [pc, #160]	; (80007cc <HAL_I2C_MspInit+0xfc>)
 800072c:	f001 ff04 	bl	8002538 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 800073a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_I2C_MspInit+0xf8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <HAL_I2C_MspInit+0x104>)
 8000750:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000758:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800077c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000780:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 8000790:	f001 fb34 	bl	8001dfc <HAL_DMA_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800079a:	f000 fba5 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_I2C_MspInit+0x100>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	201f      	movs	r0, #31
 80007b0:	f001 faed 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007b4:	201f      	movs	r0, #31
 80007b6:	f001 fb06 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	40026010 	.word	0x40026010

080007d8 <Control_Motor>:
float * Get_Velocity();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Control_Motor(int16_t duty_r,int16_t duty_l){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	80bb      	strh	r3, [r7, #4]
	test[0]=duty_r;
 80007e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <Control_Motor+0x70>)
 80007f6:	edc3 7a00 	vstr	s15, [r3]
	test[1]=duty_l;
 80007fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <Control_Motor+0x70>)
 8000808:	edc3 7a01 	vstr	s15, [r3, #4]



	HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_R_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <Control_Motor+0x74>)
 8000814:	f002 f812 	bl	800283c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_r);
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <Control_Motor+0x78>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000820:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_L_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <Control_Motor+0x74>)
 800082a:	f002 f807 	bl	800283c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <Control_Motor+0x78>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	635a      	str	r2, [r3, #52]	; 0x34


	HAL_GPIO_TogglePin(GPIOD, LED_ORG_Pin);
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <Control_Motor+0x74>)
 800083c:	f002 f817 	bl	800286e <HAL_GPIO_TogglePin>
	else{
		HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_R_Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim1, MOTOR_R_Pin, duty_r);
	}
*/
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000148 	.word	0x20000148
 800084c:	40020c00 	.word	0x40020c00
 8000850:	20000238 	.word	0x20000238

08000854 <Get_Velocity>:

float * Get_Velocity(){
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
//	volatile float enc[2];
	enc[0]= fabs((TIM2->CNT)-5000.0F);
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000866:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80008f0 <Get_Velocity+0x9c>
 800086a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800086e:	eef0 7ae7 	vabs.f32	s15, s15
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <Get_Velocity+0xa0>)
 8000874:	edc3 7a00 	vstr	s15, [r3]
	if ((TIM2->CNT)>=5000) enc[1]=-1;
 8000878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000882:	4293      	cmp	r3, r2
 8000884:	d903      	bls.n	800088e <Get_Velocity+0x3a>
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <Get_Velocity+0xa0>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <Get_Velocity+0xa4>)
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	e003      	b.n	8000896 <Get_Velocity+0x42>
	else enc[1]=1;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <Get_Velocity+0xa0>)
 8000890:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000894:	605a      	str	r2, [r3, #4]

	enc[2]= fabs((TIM4->CNT)-5000.0F);
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <Get_Velocity+0xa8>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80008f0 <Get_Velocity+0x9c>
 80008a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008aa:	eef0 7ae7 	vabs.f32	s15, s15
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <Get_Velocity+0xa0>)
 80008b0:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((TIM4->CNT)>5000) enc[3]=1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <Get_Velocity+0xa8>)
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80008bc:	4293      	cmp	r3, r2
 80008be:	d904      	bls.n	80008ca <Get_Velocity+0x76>
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <Get_Velocity+0xa0>)
 80008c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	e002      	b.n	80008d0 <Get_Velocity+0x7c>
	else enc[3]=-1;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Get_Velocity+0xa0>)
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <Get_Velocity+0xa4>)
 80008ce:	60da      	str	r2, [r3, #12]

	TIM4->CNT=5000;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <Get_Velocity+0xa8>)
 80008d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=5000;
 80008d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24

	return enc;
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <Get_Velocity+0xa0>)
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	459c4000 	.word	0x459c4000
 80008f4:	20000124 	.word	0x20000124
 80008f8:	bf800000 	.word	0xbf800000
 80008fc:	40000800 	.word	0x40000800

08000900 <Transmit_Uart>:

// data1: x, data2: y, Kpid
void Transmit_Uart(float x, float y, float v_l, int dir_l, float v_r, int dir_r){
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	ed87 0a07 	vstr	s0, [r7, #28]
 800090a:	edc7 0a06 	vstr	s1, [r7, #24]
 800090e:	ed87 1a05 	vstr	s2, [r7, #20]
 8000912:	6138      	str	r0, [r7, #16]
 8000914:	edc7 1a03 	vstr	s3, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]


	dataTransmit[0]=(uint8_t)((((uint16_t)x)|0x00FF)>>8); // 8 bit H
 800091a:	edd7 7a07 	vldr	s15, [r7, #28]
 800091e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000922:	ee17 3a90 	vmov	r3, s15
 8000926:	b29b      	uxth	r3, r3
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b94      	ldr	r3, [pc, #592]	; (8000b80 <Transmit_Uart+0x280>)
 8000930:	701a      	strb	r2, [r3, #0]
	dataTransmit[1]=(uint8_t)((((uint16_t)x)|0xFF00)); 	      // 8 bit L
 8000932:	edd7 7a07 	vldr	s15, [r7, #28]
 8000936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093a:	ee17 3a90 	vmov	r3, s15
 800093e:	b29b      	uxth	r3, r3
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <Transmit_Uart+0x280>)
 8000944:	705a      	strb	r2, [r3, #1]
	dataTransmit[2]=(uint8_t)((((uint16_t)((x-(uint16_t)x)*10000.0f))|0x00FF)>>8); // 8 bit H
 8000946:	edd7 7a07 	vldr	s15, [r7, #28]
 800094a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	b29b      	uxth	r3, r3
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000964:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000b84 <Transmit_Uart+0x284>
 8000968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800096c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000970:	ee17 3a90 	vmov	r3, s15
 8000974:	b29b      	uxth	r3, r3
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b80      	ldr	r3, [pc, #512]	; (8000b80 <Transmit_Uart+0x280>)
 800097e:	709a      	strb	r2, [r3, #2]
	dataTransmit[3]=(uint8_t)((((uint16_t)((x-(uint16_t)x)*10000.0f))|0xFF00));    // 8 bit L
 8000980:	edd7 7a07 	vldr	s15, [r7, #28]
 8000984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000988:	ee17 3a90 	vmov	r3, s15
 800098c:	b29b      	uxth	r3, r3
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ed97 7a07 	vldr	s14, [r7, #28]
 800099a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800099e:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000b84 <Transmit_Uart+0x284>
 80009a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009aa:	ee17 3a90 	vmov	r3, s15
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b73      	ldr	r3, [pc, #460]	; (8000b80 <Transmit_Uart+0x280>)
 80009b4:	70da      	strb	r2, [r3, #3]

	dataTransmit[4]=(uint8_t)((((uint16_t)y)|0x00FF)>>8); // 8 bit H
 80009b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80009ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009be:	ee17 3a90 	vmov	r3, s15
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b6d      	ldr	r3, [pc, #436]	; (8000b80 <Transmit_Uart+0x280>)
 80009cc:	711a      	strb	r2, [r3, #4]
	dataTransmit[5]=(uint8_t)((((uint16_t)y)|0xFF00)); 	      // 8 bit L
 80009ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80009d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d6:	ee17 3a90 	vmov	r3, s15
 80009da:	b29b      	uxth	r3, r3
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b68      	ldr	r3, [pc, #416]	; (8000b80 <Transmit_Uart+0x280>)
 80009e0:	715a      	strb	r2, [r3, #5]
	dataTransmit[6]=(uint8_t)((((uint16_t)((y-(uint16_t)y)*10000.0f))|0x00FF)>>8); // 8 bit H
 80009e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80009e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ea:	ee17 3a90 	vmov	r3, s15
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a00:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000b84 <Transmit_Uart+0x284>
 8000a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a0c:	ee17 3a90 	vmov	r3, s15
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b59      	ldr	r3, [pc, #356]	; (8000b80 <Transmit_Uart+0x280>)
 8000a1a:	719a      	strb	r2, [r3, #6]
	dataTransmit[7]=(uint8_t)((((uint16_t)((y-(uint16_t)y)*10000.0f))|0xFF00));    // 8 bit L
 8000a1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a24:	ee17 3a90 	vmov	r3, s15
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a32:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000b84 <Transmit_Uart+0x284>
 8000a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a46:	ee17 3a90 	vmov	r3, s15
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <Transmit_Uart+0x280>)
 8000a50:	71da      	strb	r2, [r3, #7]

	dataTransmit[8]=(uint8_t)v_l; // 8 bit truoc dau .
 8000a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a5e:	793b      	ldrb	r3, [r7, #4]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <Transmit_Uart+0x280>)
 8000a64:	721a      	strb	r2, [r3, #8]
	dataTransmit[9]=(uint8_t)((((uint16_t)((v_l-(uint16_t)v_l)*10000.0f))|0x00FF)>>8); // 8 bit H
 8000a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a6e:	ee17 3a90 	vmov	r3, s15
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a84:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000b84 <Transmit_Uart+0x284>
 8000a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a90:	ee17 3a90 	vmov	r3, s15
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <Transmit_Uart+0x280>)
 8000a9e:	725a      	strb	r2, [r3, #9]
	dataTransmit[10]=(uint8_t)((((uint16_t)((v_l-(uint16_t)v_l)*10000.0f))|0xFF00));    // 8 bit L
 8000aa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa8:	ee17 3a90 	vmov	r3, s15
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000b84 <Transmit_Uart+0x284>
 8000ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aca:	ee17 3a90 	vmov	r3, s15
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <Transmit_Uart+0x280>)
 8000ad4:	729a      	strb	r2, [r3, #10]

	dataTransmit[11]=(uint8_t)dir_l;
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <Transmit_Uart+0x280>)
 8000adc:	72da      	strb	r2, [r3, #11]

	dataTransmit[12]=(uint8_t)v_r; // 8 bit truoc dau .
 8000ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aea:	793b      	ldrb	r3, [r7, #4]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <Transmit_Uart+0x280>)
 8000af0:	731a      	strb	r2, [r3, #12]
	dataTransmit[13]=(uint8_t)((((uint16_t)((v_r-(uint16_t)v_r)*10000.0f))|0x00FF)>>8); // 8 bit H
 8000af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afa:	ee17 3a90 	vmov	r3, s15
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b10:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000b84 <Transmit_Uart+0x284>
 8000b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b1c:	ee17 3a90 	vmov	r3, s15
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <Transmit_Uart+0x280>)
 8000b2a:	735a      	strb	r2, [r3, #13]
	dataTransmit[14]=(uint8_t)((((uint16_t)((v_r-(uint16_t)v_r)*10000.0f))|0xFF00));    // 8 bit L
 8000b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b34:	ee17 3a90 	vmov	r3, s15
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	ee07 3a90 	vmov	s15, r3
 8000b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b42:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000b84 <Transmit_Uart+0x284>
 8000b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b56:	ee17 3a90 	vmov	r3, s15
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <Transmit_Uart+0x280>)
 8000b60:	739a      	strb	r2, [r3, #14]

	dataTransmit[15]=(uint8_t)dir_r;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <Transmit_Uart+0x280>)
 8000b68:	73da      	strb	r2, [r3, #15]
//	for(int i=0;i<14;i++){
//		dataTransmit[i]=0xF3;
//	}

	HAL_UART_Transmit(&huart2, &dataTransmit[0], sizeof(dataTransmit), 1);
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	4904      	ldr	r1, [pc, #16]	; (8000b80 <Transmit_Uart+0x280>)
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <Transmit_Uart+0x288>)
 8000b72:	f004 ffea 	bl	8005b4a <HAL_UART_Transmit>
//	dataTransmit[8]=(int8_t)v_l; // 8 bit truoc dau .
//	dataTransmit[9]=(int8_t)((((int16_t)((x-(int16_t)v_l)*10000))|0xF0)>>8); // 8 bit H
//	dataTransmit[10]=(int8_t)((((int16_t)((x-(int16_t)v_l)*10000))|0x0F));    // 8 bit L
}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000194 	.word	0x20000194
 8000b84:	461c4000 	.word	0x461c4000
 8000b88:	20000358 	.word	0x20000358

08000b8c <Receive_Uart>:

float *Receive_Uart(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	data_Receive[0]=(float)(receivebuffer[0]+(float)(((uint16_t)((receivebuffer[1]<<8)|receivebuffer[2])/10000.0f)));
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <Receive_Uart+0x84>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <Receive_Uart+0x84>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <Receive_Uart+0x84>)
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb8:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8000c14 <Receive_Uart+0x88>
 8000bbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <Receive_Uart+0x8c>)
 8000bc6:	edc3 7a00 	vstr	s15, [r3]
	data_Receive[1]=(float)(receivebuffer[3]+(float)(((uint16_t)((receivebuffer[4]<<8)|receivebuffer[5])/10000.0f)));
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <Receive_Uart+0x84>)
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <Receive_Uart+0x84>)
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <Receive_Uart+0x84>)
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf2:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8000c14 <Receive_Uart+0x88>
 8000bf6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <Receive_Uart+0x8c>)
 8000c00:	edc3 7a01 	vstr	s15, [r3, #4]

	return data_Receive;
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <Receive_Uart+0x8c>)
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	2000011c 	.word	0x2000011c
 8000c14:	461c4000 	.word	0x461c4000
 8000c18:	200001ac 	.word	0x200001ac

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 ff68 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f84e 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff fc7e 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f7ff fc54 	bl	80004d8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c30:	f000 fa0e 	bl	8001050 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c34:	f000 fab8 	bl	80011a8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c38:	f000 fb0a 	bl	8001250 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000c3c:	f000 fbaa 	bl	8001394 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 fd1a 	bl	8001678 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000c44:	f000 fb58 	bl	80012f8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000c48:	f7ff fd14 	bl	8000674 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <main+0x7c>)
 8000c50:	f003 ffe4 	bl	8004c1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c54:	2104      	movs	r1, #4
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <main+0x7c>)
 8000c58:	f003 ffe0 	bl	8004c1c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 8000c5c:	480f      	ldr	r0, [pc, #60]	; (8000c9c <main+0x80>)
 8000c5e:	f003 ff84 	bl	8004b6a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000c62:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <main+0x84>)
 8000c64:	f003 ff81 	bl	8004b6a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <main+0x88>)
 8000c6c:	f004 f89a 	bl	8004da4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c70:	213c      	movs	r1, #60	; 0x3c
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <main+0x8c>)
 8000c74:	f004 f896 	bl	8004da4 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_DMA(&huart2 ,&receivebuffer[0], 6);
 8000c78:	2206      	movs	r2, #6
 8000c7a:	490c      	ldr	r1, [pc, #48]	; (8000cac <main+0x90>)
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <main+0x94>)
 8000c7e:	f004 fffd 	bl	8005c7c <HAL_UART_Receive_DMA>

  PID_Init(Kp, Ki, Kd, Ts);
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <main+0x98>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <main+0x9c>)
 8000c8e:	490b      	ldr	r1, [pc, #44]	; (8000cbc <main+0xa0>)
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <main+0xa4>)
 8000c92:	f000 fdc7 	bl	8001824 <PID_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <main+0x7a>
 8000c98:	20000238 	.word	0x20000238
 8000c9c:	20000278 	.word	0x20000278
 8000ca0:	200001f8 	.word	0x200001f8
 8000ca4:	200001b8 	.word	0x200001b8
 8000ca8:	200002b8 	.word	0x200002b8
 8000cac:	2000011c 	.word	0x2000011c
 8000cb0:	20000358 	.word	0x20000358
 8000cb4:	20000018 	.word	0x20000018
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b094      	sub	sp, #80	; 0x50
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	2230      	movs	r2, #48	; 0x30
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f005 ff28 	bl	8006b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <SystemClock_Config+0xcc>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a27      	ldr	r2, [pc, #156]	; (8000d90 <SystemClock_Config+0xcc>)
 8000cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <SystemClock_Config+0xcc>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <SystemClock_Config+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SystemClock_Config+0xd0>)
 8000d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <SystemClock_Config+0xd0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d34:	2308      	movs	r3, #8
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fa80 	bl	8004250 <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d56:	f000 f8c7 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fcd9 	bl	8004730 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d84:	f000 f8b0 	bl	8000ee8 <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3750      	adds	r7, #80	; 0x50
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
//	delay 5ms
	if(htim->Instance==htim5.Instance){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d14e      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0xb2>
		volatile float *data_Receive;
		t1++;
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000db4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_GRE_Pin);
 8000db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dba:	4841      	ldr	r0, [pc, #260]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000dbc:	f001 fd57 	bl	800286e <HAL_GPIO_TogglePin>
		velo = Get_Velocity();
 8000dc0:	f7ff fd48 	bl	8000854 <Get_Velocity>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000dc8:	601a      	str	r2, [r3, #0]
		data_Receive = Receive_Uart();
 8000dca:	f7ff fedf 	bl	8000b8c <Receive_Uart>
 8000dce:	60b8      	str	r0, [r7, #8]
		for(int i=0;i<2;i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e00d      	b.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x5a>
			PID_current[i]=*(velo+i*2);
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4939      	ldr	r1, [pc, #228]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	601a      	str	r2, [r3, #0]
		for(int i=0;i<2;i++){
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	ddee      	ble.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x3e>
//			v_target[i]=*(data_Receive+i);
//			v_target[i] = 10.0f;
		}

		duty_cycle = PID_Calculate(v_target, PID_current);
 8000df8:	4933      	ldr	r1, [pc, #204]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000dfc:	f000 fd5a 	bl	80018b4 <PID_Calculate>
 8000e00:	4602      	mov	r2, r0
 8000e02:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e04:	601a      	str	r2, [r3, #0]
		test[2]=*(duty_cycle);
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e0e:	6093      	str	r3, [r2, #8]
		test[3]=*(duty_cycle+1);
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a2f      	ldr	r2, [pc, #188]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e18:	60d3      	str	r3, [r2, #12]
		Control_Motor(*(duty_cycle), *(duty_cycle+1));
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e26:	ee17 3a90 	vmov	r3, s15
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3304      	adds	r3, #4
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3a:	ee17 3a90 	vmov	r3, s15
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	4610      	mov	r0, r2
 8000e44:	f7ff fcc8 	bl	80007d8 <Control_Motor>
/*		if(v_target[0] >= 19.0f) vt=-0.5f;
		else if (v_target[0] <= 2.0) vt = 0.5f;*/
		Transmit_Uart(523.456, 321.654,*(velo), *(velo+1), *(velo+2), *(velo+3));
//		Transmit_Uart(523.456, 321.654,12.356,1,20.214,3);
	}
}
 8000e48:	e032      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x118>
	else if(htim->Instance==htim9.Instance){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d12c      	bne.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x118>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 8000e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5a:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e5c:	f001 fd07 	bl	800286e <HAL_GPIO_TogglePin>
		v_target[0] = 15.0;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e64:	601a      	str	r2, [r3, #0]
		Transmit_Uart(523.456, 321.654,*(velo), *(velo+1), *(velo+2), *(velo+3));
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	ed93 7a00 	vldr	s14, [r3]
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3304      	adds	r3, #4
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3308      	adds	r3, #8
 8000e82:	edd3 6a00 	vldr	s13, [r3]
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	330c      	adds	r3, #12
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e94:	ee17 1a90 	vmov	r1, s15
 8000e98:	eef0 1a66 	vmov.f32	s3, s13
 8000e9c:	ee16 0a10 	vmov	r0, s12
 8000ea0:	eeb0 1a47 	vmov.f32	s2, s14
 8000ea4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000ee0 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000ea8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8000eac:	f7ff fd28 	bl	8000900 <Transmit_Uart>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200001f8 	.word	0x200001f8
 8000ebc:	2000017c 	.word	0x2000017c
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	20000140 	.word	0x20000140
 8000ec8:	200001a4 	.word	0x200001a4
 8000ecc:	20000104 	.word	0x20000104
 8000ed0:	20000190 	.word	0x20000190
 8000ed4:	20000148 	.word	0x20000148
 8000ed8:	20000278 	.word	0x20000278
 8000edc:	41700000 	.word	0x41700000
 8000ee0:	43a0d3b6 	.word	0x43a0d3b6
 8000ee4:	4402dd2f 	.word	0x4402dd2f

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 fdfc 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Stream0_IRQHandler+0x10>)
 8000faa:	f001 f84f 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000a0 	.word	0x200000a0

08000fb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fbe:	f001 f845 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002f8 	.word	0x200002f8

08000fcc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8000fd2:	f003 ff1e 	bl	8004e12 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8000fd8:	f003 ff1b 	bl	8004e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000238 	.word	0x20000238
 8000fe4:	20000278 	.word	0x20000278

08000fe8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <I2C1_EV_IRQHandler+0x10>)
 8000fee:	f001 fd91 	bl	8002b14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000004c 	.word	0x2000004c

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USART2_IRQHandler+0x10>)
 8001002:	f004 febb 	bl	8005d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000358 	.word	0x20000358

08001010 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM5_IRQHandler+0x10>)
 8001016:	f003 fefc 	bl	8004e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001f8 	.word	0x200001f8

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <SystemInit+0x28>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <SystemInit+0x28>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <SystemInit+0x28>)
 800103a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800103e:	609a      	str	r2, [r3, #8]
#endif
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	; 0x58
 8001054:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fd4d 	bl	8006b28 <memset>

  htim1.Instance = TIM1;
 800108e:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <MX_TIM1_Init+0x150>)
 8001090:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <MX_TIM1_Init+0x154>)
 8001092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <MX_TIM1_Init+0x150>)
 8001096:	220e      	movs	r2, #14
 8001098:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <MX_TIM1_Init+0x150>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 299;
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010a2:	f240 122b 	movw	r2, #299	; 0x12b
 80010a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ba:	4839      	ldr	r0, [pc, #228]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010bc:	f003 fd2a 	bl	8004b14 <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010c6:	f7ff ff0f 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d4:	4619      	mov	r1, r3
 80010d6:	4832      	ldr	r0, [pc, #200]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010d8:	f004 f86a 	bl	80051b0 <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010e2:	f7ff ff01 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e6:	482e      	ldr	r0, [pc, #184]	; (80011a0 <MX_TIM1_Init+0x150>)
 80010e8:	f003 fd63 	bl	8004bb2 <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010f2:	f7ff fef9 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001102:	4619      	mov	r1, r3
 8001104:	4826      	ldr	r0, [pc, #152]	; (80011a0 <MX_TIM1_Init+0x150>)
 8001106:	f004 fbff 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001110:	f7ff feea 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4819      	ldr	r0, [pc, #100]	; (80011a0 <MX_TIM1_Init+0x150>)
 800113a:	f003 ff73 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001144:	f7ff fed0 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	2204      	movs	r2, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <MX_TIM1_Init+0x150>)
 8001152:	f003 ff67 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800115c:	f7ff fec4 	bl	8000ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001178:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_TIM1_Init+0x150>)
 8001184:	f004 fc2e 	bl	80059e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800118e:	f7ff feab 	bl	8000ee8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <MX_TIM1_Init+0x150>)
 8001194:	f000 fa36 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8001198:	bf00      	nop
 800119a:	3758      	adds	r7, #88	; 0x58
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000238 	.word	0x20000238
 80011a4:	40010000 	.word	0x40010000

080011a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2224      	movs	r2, #36	; 0x24
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 fcb6 	bl	8006b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_TIM2_Init+0xa4>)
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_TIM2_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_TIM2_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_TIM2_Init+0xa4>)
 80011da:	f242 7210 	movw	r2, #10000	; 0x2710
 80011de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM2_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM2_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001204:	2301      	movs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM2_Init+0xa4>)
 8001218:	f003 fd32 	bl	8004c80 <HAL_TIM_Encoder_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001222:	f7ff fe61 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM2_Init+0xa4>)
 8001234:	f004 fb68 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800123e:	f7ff fe53 	bl	8000ee8 <Error_Handler>
  }

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200002b8 	.word	0x200002b8

08001250 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f005 fc62 	bl	8006b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_TIM4_Init+0xa0>)
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <MX_TIM4_Init+0xa4>)
 8001270:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_TIM4_Init+0xa0>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_TIM4_Init+0xa0>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_TIM4_Init+0xa0>)
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_TIM4_Init+0xa0>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_TIM4_Init+0xa0>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001292:	2303      	movs	r3, #3
 8001294:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800129a:	2301      	movs	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012aa:	2301      	movs	r3, #1
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_TIM4_Init+0xa0>)
 80012be:	f003 fcdf 	bl	8004c80 <HAL_TIM_Encoder_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f7ff fe0e 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_TIM4_Init+0xa0>)
 80012da:	f004 fb15 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80012e4:	f7ff fe00 	bl	8000ee8 <Error_Handler>
  }

}
 80012e8:	bf00      	nop
 80012ea:	3730      	adds	r7, #48	; 0x30
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200001b8 	.word	0x200001b8
 80012f4:	40000800 	.word	0x40000800

080012f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_TIM5_Init+0x94>)
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <MX_TIM5_Init+0x98>)
 8001318:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_TIM5_Init+0x94>)
 800131c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001320:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_TIM5_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_TIM5_Init+0x94>)
 800132a:	2231      	movs	r2, #49	; 0x31
 800132c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_TIM5_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM5_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_TIM5_Init+0x94>)
 800133c:	f003 fbea 	bl	8004b14 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001346:	f7ff fdcf 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_TIM5_Init+0x94>)
 8001358:	f003 ff2a 	bl	80051b0 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001362:	f7ff fdc1 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_TIM5_Init+0x94>)
 8001374:	f004 fac8 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800137e:	f7ff fdb3 	bl	8000ee8 <Error_Handler>
  }

}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001f8 	.word	0x200001f8
 8001390:	40000c00 	.word	0x40000c00

08001394 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013a8:	4a16      	ldr	r2, [pc, #88]	; (8001404 <MX_TIM9_Init+0x70>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013ae:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80013b2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013d0:	f003 fba0 	bl	8004b14 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80013da:	f7ff fd85 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM9_Init+0x6c>)
 80013ea:	f003 fee1 	bl	80051b0 <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80013f4:	f7ff fd78 	bl	8000ee8 <Error_Handler>
  }

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000278 	.word	0x20000278
 8001404:	40014000 	.word	0x40014000

08001408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d116      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2018      	movs	r0, #24
 800143c:	f000 fca7 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001440:	2018      	movs	r0, #24
 8001442:	f000 fcc0 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001446:	e036      	b.n	80014b6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_TIM_Base_MspInit+0xc0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d116      	bne.n	8001480 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2032      	movs	r0, #50	; 0x32
 8001474:	f000 fc8b 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f000 fca4 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
}
 800147e:	e01a      	b.n	80014b6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM9)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_TIM_Base_MspInit+0xc4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d115      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2018      	movs	r0, #24
 80014ac:	f000 fc6f 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80014b0:	2018      	movs	r0, #24
 80014b2:	f000 fc88 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40000c00 	.word	0x40000c00
 80014cc:	40014000 	.word	0x40014000

080014d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	; 0x30
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d14a      	bne.n	8001588 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a3e      	ldr	r2, [pc, #248]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a37      	ldr	r2, [pc, #220]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin;
 8001546:	2320      	movs	r3, #32
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001556:	2301      	movs	r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R1_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4825      	ldr	r0, [pc, #148]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001562:	f000 ffe9 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_R2_Pin;
 8001566:	2308      	movs	r3, #8
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_R2_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <HAL_TIM_Encoder_MspInit+0x12c>)
 8001582:	f000 ffd9 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001586:	e030      	b.n	80015ea <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_TIM_Encoder_MspInit+0x130>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_L2_Pin|ENCODER_L1_Pin;
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015da:	2302      	movs	r3, #2
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_TIM_Encoder_MspInit+0x12c>)
 80015e6:	f000 ffa7 	bl	8002538 <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	; 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40000800 	.word	0x40000800

08001604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_TIM_MspPostInit+0x68>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d11e      	bne.n	8001664 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_TIM_MspPostInit+0x6c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_TIM_MspPostInit+0x6c>)
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_TIM_MspPostInit+0x6c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_L_Pin|MOTOR_R_Pin;
 8001642:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_TIM_MspPostInit+0x70>)
 8001660:	f000 ff6a 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010000 	.word	0x40010000
 8001670:	40023800 	.word	0x40023800
 8001674:	40021000 	.word	0x40021000

08001678 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART2_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016b0:	f004 f9fe 	bl	8005ab0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f7ff fc15 	bl	8000ee8 <Error_Handler>
  }

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000358 	.word	0x20000358
 80016c8:	40004400 	.word	0x40004400

080016cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a34      	ldr	r2, [pc, #208]	; (80017bc <HAL_UART_MspInit+0xf0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d162      	bne.n	80017b4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_UART_MspInit+0xf4>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_UART_MspInit+0xf4>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_UART_MspInit+0xf4>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_UART_MspInit+0xf4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a2b      	ldr	r2, [pc, #172]	; (80017c0 <HAL_UART_MspInit+0xf4>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_UART_MspInit+0xf4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001726:	230c      	movs	r3, #12
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001736:	2307      	movs	r3, #7
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4820      	ldr	r0, [pc, #128]	; (80017c4 <HAL_UART_MspInit+0xf8>)
 8001742:	f000 fef9 	bl	8002538 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_UART_MspInit+0x100>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 800174e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001752:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 8001776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001788:	480f      	ldr	r0, [pc, #60]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 800178a:	f000 fb37 	bl	8001dfc <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001794:	f7ff fba8 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_UART_MspInit+0xfc>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2026      	movs	r0, #38	; 0x26
 80017aa:	f000 faf0 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ae:	2026      	movs	r0, #38	; 0x26
 80017b0:	f000 fb09 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40004400 	.word	0x40004400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	200002f8 	.word	0x200002f8
 80017cc:	40026088 	.word	0x40026088

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017d6:	e003      	b.n	80017e0 <LoopCopyDataInit>

080017d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017de:	3104      	adds	r1, #4

080017e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017e8:	d3f6      	bcc.n	80017d8 <CopyDataInit>
  ldr  r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017ec:	e002      	b.n	80017f4 <LoopFillZerobss>

080017ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017f0:	f842 3b04 	str.w	r3, [r2], #4

080017f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017f8:	d3f9      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017fa:	f7ff fc13 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f005 f96f 	bl	8006ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff fa0b 	bl	8000c1c <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001808:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800180c:	08006b80 	.word	0x08006b80
  ldr  r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001814:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8001818:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 800181c:	2000041c 	.word	0x2000041c

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <PID_Init>:

float error, PID_P[2], PID_I[2], PID_D[2];

uint8_t TxBuffer[2], RxBuffer[7];

void PID_Init(float *Kp, float *Ki, float *Kd, float Ts) {
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0; i < 2; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e020      	b.n	800187c <PID_Init+0x58>
		PID_Kp[i] = *(Kp+i);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4413      	add	r3, r2
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <PID_Init+0x7c>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	601a      	str	r2, [r3, #0]
		PID_Ki[i] = *(Ki+i);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4413      	add	r3, r2
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4912      	ldr	r1, [pc, #72]	; (80018a4 <PID_Init+0x80>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	601a      	str	r2, [r3, #0]
		PID_Kd[i] = *(Kd+i);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <PID_Init+0x84>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	dddb      	ble.n	800183a <PID_Init+0x16>
	}
	PID_T = Ts/1000.0f;
 8001882:	ed97 7a00 	vldr	s14, [r7]
 8001886:	eddf 6a09 	vldr	s13, [pc, #36]	; 80018ac <PID_Init+0x88>
 800188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <PID_Init+0x8c>)
 8001890:	edc3 7a00 	vstr	s15, [r3]
}
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	200003ec 	.word	0x200003ec
 80018a4:	20000398 	.word	0x20000398
 80018a8:	200003d4 	.word	0x200003d4
 80018ac:	447a0000 	.word	0x447a0000
 80018b0:	200003a0 	.word	0x200003a0

080018b4 <PID_Calculate>:

float * PID_Calculate(float *PID_in, float *PID_current){
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
//	float error, PID_P, PID_I, PID_D;
//	volatile float PID_out[2];
	PID_Test[2] = *(PID_current);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7c      	ldr	r2, [pc, #496]	; (8001ab4 <PID_Calculate+0x200>)
 80018c4:	6093      	str	r3, [r2, #8]

	for (int i=0;i<2; i++){
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e0e8      	b.n	8001a9e <PID_Calculate+0x1ea>
		PID_Test[i]=*(PID_in+i);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4977      	ldr	r1, [pc, #476]	; (8001ab4 <PID_Calculate+0x200>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	601a      	str	r2, [r3, #0]
		error = *(PID_in+i)-*(PID_current+i)/**enc[i*2+1]*/;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	4b6e      	ldr	r3, [pc, #440]	; (8001ab8 <PID_Calculate+0x204>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
		PID_P[i] = (float)(PID_Kp[i]*(error-PID_pre_err[i]));
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <PID_Calculate+0x208>)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	ed93 7a00 	vldr	s14, [r3]
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <PID_Calculate+0x204>)
 8001910:	edd3 6a00 	vldr	s13, [r3]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <PID_Calculate+0x20c>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	4a66      	ldr	r2, [pc, #408]	; (8001ac4 <PID_Calculate+0x210>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	edc3 7a00 	vstr	s15, [r3]
		PID_I[i] = (float)(0.5F*PID_Ki[i]*0.005f*(error+PID_pre_err[i]));
 8001934:	4a64      	ldr	r2, [pc, #400]	; (8001ac8 <PID_Calculate+0x214>)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001948:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001acc <PID_Calculate+0x218>
 800194c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001950:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <PID_Calculate+0x20c>)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	edd3 6a00 	vldr	s13, [r3]
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <PID_Calculate+0x204>)
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196a:	4a59      	ldr	r2, [pc, #356]	; (8001ad0 <PID_Calculate+0x21c>)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	edc3 7a00 	vstr	s15, [r3]
		PID_D[i] = (float)(PID_Kd[i]*200.0f*(error-2.0f*PID_pre_err[i]+PID_ppre_err[i]));
 8001976:	4a57      	ldr	r2, [pc, #348]	; (8001ad4 <PID_Calculate+0x220>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001ad8 <PID_Calculate+0x224>
 8001986:	ee27 7a87 	vmul.f32	s14, s15, s14
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <PID_Calculate+0x204>)
 800198c:	edd3 6a00 	vldr	s13, [r3]
 8001990:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <PID_Calculate+0x20c>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <PID_Calculate+0x228>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <PID_Calculate+0x22c>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	edc3 7a00 	vstr	s15, [r3]

		PID_out[i] = (PID_P[i] + PID_I[i] + PID_D[i]) + PID_out[i];
 80019c4:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <PID_Calculate+0x210>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	4a3f      	ldr	r2, [pc, #252]	; (8001ad0 <PID_Calculate+0x21c>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e0:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <PID_Calculate+0x22c>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <PID_Calculate+0x230>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <PID_Calculate+0x230>)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	edc3 7a00 	vstr	s15, [r3]

		if (PID_out[i]>PID_out_max){
 8001a0c:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <PID_Calculate+0x230>)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <PID_Calculate+0x234>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dd07      	ble.n	8001a38 <PID_Calculate+0x184>
			PID_out[i]=PID_out_max;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <PID_Calculate+0x234>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	492d      	ldr	r1, [pc, #180]	; (8001ae4 <PID_Calculate+0x230>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e014      	b.n	8001a62 <PID_Calculate+0x1ae>
		}
		else if (PID_out[i]<PID_out_min){
 8001a38:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <PID_Calculate+0x230>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <PID_Calculate+0x238>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d506      	bpl.n	8001a62 <PID_Calculate+0x1ae>
			PID_out[i]=PID_out_min;
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <PID_Calculate+0x238>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <PID_Calculate+0x230>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	601a      	str	r2, [r3, #0]
		}
		PID1[i] = PID_out[i];
 8001a62:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <PID_Calculate+0x230>)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4920      	ldr	r1, [pc, #128]	; (8001af0 <PID_Calculate+0x23c>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	601a      	str	r2, [r3, #0]
		PID_ppre_err[i]=PID_pre_err[i];
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <PID_Calculate+0x20c>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <PID_Calculate+0x228>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	601a      	str	r2, [r3, #0]
		PID_pre_err[i]=error;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <PID_Calculate+0x204>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <PID_Calculate+0x20c>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	601a      	str	r2, [r3, #0]
	for (int i=0;i<2; i++){
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	f77f af13 	ble.w	80018cc <PID_Calculate+0x18>
	PID_out[0] = Aout;
	PID_out[1] = 0;
*/

//	PID_Test[5] += PID_out[0];
	return PID_out;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <PID_Calculate+0x230>)
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200003ac 	.word	0x200003ac
 8001ab8:	200003fc 	.word	0x200003fc
 8001abc:	200003ec 	.word	0x200003ec
 8001ac0:	200003a4 	.word	0x200003a4
 8001ac4:	20000408 	.word	0x20000408
 8001ac8:	20000398 	.word	0x20000398
 8001acc:	3ba3d70a 	.word	0x3ba3d70a
 8001ad0:	200003dc 	.word	0x200003dc
 8001ad4:	200003d4 	.word	0x200003d4
 8001ad8:	43480000 	.word	0x43480000
 8001adc:	200003f4 	.word	0x200003f4
 8001ae0:	20000410 	.word	0x20000410
 8001ae4:	200003e4 	.word	0x200003e4
 8001ae8:	20000020 	.word	0x20000020
 8001aec:	20000048 	.word	0x20000048
 8001af0:	20000400 	.word	0x20000400

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f92b 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff f9e6 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f943 	bl	8001de2 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b74:	f000 f90b 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000001c 	.word	0x2000001c
 8001b90:	20000028 	.word	0x20000028
 8001b94:	20000024 	.word	0x20000024

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000028 	.word	0x20000028
 8001bbc:	20000418 	.word	0x20000418

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000418 	.word	0x20000418

08001bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60d3      	str	r3, [r2, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <__NVIC_GetPriorityGrouping+0x18>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 0307 	and.w	r3, r3, #7
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	db0b      	blt.n	8001c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	4907      	ldr	r1, [pc, #28]	; (8001c74 <__NVIC_EnableIRQ+0x38>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff29 	bl	8001bd8 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff3e 	bl	8001c20 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff8e 	bl	8001ccc <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff31 	bl	8001c3c <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa2 	bl	8001d34 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff feda 	bl	8001bc0 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e099      	b.n	8001f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e38:	e00f      	b.n	8001e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3a:	f7ff fec1 	bl	8001bc0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d908      	bls.n	8001e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e078      	b.n	8001f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e8      	bne.n	8001e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_DMA_Init+0x158>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f023 0307 	bic.w	r3, r3, #7
 8001eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d117      	bne.n	8001f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00e      	beq.n	8001f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fa9f 	bl	8002444 <DMA_CheckFifoParam>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e016      	b.n	8001f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fa56 	bl	80023d8 <DMA_CalcBaseAndBitshift>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	223f      	movs	r2, #63	; 0x3f
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	f010803f 	.word	0xf010803f

08001f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Start_IT+0x26>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e040      	b.n	8002000 <HAL_DMA_Start_IT+0xa8>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12f      	bne.n	8001ff2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f9e8 	bl	800237c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	223f      	movs	r2, #63	; 0x3f
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0216 	orr.w	r2, r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0208 	orr.w	r2, r2, #8
 8001fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	e005      	b.n	8001ffe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00c      	b.n	8002040 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2205      	movs	r2, #5
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002058:	4b92      	ldr	r3, [pc, #584]	; (80022a4 <HAL_DMA_IRQHandler+0x258>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a92      	ldr	r2, [pc, #584]	; (80022a8 <HAL_DMA_IRQHandler+0x25c>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0a9b      	lsrs	r3, r3, #10
 8002064:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2208      	movs	r2, #8
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01a      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2208      	movs	r2, #8
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2204      	movs	r2, #4
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2204      	movs	r2, #4
 8002112:	409a      	lsls	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2210      	movs	r2, #16
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d043      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d03c      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2210      	movs	r2, #16
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d018      	beq.n	800218e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d024      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
 800217a:	e01f      	b.n	80021bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e016      	b.n	80021bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0208 	bic.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2220      	movs	r2, #32
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 808e 	beq.w	80022ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8086 	beq.w	80022ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2220      	movs	r2, #32
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d136      	bne.n	8002264 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0216 	bic.w	r2, r2, #22
 8002204:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002214:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <HAL_DMA_IRQHandler+0x1da>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0208 	bic.w	r2, r2, #8
 8002234:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	223f      	movs	r2, #63	; 0x3f
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07d      	beq.n	8002356 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
        }
        return;
 8002262:	e078      	b.n	8002356 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01c      	beq.n	80022ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d108      	bne.n	8002292 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	2b00      	cmp	r3, #0
 8002286:	d030      	beq.n	80022ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
 8002290:	e02b      	b.n	80022ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d027      	beq.n	80022ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
 80022a2:	e022      	b.n	80022ea <HAL_DMA_IRQHandler+0x29e>
 80022a4:	2000001c 	.word	0x2000001c
 80022a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0210 	bic.w	r2, r2, #16
 80022c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d032      	beq.n	8002358 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2205      	movs	r2, #5
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3301      	adds	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	429a      	cmp	r2, r3
 8002320:	d307      	bcc.n	8002332 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f2      	bne.n	8002316 <HAL_DMA_IRQHandler+0x2ca>
 8002330:	e000      	b.n	8002334 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002332:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e000      	b.n	8002358 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002356:	bf00      	nop
    }
  }
}
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop

08002360 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002398:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d108      	bne.n	80023bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ba:	e007      	b.n	80023cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3b10      	subs	r3, #16
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <DMA_CalcBaseAndBitshift+0x64>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023f2:	4a13      	ldr	r2, [pc, #76]	; (8002440 <DMA_CalcBaseAndBitshift+0x68>)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d909      	bls.n	800241a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	1d1a      	adds	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	659a      	str	r2, [r3, #88]	; 0x58
 8002418:	e007      	b.n	800242a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	aaaaaaab 	.word	0xaaaaaaab
 8002440:	08006b68 	.word	0x08006b68

08002444 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11f      	bne.n	800249e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d855      	bhi.n	8002510 <DMA_CheckFifoParam+0xcc>
 8002464:	a201      	add	r2, pc, #4	; (adr r2, 800246c <DMA_CheckFifoParam+0x28>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	0800247d 	.word	0x0800247d
 8002470:	0800248f 	.word	0x0800248f
 8002474:	0800247d 	.word	0x0800247d
 8002478:	08002511 	.word	0x08002511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d045      	beq.n	8002514 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e042      	b.n	8002514 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002496:	d13f      	bne.n	8002518 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249c:	e03c      	b.n	8002518 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a6:	d121      	bne.n	80024ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d836      	bhi.n	800251c <DMA_CheckFifoParam+0xd8>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <DMA_CheckFifoParam+0x70>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024c5 	.word	0x080024c5
 80024b8:	080024cb 	.word	0x080024cb
 80024bc:	080024c5 	.word	0x080024c5
 80024c0:	080024dd 	.word	0x080024dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e02f      	b.n	800252a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d024      	beq.n	8002520 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024da:	e021      	b.n	8002520 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e4:	d11e      	bne.n	8002524 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ea:	e01b      	b.n	8002524 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <DMA_CheckFifoParam+0xb4>
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d003      	beq.n	80024fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f6:	e018      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e015      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00e      	beq.n	8002528 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      break;
 800250e:	e00b      	b.n	8002528 <DMA_CheckFifoParam+0xe4>
      break;
 8002510:	bf00      	nop
 8002512:	e00a      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;
 8002514:	bf00      	nop
 8002516:	e008      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;
 8002518:	bf00      	nop
 800251a:	e006      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;
 800251c:	bf00      	nop
 800251e:	e004      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;
 8002520:	bf00      	nop
 8002522:	e002      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;   
 8002524:	bf00      	nop
 8002526:	e000      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;
 8002528:	bf00      	nop
    }
  } 
  
  return status; 
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e159      	b.n	8002808 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8148 	bne.w	8002802 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00b      	beq.n	8002592 <HAL_GPIO_Init+0x5a>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002586:	2b11      	cmp	r3, #17
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b12      	cmp	r3, #18
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0xfc>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b12      	cmp	r3, #18
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a2 	beq.w	8002802 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b56      	ldr	r3, [pc, #344]	; (800281c <HAL_GPIO_Init+0x2e4>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a55      	ldr	r2, [pc, #340]	; (800281c <HAL_GPIO_Init+0x2e4>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_GPIO_Init+0x2e4>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_GPIO_Init+0x2ec>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x202>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a47      	ldr	r2, [pc, #284]	; (8002828 <HAL_GPIO_Init+0x2f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x1fe>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a46      	ldr	r2, [pc, #280]	; (800282c <HAL_GPIO_Init+0x2f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x1fa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a45      	ldr	r2, [pc, #276]	; (8002830 <HAL_GPIO_Init+0x2f8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x1f6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a44      	ldr	r2, [pc, #272]	; (8002834 <HAL_GPIO_Init+0x2fc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x1f2>
 8002726:	2304      	movs	r3, #4
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x204>
 800272a:	2307      	movs	r3, #7
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x204>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x204>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x204>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x204>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4934      	ldr	r1, [pc, #208]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_GPIO_Init+0x300>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277e:	4a2e      	ldr	r2, [pc, #184]	; (8002838 <HAL_GPIO_Init+0x300>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002784:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_GPIO_Init+0x300>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <HAL_GPIO_Init+0x300>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_GPIO_Init+0x300>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <HAL_GPIO_Init+0x300>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_GPIO_Init+0x300>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_GPIO_Init+0x300>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f aea2 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	3724      	adds	r7, #36	; 0x24
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40013c00 	.word	0x40013c00

0800283c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800284c:	787b      	ldrb	r3, [r7, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002858:	e003      	b.n	8002862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	041a      	lsls	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	401a      	ands	r2, r3
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	429a      	cmp	r2, r3
 8002886:	d104      	bne.n	8002892 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	041a      	lsls	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002890:	e002      	b.n	8002898 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e11f      	b.n	8002af6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd ff00 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002908:	f002 f8dc 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a7b      	ldr	r2, [pc, #492]	; (8002b00 <HAL_I2C_Init+0x25c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d807      	bhi.n	8002928 <HAL_I2C_Init+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a7a      	ldr	r2, [pc, #488]	; (8002b04 <HAL_I2C_Init+0x260>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e006      	b.n	8002936 <HAL_I2C_Init+0x92>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <HAL_I2C_Init+0x264>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0db      	b.n	8002af6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a72      	ldr	r2, [pc, #456]	; (8002b0c <HAL_I2C_Init+0x268>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a64      	ldr	r2, [pc, #400]	; (8002b00 <HAL_I2C_Init+0x25c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <HAL_I2C_Init+0xd4>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	e009      	b.n	800298c <HAL_I2C_Init+0xe8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a63      	ldr	r2, [pc, #396]	; (8002b10 <HAL_I2C_Init+0x26c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	3301      	adds	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4956      	ldr	r1, [pc, #344]	; (8002b00 <HAL_I2C_Init+0x25c>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d80d      	bhi.n	80029c8 <HAL_I2C_Init+0x124>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e59      	subs	r1, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	bf38      	it	cc
 80029c4:	2304      	movcc	r3, #4
 80029c6:	e04f      	b.n	8002a68 <HAL_I2C_Init+0x1c4>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_I2C_Init+0x150>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_I2C_Init+0x176>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x17e>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e022      	b.n	8002a68 <HAL_I2C_Init+0x1c4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10e      	bne.n	8002a48 <HAL_I2C_Init+0x1a4>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e58      	subs	r0, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Init+0x1c4>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6809      	ldr	r1, [r1, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6911      	ldr	r1, [r2, #16]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	000186a0 	.word	0x000186a0
 8002b04:	001e847f 	.word	0x001e847f
 8002b08:	003d08ff 	.word	0x003d08ff
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	10624dd3 	.word	0x10624dd3

08002b14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d003      	beq.n	8002b4c <HAL_I2C_EV_IRQHandler+0x38>
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	f040 80bd 	bne.w	8002cc6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_I2C_EV_IRQHandler+0x6e>
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b6c:	d003      	beq.n	8002b76 <HAL_I2C_EV_IRQHandler+0x62>
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b74:	d101      	bne.n	8002b7a <HAL_I2C_EV_IRQHandler+0x66>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_I2C_EV_IRQHandler+0x68>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	f000 812e 	beq.w	8002dde <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x92>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	0a5b      	lsrs	r3, r3, #9
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f001 fb3d 	bl	8004218 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fcbb 	bl	800351a <I2C_Master_SB>
 8002ba4:	e08e      	b.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	0a5b      	lsrs	r3, r3, #9
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fd31 	bl	8003626 <I2C_Master_ADD10>
 8002bc4:	e07e      	b.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_I2C_EV_IRQHandler+0xd2>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fd4b 	bl	800367a <I2C_Master_ADDR>
 8002be4:	e06e      	b.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d037      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c00:	f000 80ef 	beq.w	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	09db      	lsrs	r3, r3, #7
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f948 	bl	8002ebe <I2C_MasterTransmit_TXE>
 8002c2e:	e049      	b.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80d2 	beq.w	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	0a5b      	lsrs	r3, r3, #9
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80cb 	beq.w	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d103      	bne.n	8002c5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f9cf 	bl	8002ff6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c58:	e0c3      	b.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa33 	bl	80030c6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c60:	e0bf      	b.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c70:	f000 80b7 	beq.w	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00f      	beq.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x18c>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	0a9b      	lsrs	r3, r3, #10
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x18c>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 faa3 	bl	80031e4 <I2C_MasterReceive_RXNE>
 8002c9e:	e011      	b.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 809a 	beq.w	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	0a5b      	lsrs	r3, r3, #9
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8093 	beq.w	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fb42 	bl	8003346 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc2:	e08e      	b.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002cc4:	e08d      	b.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e007      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <HAL_I2C_EV_IRQHandler+0x206>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	0a5b      	lsrs	r3, r3, #9
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00c      	beq.n	8002d1a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 ff00 	bl	8003b18 <I2C_Slave_ADDR>
 8002d18:	e066      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x226>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	0a5b      	lsrs	r3, r3, #9
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 ff34 	bl	8003ba0 <I2C_Slave_STOPF>
 8002d38:	e056      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
 8002d3c:	2b21      	cmp	r3, #33	; 0x21
 8002d3e:	d002      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x232>
 8002d40:	7bbb      	ldrb	r3, [r7, #14]
 8002d42:	2b29      	cmp	r3, #41	; 0x29
 8002d44:	d125      	bne.n	8002d92 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	09db      	lsrs	r3, r3, #7
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00f      	beq.n	8002d72 <HAL_I2C_EV_IRQHandler+0x25e>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	0a9b      	lsrs	r3, r3, #10
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_I2C_EV_IRQHandler+0x25e>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fe16 	bl	800399c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d70:	e039      	b.n	8002de6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d033      	beq.n	8002de6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	0a5b      	lsrs	r3, r3, #9
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02d      	beq.n	8002de6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fe43 	bl	8003a16 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d90:	e029      	b.n	8002de6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00f      	beq.n	8002dbe <HAL_I2C_EV_IRQHandler+0x2aa>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	0a9b      	lsrs	r3, r3, #10
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_I2C_EV_IRQHandler+0x2aa>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fe4e 	bl	8003a58 <I2C_SlaveReceive_RXNE>
 8002dbc:	e014      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	0a5b      	lsrs	r3, r3, #9
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fe7c 	bl	8003ad4 <I2C_SlaveReceive_BTF>
 8002ddc:	e004      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002dde:	bf00      	nop
 8002de0:	e002      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002de6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d150      	bne.n	8002f86 <I2C_MasterTransmit_TXE+0xc8>
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b21      	cmp	r3, #33	; 0x21
 8002ee8:	d14d      	bne.n	8002f86 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d01d      	beq.n	8002f2c <I2C_MasterTransmit_TXE+0x6e>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d01a      	beq.n	8002f2c <I2C_MasterTransmit_TXE+0x6e>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002efc:	d016      	beq.n	8002f2c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f0c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2211      	movs	r2, #17
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff62 	bl	8002dee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f2a:	e060      	b.n	8002fee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f3a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d107      	bne.n	8002f76 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff7d 	bl	8002e6e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f74:	e03b      	b.n	8002fee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ff35 	bl	8002dee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f84:	e033      	b.n	8002fee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b21      	cmp	r3, #33	; 0x21
 8002f8a:	d005      	beq.n	8002f98 <I2C_MasterTransmit_TXE+0xda>
 8002f8c:	7bbb      	ldrb	r3, [r7, #14]
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d12d      	bne.n	8002fee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b22      	cmp	r3, #34	; 0x22
 8002f96:	d12a      	bne.n	8002fee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002fb2:	e01c      	b.n	8002fee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d103      	bne.n	8002fc8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f880 	bl	80030c6 <I2C_MemoryTransmit_TXE_BTF>
}
 8002fc6:	e012      	b.n	8002fee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fec:	e7ff      	b.n	8002fee <I2C_MasterTransmit_TXE+0x130>
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b21      	cmp	r3, #33	; 0x21
 800300e:	d156      	bne.n	80030be <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800303e:	e03e      	b.n	80030be <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d01d      	beq.n	8003082 <I2C_MasterTransmit_BTF+0x8c>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b20      	cmp	r3, #32
 800304a:	d01a      	beq.n	8003082 <I2C_MasterTransmit_BTF+0x8c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003052:	d016      	beq.n	8003082 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003062:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2211      	movs	r2, #17
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff feb7 	bl	8002dee <HAL_I2C_MasterTxCpltCallback>
}
 8003080:	e01d      	b.n	80030be <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003090:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff fe98 	bl	8002dee <HAL_I2C_MasterTxCpltCallback>
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11d      	bne.n	800311a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10b      	bne.n	80030fe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	1c9a      	adds	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80030fc:	e06e      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	b29b      	uxth	r3, r3
 8003104:	121b      	asrs	r3, r3, #8
 8003106:	b2da      	uxtb	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003118:	e060      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10b      	bne.n	800313a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	b2da      	uxtb	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003138:	e050      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	2b02      	cmp	r3, #2
 8003140:	d14c      	bne.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b22      	cmp	r3, #34	; 0x22
 8003146:	d108      	bne.n	800315a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	e040      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d015      	beq.n	8003190 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b21      	cmp	r3, #33	; 0x21
 8003168:	d112      	bne.n	8003190 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318e:	e025      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d120      	bne.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b21      	cmp	r3, #33	; 0x21
 800319e:	d11d      	bne.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fe49 	bl	8002e6e <HAL_I2C_MemTxCpltCallback>
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b22      	cmp	r3, #34	; 0x22
 80031f6:	f040 80a2 	bne.w	800333e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d921      	bls.n	800324c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b03      	cmp	r3, #3
 8003236:	f040 8082 	bne.w	800333e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800324a:	e078      	b.n	800333e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	2b02      	cmp	r3, #2
 8003252:	d074      	beq.n	800333e <I2C_MasterReceive_RXNE+0x15a>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d002      	beq.n	8003260 <I2C_MasterReceive_RXNE+0x7c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d16e      	bne.n	800333e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 ffa7 	bl	80041b4 <I2C_WaitOnSTOPRequestThroughIT>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d142      	bne.n	80032f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d10a      	bne.n	80032dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fdd4 	bl	8002e82 <HAL_I2C_MemRxCpltCallback>
}
 80032da:	e030      	b.n	800333e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2212      	movs	r2, #18
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fd89 	bl	8002e02 <HAL_I2C_MasterRxCpltCallback>
}
 80032f0:	e025      	b.n	800333e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003300:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fdac 	bl	8002e96 <HAL_I2C_ErrorCallback>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b04      	cmp	r3, #4
 800335c:	d11b      	bne.n	8003396 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003394:	e0bd      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d129      	bne.n	80033f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00a      	beq.n	80033cc <I2C_MasterReceive_BTF+0x86>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d007      	beq.n	80033cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033f2:	e08e      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d176      	bne.n	80034ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d002      	beq.n	800340a <I2C_MasterReceive_BTF+0xc4>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d108      	bne.n	800341c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e019      	b.n	8003450 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d002      	beq.n	8003428 <I2C_MasterReceive_BTF+0xe2>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d108      	bne.n	800343a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e00a      	b.n	8003450 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d007      	beq.n	8003450 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d10a      	bne.n	80034d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fcd7 	bl	8002e82 <HAL_I2C_MemRxCpltCallback>
}
 80034d4:	e01d      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2212      	movs	r2, #18
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fc8c 	bl	8002e02 <HAL_I2C_MasterRxCpltCallback>
}
 80034ea:	e012      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d117      	bne.n	800355e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003546:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003548:	e067      	b.n	800361a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
}
 800355c:	e05d      	b.n	800361a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003566:	d133      	bne.n	80035d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b21      	cmp	r3, #33	; 0x21
 8003572:	d109      	bne.n	8003588 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e008      	b.n	800359a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <I2C_Master_SB+0x92>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d032      	beq.n	800361a <I2C_Master_SB+0x100>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02d      	beq.n	800361a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	605a      	str	r2, [r3, #4]
}
 80035ce:	e024      	b.n	800361a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	b29b      	uxth	r3, r3
 80035de:	11db      	asrs	r3, r3, #7
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0306 	and.w	r3, r3, #6
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f063 030f 	orn	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]
}
 80035f4:	e011      	b.n	800361a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10d      	bne.n	800361a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	b29b      	uxth	r3, r3
 8003604:	11db      	asrs	r3, r3, #7
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 0306 	and.w	r3, r3, #6
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f063 030e 	orn	r3, r3, #14
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <I2C_Master_ADD10+0x24>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	2b00      	cmp	r3, #0
 8003648:	d011      	beq.n	800366e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <I2C_Master_ADD10+0x38>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800367a:	b480      	push	{r7}
 800367c:	b091      	sub	sp, #68	; 0x44
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b22      	cmp	r3, #34	; 0x22
 80036a2:	f040 8169 	bne.w	8003978 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <I2C_Master_ADDR+0x54>
 80036ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d10b      	bne.n	80036ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	e160      	b.n	8003990 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <I2C_Master_ADDR+0x98>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036de:	d118      	bne.n	8003712 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003704:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	651a      	str	r2, [r3, #80]	; 0x50
 8003710:	e13e      	b.n	8003990 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d113      	bne.n	8003744 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e115      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	f040 808a 	bne.w	8003864 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003756:	d137      	bne.n	80037c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d113      	bne.n	80037a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	e0e7      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e0d3      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d02e      	beq.n	800382c <I2C_Master_ADDR+0x1b2>
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d02b      	beq.n	800382c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d102      	bne.n	80037e0 <I2C_Master_ADDR+0x166>
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d125      	bne.n	800382c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d00e      	beq.n	8003804 <I2C_Master_ADDR+0x18a>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d00b      	beq.n	8003804 <I2C_Master_ADDR+0x18a>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d008      	beq.n	8003804 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e007      	b.n	8003814 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003812:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	e0a1      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e085      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d14d      	bne.n	800390a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b04      	cmp	r3, #4
 8003872:	d016      	beq.n	80038a2 <I2C_Master_ADDR+0x228>
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	2b02      	cmp	r3, #2
 8003878:	d013      	beq.n	80038a2 <I2C_Master_ADDR+0x228>
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	2b10      	cmp	r3, #16
 800387e:	d010      	beq.n	80038a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e007      	b.n	80038b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c0:	d117      	bne.n	80038f2 <I2C_Master_ADDR+0x278>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c8:	d00b      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d008      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d005      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d002      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d107      	bne.n	80038f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e032      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	d117      	bne.n	800395a <I2C_Master_ADDR+0x2e0>
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003930:	d00b      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b01      	cmp	r3, #1
 8003936:	d008      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2b08      	cmp	r3, #8
 800393c:	d005      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	2b10      	cmp	r3, #16
 8003942:	d002      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b20      	cmp	r3, #32
 8003948:	d107      	bne.n	800395a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003958:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003976:	e00b      	b.n	8003990 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
}
 800398e:	e7ff      	b.n	8003990 <I2C_Master_ADDR+0x316>
 8003990:	bf00      	nop
 8003992:	3744      	adds	r7, #68	; 0x44
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02b      	beq.n	8003a0e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d114      	bne.n	8003a0e <I2C_SlaveTransmit_TXE+0x72>
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b29      	cmp	r3, #41	; 0x29
 80039e8:	d111      	bne.n	8003a0e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2221      	movs	r2, #33	; 0x21
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2228      	movs	r2, #40	; 0x28
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fa04 	bl	8002e16 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02c      	beq.n	8003acc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <I2C_SlaveReceive_RXNE+0x74>
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa6:	d111      	bne.n	8003acc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2222      	movs	r2, #34	; 0x22
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2228      	movs	r2, #40	; 0x28
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff f9af 	bl	8002e2a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b32:	2b28      	cmp	r3, #40	; 0x28
 8003b34:	d127      	bne.n	8003b86 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	09db      	lsrs	r3, r3, #7
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	81bb      	strh	r3, [r7, #12]
 8003b68:	e002      	b.n	8003b70 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b78:	89ba      	ldrh	r2, [r7, #12]
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff f95d 	bl	8002e3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b84:	e008      	b.n	8003b98 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0202 	mvn.w	r2, #2
 8003b8e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfc:	d172      	bne.n	8003ce4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b22      	cmp	r3, #34	; 0x22
 8003c02:	d002      	beq.n	8003c0a <I2C_Slave_STOPF+0x6a>
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b2a      	cmp	r3, #42	; 0x2a
 8003c08:	d135      	bne.n	8003c76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0204 	orr.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fb8c 	bl	8002360 <HAL_DMA_GetState>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d049      	beq.n	8003ce2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	4a69      	ldr	r2, [pc, #420]	; (8003df8 <I2C_Slave_STOPF+0x258>)
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe f9d4 	bl	8002008 <HAL_DMA_Abort_IT>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03d      	beq.n	8003ce2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c70:	4610      	mov	r0, r2
 8003c72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c74:	e035      	b.n	8003ce2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe fb56 	bl	8002360 <HAL_DMA_GetState>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d014      	beq.n	8003ce4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	4a4e      	ldr	r2, [pc, #312]	; (8003df8 <I2C_Slave_STOPF+0x258>)
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f99e 	bl	8002008 <HAL_DMA_Abort_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4798      	blx	r3
 8003ce0:	e000      	b.n	8003ce4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03e      	beq.n	8003d6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d112      	bne.n	8003d22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d112      	bne.n	8003d56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f843 	bl	8003e00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d7a:	e039      	b.n	8003df0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	d109      	bne.n	8003d96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2228      	movs	r2, #40	; 0x28
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff f84a 	bl	8002e2a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b28      	cmp	r3, #40	; 0x28
 8003da0:	d111      	bne.n	8003dc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <I2C_Slave_STOPF+0x25c>)
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff f84b 	bl	8002e5a <HAL_I2C_ListenCpltCallback>
}
 8003dc4:	e014      	b.n	8003df0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	2b22      	cmp	r3, #34	; 0x22
 8003dcc:	d002      	beq.n	8003dd4 <I2C_Slave_STOPF+0x234>
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	2b22      	cmp	r3, #34	; 0x22
 8003dd2:	d10d      	bne.n	8003df0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff f81d 	bl	8002e2a <HAL_I2C_SlaveRxCpltCallback>
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	08004065 	.word	0x08004065
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d002      	beq.n	8003e24 <I2C_ITError+0x24>
 8003e1e:	7bbb      	ldrb	r3, [r7, #14]
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d10a      	bne.n	8003e3a <I2C_ITError+0x3a>
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b22      	cmp	r3, #34	; 0x22
 8003e28:	d107      	bne.n	8003e3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e40:	2b28      	cmp	r3, #40	; 0x28
 8003e42:	d107      	bne.n	8003e54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2228      	movs	r2, #40	; 0x28
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e52:	e015      	b.n	8003e80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d00a      	beq.n	8003e7a <I2C_ITError+0x7a>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b60      	cmp	r3, #96	; 0x60
 8003e68:	d007      	beq.n	8003e7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d162      	bne.n	8003f56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d020      	beq.n	8003ef0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	4a6a      	ldr	r2, [pc, #424]	; (800405c <I2C_ITError+0x25c>)
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f8a4 	bl	8002008 <HAL_DMA_Abort_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8089 	beq.w	8003fda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003eea:	4610      	mov	r0, r2
 8003eec:	4798      	blx	r3
 8003eee:	e074      	b.n	8003fda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	4a59      	ldr	r2, [pc, #356]	; (800405c <I2C_ITError+0x25c>)
 8003ef6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe f883 	bl	8002008 <HAL_DMA_Abort_IT>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d068      	beq.n	8003fda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d10b      	bne.n	8003f2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
 8003f54:	e041      	b.n	8003fda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b60      	cmp	r3, #96	; 0x60
 8003f60:	d125      	bne.n	8003fae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d10b      	bne.n	8003f96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe ff7f 	bl	8002eaa <HAL_I2C_AbortCpltCallback>
 8003fac:	e015      	b.n	8003fda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d10b      	bne.n	8003fd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fe ff5e 	bl	8002e96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10e      	bne.n	8004008 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d113      	bne.n	8004054 <I2C_ITError+0x254>
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b28      	cmp	r3, #40	; 0x28
 8004030:	d110      	bne.n	8004054 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <I2C_ITError+0x260>)
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe ff03 	bl	8002e5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	08004065 	.word	0x08004065
 8004060:	ffff0000 	.word	0xffff0000

08004064 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <I2C_DMAAbort+0x148>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	4a4a      	ldr	r2, [pc, #296]	; (80041b0 <I2C_DMAAbort+0x14c>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0a1a      	lsrs	r2, r3, #8
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	00da      	lsls	r2, r3, #3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040aa:	e00a      	b.n	80040c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d0ea      	beq.n	8004098 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	2200      	movs	r2, #0
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	2200      	movs	r2, #0
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	2200      	movs	r2, #0
 8004106:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	2200      	movs	r2, #0
 8004116:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b60      	cmp	r3, #96	; 0x60
 8004132:	d10e      	bne.n	8004152 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2200      	movs	r2, #0
 8004148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800414a:	6978      	ldr	r0, [r7, #20]
 800414c:	f7fe fead 	bl	8002eaa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004150:	e027      	b.n	80041a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004158:	2b28      	cmp	r3, #40	; 0x28
 800415a:	d117      	bne.n	800418c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800417a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2228      	movs	r2, #40	; 0x28
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800418a:	e007      	b.n	800419c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800419c:	6978      	ldr	r0, [r7, #20]
 800419e:	f7fe fe7a 	bl	8002e96 <HAL_I2C_ErrorCallback>
}
 80041a2:	bf00      	nop
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	2000001c 	.word	0x2000001c
 80041b0:	14f8b589 	.word	0x14f8b589

080041b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	08db      	lsrs	r3, r3, #3
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	0a1a      	lsrs	r2, r3, #8
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e008      	b.n	8004204 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004200:	d0e9      	beq.n	80041d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	2000001c 	.word	0x2000001c
 8004214:	14f8b589 	.word	0x14f8b589

08004218 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004228:	d103      	bne.n	8004232 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004230:	e007      	b.n	8004242 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800423a:	d102      	bne.n	8004242 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2208      	movs	r2, #8
 8004240:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e25b      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d075      	beq.n	800435a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426e:	4ba3      	ldr	r3, [pc, #652]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00c      	beq.n	8004294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4ba0      	ldr	r3, [pc, #640]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b9d      	ldr	r3, [pc, #628]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d10b      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	4b99      	ldr	r3, [pc, #612]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05b      	beq.n	8004358 <HAL_RCC_OscConfig+0x108>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d157      	bne.n	8004358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e236      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x74>
 80042b6:	4b91      	ldr	r3, [pc, #580]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a90      	ldr	r2, [pc, #576]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x98>
 80042ce:	4b8b      	ldr	r3, [pc, #556]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a8a      	ldr	r2, [pc, #552]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a87      	ldr	r2, [pc, #540]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042e8:	4b84      	ldr	r3, [pc, #528]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a83      	ldr	r2, [pc, #524]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b81      	ldr	r3, [pc, #516]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a80      	ldr	r2, [pc, #512]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd fc5a 	bl	8001bc0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd fc56 	bl	8001bc0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1fb      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xc0>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd fc46 	bl	8001bc0 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7fd fc42 	bl	8001bc0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1e7      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b6c      	ldr	r3, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0xe8>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b5f      	ldr	r3, [pc, #380]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b5c      	ldr	r3, [pc, #368]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1bb      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b56      	ldr	r3, [pc, #344]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4952      	ldr	r1, [pc, #328]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <HAL_RCC_OscConfig+0x2b0>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fd fbfb 	bl	8001bc0 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fd fbf7 	bl	8001bc0 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e19c      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4940      	ldr	r1, [pc, #256]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_OscConfig+0x2b0>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fbda 	bl	8001bc0 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fd fbd6 	bl	8001bc0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e17b      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d030      	beq.n	800449c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b30      	ldr	r3, [pc, #192]	; (8004504 <HAL_RCC_OscConfig+0x2b4>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fbba 	bl	8001bc0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd fbb6 	bl	8001bc0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e15b      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x200>
 800446e:	e015      	b.n	800449c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x2b4>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fd fba3 	bl	8001bc0 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447e:	f7fd fb9f 	bl	8001bc0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e144      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a0 	beq.w	80045ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_OscConfig+0x2b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d121      	bne.n	800452a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <HAL_RCC_OscConfig+0x2b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a07      	ldr	r2, [pc, #28]	; (8004508 <HAL_RCC_OscConfig+0x2b8>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fd fb65 	bl	8001bc0 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e011      	b.n	800451e <HAL_RCC_OscConfig+0x2ce>
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
 8004508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450c:	f7fd fb58 	bl	8001bc0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0fd      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451e:	4b81      	ldr	r3, [pc, #516]	; (8004724 <HAL_RCC_OscConfig+0x4d4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d106      	bne.n	8004540 <HAL_RCC_OscConfig+0x2f0>
 8004532:	4b7d      	ldr	r3, [pc, #500]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a7c      	ldr	r2, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	e01c      	b.n	800457a <HAL_RCC_OscConfig+0x32a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b05      	cmp	r3, #5
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0x312>
 8004548:	4b77      	ldr	r3, [pc, #476]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a76      	ldr	r2, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	4b74      	ldr	r3, [pc, #464]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4a73      	ldr	r2, [pc, #460]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6713      	str	r3, [r2, #112]	; 0x70
 8004560:	e00b      	b.n	800457a <HAL_RCC_OscConfig+0x32a>
 8004562:	4b71      	ldr	r3, [pc, #452]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a70      	ldr	r2, [pc, #448]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	4b6e      	ldr	r3, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a6d      	ldr	r2, [pc, #436]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d015      	beq.n	80045ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fd fb1d 	bl	8001bc0 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fd fb19 	bl	8001bc0 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0bc      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	4b61      	ldr	r3, [pc, #388]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ee      	beq.n	800458a <HAL_RCC_OscConfig+0x33a>
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fd fb07 	bl	8001bc0 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fd fb03 	bl	8001bc0 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0a6      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045cc:	4b56      	ldr	r3, [pc, #344]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ee      	bne.n	80045b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045de:	4b52      	ldr	r3, [pc, #328]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a51      	ldr	r2, [pc, #324]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8092 	beq.w	8004718 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f4:	4b4c      	ldr	r3, [pc, #304]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d05c      	beq.n	80046ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d141      	bne.n	800468c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004608:	4b48      	ldr	r3, [pc, #288]	; (800472c <HAL_RCC_OscConfig+0x4dc>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fd fad7 	bl	8001bc0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fd fad3 	bl	8001bc0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e078      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004628:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	019b      	lsls	r3, r3, #6
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	3b01      	subs	r3, #1
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	4933      	ldr	r1, [pc, #204]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_RCC_OscConfig+0x4dc>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fd faac 	bl	8001bc0 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466c:	f7fd faa8 	bl	8001bc0 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04d      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x41c>
 800468a:	e045      	b.n	8004718 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x4dc>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fd fa95 	bl	8001bc0 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469a:	f7fd fa91 	bl	8001bc0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e036      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x44a>
 80046b8:	e02e      	b.n	8004718 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e029      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c6:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_RCC_OscConfig+0x4d8>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d11c      	bne.n	8004714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d115      	bne.n	8004714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10d      	bne.n	8004714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40007000 	.word	0x40007000
 8004728:	40023800 	.word	0x40023800
 800472c:	42470060 	.word	0x42470060

08004730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0cc      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b68      	ldr	r3, [pc, #416]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d90c      	bls.n	800476c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b63      	ldr	r3, [pc, #396]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0b8      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d020      	beq.n	80047ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004784:	4b59      	ldr	r3, [pc, #356]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a58      	ldr	r2, [pc, #352]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800478e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800479c:	4b53      	ldr	r3, [pc, #332]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a52      	ldr	r2, [pc, #328]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a8:	4b50      	ldr	r3, [pc, #320]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	494d      	ldr	r1, [pc, #308]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d044      	beq.n	8004850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ce:	4b47      	ldr	r3, [pc, #284]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d119      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e07f      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d003      	beq.n	80047ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06f      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fe:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e067      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b37      	ldr	r3, [pc, #220]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4934      	ldr	r1, [pc, #208]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004820:	f7fd f9ce 	bl	8001bc0 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fd f9ca 	bl	8001bc0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e04f      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d20c      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e032      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4916      	ldr	r1, [pc, #88]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	490e      	ldr	r1, [pc, #56]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048b6:	f000 f821 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80048ba:	4601      	mov	r1, r0
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	5cd3      	ldrb	r3, [r2, r3]
 80048ca:	fa21 f303 	lsr.w	r3, r1, r3
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd f92e 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023c00 	.word	0x40023c00
 80048ec:	40023800 	.word	0x40023800
 80048f0:	08006b50 	.word	0x08006b50
 80048f4:	2000001c 	.word	0x2000001c
 80048f8:	20000024 	.word	0x20000024

080048fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	2300      	movs	r3, #0
 800490c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004912:	4b63      	ldr	r3, [pc, #396]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b04      	cmp	r3, #4
 800491c:	d007      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x32>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d008      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x38>
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 80b4 	bne.w	8004a90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b5e      	ldr	r3, [pc, #376]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800492a:	60bb      	str	r3, [r7, #8]
       break;
 800492c:	e0b3      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492e:	4b5e      	ldr	r3, [pc, #376]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004930:	60bb      	str	r3, [r7, #8]
      break;
 8004932:	e0b0      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004934:	4b5a      	ldr	r3, [pc, #360]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493e:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d04a      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494a:	4b55      	ldr	r3, [pc, #340]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	f04f 0400 	mov.w	r4, #0
 8004954:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	ea03 0501 	and.w	r5, r3, r1
 8004960:	ea04 0602 	and.w	r6, r4, r2
 8004964:	4629      	mov	r1, r5
 8004966:	4632      	mov	r2, r6
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	0154      	lsls	r4, r2, #5
 8004972:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004976:	014b      	lsls	r3, r1, #5
 8004978:	4619      	mov	r1, r3
 800497a:	4622      	mov	r2, r4
 800497c:	1b49      	subs	r1, r1, r5
 800497e:	eb62 0206 	sbc.w	r2, r2, r6
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	f04f 0400 	mov.w	r4, #0
 800498a:	0194      	lsls	r4, r2, #6
 800498c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004990:	018b      	lsls	r3, r1, #6
 8004992:	1a5b      	subs	r3, r3, r1
 8004994:	eb64 0402 	sbc.w	r4, r4, r2
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	00e2      	lsls	r2, r4, #3
 80049a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049a6:	00d9      	lsls	r1, r3, #3
 80049a8:	460b      	mov	r3, r1
 80049aa:	4614      	mov	r4, r2
 80049ac:	195b      	adds	r3, r3, r5
 80049ae:	eb44 0406 	adc.w	r4, r4, r6
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	0262      	lsls	r2, r4, #9
 80049bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049c0:	0259      	lsls	r1, r3, #9
 80049c2:	460b      	mov	r3, r1
 80049c4:	4614      	mov	r4, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	4621      	mov	r1, r4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	461a      	mov	r2, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	f7fb fc00 	bl	80001d8 <__aeabi_uldivmod>
 80049d8:	4603      	mov	r3, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e049      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e0:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	f04f 0400 	mov.w	r4, #0
 80049ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	ea03 0501 	and.w	r5, r3, r1
 80049f6:	ea04 0602 	and.w	r6, r4, r2
 80049fa:	4629      	mov	r1, r5
 80049fc:	4632      	mov	r2, r6
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	f04f 0400 	mov.w	r4, #0
 8004a06:	0154      	lsls	r4, r2, #5
 8004a08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a0c:	014b      	lsls	r3, r1, #5
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4622      	mov	r2, r4
 8004a12:	1b49      	subs	r1, r1, r5
 8004a14:	eb62 0206 	sbc.w	r2, r2, r6
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	f04f 0400 	mov.w	r4, #0
 8004a20:	0194      	lsls	r4, r2, #6
 8004a22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	1a5b      	subs	r3, r3, r1
 8004a2a:	eb64 0402 	sbc.w	r4, r4, r2
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	00e2      	lsls	r2, r4, #3
 8004a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a3c:	00d9      	lsls	r1, r3, #3
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4614      	mov	r4, r2
 8004a42:	195b      	adds	r3, r3, r5
 8004a44:	eb44 0406 	adc.w	r4, r4, r6
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	02a2      	lsls	r2, r4, #10
 8004a52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a56:	0299      	lsls	r1, r3, #10
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	4621      	mov	r1, r4
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	461a      	mov	r2, r3
 8004a68:	4623      	mov	r3, r4
 8004a6a:	f7fb fbb5 	bl	80001d8 <__aeabi_uldivmod>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	60bb      	str	r3, [r7, #8]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a92:	60bb      	str	r3, [r7, #8]
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	68bb      	ldr	r3, [r7, #8]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	2000001c 	.word	0x2000001c

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ac8:	f7ff fff0 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004acc:	4601      	mov	r1, r0
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4a03      	ldr	r2, [pc, #12]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ada:	5cd3      	ldrb	r3, [r2, r3]
 8004adc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	08006b60 	.word	0x08006b60

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af0:	f7ff ffdc 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004af4:	4601      	mov	r1, r0
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0b5b      	lsrs	r3, r3, #13
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4a03      	ldr	r2, [pc, #12]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b02:	5cd3      	ldrb	r3, [r2, r3]
 8004b04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	08006b60 	.word	0x08006b60

08004b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e01d      	b.n	8004b62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc fc64 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f000 fc0c 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b06      	cmp	r3, #6
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e01d      	b.n	8004c00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f815 	bl	8004c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 fbbd 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fe44 	bl	80058bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <HAL_TIM_PWM_Start+0x60>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b06      	cmp	r3, #6
 8004c5e:	d007      	beq.n	8004c70 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000

08004c80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e083      	b.n	8004d9c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fc fc11 	bl	80014d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc4:	f023 0307 	bic.w	r3, r3, #7
 8004cc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 fb4b 	bl	8005370 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	4313      	orrs	r3, r2
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d20:	f023 030c 	bic.w	r3, r3, #12
 8004d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	011a      	lsls	r2, r3, #4
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	031b      	lsls	r3, r3, #12
 8004d50:	4313      	orrs	r3, r2
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4313      	orrs	r3, r2
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_TIM_Encoder_Start+0x16>
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d008      	beq.n	8004dca <HAL_TIM_Encoder_Start+0x26>
 8004db8:	e00f      	b.n	8004dda <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fd7a 	bl	80058bc <TIM_CCxChannelCmd>
      break;
 8004dc8:	e016      	b.n	8004df8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fd72 	bl	80058bc <TIM_CCxChannelCmd>
      break;
 8004dd8:	e00e      	b.n	8004df8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd6a 	bl	80058bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	2104      	movs	r1, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fd63 	bl	80058bc <TIM_CCxChannelCmd>
      break;
 8004df6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d122      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d11b      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0202 	mvn.w	r2, #2
 8004e3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa6c 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 8004e5a:	e005      	b.n	8004e68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa5e 	bl	800531e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa6f 	bl	8005346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d122      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d11b      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f06f 0204 	mvn.w	r2, #4
 8004e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa42 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 8004eae:	e005      	b.n	8004ebc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa34 	bl	800531e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa45 	bl	8005346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d122      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d11b      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f06f 0208 	mvn.w	r2, #8
 8004ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2204      	movs	r2, #4
 8004eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa18 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 8004f02:	e005      	b.n	8004f10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa0a 	bl	800531e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa1b 	bl	8005346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d122      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d11b      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f06f 0210 	mvn.w	r2, #16
 8004f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f9ee 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 8004f56:	e005      	b.n	8004f64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f9e0 	bl	800531e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9f1 	bl	8005346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d10e      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0201 	mvn.w	r2, #1
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fb ff01 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d107      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fd6d 	bl	8005a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d10e      	bne.n	8004fee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9b6 	bl	800535a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d10e      	bne.n	800501a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b20      	cmp	r3, #32
 8005008:	d107      	bne.n	800501a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f06f 0220 	mvn.w	r2, #32
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fd37 	bl	8005a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800503a:	2302      	movs	r3, #2
 800503c:	e0b4      	b.n	80051a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	f200 809f 	bhi.w	8005194 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005091 	.word	0x08005091
 8005060:	08005195 	.word	0x08005195
 8005064:	08005195 	.word	0x08005195
 8005068:	08005195 	.word	0x08005195
 800506c:	080050d1 	.word	0x080050d1
 8005070:	08005195 	.word	0x08005195
 8005074:	08005195 	.word	0x08005195
 8005078:	08005195 	.word	0x08005195
 800507c:	08005113 	.word	0x08005113
 8005080:	08005195 	.word	0x08005195
 8005084:	08005195 	.word	0x08005195
 8005088:	08005195 	.word	0x08005195
 800508c:	08005153 	.word	0x08005153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f9ea 	bl	8005470 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	619a      	str	r2, [r3, #24]
      break;
 80050ce:	e062      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fa30 	bl	800553c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6999      	ldr	r1, [r3, #24]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	619a      	str	r2, [r3, #24]
      break;
 8005110:	e041      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fa7b 	bl	8005614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0208 	orr.w	r2, r2, #8
 800512c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0204 	bic.w	r2, r2, #4
 800513c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69d9      	ldr	r1, [r3, #28]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	61da      	str	r2, [r3, #28]
      break;
 8005150:	e021      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fac5 	bl	80056e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69d9      	ldr	r1, [r3, #28]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	021a      	lsls	r2, r3, #8
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	61da      	str	r2, [r3, #28]
      break;
 8005192:	e000      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005194:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x18>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0a6      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x166>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d067      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0x120>
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d80b      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x6c>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d073      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x140>
 8005208:	2b10      	cmp	r3, #16
 800520a:	d802      	bhi.n	8005212 <HAL_TIM_ConfigClockSource+0x62>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d06f      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005210:	e078      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005212:	2b20      	cmp	r3, #32
 8005214:	d06c      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x140>
 8005216:	2b30      	cmp	r3, #48	; 0x30
 8005218:	d06a      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800521a:	e073      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800521c:	2b70      	cmp	r3, #112	; 0x70
 800521e:	d00d      	beq.n	800523c <HAL_TIM_ConfigClockSource+0x8c>
 8005220:	2b70      	cmp	r3, #112	; 0x70
 8005222:	d804      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x7e>
 8005224:	2b50      	cmp	r3, #80	; 0x50
 8005226:	d033      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0xe0>
 8005228:	2b60      	cmp	r3, #96	; 0x60
 800522a:	d041      	beq.n	80052b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800522c:	e06a      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d066      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x152>
 8005234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005238:	d017      	beq.n	800526a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800523a:	e063      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f000 fb16 	bl	800587c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800525e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]
      break;
 8005268:	e04c      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6899      	ldr	r1, [r3, #8]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f000 faff 	bl	800587c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528c:	609a      	str	r2, [r3, #8]
      break;
 800528e:	e039      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	461a      	mov	r2, r3
 800529e:	f000 fa73 	bl	8005788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2150      	movs	r1, #80	; 0x50
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 facc 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 80052ae:	e029      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	461a      	mov	r2, r3
 80052be:	f000 fa92 	bl	80057e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2160      	movs	r1, #96	; 0x60
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fabc 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 80052ce:	e019      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	461a      	mov	r2, r3
 80052de:	f000 fa53 	bl	8005788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2140      	movs	r1, #64	; 0x40
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 faac 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 80052ee:	e009      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f000 faa3 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 8005300:	e000      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a34      	ldr	r2, [pc, #208]	; (8005454 <TIM_Base_SetConfig+0xe4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00f      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a31      	ldr	r2, [pc, #196]	; (8005458 <TIM_Base_SetConfig+0xe8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a30      	ldr	r2, [pc, #192]	; (800545c <TIM_Base_SetConfig+0xec>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <TIM_Base_SetConfig+0xf0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d108      	bne.n	80053ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <TIM_Base_SetConfig+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01b      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d017      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a22      	ldr	r2, [pc, #136]	; (8005458 <TIM_Base_SetConfig+0xe8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a21      	ldr	r2, [pc, #132]	; (800545c <TIM_Base_SetConfig+0xec>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00f      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a20      	ldr	r2, [pc, #128]	; (8005460 <TIM_Base_SetConfig+0xf0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <TIM_Base_SetConfig+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <TIM_Base_SetConfig+0xf8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <TIM_Base_SetConfig+0xfc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <TIM_Base_SetConfig+0xe4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	615a      	str	r2, [r3, #20]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800

08005470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 0302 	bic.w	r3, r3, #2
 80054b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <TIM_OC1_SetConfig+0xc8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10c      	bne.n	80054e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0308 	bic.w	r3, r3, #8
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <TIM_OC1_SetConfig+0xc8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d111      	bne.n	8005512 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40010000 	.word	0x40010000

0800553c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0210 	bic.w	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0320 	bic.w	r3, r3, #32
 8005586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <TIM_OC2_SetConfig+0xd4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d10d      	bne.n	80055b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a15      	ldr	r2, [pc, #84]	; (8005610 <TIM_OC2_SetConfig+0xd4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d113      	bne.n	80055e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000

08005614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <TIM_OC3_SetConfig+0xd0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10d      	bne.n	800568e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800568c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <TIM_OC3_SetConfig+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d113      	bne.n	80056be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40010000 	.word	0x40010000

080056e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a10      	ldr	r2, [pc, #64]	; (8005784 <TIM_OC4_SetConfig+0x9c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d109      	bne.n	800575c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	019b      	lsls	r3, r3, #6
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40010000 	.word	0x40010000

08005788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 030a 	bic.w	r3, r3, #10
 80057c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b087      	sub	sp, #28
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0210 	bic.w	r2, r3, #16
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	f043 0307 	orr.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	021a      	lsls	r2, r3, #8
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	431a      	orrs	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	2201      	movs	r2, #1
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	43db      	mvns	r3, r3
 80058de:	401a      	ands	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	431a      	orrs	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e050      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a16      	ldr	r2, [pc, #88]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a13      	ldr	r2, [pc, #76]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40014000 	.word	0x40014000

080059e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e03d      	b.n	8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e03f      	b.n	8005b42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fb fdf8 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2224      	movs	r2, #36	; 0x24
 8005ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fc77 	bl	80063e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b088      	sub	sp, #32
 8005b4e:	af02      	add	r7, sp, #8
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	f040 8083 	bne.w	8005c72 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_UART_Transmit+0x2e>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e07b      	b.n	8005c74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Transmit+0x40>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e074      	b.n	8005c74 <HAL_UART_Transmit+0x12a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2221      	movs	r2, #33	; 0x21
 8005b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ba0:	f7fc f80e 	bl	8001bc0 <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005bba:	e042      	b.n	8005c42 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd2:	d122      	bne.n	8005c1a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fa80 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e042      	b.n	8005c74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c00:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	e017      	b.n	8005c42 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3301      	adds	r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	e013      	b.n	8005c42 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2200      	movs	r2, #0
 8005c22:	2180      	movs	r1, #128	; 0x80
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fa5d 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e01f      	b.n	8005c74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	60ba      	str	r2, [r7, #8]
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1b7      	bne.n	8005bbc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2140      	movs	r1, #64	; 0x40
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fa44 	bl	80060e4 <UART_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e006      	b.n	8005c74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d166      	bne.n	8005d64 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UART_Receive_DMA+0x26>
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e05f      	b.n	8005d66 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_UART_Receive_DMA+0x38>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e058      	b.n	8005d66 <HAL_UART_Receive_DMA+0xea>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2222      	movs	r2, #34	; 0x22
 8005cd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	4a25      	ldr	r2, [pc, #148]	; (8005d70 <HAL_UART_Receive_DMA+0xf4>)
 8005cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	4a24      	ldr	r2, [pc, #144]	; (8005d74 <HAL_UART_Receive_DMA+0xf8>)
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <HAL_UART_Receive_DMA+0xfc>)
 8005cec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	f7fc f923 	bl	8001f58 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695a      	ldr	r2, [r3, #20]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d5e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08005fcd 	.word	0x08005fcd
 8005d74:	08006035 	.word	0x08006035
 8005d78:	08006051 	.word	0x08006051

08005d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_UART_IRQHandler+0x52>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa8c 	bl	80062e4 <UART_Receive_IT>
      return;
 8005dcc:	e0d1      	b.n	8005f72 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80b0 	beq.w	8005f36 <HAL_UART_IRQHandler+0x1ba>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_UART_IRQHandler+0x70>
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a5 	beq.w	8005f36 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_UART_IRQHandler+0x90>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_UART_IRQHandler+0xb0>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	f043 0202 	orr.w	r2, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_UART_IRQHandler+0xd0>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	f043 0204 	orr.w	r2, r3, #4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00f      	beq.n	8005e76 <HAL_UART_IRQHandler+0xfa>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <HAL_UART_IRQHandler+0xee>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d078      	beq.n	8005f70 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_UART_IRQHandler+0x11c>
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa26 	bl	80062e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x144>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d031      	beq.n	8005f24 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f96f 	bl	80061a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d123      	bne.n	8005f1c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d013      	beq.n	8005f14 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <HAL_UART_IRQHandler+0x1fc>)
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fc f885 	bl	8002008 <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d016      	beq.n	8005f32 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f12:	e00e      	b.n	8005f32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f84f 	bl	8005fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1a:	e00a      	b.n	8005f32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f84b 	bl	8005fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f22:	e006      	b.n	8005f32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f847 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f30:	e01e      	b.n	8005f70 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	bf00      	nop
    return;
 8005f34:	e01c      	b.n	8005f70 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_UART_IRQHandler+0x1d6>
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f95c 	bl	8006208 <UART_Transmit_IT>
    return;
 8005f50:	e00f      	b.n	8005f72 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1f6>
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9a4 	bl	80062b4 <UART_EndTransmit_IT>
    return;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f70:	bf00      	nop
  }
}
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	080061e1 	.word	0x080061e1

08005f7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d11e      	bne.n	8006026 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ffc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff ffb2 	bl	8005f90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff ffae 	bl	8005fa4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	bf0c      	ite	eq
 8006070:	2301      	moveq	r3, #1
 8006072:	2300      	movne	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b21      	cmp	r3, #33	; 0x21
 8006082:	d108      	bne.n	8006096 <UART_DMAError+0x46>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006090:	68b8      	ldr	r0, [r7, #8]
 8006092:	f000 f871 	bl	8006178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b22      	cmp	r3, #34	; 0x22
 80060b6:	d108      	bne.n	80060ca <UART_DMAError+0x7a>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060c4:	68b8      	ldr	r0, [r7, #8]
 80060c6:	f000 f86d 	bl	80061a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	f043 0210 	orr.w	r2, r3, #16
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d6:	68b8      	ldr	r0, [r7, #8]
 80060d8:	f7ff ff6e 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	4613      	mov	r3, r2
 80060f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f4:	e02c      	b.n	8006150 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fc:	d028      	beq.n	8006150 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x30>
 8006104:	f7fb fd5c 	bl	8001bc0 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d21d      	bcs.n	8006150 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006122:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e00f      	b.n	8006170 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4013      	ands	r3, r2
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	429a      	cmp	r2, r3
 800616c:	d0c3      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800618e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fedc 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b21      	cmp	r3, #33	; 0x21
 800621a:	d144      	bne.n	80062a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006224:	d11a      	bne.n	800625c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800623a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]
 800624e:	e00e      	b.n	800626e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]
 800625a:	e008      	b.n	800626e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6211      	str	r1, [r2, #32]
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4619      	mov	r1, r3
 800627c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fe51 	bl	8005f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b22      	cmp	r3, #34	; 0x22
 80062f6:	d171      	bne.n	80063dc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d123      	bne.n	800634a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10e      	bne.n	800632e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28
 800632c:	e029      	b.n	8006382 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	b29b      	uxth	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
 8006348:	e01b      	b.n	8006382 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6858      	ldr	r0, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6291      	str	r1, [r2, #40]	; 0x28
 8006362:	b2c2      	uxtb	r2, r0
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e00c      	b.n	8006382 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	1c58      	adds	r0, r3, #1
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	6288      	str	r0, [r1, #40]	; 0x28
 800637a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	4619      	mov	r1, r3
 8006390:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006392:	2b00      	cmp	r3, #0
 8006394:	d120      	bne.n	80063d8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0220 	bic.w	r2, r2, #32
 80063a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fdde 	bl	8005f90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	e002      	b.n	80063de <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800642a:	f023 030c 	bic.w	r3, r3, #12
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	68f9      	ldr	r1, [r7, #12]
 8006434:	430b      	orrs	r3, r1
 8006436:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	f040 818b 	bne.w	8006770 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4ac1      	ldr	r2, [pc, #772]	; (8006764 <UART_SetConfig+0x37c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d005      	beq.n	8006470 <UART_SetConfig+0x88>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4abf      	ldr	r2, [pc, #764]	; (8006768 <UART_SetConfig+0x380>)
 800646a:	4293      	cmp	r3, r2
 800646c:	f040 80bd 	bne.w	80065ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006470:	f7fe fb3c 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8006474:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	461d      	mov	r5, r3
 800647a:	f04f 0600 	mov.w	r6, #0
 800647e:	46a8      	mov	r8, r5
 8006480:	46b1      	mov	r9, r6
 8006482:	eb18 0308 	adds.w	r3, r8, r8
 8006486:	eb49 0409 	adc.w	r4, r9, r9
 800648a:	4698      	mov	r8, r3
 800648c:	46a1      	mov	r9, r4
 800648e:	eb18 0805 	adds.w	r8, r8, r5
 8006492:	eb49 0906 	adc.w	r9, r9, r6
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064aa:	4688      	mov	r8, r1
 80064ac:	4691      	mov	r9, r2
 80064ae:	eb18 0005 	adds.w	r0, r8, r5
 80064b2:	eb49 0106 	adc.w	r1, r9, r6
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	461d      	mov	r5, r3
 80064bc:	f04f 0600 	mov.w	r6, #0
 80064c0:	196b      	adds	r3, r5, r5
 80064c2:	eb46 0406 	adc.w	r4, r6, r6
 80064c6:	461a      	mov	r2, r3
 80064c8:	4623      	mov	r3, r4
 80064ca:	f7f9 fe85 	bl	80001d8 <__aeabi_uldivmod>
 80064ce:	4603      	mov	r3, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	461a      	mov	r2, r3
 80064d4:	4ba5      	ldr	r3, [pc, #660]	; (800676c <UART_SetConfig+0x384>)
 80064d6:	fba3 2302 	umull	r2, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	461d      	mov	r5, r3
 80064e4:	f04f 0600 	mov.w	r6, #0
 80064e8:	46a9      	mov	r9, r5
 80064ea:	46b2      	mov	sl, r6
 80064ec:	eb19 0309 	adds.w	r3, r9, r9
 80064f0:	eb4a 040a 	adc.w	r4, sl, sl
 80064f4:	4699      	mov	r9, r3
 80064f6:	46a2      	mov	sl, r4
 80064f8:	eb19 0905 	adds.w	r9, r9, r5
 80064fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800650c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006514:	4689      	mov	r9, r1
 8006516:	4692      	mov	sl, r2
 8006518:	eb19 0005 	adds.w	r0, r9, r5
 800651c:	eb4a 0106 	adc.w	r1, sl, r6
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	461d      	mov	r5, r3
 8006526:	f04f 0600 	mov.w	r6, #0
 800652a:	196b      	adds	r3, r5, r5
 800652c:	eb46 0406 	adc.w	r4, r6, r6
 8006530:	461a      	mov	r2, r3
 8006532:	4623      	mov	r3, r4
 8006534:	f7f9 fe50 	bl	80001d8 <__aeabi_uldivmod>
 8006538:	4603      	mov	r3, r0
 800653a:	460c      	mov	r4, r1
 800653c:	461a      	mov	r2, r3
 800653e:	4b8b      	ldr	r3, [pc, #556]	; (800676c <UART_SetConfig+0x384>)
 8006540:	fba3 1302 	umull	r1, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	2164      	movs	r1, #100	; 0x64
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	3332      	adds	r3, #50	; 0x32
 8006552:	4a86      	ldr	r2, [pc, #536]	; (800676c <UART_SetConfig+0x384>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006560:	4498      	add	r8, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	461d      	mov	r5, r3
 8006566:	f04f 0600 	mov.w	r6, #0
 800656a:	46a9      	mov	r9, r5
 800656c:	46b2      	mov	sl, r6
 800656e:	eb19 0309 	adds.w	r3, r9, r9
 8006572:	eb4a 040a 	adc.w	r4, sl, sl
 8006576:	4699      	mov	r9, r3
 8006578:	46a2      	mov	sl, r4
 800657a:	eb19 0905 	adds.w	r9, r9, r5
 800657e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006582:	f04f 0100 	mov.w	r1, #0
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800658e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006596:	4689      	mov	r9, r1
 8006598:	4692      	mov	sl, r2
 800659a:	eb19 0005 	adds.w	r0, r9, r5
 800659e:	eb4a 0106 	adc.w	r1, sl, r6
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	461d      	mov	r5, r3
 80065a8:	f04f 0600 	mov.w	r6, #0
 80065ac:	196b      	adds	r3, r5, r5
 80065ae:	eb46 0406 	adc.w	r4, r6, r6
 80065b2:	461a      	mov	r2, r3
 80065b4:	4623      	mov	r3, r4
 80065b6:	f7f9 fe0f 	bl	80001d8 <__aeabi_uldivmod>
 80065ba:	4603      	mov	r3, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	461a      	mov	r2, r3
 80065c0:	4b6a      	ldr	r3, [pc, #424]	; (800676c <UART_SetConfig+0x384>)
 80065c2:	fba3 1302 	umull	r1, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	2164      	movs	r1, #100	; 0x64
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	3332      	adds	r3, #50	; 0x32
 80065d4:	4a65      	ldr	r2, [pc, #404]	; (800676c <UART_SetConfig+0x384>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	f003 0207 	and.w	r2, r3, #7
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4442      	add	r2, r8
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	e26f      	b.n	8006aca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fe fa6b 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 80065ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	461d      	mov	r5, r3
 80065f4:	f04f 0600 	mov.w	r6, #0
 80065f8:	46a8      	mov	r8, r5
 80065fa:	46b1      	mov	r9, r6
 80065fc:	eb18 0308 	adds.w	r3, r8, r8
 8006600:	eb49 0409 	adc.w	r4, r9, r9
 8006604:	4698      	mov	r8, r3
 8006606:	46a1      	mov	r9, r4
 8006608:	eb18 0805 	adds.w	r8, r8, r5
 800660c:	eb49 0906 	adc.w	r9, r9, r6
 8006610:	f04f 0100 	mov.w	r1, #0
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800661c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006620:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006624:	4688      	mov	r8, r1
 8006626:	4691      	mov	r9, r2
 8006628:	eb18 0005 	adds.w	r0, r8, r5
 800662c:	eb49 0106 	adc.w	r1, r9, r6
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	461d      	mov	r5, r3
 8006636:	f04f 0600 	mov.w	r6, #0
 800663a:	196b      	adds	r3, r5, r5
 800663c:	eb46 0406 	adc.w	r4, r6, r6
 8006640:	461a      	mov	r2, r3
 8006642:	4623      	mov	r3, r4
 8006644:	f7f9 fdc8 	bl	80001d8 <__aeabi_uldivmod>
 8006648:	4603      	mov	r3, r0
 800664a:	460c      	mov	r4, r1
 800664c:	461a      	mov	r2, r3
 800664e:	4b47      	ldr	r3, [pc, #284]	; (800676c <UART_SetConfig+0x384>)
 8006650:	fba3 2302 	umull	r2, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	461d      	mov	r5, r3
 800665e:	f04f 0600 	mov.w	r6, #0
 8006662:	46a9      	mov	r9, r5
 8006664:	46b2      	mov	sl, r6
 8006666:	eb19 0309 	adds.w	r3, r9, r9
 800666a:	eb4a 040a 	adc.w	r4, sl, sl
 800666e:	4699      	mov	r9, r3
 8006670:	46a2      	mov	sl, r4
 8006672:	eb19 0905 	adds.w	r9, r9, r5
 8006676:	eb4a 0a06 	adc.w	sl, sl, r6
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006686:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800668a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800668e:	4689      	mov	r9, r1
 8006690:	4692      	mov	sl, r2
 8006692:	eb19 0005 	adds.w	r0, r9, r5
 8006696:	eb4a 0106 	adc.w	r1, sl, r6
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	461d      	mov	r5, r3
 80066a0:	f04f 0600 	mov.w	r6, #0
 80066a4:	196b      	adds	r3, r5, r5
 80066a6:	eb46 0406 	adc.w	r4, r6, r6
 80066aa:	461a      	mov	r2, r3
 80066ac:	4623      	mov	r3, r4
 80066ae:	f7f9 fd93 	bl	80001d8 <__aeabi_uldivmod>
 80066b2:	4603      	mov	r3, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	461a      	mov	r2, r3
 80066b8:	4b2c      	ldr	r3, [pc, #176]	; (800676c <UART_SetConfig+0x384>)
 80066ba:	fba3 1302 	umull	r1, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2164      	movs	r1, #100	; 0x64
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	3332      	adds	r3, #50	; 0x32
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <UART_SetConfig+0x384>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066da:	4498      	add	r8, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	461d      	mov	r5, r3
 80066e0:	f04f 0600 	mov.w	r6, #0
 80066e4:	46a9      	mov	r9, r5
 80066e6:	46b2      	mov	sl, r6
 80066e8:	eb19 0309 	adds.w	r3, r9, r9
 80066ec:	eb4a 040a 	adc.w	r4, sl, sl
 80066f0:	4699      	mov	r9, r3
 80066f2:	46a2      	mov	sl, r4
 80066f4:	eb19 0905 	adds.w	r9, r9, r5
 80066f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800670c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006710:	4689      	mov	r9, r1
 8006712:	4692      	mov	sl, r2
 8006714:	eb19 0005 	adds.w	r0, r9, r5
 8006718:	eb4a 0106 	adc.w	r1, sl, r6
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	461d      	mov	r5, r3
 8006722:	f04f 0600 	mov.w	r6, #0
 8006726:	196b      	adds	r3, r5, r5
 8006728:	eb46 0406 	adc.w	r4, r6, r6
 800672c:	461a      	mov	r2, r3
 800672e:	4623      	mov	r3, r4
 8006730:	f7f9 fd52 	bl	80001d8 <__aeabi_uldivmod>
 8006734:	4603      	mov	r3, r0
 8006736:	460c      	mov	r4, r1
 8006738:	461a      	mov	r2, r3
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <UART_SetConfig+0x384>)
 800673c:	fba3 1302 	umull	r1, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	2164      	movs	r1, #100	; 0x64
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	3332      	adds	r3, #50	; 0x32
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <UART_SetConfig+0x384>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f003 0207 	and.w	r2, r3, #7
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4442      	add	r2, r8
 8006760:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006762:	e1b2      	b.n	8006aca <UART_SetConfig+0x6e2>
 8006764:	40011000 	.word	0x40011000
 8006768:	40011400 	.word	0x40011400
 800676c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4ad7      	ldr	r2, [pc, #860]	; (8006ad4 <UART_SetConfig+0x6ec>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d005      	beq.n	8006786 <UART_SetConfig+0x39e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4ad6      	ldr	r2, [pc, #856]	; (8006ad8 <UART_SetConfig+0x6f0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	f040 80d1 	bne.w	8006928 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006786:	f7fe f9b1 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 800678a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	469a      	mov	sl, r3
 8006790:	f04f 0b00 	mov.w	fp, #0
 8006794:	46d0      	mov	r8, sl
 8006796:	46d9      	mov	r9, fp
 8006798:	eb18 0308 	adds.w	r3, r8, r8
 800679c:	eb49 0409 	adc.w	r4, r9, r9
 80067a0:	4698      	mov	r8, r3
 80067a2:	46a1      	mov	r9, r4
 80067a4:	eb18 080a 	adds.w	r8, r8, sl
 80067a8:	eb49 090b 	adc.w	r9, r9, fp
 80067ac:	f04f 0100 	mov.w	r1, #0
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067c0:	4688      	mov	r8, r1
 80067c2:	4691      	mov	r9, r2
 80067c4:	eb1a 0508 	adds.w	r5, sl, r8
 80067c8:	eb4b 0609 	adc.w	r6, fp, r9
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4619      	mov	r1, r3
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	f04f 0400 	mov.w	r4, #0
 80067de:	0094      	lsls	r4, r2, #2
 80067e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067e4:	008b      	lsls	r3, r1, #2
 80067e6:	461a      	mov	r2, r3
 80067e8:	4623      	mov	r3, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	4631      	mov	r1, r6
 80067ee:	f7f9 fcf3 	bl	80001d8 <__aeabi_uldivmod>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	461a      	mov	r2, r3
 80067f8:	4bb8      	ldr	r3, [pc, #736]	; (8006adc <UART_SetConfig+0x6f4>)
 80067fa:	fba3 2302 	umull	r2, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	469b      	mov	fp, r3
 8006808:	f04f 0c00 	mov.w	ip, #0
 800680c:	46d9      	mov	r9, fp
 800680e:	46e2      	mov	sl, ip
 8006810:	eb19 0309 	adds.w	r3, r9, r9
 8006814:	eb4a 040a 	adc.w	r4, sl, sl
 8006818:	4699      	mov	r9, r3
 800681a:	46a2      	mov	sl, r4
 800681c:	eb19 090b 	adds.w	r9, r9, fp
 8006820:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006838:	4689      	mov	r9, r1
 800683a:	4692      	mov	sl, r2
 800683c:	eb1b 0509 	adds.w	r5, fp, r9
 8006840:	eb4c 060a 	adc.w	r6, ip, sl
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4619      	mov	r1, r3
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	f04f 0400 	mov.w	r4, #0
 8006856:	0094      	lsls	r4, r2, #2
 8006858:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800685c:	008b      	lsls	r3, r1, #2
 800685e:	461a      	mov	r2, r3
 8006860:	4623      	mov	r3, r4
 8006862:	4628      	mov	r0, r5
 8006864:	4631      	mov	r1, r6
 8006866:	f7f9 fcb7 	bl	80001d8 <__aeabi_uldivmod>
 800686a:	4603      	mov	r3, r0
 800686c:	460c      	mov	r4, r1
 800686e:	461a      	mov	r2, r3
 8006870:	4b9a      	ldr	r3, [pc, #616]	; (8006adc <UART_SetConfig+0x6f4>)
 8006872:	fba3 1302 	umull	r1, r3, r3, r2
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	2164      	movs	r1, #100	; 0x64
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	3332      	adds	r3, #50	; 0x32
 8006884:	4a95      	ldr	r2, [pc, #596]	; (8006adc <UART_SetConfig+0x6f4>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006890:	4498      	add	r8, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	469b      	mov	fp, r3
 8006896:	f04f 0c00 	mov.w	ip, #0
 800689a:	46d9      	mov	r9, fp
 800689c:	46e2      	mov	sl, ip
 800689e:	eb19 0309 	adds.w	r3, r9, r9
 80068a2:	eb4a 040a 	adc.w	r4, sl, sl
 80068a6:	4699      	mov	r9, r3
 80068a8:	46a2      	mov	sl, r4
 80068aa:	eb19 090b 	adds.w	r9, r9, fp
 80068ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068c6:	4689      	mov	r9, r1
 80068c8:	4692      	mov	sl, r2
 80068ca:	eb1b 0509 	adds.w	r5, fp, r9
 80068ce:	eb4c 060a 	adc.w	r6, ip, sl
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	4619      	mov	r1, r3
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	0094      	lsls	r4, r2, #2
 80068e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068ea:	008b      	lsls	r3, r1, #2
 80068ec:	461a      	mov	r2, r3
 80068ee:	4623      	mov	r3, r4
 80068f0:	4628      	mov	r0, r5
 80068f2:	4631      	mov	r1, r6
 80068f4:	f7f9 fc70 	bl	80001d8 <__aeabi_uldivmod>
 80068f8:	4603      	mov	r3, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b77      	ldr	r3, [pc, #476]	; (8006adc <UART_SetConfig+0x6f4>)
 8006900:	fba3 1302 	umull	r1, r3, r3, r2
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	2164      	movs	r1, #100	; 0x64
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	3332      	adds	r3, #50	; 0x32
 8006912:	4a72      	ldr	r2, [pc, #456]	; (8006adc <UART_SetConfig+0x6f4>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4442      	add	r2, r8
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	e0d0      	b.n	8006aca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006928:	f7fe f8cc 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 800692c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	469a      	mov	sl, r3
 8006932:	f04f 0b00 	mov.w	fp, #0
 8006936:	46d0      	mov	r8, sl
 8006938:	46d9      	mov	r9, fp
 800693a:	eb18 0308 	adds.w	r3, r8, r8
 800693e:	eb49 0409 	adc.w	r4, r9, r9
 8006942:	4698      	mov	r8, r3
 8006944:	46a1      	mov	r9, r4
 8006946:	eb18 080a 	adds.w	r8, r8, sl
 800694a:	eb49 090b 	adc.w	r9, r9, fp
 800694e:	f04f 0100 	mov.w	r1, #0
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800695a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800695e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006962:	4688      	mov	r8, r1
 8006964:	4691      	mov	r9, r2
 8006966:	eb1a 0508 	adds.w	r5, sl, r8
 800696a:	eb4b 0609 	adc.w	r6, fp, r9
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4619      	mov	r1, r3
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	f04f 0400 	mov.w	r4, #0
 8006980:	0094      	lsls	r4, r2, #2
 8006982:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006986:	008b      	lsls	r3, r1, #2
 8006988:	461a      	mov	r2, r3
 800698a:	4623      	mov	r3, r4
 800698c:	4628      	mov	r0, r5
 800698e:	4631      	mov	r1, r6
 8006990:	f7f9 fc22 	bl	80001d8 <__aeabi_uldivmod>
 8006994:	4603      	mov	r3, r0
 8006996:	460c      	mov	r4, r1
 8006998:	461a      	mov	r2, r3
 800699a:	4b50      	ldr	r3, [pc, #320]	; (8006adc <UART_SetConfig+0x6f4>)
 800699c:	fba3 2302 	umull	r2, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	469b      	mov	fp, r3
 80069aa:	f04f 0c00 	mov.w	ip, #0
 80069ae:	46d9      	mov	r9, fp
 80069b0:	46e2      	mov	sl, ip
 80069b2:	eb19 0309 	adds.w	r3, r9, r9
 80069b6:	eb4a 040a 	adc.w	r4, sl, sl
 80069ba:	4699      	mov	r9, r3
 80069bc:	46a2      	mov	sl, r4
 80069be:	eb19 090b 	adds.w	r9, r9, fp
 80069c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069c6:	f04f 0100 	mov.w	r1, #0
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069da:	4689      	mov	r9, r1
 80069dc:	4692      	mov	sl, r2
 80069de:	eb1b 0509 	adds.w	r5, fp, r9
 80069e2:	eb4c 060a 	adc.w	r6, ip, sl
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	f04f 0400 	mov.w	r4, #0
 80069f8:	0094      	lsls	r4, r2, #2
 80069fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069fe:	008b      	lsls	r3, r1, #2
 8006a00:	461a      	mov	r2, r3
 8006a02:	4623      	mov	r3, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	4631      	mov	r1, r6
 8006a08:	f7f9 fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b32      	ldr	r3, [pc, #200]	; (8006adc <UART_SetConfig+0x6f4>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	; 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	; 0x32
 8006a26:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <UART_SetConfig+0x6f4>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a32:	4498      	add	r8, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	469b      	mov	fp, r3
 8006a38:	f04f 0c00 	mov.w	ip, #0
 8006a3c:	46d9      	mov	r9, fp
 8006a3e:	46e2      	mov	sl, ip
 8006a40:	eb19 0309 	adds.w	r3, r9, r9
 8006a44:	eb4a 040a 	adc.w	r4, sl, sl
 8006a48:	4699      	mov	r9, r3
 8006a4a:	46a2      	mov	sl, r4
 8006a4c:	eb19 090b 	adds.w	r9, r9, fp
 8006a50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a54:	f04f 0100 	mov.w	r1, #0
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a68:	4689      	mov	r9, r1
 8006a6a:	4692      	mov	sl, r2
 8006a6c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a70:	eb4c 060a 	adc.w	r6, ip, sl
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	f04f 0400 	mov.w	r4, #0
 8006a86:	0094      	lsls	r4, r2, #2
 8006a88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a8c:	008b      	lsls	r3, r1, #2
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4623      	mov	r3, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	4631      	mov	r1, r6
 8006a96:	f7f9 fb9f 	bl	80001d8 <__aeabi_uldivmod>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <UART_SetConfig+0x6f4>)
 8006aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	2164      	movs	r1, #100	; 0x64
 8006aaa:	fb01 f303 	mul.w	r3, r1, r3
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	3332      	adds	r3, #50	; 0x32
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <UART_SetConfig+0x6f4>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	f003 020f 	and.w	r2, r3, #15
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4442      	add	r2, r8
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	e7ff      	b.n	8006aca <UART_SetConfig+0x6e2>
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	51eb851f 	.word	0x51eb851f

08006ae0 <__libc_init_array>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	4e0d      	ldr	r6, [pc, #52]	; (8006b18 <__libc_init_array+0x38>)
 8006ae4:	4c0d      	ldr	r4, [pc, #52]	; (8006b1c <__libc_init_array+0x3c>)
 8006ae6:	1ba4      	subs	r4, r4, r6
 8006ae8:	10a4      	asrs	r4, r4, #2
 8006aea:	2500      	movs	r5, #0
 8006aec:	42a5      	cmp	r5, r4
 8006aee:	d109      	bne.n	8006b04 <__libc_init_array+0x24>
 8006af0:	4e0b      	ldr	r6, [pc, #44]	; (8006b20 <__libc_init_array+0x40>)
 8006af2:	4c0c      	ldr	r4, [pc, #48]	; (8006b24 <__libc_init_array+0x44>)
 8006af4:	f000 f820 	bl	8006b38 <_init>
 8006af8:	1ba4      	subs	r4, r4, r6
 8006afa:	10a4      	asrs	r4, r4, #2
 8006afc:	2500      	movs	r5, #0
 8006afe:	42a5      	cmp	r5, r4
 8006b00:	d105      	bne.n	8006b0e <__libc_init_array+0x2e>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b08:	4798      	blx	r3
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	e7ee      	b.n	8006aec <__libc_init_array+0xc>
 8006b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b12:	4798      	blx	r3
 8006b14:	3501      	adds	r5, #1
 8006b16:	e7f2      	b.n	8006afe <__libc_init_array+0x1e>
 8006b18:	08006b78 	.word	0x08006b78
 8006b1c:	08006b78 	.word	0x08006b78
 8006b20:	08006b78 	.word	0x08006b78
 8006b24:	08006b7c 	.word	0x08006b7c

08006b28 <memset>:
 8006b28:	4402      	add	r2, r0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d100      	bne.n	8006b32 <memset+0xa>
 8006b30:	4770      	bx	lr
 8006b32:	f803 1b01 	strb.w	r1, [r3], #1
 8006b36:	e7f9      	b.n	8006b2c <memset+0x4>

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
